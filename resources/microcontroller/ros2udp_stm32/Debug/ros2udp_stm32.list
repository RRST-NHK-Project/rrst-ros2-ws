
ros2udp_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015330  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d8c  08015530  08015530  00016530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080182bc  080182bc  0001a1cc  2**0
                  CONTENTS
  4 .ARM          00000008  080182bc  080182bc  000192bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080182c4  080182c4  0001a1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080182c4  080182c4  000192c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080182c8  080182c8  000192c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  080182cc  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  08018358  0001a08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  080183f8  0001a12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000d488  200001cc  08018498  0001a1cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000d654  08018498  0001a654  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0001a1cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00034f7f  00000000  00000000  0001a1fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007e83  00000000  00000000  0004f179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002710  00000000  00000000  00057000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001ee3  00000000  00000000  00059710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000116b9  00000000  00000000  0005b5f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003c57b  00000000  00000000  0006ccac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00123cae  00000000  00000000  000a9227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001cced5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000aba0  00000000  00000000  001ccf18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000061  00000000  00000000  001d7ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001cc 	.word	0x200001cc
 800021c:	00000000 	.word	0x00000000
 8000220:	08015518 	.word	0x08015518

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d0 	.word	0x200001d0
 800023c:	08015518 	.word	0x08015518

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 fe4f 	bl	8001276 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f828 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 f8f6 	bl	80007cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e0:	f000 f896 	bl	8000710 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e4:	f000 f8c4 	bl	8000770 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005e8:	f005 ff26 	bl	8006438 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ec:	4a09      	ldr	r2, [pc, #36]	@ (8000614 <main+0x44>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	4809      	ldr	r0, [pc, #36]	@ (8000618 <main+0x48>)
 80005f2:	f005 ffb3 	bl	800655c <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a08      	ldr	r2, [pc, #32]	@ (800061c <main+0x4c>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of udpReceiveTask */
  udpReceiveTaskHandle = osThreadNew(StartTask02, NULL, &udpReceiveTask_attributes);
 80005fc:	4a08      	ldr	r2, [pc, #32]	@ (8000620 <main+0x50>)
 80005fe:	2100      	movs	r1, #0
 8000600:	4808      	ldr	r0, [pc, #32]	@ (8000624 <main+0x54>)
 8000602:	f005 ffab 	bl	800655c <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a07      	ldr	r2, [pc, #28]	@ (8000628 <main+0x58>)
 800060a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800060c:	f005 ff48 	bl	80064a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <main+0x40>
 8000614:	08018050 	.word	0x08018050
 8000618:	08000ab5 	.word	0x08000ab5
 800061c:	20000750 	.word	0x20000750
 8000620:	08018074 	.word	0x08018074
 8000624:	08000ac9 	.word	0x08000ac9
 8000628:	20000754 	.word	0x20000754

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	@ 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	2234      	movs	r2, #52	@ 0x34
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f014 f906 	bl	801484c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000650:	f002 fcba 	bl	8002fc8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	4b2c      	ldr	r3, [pc, #176]	@ (8000708 <SystemClock_Config+0xdc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	4a2b      	ldr	r2, [pc, #172]	@ (8000708 <SystemClock_Config+0xdc>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000660:	4b29      	ldr	r3, [pc, #164]	@ (8000708 <SystemClock_Config+0xdc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	4b27      	ldr	r3, [pc, #156]	@ (800070c <SystemClock_Config+0xe0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a26      	ldr	r2, [pc, #152]	@ (800070c <SystemClock_Config+0xe0>)
 8000672:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b24      	ldr	r3, [pc, #144]	@ (800070c <SystemClock_Config+0xe0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000684:	2301      	movs	r3, #1
 8000686:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000688:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800068c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000696:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000698:	2319      	movs	r3, #25
 800069a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 800069c:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80006a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006a6:	2309      	movs	r3, #9
 80006a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 fce8 	bl	8003088 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006be:	f000 fa1d 	bl	8000afc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006c2:	f002 fc91 	bl	8002fe8 <HAL_PWREx_EnableOverDrive>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006cc:	f000 fa16 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	2302      	movs	r3, #2
 80006d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006dc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	2107      	movs	r1, #7
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 ff78 	bl	80035e4 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006fa:	f000 f9ff 	bl	8000afc <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	@ 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000714:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 8000716:	4a15      	ldr	r2, [pc, #84]	@ (800076c <MX_USART3_UART_Init+0x5c>)
 8000718:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800071a:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 8000754:	f004 f854 	bl	8004800 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800075e:	f000 f9cd 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200001e8 	.word	0x200001e8
 800076c:	40004800 	.word	0x40004800

08000770 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000774:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000776:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800077a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800077c:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077e:	2206      	movs	r2, #6
 8000780:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000784:	2202      	movs	r2, #2
 8000786:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000788:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800078e:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000790:	2202      	movs	r2, #2
 8000792:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000794:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000796:	2201      	movs	r2, #1
 8000798:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007a0:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b4:	f002 facd 	bl	8002d52 <HAL_PCD_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007be:	f000 f99d 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000270 	.word	0x20000270

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	@ 0x30
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4bad      	ldr	r3, [pc, #692]	@ (8000a98 <MX_GPIO_Init+0x2cc>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4aac      	ldr	r2, [pc, #688]	@ (8000a98 <MX_GPIO_Init+0x2cc>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4baa      	ldr	r3, [pc, #680]	@ (8000a98 <MX_GPIO_Init+0x2cc>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	61bb      	str	r3, [r7, #24]
 80007f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007fa:	4ba7      	ldr	r3, [pc, #668]	@ (8000a98 <MX_GPIO_Init+0x2cc>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4aa6      	ldr	r2, [pc, #664]	@ (8000a98 <MX_GPIO_Init+0x2cc>)
 8000800:	f043 0320 	orr.w	r3, r3, #32
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4ba4      	ldr	r3, [pc, #656]	@ (8000a98 <MX_GPIO_Init+0x2cc>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0320 	and.w	r3, r3, #32
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000812:	4ba1      	ldr	r3, [pc, #644]	@ (8000a98 <MX_GPIO_Init+0x2cc>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4aa0      	ldr	r2, [pc, #640]	@ (8000a98 <MX_GPIO_Init+0x2cc>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b9e      	ldr	r3, [pc, #632]	@ (8000a98 <MX_GPIO_Init+0x2cc>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b9b      	ldr	r3, [pc, #620]	@ (8000a98 <MX_GPIO_Init+0x2cc>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a9a      	ldr	r2, [pc, #616]	@ (8000a98 <MX_GPIO_Init+0x2cc>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b98      	ldr	r3, [pc, #608]	@ (8000a98 <MX_GPIO_Init+0x2cc>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	4b95      	ldr	r3, [pc, #596]	@ (8000a98 <MX_GPIO_Init+0x2cc>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a94      	ldr	r2, [pc, #592]	@ (8000a98 <MX_GPIO_Init+0x2cc>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b92      	ldr	r3, [pc, #584]	@ (8000a98 <MX_GPIO_Init+0x2cc>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085a:	4b8f      	ldr	r3, [pc, #572]	@ (8000a98 <MX_GPIO_Init+0x2cc>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a8e      	ldr	r2, [pc, #568]	@ (8000a98 <MX_GPIO_Init+0x2cc>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b8c      	ldr	r3, [pc, #560]	@ (8000a98 <MX_GPIO_Init+0x2cc>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0308 	and.w	r3, r3, #8
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000872:	4b89      	ldr	r3, [pc, #548]	@ (8000a98 <MX_GPIO_Init+0x2cc>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a88      	ldr	r2, [pc, #544]	@ (8000a98 <MX_GPIO_Init+0x2cc>)
 8000878:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b86      	ldr	r3, [pc, #536]	@ (8000a98 <MX_GPIO_Init+0x2cc>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 800088a:	2200      	movs	r2, #0
 800088c:	f24f 0103 	movw	r1, #61443	@ 0xf003
 8000890:	4882      	ldr	r0, [pc, #520]	@ (8000a9c <MX_GPIO_Init+0x2d0>)
 8000892:	f002 fa45 	bl	8002d20 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f244 0181 	movw	r1, #16513	@ 0x4081
 800089c:	4880      	ldr	r0, [pc, #512]	@ (8000aa0 <MX_GPIO_Init+0x2d4>)
 800089e:	f002 fa3f 	bl	8002d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2144      	movs	r1, #68	@ 0x44
 80008a6:	487f      	ldr	r0, [pc, #508]	@ (8000aa4 <MX_GPIO_Init+0x2d8>)
 80008a8:	f002 fa3a 	bl	8002d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 80008b2:	487d      	ldr	r0, [pc, #500]	@ (8000aa8 <MX_GPIO_Init+0x2dc>)
 80008b4:	f002 fa34 	bl	8002d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	21e4      	movs	r1, #228	@ 0xe4
 80008bc:	487b      	ldr	r0, [pc, #492]	@ (8000aac <MX_GPIO_Init+0x2e0>)
 80008be:	f002 fa2f 	bl	8002d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	4873      	ldr	r0, [pc, #460]	@ (8000aa8 <MX_GPIO_Init+0x2dc>)
 80008da:	f002 f875 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF12 PF13
                           PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 80008de:	f24f 0303 	movw	r3, #61443	@ 0xf003
 80008e2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4869      	ldr	r0, [pc, #420]	@ (8000a9c <MX_GPIO_Init+0x2d0>)
 80008f8:	f002 f866 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008fc:	2301      	movs	r3, #1
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800090c:	2301      	movs	r3, #1
 800090e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4866      	ldr	r0, [pc, #408]	@ (8000ab0 <MX_GPIO_Init+0x2e4>)
 8000918:	f002 f856 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800091c:	2308      	movs	r3, #8
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800092c:	2303      	movs	r3, #3
 800092e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	485e      	ldr	r0, [pc, #376]	@ (8000ab0 <MX_GPIO_Init+0x2e4>)
 8000938:	f002 f846 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800093c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4852      	ldr	r0, [pc, #328]	@ (8000aa0 <MX_GPIO_Init+0x2d4>)
 8000956:	f002 f837 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800095a:	2302      	movs	r3, #2
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800096a:	2302      	movs	r3, #2
 800096c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	484a      	ldr	r0, [pc, #296]	@ (8000aa0 <MX_GPIO_Init+0x2d4>)
 8000976:	f002 f827 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800097a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800098c:	2302      	movs	r3, #2
 800098e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4845      	ldr	r0, [pc, #276]	@ (8000aac <MX_GPIO_Init+0x2e0>)
 8000998:	f002 f816 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|USB_PowerSwitchOn_Pin;
 800099c:	2344      	movs	r3, #68	@ 0x44
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	483c      	ldr	r0, [pc, #240]	@ (8000aa4 <MX_GPIO_Init+0x2d8>)
 80009b4:	f002 f808 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009b8:	2380      	movs	r3, #128	@ 0x80
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4836      	ldr	r0, [pc, #216]	@ (8000aa4 <MX_GPIO_Init+0x2d8>)
 80009cc:	f001 fffc 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009d0:	23c0      	movs	r3, #192	@ 0xc0
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009e0:	2302      	movs	r3, #2
 80009e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	482f      	ldr	r0, [pc, #188]	@ (8000aa8 <MX_GPIO_Init+0x2dc>)
 80009ec:	f001 ffec 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000a02:	2303      	movs	r3, #3
 8000a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4826      	ldr	r0, [pc, #152]	@ (8000aa8 <MX_GPIO_Init+0x2dc>)
 8000a0e:	f001 ffdb 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000a12:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	481f      	ldr	r0, [pc, #124]	@ (8000aa8 <MX_GPIO_Init+0x2dc>)
 8000a2c:	f001 ffcc 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD2 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a30:	23e4      	movs	r3, #228	@ 0xe4
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	4819      	ldr	r0, [pc, #100]	@ (8000aac <MX_GPIO_Init+0x2e0>)
 8000a48:	f001 ffbe 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a4c:	2340      	movs	r3, #64	@ 0x40
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	480e      	ldr	r0, [pc, #56]	@ (8000aa0 <MX_GPIO_Init+0x2d4>)
 8000a68:	f001 ffae 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <MX_GPIO_Init+0x2d4>)
 8000a8a:	f001 ff9d 	bl	80029c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a8e:	bf00      	nop
 8000a90:	3730      	adds	r7, #48	@ 0x30
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40021400 	.word	0x40021400
 8000aa0:	40020400 	.word	0x40020400
 8000aa4:	40021800 	.word	0x40021800
 8000aa8:	40020800 	.word	0x40020800
 8000aac:	40020c00 	.word	0x40020c00
 8000ab0:	40020000 	.word	0x40020000

08000ab4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000abc:	f004 fe64 	bl	8005788 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f005 fdf1 	bl	80066a8 <osDelay>
 8000ac6:	e7fb      	b.n	8000ac0 <StartDefaultTask+0xc>

08000ac8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f005 fde9 	bl	80066a8 <osDelay>
 8000ad6:	e7fb      	b.n	8000ad0 <StartTask02+0x8>

08000ad8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a04      	ldr	r2, [pc, #16]	@ (8000af8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d101      	bne.n	8000aee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aea:	f000 fbd1 	bl	8001290 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40002000 	.word	0x40002000

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <Error_Handler+0x8>

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	4a10      	ldr	r2, [pc, #64]	@ (8000b54 <HAL_MspInit+0x4c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <HAL_MspInit+0x4c>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b54 <HAL_MspInit+0x4c>)
 8000b2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b32:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <HAL_MspInit+0x4c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	210f      	movs	r1, #15
 8000b42:	f06f 0001 	mvn.w	r0, #1
 8000b46:	f000 fc9f 	bl	8001488 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b0ae      	sub	sp, #184	@ 0xb8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2290      	movs	r2, #144	@ 0x90
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f013 fe67 	bl	801484c <memset>
  if(huart->Instance==USART3)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a22      	ldr	r2, [pc, #136]	@ (8000c0c <HAL_UART_MspInit+0xb4>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d13c      	bne.n	8000c02 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b8c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4618      	mov	r0, r3
 8000b98:	f002 ff3c 	bl	8003a14 <HAL_RCCEx_PeriphCLKConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ba2:	f7ff ffab 	bl	8000afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c10 <HAL_UART_MspInit+0xb8>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000baa:	4a19      	ldr	r2, [pc, #100]	@ (8000c10 <HAL_UART_MspInit+0xb8>)
 8000bac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb2:	4b17      	ldr	r3, [pc, #92]	@ (8000c10 <HAL_UART_MspInit+0xb8>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bbe:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <HAL_UART_MspInit+0xb8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	4a13      	ldr	r2, [pc, #76]	@ (8000c10 <HAL_UART_MspInit+0xb8>)
 8000bc4:	f043 0308 	orr.w	r3, r3, #8
 8000bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bca:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <HAL_UART_MspInit+0xb8>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	f003 0308 	and.w	r3, r3, #8
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bd6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bf0:	2307      	movs	r3, #7
 8000bf2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	@ (8000c14 <HAL_UART_MspInit+0xbc>)
 8000bfe:	f001 fee3 	bl	80029c8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000c02:	bf00      	nop
 8000c04:	37b8      	adds	r7, #184	@ 0xb8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40004800 	.word	0x40004800
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020c00 	.word	0x40020c00

08000c18 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b0ae      	sub	sp, #184	@ 0xb8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2290      	movs	r2, #144	@ 0x90
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f013 fe07 	bl	801484c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c46:	d159      	bne.n	8000cfc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000c48:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000c4c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f002 fedb 	bl	8003a14 <HAL_RCCEx_PeriphCLKConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000c64:	f7ff ff4a 	bl	8000afc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c68:	4b26      	ldr	r3, [pc, #152]	@ (8000d04 <HAL_PCD_MspInit+0xec>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6c:	4a25      	ldr	r2, [pc, #148]	@ (8000d04 <HAL_PCD_MspInit+0xec>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c74:	4b23      	ldr	r3, [pc, #140]	@ (8000d04 <HAL_PCD_MspInit+0xec>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c80:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000c84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c94:	2303      	movs	r3, #3
 8000c96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c9a:	230a      	movs	r3, #10
 8000c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4818      	ldr	r0, [pc, #96]	@ (8000d08 <HAL_PCD_MspInit+0xf0>)
 8000ca8:	f001 fe8e 	bl	80029c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4810      	ldr	r0, [pc, #64]	@ (8000d08 <HAL_PCD_MspInit+0xf0>)
 8000cc8:	f001 fe7e 	bl	80029c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8000d04 <HAL_PCD_MspInit+0xec>)
 8000cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cd0:	4a0c      	ldr	r2, [pc, #48]	@ (8000d04 <HAL_PCD_MspInit+0xec>)
 8000cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cd6:	6353      	str	r3, [r2, #52]	@ 0x34
 8000cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000d04 <HAL_PCD_MspInit+0xec>)
 8000cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	4b07      	ldr	r3, [pc, #28]	@ (8000d04 <HAL_PCD_MspInit+0xec>)
 8000ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce8:	4a06      	ldr	r2, [pc, #24]	@ (8000d04 <HAL_PCD_MspInit+0xec>)
 8000cea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cee:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cf0:	4b04      	ldr	r3, [pc, #16]	@ (8000d04 <HAL_PCD_MspInit+0xec>)
 8000cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000cfc:	bf00      	nop
 8000cfe:	37b8      	adds	r7, #184	@ 0xb8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020000 	.word	0x40020000

08000d0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08e      	sub	sp, #56	@ 0x38
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000d1c:	4b33      	ldr	r3, [pc, #204]	@ (8000dec <HAL_InitTick+0xe0>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d20:	4a32      	ldr	r2, [pc, #200]	@ (8000dec <HAL_InitTick+0xe0>)
 8000d22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d28:	4b30      	ldr	r3, [pc, #192]	@ (8000dec <HAL_InitTick+0xe0>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d34:	f107 0210 	add.w	r2, r7, #16
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f002 fe36 	bl	80039b0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d44:	6a3b      	ldr	r3, [r7, #32]
 8000d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d103      	bne.n	8000d56 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d4e:	f002 fe07 	bl	8003960 <HAL_RCC_GetPCLK1Freq>
 8000d52:	6378      	str	r0, [r7, #52]	@ 0x34
 8000d54:	e004      	b.n	8000d60 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d56:	f002 fe03 	bl	8003960 <HAL_RCC_GetPCLK1Freq>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d62:	4a23      	ldr	r2, [pc, #140]	@ (8000df0 <HAL_InitTick+0xe4>)
 8000d64:	fba2 2303 	umull	r2, r3, r2, r3
 8000d68:	0c9b      	lsrs	r3, r3, #18
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000d6e:	4b21      	ldr	r3, [pc, #132]	@ (8000df4 <HAL_InitTick+0xe8>)
 8000d70:	4a21      	ldr	r2, [pc, #132]	@ (8000df8 <HAL_InitTick+0xec>)
 8000d72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000d74:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <HAL_InitTick+0xe8>)
 8000d76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d7a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000df4 <HAL_InitTick+0xe8>)
 8000d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d80:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000d82:	4b1c      	ldr	r3, [pc, #112]	@ (8000df4 <HAL_InitTick+0xe8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d88:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <HAL_InitTick+0xe8>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8e:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <HAL_InitTick+0xe8>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000d94:	4817      	ldr	r0, [pc, #92]	@ (8000df4 <HAL_InitTick+0xe8>)
 8000d96:	f003 fa65 	bl	8004264 <HAL_TIM_Base_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000da0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d11b      	bne.n	8000de0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000da8:	4812      	ldr	r0, [pc, #72]	@ (8000df4 <HAL_InitTick+0xe8>)
 8000daa:	f003 fabd 	bl	8004328 <HAL_TIM_Base_Start_IT>
 8000dae:	4603      	mov	r3, r0
 8000db0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000db4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d111      	bne.n	8000de0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000dbc:	202d      	movs	r0, #45	@ 0x2d
 8000dbe:	f000 fb7f 	bl	80014c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d808      	bhi.n	8000dda <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	202d      	movs	r0, #45	@ 0x2d
 8000dce:	f000 fb5b 	bl	8001488 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dfc <HAL_InitTick+0xf0>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	e002      	b.n	8000de0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000de0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3738      	adds	r7, #56	@ 0x38
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800
 8000df0:	431bde83 	.word	0x431bde83
 8000df4:	20000758 	.word	0x20000758
 8000df8:	40002000 	.word	0x40002000
 8000dfc:	20000004 	.word	0x20000004

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <NMI_Handler+0x4>

08000e08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <MemManage_Handler+0x4>

08000e18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000e3c:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000e3e:	f003 faeb 	bl	8004418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000758 	.word	0x20000758

08000e4c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000e50:	4802      	ldr	r0, [pc, #8]	@ (8000e5c <ETH_IRQHandler+0x10>)
 8000e52:	f000 fed1 	bl	8001bf8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200051b0 	.word	0x200051b0

08000e60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return 1;
 8000e64:	2301      	movs	r3, #1
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_kill>:

int _kill(int pid, int sig)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e7a:	4b05      	ldr	r3, [pc, #20]	@ (8000e90 <_kill+0x20>)
 8000e7c:	2216      	movs	r2, #22
 8000e7e:	601a      	str	r2, [r3, #0]
  return -1;
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	2000d644 	.word	0x2000d644

08000e94 <_exit>:

void _exit (int status)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff ffe5 	bl	8000e70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ea6:	bf00      	nop
 8000ea8:	e7fd      	b.n	8000ea6 <_exit+0x12>

08000eaa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b086      	sub	sp, #24
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	60f8      	str	r0, [r7, #12]
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	e00a      	b.n	8000ed2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ebc:	f3af 8000 	nop.w
 8000ec0:	4601      	mov	r1, r0
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	1c5a      	adds	r2, r3, #1
 8000ec6:	60ba      	str	r2, [r7, #8]
 8000ec8:	b2ca      	uxtb	r2, r1
 8000eca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	697a      	ldr	r2, [r7, #20]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	dbf0      	blt.n	8000ebc <_read+0x12>
  }

  return len;
 8000eda:	687b      	ldr	r3, [r7, #4]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	e009      	b.n	8000f0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	1c5a      	adds	r2, r3, #1
 8000efa:	60ba      	str	r2, [r7, #8]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	3301      	adds	r3, #1
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	dbf1      	blt.n	8000ef6 <_write+0x12>
  }
  return len;
 8000f12:	687b      	ldr	r3, [r7, #4]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <_close>:

int _close(int file)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f44:	605a      	str	r2, [r3, #4]
  return 0;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <_isatty>:

int _isatty(int file)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f5c:	2301      	movs	r3, #1
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b085      	sub	sp, #20
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	60f8      	str	r0, [r7, #12]
 8000f72:	60b9      	str	r1, [r7, #8]
 8000f74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b087      	sub	sp, #28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f8c:	4a14      	ldr	r2, [pc, #80]	@ (8000fe0 <_sbrk+0x5c>)
 8000f8e:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <_sbrk+0x60>)
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f98:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <_sbrk+0x64>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	@ (8000fec <_sbrk+0x68>)
 8000fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa6:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d205      	bcs.n	8000fc0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <_sbrk+0x6c>)
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbe:	e009      	b.n	8000fd4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc0:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <_sbrk+0x64>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fc6:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <_sbrk+0x64>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	4a06      	ldr	r2, [pc, #24]	@ (8000fe8 <_sbrk+0x64>)
 8000fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	371c      	adds	r7, #28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	20080000 	.word	0x20080000
 8000fe4:	00000400 	.word	0x00000400
 8000fe8:	200007a4 	.word	0x200007a4
 8000fec:	2000d658 	.word	0x2000d658
 8000ff0:	2000d644 	.word	0x2000d644

08000ff4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <SystemInit+0x20>)
 8000ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ffe:	4a05      	ldr	r2, [pc, #20]	@ (8001014 <SystemInit+0x20>)
 8001000:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001004:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001018:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001050 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800101c:	f7ff ffea 	bl	8000ff4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001020:	480c      	ldr	r0, [pc, #48]	@ (8001054 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001022:	490d      	ldr	r1, [pc, #52]	@ (8001058 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001024:	4a0d      	ldr	r2, [pc, #52]	@ (800105c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001038:	4c0a      	ldr	r4, [pc, #40]	@ (8001064 <LoopFillZerobss+0x22>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001046:	f013 fca5 	bl	8014994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104a:	f7ff fac1 	bl	80005d0 <main>
  bx  lr    
 800104e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001050:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001058:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800105c:	080182cc 	.word	0x080182cc
  ldr r2, =_sbss
 8001060:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001064:	2000d654 	.word	0x2000d654

08001068 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001068:	e7fe      	b.n	8001068 <ADC_IRQHandler>

0800106a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00b      	beq.n	8001092 <LAN8742_RegisterBusIO+0x28>
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d007      	beq.n	8001092 <LAN8742_RegisterBusIO+0x28>
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <LAN8742_RegisterBusIO+0x28>
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d102      	bne.n	8001098 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	e014      	b.n	80010c2 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	68da      	ldr	r2, [r3, #12]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	691a      	ldr	r2, [r3, #16]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d139      	bne.n	800115e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d002      	beq.n	80010f8 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2220      	movs	r2, #32
 80010fc:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	e01c      	b.n	800113e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	f107 020c 	add.w	r2, r7, #12
 800110c:	2112      	movs	r1, #18
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	4798      	blx	r3
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	da03      	bge.n	8001120 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001118:	f06f 0304 	mvn.w	r3, #4
 800111c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800111e:	e00b      	b.n	8001138 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f003 031f 	and.w	r3, r3, #31
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	429a      	cmp	r2, r3
 800112a:	d105      	bne.n	8001138 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
         break;
 8001136:	e005      	b.n	8001144 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	3301      	adds	r3, #1
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	2b1f      	cmp	r3, #31
 8001142:	d9df      	bls.n	8001104 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b1f      	cmp	r3, #31
 800114a:	d902      	bls.n	8001152 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800114c:	f06f 0302 	mvn.w	r3, #2
 8001150:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d102      	bne.n	800115e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2201      	movs	r2, #1
 800115c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800115e:	693b      	ldr	r3, [r7, #16]
 }
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	6810      	ldr	r0, [r2, #0]
 800117c:	f107 020c 	add.w	r2, r7, #12
 8001180:	2101      	movs	r1, #1
 8001182:	4798      	blx	r3
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	da02      	bge.n	8001190 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800118a:	f06f 0304 	mvn.w	r3, #4
 800118e:	e06e      	b.n	800126e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	6810      	ldr	r0, [r2, #0]
 8001198:	f107 020c 	add.w	r2, r7, #12
 800119c:	2101      	movs	r1, #1
 800119e:	4798      	blx	r3
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	da02      	bge.n	80011ac <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80011a6:	f06f 0304 	mvn.w	r3, #4
 80011aa:	e060      	b.n	800126e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e059      	b.n	800126e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	6810      	ldr	r0, [r2, #0]
 80011c2:	f107 020c 	add.w	r2, r7, #12
 80011c6:	2100      	movs	r1, #0
 80011c8:	4798      	blx	r3
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	da02      	bge.n	80011d6 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80011d0:	f06f 0304 	mvn.w	r3, #4
 80011d4:	e04b      	b.n	800126e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d11b      	bne.n	8001218 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d006      	beq.n	80011f8 <LAN8742_GetLinkState+0x90>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80011f4:	2302      	movs	r3, #2
 80011f6:	e03a      	b.n	800126e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001202:	2303      	movs	r3, #3
 8001204:	e033      	b.n	800126e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001210:	2304      	movs	r3, #4
 8001212:	e02c      	b.n	800126e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001214:	2305      	movs	r3, #5
 8001216:	e02a      	b.n	800126e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	6810      	ldr	r0, [r2, #0]
 8001220:	f107 020c 	add.w	r2, r7, #12
 8001224:	211f      	movs	r1, #31
 8001226:	4798      	blx	r3
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	da02      	bge.n	8001234 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800122e:	f06f 0304 	mvn.w	r3, #4
 8001232:	e01c      	b.n	800126e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800123e:	2306      	movs	r3, #6
 8001240:	e015      	b.n	800126e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f003 031c 	and.w	r3, r3, #28
 8001248:	2b18      	cmp	r3, #24
 800124a:	d101      	bne.n	8001250 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800124c:	2302      	movs	r3, #2
 800124e:	e00e      	b.n	800126e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f003 031c 	and.w	r3, r3, #28
 8001256:	2b08      	cmp	r3, #8
 8001258:	d101      	bne.n	800125e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800125a:	2303      	movs	r3, #3
 800125c:	e007      	b.n	800126e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f003 031c 	and.w	r3, r3, #28
 8001264:	2b14      	cmp	r3, #20
 8001266:	d101      	bne.n	800126c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001268:	2304      	movs	r3, #4
 800126a:	e000      	b.n	800126e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800126c:	2305      	movs	r3, #5
    }
  }
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127a:	2003      	movs	r0, #3
 800127c:	f000 f8f9 	bl	8001472 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001280:	200f      	movs	r0, #15
 8001282:	f7ff fd43 	bl	8000d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001286:	f7ff fc3f 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_IncTick+0x20>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <HAL_IncTick+0x24>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	4a04      	ldr	r2, [pc, #16]	@ (80012b4 <HAL_IncTick+0x24>)
 80012a2:	6013      	str	r3, [r2, #0]
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000008 	.word	0x20000008
 80012b4:	200007a8 	.word	0x200007a8

080012b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return uwTick;
 80012bc:	4b03      	ldr	r3, [pc, #12]	@ (80012cc <HAL_GetTick+0x14>)
 80012be:	681b      	ldr	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	200007a8 	.word	0x200007a8

080012d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d8:	f7ff ffee 	bl	80012b8 <HAL_GetTick>
 80012dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e8:	d005      	beq.n	80012f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <HAL_Delay+0x44>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4413      	add	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012f6:	bf00      	nop
 80012f8:	f7ff ffde 	bl	80012b8 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	429a      	cmp	r2, r3
 8001306:	d8f7      	bhi.n	80012f8 <HAL_Delay+0x28>
  {
  }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000008 	.word	0x20000008

08001318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001328:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <__NVIC_SetPriorityGrouping+0x40>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001334:	4013      	ands	r3, r2
 8001336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001340:	4b06      	ldr	r3, [pc, #24]	@ (800135c <__NVIC_SetPriorityGrouping+0x44>)
 8001342:	4313      	orrs	r3, r2
 8001344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001346:	4a04      	ldr	r2, [pc, #16]	@ (8001358 <__NVIC_SetPriorityGrouping+0x40>)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	60d3      	str	r3, [r2, #12]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00
 800135c:	05fa0000 	.word	0x05fa0000

08001360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001364:	4b04      	ldr	r3, [pc, #16]	@ (8001378 <__NVIC_GetPriorityGrouping+0x18>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	0a1b      	lsrs	r3, r3, #8
 800136a:	f003 0307 	and.w	r3, r3, #7
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	2b00      	cmp	r3, #0
 800138c:	db0b      	blt.n	80013a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	f003 021f 	and.w	r2, r3, #31
 8001394:	4907      	ldr	r1, [pc, #28]	@ (80013b4 <__NVIC_EnableIRQ+0x38>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	095b      	lsrs	r3, r3, #5
 800139c:	2001      	movs	r0, #1
 800139e:	fa00 f202 	lsl.w	r2, r0, r2
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000e100 	.word	0xe000e100

080013b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	db0a      	blt.n	80013e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	490c      	ldr	r1, [pc, #48]	@ (8001404 <__NVIC_SetPriority+0x4c>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	0112      	lsls	r2, r2, #4
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	440b      	add	r3, r1
 80013dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e0:	e00a      	b.n	80013f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4908      	ldr	r1, [pc, #32]	@ (8001408 <__NVIC_SetPriority+0x50>)
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	3b04      	subs	r3, #4
 80013f0:	0112      	lsls	r2, r2, #4
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	440b      	add	r3, r1
 80013f6:	761a      	strb	r2, [r3, #24]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000e100 	.word	0xe000e100
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800140c:	b480      	push	{r7}
 800140e:	b089      	sub	sp, #36	@ 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f1c3 0307 	rsb	r3, r3, #7
 8001426:	2b04      	cmp	r3, #4
 8001428:	bf28      	it	cs
 800142a:	2304      	movcs	r3, #4
 800142c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3304      	adds	r3, #4
 8001432:	2b06      	cmp	r3, #6
 8001434:	d902      	bls.n	800143c <NVIC_EncodePriority+0x30>
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3b03      	subs	r3, #3
 800143a:	e000      	b.n	800143e <NVIC_EncodePriority+0x32>
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	f04f 32ff 	mov.w	r2, #4294967295
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43da      	mvns	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	401a      	ands	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001454:	f04f 31ff 	mov.w	r1, #4294967295
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	43d9      	mvns	r1, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	4313      	orrs	r3, r2
         );
}
 8001466:	4618      	mov	r0, r3
 8001468:	3724      	adds	r7, #36	@ 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ff4c 	bl	8001318 <__NVIC_SetPriorityGrouping>
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800149a:	f7ff ff61 	bl	8001360 <__NVIC_GetPriorityGrouping>
 800149e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	68b9      	ldr	r1, [r7, #8]
 80014a4:	6978      	ldr	r0, [r7, #20]
 80014a6:	f7ff ffb1 	bl	800140c <NVIC_EncodePriority>
 80014aa:	4602      	mov	r2, r0
 80014ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff80 	bl	80013b8 <__NVIC_SetPriority>
}
 80014b8:	bf00      	nop
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ff54 	bl	800137c <__NVIC_EnableIRQ>
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e086      	b.n	80015fc <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d106      	bne.n	8001506 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2220      	movs	r2, #32
 80014fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f004 fd79 	bl	8005ff8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001506:	4b3f      	ldr	r3, [pc, #252]	@ (8001604 <HAL_ETH_Init+0x128>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150a:	4a3e      	ldr	r2, [pc, #248]	@ (8001604 <HAL_ETH_Init+0x128>)
 800150c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001510:	6453      	str	r3, [r2, #68]	@ 0x44
 8001512:	4b3c      	ldr	r3, [pc, #240]	@ (8001604 <HAL_ETH_Init+0x128>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800151e:	4b3a      	ldr	r3, [pc, #232]	@ (8001608 <HAL_ETH_Init+0x12c>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	4a39      	ldr	r2, [pc, #228]	@ (8001608 <HAL_ETH_Init+0x12c>)
 8001524:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001528:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800152a:	4b37      	ldr	r3, [pc, #220]	@ (8001608 <HAL_ETH_Init+0x12c>)
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	4935      	ldr	r1, [pc, #212]	@ (8001608 <HAL_ETH_Init+0x12c>)
 8001534:	4313      	orrs	r3, r2
 8001536:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001538:	4b33      	ldr	r3, [pc, #204]	@ (8001608 <HAL_ETH_Init+0x12c>)
 800153a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6812      	ldr	r2, [r2, #0]
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001552:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001554:	f7ff feb0 	bl	80012b8 <HAL_GetTick>
 8001558:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800155a:	e011      	b.n	8001580 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800155c:	f7ff feac 	bl	80012b8 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800156a:	d909      	bls.n	8001580 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2204      	movs	r2, #4
 8001570:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	22e0      	movs	r2, #224	@ 0xe0
 8001578:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e03d      	b.n	80015fc <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1e4      	bne.n	800155c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 ff5c 	bl	8002450 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f001 f807 	bl	80025ac <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f001 f85d 	bl	800265e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	461a      	mov	r2, r3
 80015aa:	2100      	movs	r1, #0
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 ffc5 	bl	800253c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80015c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <HAL_ETH_Init+0x130>)
 80015d0:	430b      	orrs	r3, r1
 80015d2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80015e6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2210      	movs	r2, #16
 80015f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40023800 	.word	0x40023800
 8001608:	40013800 	.word	0x40013800
 800160c:	00020060 	.word	0x00020060

08001610 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800161e:	2b10      	cmp	r3, #16
 8001620:	d15f      	bne.n	80016e2 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2220      	movs	r2, #32
 8001626:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2204      	movs	r2, #4
 8001634:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f9f6 	bl	8001a28 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001644:	2001      	movs	r0, #1
 8001646:	f7ff fe43 	bl	80012d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001664:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001668:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001680:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 fd80 	bl	8002188 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 0208 	orr.w	r2, r2, #8
 8001696:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016a0:	2001      	movs	r0, #1
 80016a2:	f7ff fe15 	bl	80012d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f042 0204 	orr.w	r2, r2, #4
 80016bc:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016c6:	69d9      	ldr	r1, [r3, #28]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <HAL_ETH_Start_IT+0xdc>)
 80016ce:	430b      	orrs	r3, r1
 80016d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016d4:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2240      	movs	r2, #64	@ 0x40
 80016da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	e000      	b.n	80016e4 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
  }
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	0001a0c1 	.word	0x0001a0c1

080016f0 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80016fe:	2b40      	cmp	r3, #64	@ 0x40
 8001700:	d16e      	bne.n	80017e0 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2220      	movs	r2, #32
 8001706:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001712:	69d9      	ldr	r1, [r3, #28]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b34      	ldr	r3, [pc, #208]	@ (80017ec <HAL_ETH_Stop_IT+0xfc>)
 800171a:	400b      	ands	r3, r1
 800171c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001720:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6812      	ldr	r2, [r2, #0]
 8001730:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001734:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001738:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	f023 0302 	bic.w	r3, r3, #2
 800174c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001750:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0204 	bic.w	r2, r2, #4
 8001760:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800176a:	2001      	movs	r0, #1
 800176c:	f7ff fdb0 	bl	80012d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 fd05 	bl	8002188 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0208 	bic.w	r2, r2, #8
 800178c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001796:	2001      	movs	r0, #1
 8001798:	f7ff fd9a 	bl	80012d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	e00e      	b.n	80017c8 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	3212      	adds	r2, #18
 80017b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b4:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	3301      	adds	r3, #1
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d9ed      	bls.n	80017aa <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2210      	movs	r2, #16
 80017d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	e000      	b.n	80017e2 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
  }
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	fffe5f3e 	.word	0xfffe5f3e

080017f0 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d109      	bne.n	8001814 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001806:	f043 0201 	orr.w	r2, r3, #1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e045      	b.n	80018a0 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800181a:	2b40      	cmp	r3, #64	@ 0x40
 800181c:	d13f      	bne.n	800189e <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001826:	2201      	movs	r2, #1
 8001828:	6839      	ldr	r1, [r7, #0]
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 ff86 	bl	800273c <ETH_Prepare_Tx_Descriptors>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800183c:	f043 0202 	orr.w	r2, r3, #2
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e02a      	b.n	80018a0 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800184a:	f3bf 8f4f 	dsb	sy
}
 800184e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	629a      	str	r2, [r3, #40]	@ 0x28
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185e:	2b03      	cmp	r3, #3
 8001860:	d904      	bls.n	800186c <HAL_ETH_Transmit_IT+0x7c>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001866:	1f1a      	subs	r2, r3, #4
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00d      	beq.n	800189a <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001886:	461a      	mov	r2, r3
 8001888:	2304      	movs	r3, #4
 800188a:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001894:	461a      	mov	r2, r3
 8001896:	2300      	movs	r3, #0
 8001898:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	e000      	b.n	80018a0 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
  }
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d109      	bne.n	80018d4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018c6:	f043 0201 	orr.w	r2, r3, #1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0a4      	b.n	8001a1e <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018da:	2b40      	cmp	r3, #64	@ 0x40
 80018dc:	d001      	beq.n	80018e2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e09d      	b.n	8001a1e <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69fa      	ldr	r2, [r7, #28]
 80018ec:	3212      	adds	r2, #18
 80018ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80018f8:	f1c3 0304 	rsb	r3, r3, #4
 80018fc:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018fe:	e066      	b.n	80019ce <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001908:	2b00      	cmp	r3, #0
 800190a:	d007      	beq.n	800191c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	69da      	ldr	r2, [r3, #28]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	699a      	ldr	r2, [r3, #24]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001924:	2b00      	cmp	r3, #0
 8001926:	d103      	bne.n	8001930 <HAL_ETH_ReadData+0x88>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800192c:	2b00      	cmp	r3, #0
 800192e:	d03c      	beq.n	80019aa <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	0c1b      	lsrs	r3, r3, #16
 800194e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001952:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001968:	2301      	movs	r3, #1
 800196a:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001984:	461a      	mov	r2, r3
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	b29b      	uxth	r3, r3
 800198a:	f004 fd01 	bl	8006390 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	441a      	add	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	2200      	movs	r2, #0
 80019a8:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3301      	adds	r3, #1
 80019ae:	61fb      	str	r3, [r7, #28]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	d902      	bls.n	80019bc <HAL_ETH_ReadData+0x114>
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3b04      	subs	r3, #4
 80019ba:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69fa      	ldr	r2, [r7, #28]
 80019c0:	3212      	adds	r2, #18
 80019c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	3301      	adds	r3, #1
 80019cc:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	db06      	blt.n	80019e4 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d202      	bcs.n	80019e4 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80019de:	7cfb      	ldrb	r3, [r7, #19]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d08d      	beq.n	8001900 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	441a      	add	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f815 	bl	8001a28 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001a04:	7cfb      	ldrb	r3, [r7, #19]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d108      	bne.n	8001a1c <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	e000      	b.n	8001a1e <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3720      	adds	r7, #32
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001a34:	2301      	movs	r3, #1
 8001a36:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a3c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	3212      	adds	r2, #18
 8001a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a48:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a4e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001a50:	e042      	b.n	8001ad8 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d112      	bne.n	8001a80 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001a5a:	f107 0308 	add.w	r3, r7, #8
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f004 fc66 	bl	8006330 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d102      	bne.n	8001a70 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	74fb      	strb	r3, [r7, #19]
 8001a6e:	e007      	b.n	8001a80 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	461a      	mov	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001a80:	7cfb      	ldrb	r3, [r7, #19]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d028      	beq.n	8001ad8 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d106      	bne.n	8001a9c <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	4b26      	ldr	r3, [pc, #152]	@ (8001b2c <ETH_UpdateDescriptor+0x104>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	6053      	str	r3, [r2, #4]
 8001a9a:	e005      	b.n	8001aa8 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d902      	bls.n	8001ac6 <ETH_UpdateDescriptor+0x9e>
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	3b04      	subs	r3, #4
 8001ac4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69fa      	ldr	r2, [r7, #28]
 8001aca:	3212      	adds	r2, #18
 8001acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad0:	617b      	str	r3, [r7, #20]
      desccount--;
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d002      	beq.n	8001ae4 <ETH_UpdateDescriptor+0xbc>
 8001ade:	7cfb      	ldrb	r3, [r7, #19]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1b6      	bne.n	8001a52 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d01a      	beq.n	8001b24 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3303      	adds	r3, #3
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001af8:	f3bf 8f5f 	dmb	sy
}
 8001afc:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6919      	ldr	r1, [r3, #16]
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	18ca      	adds	r2, r1, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b16:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69fa      	ldr	r2, [r7, #28]
 8001b1c:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001b24:	bf00      	nop
 8001b26:	3720      	adds	r7, #32
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	80004000 	.word	0x80004000

08001b30 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3318      	adds	r3, #24
 8001b3c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b42:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b48:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001b4e:	e047      	b.n	8001be0 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	3304      	adds	r3, #4
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10a      	bne.n	8001b80 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d902      	bls.n	8001b7c <HAL_ETH_ReleaseTxPacket+0x4c>
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	3b04      	subs	r3, #4
 8001b7a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001b80:	7bbb      	ldrb	r3, [r7, #14]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d02c      	beq.n	8001be0 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68d9      	ldr	r1, [r3, #12]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	440b      	add	r3, r1
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	db1f      	blt.n	8001bdc <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f004 fc33 	bl	8006414 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	2200      	movs	r2, #0
 8001bba:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d902      	bls.n	8001bce <HAL_ETH_ReleaseTxPacket+0x9e>
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	3b04      	subs	r3, #4
 8001bcc:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001bda:	e001      	b.n	8001be0 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <HAL_ETH_ReleaseTxPacket+0xbc>
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1b1      	bne.n	8001b50 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c06:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8001c20:	4b4b      	ldr	r3, [pc, #300]	@ (8001d50 <HAL_ETH_IRQHandler+0x158>)
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00e      	beq.n	8001c4e <HAL_ETH_IRQHandler+0x56>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b43      	ldr	r3, [pc, #268]	@ (8001d54 <HAL_ETH_IRQHandler+0x15c>)
 8001c46:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f003 ff15 	bl	8005a78 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00f      	beq.n	8001c78 <HAL_ETH_IRQHandler+0x80>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00a      	beq.n	8001c78 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001c70:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f003 ff10 	bl	8005a98 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d042      	beq.n	8001d08 <HAL_ETH_IRQHandler+0x110>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d03d      	beq.n	8001d08 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c92:	f043 0208 	orr.w	r2, r3, #8
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d01a      	beq.n	8001cdc <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cae:	695a      	ldr	r2, [r3, #20]
 8001cb0:	4b29      	ldr	r3, [pc, #164]	@ (8001d58 <HAL_ETH_IRQHandler+0x160>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001ccc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cd0:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	22e0      	movs	r2, #224	@ 0xe0
 8001cd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001cda:	e012      	b.n	8001d02 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ce4:	695a      	ldr	r2, [r3, #20]
 8001ce6:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001cea:	4013      	ands	r3, r2
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001d00:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f003 fed8 	bl	8005ab8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00e      	beq.n	8001d30 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d18:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f81a 	bl	8001d5c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d006      	beq.n	8001d48 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001d3a:	4b05      	ldr	r3, [pc, #20]	@ (8001d50 <HAL_ETH_IRQHandler+0x158>)
 8001d3c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001d40:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f814 	bl	8001d70 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001d48:	bf00      	nop
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40013c00 	.word	0x40013c00
 8001d54:	00010040 	.word	0x00010040
 8001d58:	007e2000 	.word	0x007e2000

08001d5c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f003 031c 	and.w	r3, r3, #28
 8001da0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	02db      	lsls	r3, r3, #11
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	019b      	lsls	r3, r3, #6
 8001db2:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	f023 0302 	bic.w	r3, r3, #2
 8001dc2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001dd4:	f7ff fa70 	bl	80012b8 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dda:	e00d      	b.n	8001df8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001ddc:	f7ff fa6c 	bl	80012b8 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dea:	d301      	bcc.n	8001df0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e010      	b.n	8001e12 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1ec      	bne.n	8001ddc <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f003 031c 	and.w	r3, r3, #28
 8001e36:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	02db      	lsls	r3, r3, #11
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	019b      	lsls	r3, r3, #6
 8001e48:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f043 0302 	orr.w	r3, r3, #2
 8001e58:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e74:	f7ff fa20 	bl	80012b8 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e7a:	e00d      	b.n	8001e98 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001e7c:	f7ff fa1c 	bl	80012b8 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e8a:	d301      	bcc.n	8001e90 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e009      	b.n	8001ea4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1ec      	bne.n	8001e7c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0e6      	b.n	800208e <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	bf14      	ite	ne
 8001ece:	2301      	movne	r3, #1
 8001ed0:	2300      	moveq	r3, #0
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	bf0c      	ite	eq
 8001ef8:	2301      	moveq	r3, #1
 8001efa:	2300      	movne	r3, #0
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	461a      	mov	r2, r3
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	bf14      	ite	ne
 8001f14:	2301      	movne	r3, #1
 8001f16:	2300      	moveq	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	bf0c      	ite	eq
 8001f2e:	2301      	moveq	r3, #1
 8001f30:	2300      	movne	r3, #0
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	461a      	mov	r2, r3
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	bf14      	ite	ne
 8001f48:	2301      	movne	r3, #1
 8001f4a:	2300      	moveq	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bf0c      	ite	eq
 8001f7e:	2301      	moveq	r3, #1
 8001f80:	2300      	movne	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	461a      	mov	r2, r3
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf0c      	ite	eq
 8001f98:	2301      	moveq	r3, #1
 8001f9a:	2300      	movne	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	bf14      	ite	ne
 8001fb2:	2301      	movne	r3, #1
 8001fb4:	2300      	moveq	r3, #0
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	bf14      	ite	ne
 8001fda:	2301      	movne	r3, #1
 8001fdc:	2300      	moveq	r3, #0
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	bf14      	ite	ne
 8001ff4:	2301      	movne	r3, #1
 8001ff6:	2300      	moveq	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	bf14      	ite	ne
 800200e:	2301      	movne	r3, #1
 8002010:	2300      	moveq	r3, #0
 8002012:	b2db      	uxtb	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002026:	2b00      	cmp	r3, #0
 8002028:	bf0c      	ite	eq
 800202a:	2301      	moveq	r3, #1
 800202c:	2300      	movne	r3, #0
 800202e:	b2db      	uxtb	r3, r3
 8002030:	461a      	mov	r2, r3
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	0c1b      	lsrs	r3, r3, #16
 800204e:	b29a      	uxth	r2, r3
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b00      	cmp	r3, #0
 8002060:	bf14      	ite	ne
 8002062:	2301      	movne	r3, #1
 8002064:	2300      	moveq	r3, #0
 8002066:	b2db      	uxtb	r3, r3
 8002068:	461a      	mov	r2, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800207a:	2b00      	cmp	r3, #0
 800207c:	bf14      	ite	ne
 800207e:	2301      	movne	r3, #1
 8002080:	2300      	moveq	r3, #0
 8002082:	b2db      	uxtb	r3, r3
 8002084:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00b      	b.n	80020c6 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020b4:	2b10      	cmp	r3, #16
 80020b6:	d105      	bne.n	80020c4 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80020b8:	6839      	ldr	r1, [r7, #0]
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f88a 	bl	80021d4 <ETH_SetMACConfig>

    return HAL_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	e000      	b.n	80020c6 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
  }
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f023 031c 	bic.w	r3, r3, #28
 80020e6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80020e8:	f001 fc2e 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 80020ec:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	4a14      	ldr	r2, [pc, #80]	@ (8002144 <HAL_ETH_SetMDIOClockRange+0x74>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d804      	bhi.n	8002100 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f043 0308 	orr.w	r3, r3, #8
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	e019      	b.n	8002134 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	4a11      	ldr	r2, [pc, #68]	@ (8002148 <HAL_ETH_SetMDIOClockRange+0x78>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d204      	bcs.n	8002112 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f043 030c 	orr.w	r3, r3, #12
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	e010      	b.n	8002134 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	4a0d      	ldr	r2, [pc, #52]	@ (800214c <HAL_ETH_SetMDIOClockRange+0x7c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d90c      	bls.n	8002134 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	4a0c      	ldr	r2, [pc, #48]	@ (8002150 <HAL_ETH_SetMDIOClockRange+0x80>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d804      	bhi.n	800212c <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f043 0304 	orr.w	r3, r3, #4
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	e003      	b.n	8002134 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f043 0310 	orr.w	r3, r3, #16
 8002132:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	611a      	str	r2, [r3, #16]
}
 800213c:	bf00      	nop
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	02160ebf 	.word	0x02160ebf
 8002148:	03938700 	.word	0x03938700
 800214c:	05f5e0ff 	.word	0x05f5e0ff
 8002150:	08f0d17f 	.word	0x08f0d17f

08002154 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021aa:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021b8:	2001      	movs	r0, #1
 80021ba:	f7ff f889 	bl	80012d0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021c8:	6193      	str	r3, [r2, #24]
}
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4b53      	ldr	r3, [pc, #332]	@ (8002338 <ETH_SetMACConfig+0x164>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	7b9b      	ldrb	r3, [r3, #14]
 80021f2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	7c12      	ldrb	r2, [r2, #16]
 80021f8:	2a00      	cmp	r2, #0
 80021fa:	d102      	bne.n	8002202 <ETH_SetMACConfig+0x2e>
 80021fc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002200:	e000      	b.n	8002204 <ETH_SetMACConfig+0x30>
 8002202:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002204:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	7c52      	ldrb	r2, [r2, #17]
 800220a:	2a00      	cmp	r2, #0
 800220c:	d102      	bne.n	8002214 <ETH_SetMACConfig+0x40>
 800220e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002212:	e000      	b.n	8002216 <ETH_SetMACConfig+0x42>
 8002214:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002216:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800221c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	7fdb      	ldrb	r3, [r3, #31]
 8002222:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002224:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800222a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	7f92      	ldrb	r2, [r2, #30]
 8002230:	2a00      	cmp	r2, #0
 8002232:	d102      	bne.n	800223a <ETH_SetMACConfig+0x66>
 8002234:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002238:	e000      	b.n	800223c <ETH_SetMACConfig+0x68>
 800223a:	2200      	movs	r2, #0
                        macconf->Speed |
 800223c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	7f1b      	ldrb	r3, [r3, #28]
 8002242:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002244:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800224a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	791b      	ldrb	r3, [r3, #4]
 8002250:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002252:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	f892 2020 	ldrb.w	r2, [r2, #32]
 800225a:	2a00      	cmp	r2, #0
 800225c:	d102      	bne.n	8002264 <ETH_SetMACConfig+0x90>
 800225e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002262:	e000      	b.n	8002266 <ETH_SetMACConfig+0x92>
 8002264:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002266:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	7bdb      	ldrb	r3, [r3, #15]
 800226c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800226e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002274:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800227c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800227e:	4313      	orrs	r3, r2
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002296:	2001      	movs	r0, #1
 8002298:	f7ff f81a 	bl	80012d0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80022b2:	4013      	ands	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ba:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80022c2:	2a00      	cmp	r2, #0
 80022c4:	d101      	bne.n	80022ca <ETH_SetMACConfig+0xf6>
 80022c6:	2280      	movs	r2, #128	@ 0x80
 80022c8:	e000      	b.n	80022cc <ETH_SetMACConfig+0xf8>
 80022ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022cc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80022d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80022da:	2a01      	cmp	r2, #1
 80022dc:	d101      	bne.n	80022e2 <ETH_SetMACConfig+0x10e>
 80022de:	2208      	movs	r2, #8
 80022e0:	e000      	b.n	80022e4 <ETH_SetMACConfig+0x110>
 80022e2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80022e4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80022ec:	2a01      	cmp	r2, #1
 80022ee:	d101      	bne.n	80022f4 <ETH_SetMACConfig+0x120>
 80022f0:	2204      	movs	r2, #4
 80022f2:	e000      	b.n	80022f6 <ETH_SetMACConfig+0x122>
 80022f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80022f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80022fe:	2a01      	cmp	r2, #1
 8002300:	d101      	bne.n	8002306 <ETH_SetMACConfig+0x132>
 8002302:	2202      	movs	r2, #2
 8002304:	e000      	b.n	8002308 <ETH_SetMACConfig+0x134>
 8002306:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002308:	4313      	orrs	r3, r2
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002320:	2001      	movs	r0, #1
 8002322:	f7fe ffd5 	bl	80012d0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	619a      	str	r2, [r3, #24]
}
 800232e:	bf00      	nop
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	fd20810f 	.word	0xfd20810f

0800233c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	4b3d      	ldr	r3, [pc, #244]	@ (800244c <ETH_SetDMAConfig+0x110>)
 8002356:	4013      	ands	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	7b1b      	ldrb	r3, [r3, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d102      	bne.n	8002368 <ETH_SetDMAConfig+0x2c>
 8002362:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002366:	e000      	b.n	800236a <ETH_SetDMAConfig+0x2e>
 8002368:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	7b5b      	ldrb	r3, [r3, #13]
 800236e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002370:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	7f52      	ldrb	r2, [r2, #29]
 8002376:	2a00      	cmp	r2, #0
 8002378:	d102      	bne.n	8002380 <ETH_SetDMAConfig+0x44>
 800237a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800237e:	e000      	b.n	8002382 <ETH_SetDMAConfig+0x46>
 8002380:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002382:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	7b9b      	ldrb	r3, [r3, #14]
 8002388:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800238a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002390:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	7f1b      	ldrb	r3, [r3, #28]
 8002396:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002398:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	7f9b      	ldrb	r3, [r3, #30]
 800239e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80023a0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80023a6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023ae:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023b0:	4313      	orrs	r3, r2
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023c0:	461a      	mov	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023d2:	2001      	movs	r0, #1
 80023d4:	f7fe ff7c 	bl	80012d0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023e0:	461a      	mov	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	791b      	ldrb	r3, [r3, #4]
 80023ea:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023f0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80023f6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023fc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002404:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002406:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800240e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002414:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800241e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002422:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002430:	2001      	movs	r0, #1
 8002432:	f7fe ff4d 	bl	80012d0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800243e:	461a      	mov	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6013      	str	r3, [r2, #0]
}
 8002444:	bf00      	nop
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	f8de3f23 	.word	0xf8de3f23

08002450 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b0a6      	sub	sp, #152	@ 0x98
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002458:	2301      	movs	r3, #1
 800245a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800245e:	2301      	movs	r3, #1
 8002460:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002464:	2300      	movs	r3, #0
 8002466:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002468:	2300      	movs	r3, #0
 800246a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800246e:	2301      	movs	r3, #1
 8002470:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002474:	2300      	movs	r3, #0
 8002476:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800247a:	2301      	movs	r3, #1
 800247c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002480:	2301      	movs	r3, #1
 8002482:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002486:	2300      	movs	r3, #0
 8002488:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800248c:	2300      	movs	r3, #0
 800248e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002492:	2300      	movs	r3, #0
 8002494:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002496:	2300      	movs	r3, #0
 8002498:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800249c:	2300      	movs	r3, #0
 800249e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80024b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80024bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80024be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80024c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80024ca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80024ce:	4619      	mov	r1, r3
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff fe7f 	bl	80021d4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80024d6:	2301      	movs	r3, #1
 80024d8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80024da:	2301      	movs	r3, #1
 80024dc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80024de:	2301      	movs	r3, #1
 80024e0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80024e4:	2301      	movs	r3, #1
 80024e6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80024f8:	2300      	movs	r3, #0
 80024fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80024fc:	2301      	movs	r3, #1
 80024fe:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002502:	2301      	movs	r3, #1
 8002504:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002506:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800250a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800250c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002510:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002512:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002516:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002518:	2301      	movs	r3, #1
 800251a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800251e:	2300      	movs	r3, #0
 8002520:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002526:	f107 0308 	add.w	r3, r7, #8
 800252a:	4619      	mov	r1, r3
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ff05 	bl	800233c <ETH_SetDMAConfig>
}
 8002532:	bf00      	nop
 8002534:	3798      	adds	r7, #152	@ 0x98
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3305      	adds	r3, #5
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	3204      	adds	r2, #4
 8002554:	7812      	ldrb	r2, [r2, #0]
 8002556:	4313      	orrs	r3, r2
 8002558:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <ETH_MACAddressConfig+0x68>)
 800255e:	4413      	add	r3, r2
 8002560:	461a      	mov	r2, r3
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3303      	adds	r3, #3
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	061a      	lsls	r2, r3, #24
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3302      	adds	r3, #2
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	041b      	lsls	r3, r3, #16
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3301      	adds	r3, #1
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	4313      	orrs	r3, r2
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	7812      	ldrb	r2, [r2, #0]
 8002586:	4313      	orrs	r3, r2
 8002588:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <ETH_MACAddressConfig+0x6c>)
 800258e:	4413      	add	r3, r2
 8002590:	461a      	mov	r2, r3
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	6013      	str	r3, [r2, #0]
}
 8002596:	bf00      	nop
 8002598:	371c      	adds	r7, #28
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40028040 	.word	0x40028040
 80025a8:	40028044 	.word	0x40028044

080025ac <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	e03e      	b.n	8002638 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68d9      	ldr	r1, [r3, #12]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	440b      	add	r3, r1
 80025ca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2200      	movs	r2, #0
 80025d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2200      	movs	r2, #0
 80025e2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80025e4:	68b9      	ldr	r1, [r7, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	3206      	adds	r2, #6
 80025ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d80c      	bhi.n	800261c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68d9      	ldr	r1, [r3, #12]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	440b      	add	r3, r1
 8002614:	461a      	mov	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	e004      	b.n	8002626 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	461a      	mov	r2, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	3301      	adds	r3, #1
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b03      	cmp	r3, #3
 800263c:	d9bd      	bls.n	80025ba <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002650:	611a      	str	r2, [r3, #16]
}
 8002652:	bf00      	nop
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800265e:	b480      	push	{r7}
 8002660:	b085      	sub	sp, #20
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	e048      	b.n	80026fe <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6919      	ldr	r1, [r3, #16]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	440b      	add	r3, r1
 800267c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2200      	movs	r2, #0
 8002688:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2200      	movs	r2, #0
 800268e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2200      	movs	r2, #0
 8002694:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2200      	movs	r2, #0
 800269a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2200      	movs	r2, #0
 80026a0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80026a8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80026c2:	68b9      	ldr	r1, [r7, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	3212      	adds	r2, #18
 80026ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d80c      	bhi.n	80026ee <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6919      	ldr	r1, [r3, #16]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	440b      	add	r3, r1
 80026e6:	461a      	mov	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	60da      	str	r2, [r3, #12]
 80026ec:	e004      	b.n	80026f8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	461a      	mov	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	3301      	adds	r3, #1
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2b03      	cmp	r3, #3
 8002702:	d9b3      	bls.n	800266c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800272e:	60da      	str	r2, [r3, #12]
}
 8002730:	bf00      	nop
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 800273c:	b480      	push	{r7}
 800273e:	b091      	sub	sp, #68	@ 0x44
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	3318      	adds	r3, #24
 800274c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800275e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002760:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002766:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800277a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800277e:	d007      	beq.n	8002790 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002780:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002784:	3304      	adds	r3, #4
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002790:	2302      	movs	r3, #2
 8002792:	e111      	b.n	80029b8 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8002794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002796:	3301      	adds	r3, #1
 8002798:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800279a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80027a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	4b86      	ldr	r3, [pc, #536]	@ (80029c4 <ETH_Prepare_Tx_Descriptors+0x288>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027ae:	6852      	ldr	r2, [r2, #4]
 80027b0:	431a      	orrs	r2, r3
 80027b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d008      	beq.n	80027d4 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80027c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80027e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80027fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002808:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800280a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002814:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002816:	e082      	b.n	800291e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002822:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d006      	beq.n	8002838 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800282a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	e005      	b.n	8002844 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002842:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002846:	3301      	adds	r3, #1
 8002848:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800284a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800284c:	2b03      	cmp	r3, #3
 800284e:	d902      	bls.n	8002856 <ETH_Prepare_Tx_Descriptors+0x11a>
 8002850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002852:	3b04      	subs	r3, #4
 8002854:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002858:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800285a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800285e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002868:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800286c:	d007      	beq.n	800287e <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800286e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002872:	3304      	adds	r3, #4
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d029      	beq.n	80028d2 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002884:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800288a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800288c:	2300      	movs	r3, #0
 800288e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002890:	e019      	b.n	80028c6 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8002892:	f3bf 8f5f 	dmb	sy
}
 8002896:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028a2:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80028a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028a6:	3301      	adds	r3, #1
 80028a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d902      	bls.n	80028b6 <ETH_Prepare_Tx_Descriptors+0x17a>
 80028b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028b2:	3b04      	subs	r3, #4
 80028b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028be:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80028c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028c2:	3301      	adds	r3, #1
 80028c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d3e1      	bcc.n	8002892 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 80028ce:	2302      	movs	r3, #2
 80028d0:	e072      	b.n	80029b8 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80028d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80028da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028dc:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80028de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028e0:	3301      	adds	r3, #1
 80028e2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80028e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80028ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f2:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80028f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	4b32      	ldr	r3, [pc, #200]	@ (80029c4 <ETH_Prepare_Tx_Descriptors+0x288>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028fe:	6852      	ldr	r2, [r2, #4]
 8002900:	431a      	orrs	r2, r3
 8002902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002904:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002908:	3301      	adds	r3, #1
 800290a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 800290c:	f3bf 8f5f 	dmb	sy
}
 8002910:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800291a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291c:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800291e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	f47f af78 	bne.w	8002818 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d006      	beq.n	800293c <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800292e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	e005      	b.n	8002948 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800293c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002946:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002952:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002956:	6a3a      	ldr	r2, [r7, #32]
 8002958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800295c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800295e:	f3bf 8f5f 	dmb	sy
}
 8002962:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800296c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296e:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002972:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002974:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002978:	3304      	adds	r3, #4
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002984:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002986:	f3ef 8310 	mrs	r3, PRIMASK
 800298a:	613b      	str	r3, [r7, #16]
  return(result);
 800298c:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800298e:	61fb      	str	r3, [r7, #28]
 8002990:	2301      	movs	r3, #1
 8002992:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f383 8810 	msr	PRIMASK, r3
}
 800299a:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800299c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a2:	4413      	add	r3, r2
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	f383 8810 	msr	PRIMASK, r3
}
 80029b4:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3744      	adds	r7, #68	@ 0x44
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	ffffe000 	.word	0xffffe000

080029c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b089      	sub	sp, #36	@ 0x24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80029de:	2300      	movs	r3, #0
 80029e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	e175      	b.n	8002cd4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80029e8:	2201      	movs	r2, #1
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4013      	ands	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	f040 8164 	bne.w	8002cce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d005      	beq.n	8002a1e <HAL_GPIO_Init+0x56>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d130      	bne.n	8002a80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	2203      	movs	r2, #3
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a54:	2201      	movs	r2, #1
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f003 0201 	and.w	r2, r3, #1
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d017      	beq.n	8002abc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2203      	movs	r2, #3
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d123      	bne.n	8002b10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	08da      	lsrs	r2, r3, #3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3208      	adds	r2, #8
 8002ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	220f      	movs	r2, #15
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	08da      	lsrs	r2, r3, #3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3208      	adds	r2, #8
 8002b0a:	69b9      	ldr	r1, [r7, #24]
 8002b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0203 	and.w	r2, r3, #3
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80be 	beq.w	8002cce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b52:	4b66      	ldr	r3, [pc, #408]	@ (8002cec <HAL_GPIO_Init+0x324>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b56:	4a65      	ldr	r2, [pc, #404]	@ (8002cec <HAL_GPIO_Init+0x324>)
 8002b58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b5e:	4b63      	ldr	r3, [pc, #396]	@ (8002cec <HAL_GPIO_Init+0x324>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b6a:	4a61      	ldr	r2, [pc, #388]	@ (8002cf0 <HAL_GPIO_Init+0x328>)
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	089b      	lsrs	r3, r3, #2
 8002b70:	3302      	adds	r3, #2
 8002b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	220f      	movs	r2, #15
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a58      	ldr	r2, [pc, #352]	@ (8002cf4 <HAL_GPIO_Init+0x32c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d037      	beq.n	8002c06 <HAL_GPIO_Init+0x23e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a57      	ldr	r2, [pc, #348]	@ (8002cf8 <HAL_GPIO_Init+0x330>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d031      	beq.n	8002c02 <HAL_GPIO_Init+0x23a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a56      	ldr	r2, [pc, #344]	@ (8002cfc <HAL_GPIO_Init+0x334>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d02b      	beq.n	8002bfe <HAL_GPIO_Init+0x236>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a55      	ldr	r2, [pc, #340]	@ (8002d00 <HAL_GPIO_Init+0x338>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d025      	beq.n	8002bfa <HAL_GPIO_Init+0x232>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a54      	ldr	r2, [pc, #336]	@ (8002d04 <HAL_GPIO_Init+0x33c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d01f      	beq.n	8002bf6 <HAL_GPIO_Init+0x22e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a53      	ldr	r2, [pc, #332]	@ (8002d08 <HAL_GPIO_Init+0x340>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d019      	beq.n	8002bf2 <HAL_GPIO_Init+0x22a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a52      	ldr	r2, [pc, #328]	@ (8002d0c <HAL_GPIO_Init+0x344>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d013      	beq.n	8002bee <HAL_GPIO_Init+0x226>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a51      	ldr	r2, [pc, #324]	@ (8002d10 <HAL_GPIO_Init+0x348>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00d      	beq.n	8002bea <HAL_GPIO_Init+0x222>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a50      	ldr	r2, [pc, #320]	@ (8002d14 <HAL_GPIO_Init+0x34c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d007      	beq.n	8002be6 <HAL_GPIO_Init+0x21e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a4f      	ldr	r2, [pc, #316]	@ (8002d18 <HAL_GPIO_Init+0x350>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d101      	bne.n	8002be2 <HAL_GPIO_Init+0x21a>
 8002bde:	2309      	movs	r3, #9
 8002be0:	e012      	b.n	8002c08 <HAL_GPIO_Init+0x240>
 8002be2:	230a      	movs	r3, #10
 8002be4:	e010      	b.n	8002c08 <HAL_GPIO_Init+0x240>
 8002be6:	2308      	movs	r3, #8
 8002be8:	e00e      	b.n	8002c08 <HAL_GPIO_Init+0x240>
 8002bea:	2307      	movs	r3, #7
 8002bec:	e00c      	b.n	8002c08 <HAL_GPIO_Init+0x240>
 8002bee:	2306      	movs	r3, #6
 8002bf0:	e00a      	b.n	8002c08 <HAL_GPIO_Init+0x240>
 8002bf2:	2305      	movs	r3, #5
 8002bf4:	e008      	b.n	8002c08 <HAL_GPIO_Init+0x240>
 8002bf6:	2304      	movs	r3, #4
 8002bf8:	e006      	b.n	8002c08 <HAL_GPIO_Init+0x240>
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e004      	b.n	8002c08 <HAL_GPIO_Init+0x240>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e002      	b.n	8002c08 <HAL_GPIO_Init+0x240>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <HAL_GPIO_Init+0x240>
 8002c06:	2300      	movs	r3, #0
 8002c08:	69fa      	ldr	r2, [r7, #28]
 8002c0a:	f002 0203 	and.w	r2, r2, #3
 8002c0e:	0092      	lsls	r2, r2, #2
 8002c10:	4093      	lsls	r3, r2
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c18:	4935      	ldr	r1, [pc, #212]	@ (8002cf0 <HAL_GPIO_Init+0x328>)
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	089b      	lsrs	r3, r3, #2
 8002c1e:	3302      	adds	r3, #2
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c26:	4b3d      	ldr	r3, [pc, #244]	@ (8002d1c <HAL_GPIO_Init+0x354>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c4a:	4a34      	ldr	r2, [pc, #208]	@ (8002d1c <HAL_GPIO_Init+0x354>)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c50:	4b32      	ldr	r3, [pc, #200]	@ (8002d1c <HAL_GPIO_Init+0x354>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c74:	4a29      	ldr	r2, [pc, #164]	@ (8002d1c <HAL_GPIO_Init+0x354>)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c7a:	4b28      	ldr	r3, [pc, #160]	@ (8002d1c <HAL_GPIO_Init+0x354>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4013      	ands	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c9e:	4a1f      	ldr	r2, [pc, #124]	@ (8002d1c <HAL_GPIO_Init+0x354>)
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d1c <HAL_GPIO_Init+0x354>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cc8:	4a14      	ldr	r2, [pc, #80]	@ (8002d1c <HAL_GPIO_Init+0x354>)
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	61fb      	str	r3, [r7, #28]
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	2b0f      	cmp	r3, #15
 8002cd8:	f67f ae86 	bls.w	80029e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	3724      	adds	r7, #36	@ 0x24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40013800 	.word	0x40013800
 8002cf4:	40020000 	.word	0x40020000
 8002cf8:	40020400 	.word	0x40020400
 8002cfc:	40020800 	.word	0x40020800
 8002d00:	40020c00 	.word	0x40020c00
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40021400 	.word	0x40021400
 8002d0c:	40021800 	.word	0x40021800
 8002d10:	40021c00 	.word	0x40021c00
 8002d14:	40022000 	.word	0x40022000
 8002d18:	40022400 	.word	0x40022400
 8002d1c:	40013c00 	.word	0x40013c00

08002d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	807b      	strh	r3, [r7, #2]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d30:	787b      	ldrb	r3, [r7, #1]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d36:	887a      	ldrh	r2, [r7, #2]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d3c:	e003      	b.n	8002d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d3e:	887b      	ldrh	r3, [r7, #2]
 8002d40:	041a      	lsls	r2, r3, #16
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	619a      	str	r2, [r3, #24]
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b086      	sub	sp, #24
 8002d56:	af02      	add	r7, sp, #8
 8002d58:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e108      	b.n	8002f76 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7fd ff4a 	bl	8000c18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2203      	movs	r2, #3
 8002d88:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d92:	d102      	bne.n	8002d9a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f002 fa56 	bl	8005250 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	7c1a      	ldrb	r2, [r3, #16]
 8002dac:	f88d 2000 	strb.w	r2, [sp]
 8002db0:	3304      	adds	r3, #4
 8002db2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002db4:	f002 f9f2 	bl	800519c <USB_CoreInit>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d005      	beq.n	8002dca <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e0d5      	b.n	8002f76 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2100      	movs	r1, #0
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f002 fa4e 	bl	8005272 <USB_SetCurrentMode>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0c6      	b.n	8002f76 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002de8:	2300      	movs	r3, #0
 8002dea:	73fb      	strb	r3, [r7, #15]
 8002dec:	e04a      	b.n	8002e84 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002dee:	7bfa      	ldrb	r2, [r7, #15]
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	3315      	adds	r3, #21
 8002dfe:	2201      	movs	r2, #1
 8002e00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e02:	7bfa      	ldrb	r2, [r7, #15]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	3314      	adds	r3, #20
 8002e12:	7bfa      	ldrb	r2, [r7, #15]
 8002e14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e16:	7bfa      	ldrb	r2, [r7, #15]
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	b298      	uxth	r0, r3
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	332e      	adds	r3, #46	@ 0x2e
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e2e:	7bfa      	ldrb	r2, [r7, #15]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	3318      	adds	r3, #24
 8002e3e:	2200      	movs	r2, #0
 8002e40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e42:	7bfa      	ldrb	r2, [r7, #15]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	331c      	adds	r3, #28
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e56:	7bfa      	ldrb	r2, [r7, #15]
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	440b      	add	r3, r1
 8002e64:	3320      	adds	r3, #32
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e6a:	7bfa      	ldrb	r2, [r7, #15]
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4413      	add	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	3324      	adds	r3, #36	@ 0x24
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	3301      	adds	r3, #1
 8002e82:	73fb      	strb	r3, [r7, #15]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	791b      	ldrb	r3, [r3, #4]
 8002e88:	7bfa      	ldrb	r2, [r7, #15]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d3af      	bcc.n	8002dee <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e8e:	2300      	movs	r3, #0
 8002e90:	73fb      	strb	r3, [r7, #15]
 8002e92:	e044      	b.n	8002f1e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e94:	7bfa      	ldrb	r2, [r7, #15]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002eaa:	7bfa      	ldrb	r2, [r7, #15]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002ebc:	7bfa      	ldrb	r2, [r7, #15]
 8002ebe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ec0:	7bfa      	ldrb	r2, [r7, #15]
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ed6:	7bfa      	ldrb	r2, [r7, #15]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002eec:	7bfa      	ldrb	r2, [r7, #15]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f02:	7bfa      	ldrb	r2, [r7, #15]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	73fb      	strb	r3, [r7, #15]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	791b      	ldrb	r3, [r3, #4]
 8002f22:	7bfa      	ldrb	r2, [r7, #15]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d3b5      	bcc.n	8002e94 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6818      	ldr	r0, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	7c1a      	ldrb	r2, [r3, #16]
 8002f30:	f88d 2000 	strb.w	r2, [sp]
 8002f34:	3304      	adds	r3, #4
 8002f36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f38:	f002 f9e8 	bl	800530c <USB_DevInit>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d005      	beq.n	8002f4e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2202      	movs	r2, #2
 8002f46:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e013      	b.n	8002f76 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	7b1b      	ldrb	r3, [r3, #12]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d102      	bne.n	8002f6a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f80b 	bl	8002f80 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f002 fba3 	bl	80056ba <USB_DevDisconnect>

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002fae:	4b05      	ldr	r3, [pc, #20]	@ (8002fc4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	10000003 	.word	0x10000003

08002fc8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fcc:	4b05      	ldr	r3, [pc, #20]	@ (8002fe4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a04      	ldr	r2, [pc, #16]	@ (8002fe4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fd6:	6013      	str	r3, [r2, #0]
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40007000 	.word	0x40007000

08002fe8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ff2:	4b23      	ldr	r3, [pc, #140]	@ (8003080 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff6:	4a22      	ldr	r2, [pc, #136]	@ (8003080 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ffe:	4b20      	ldr	r3, [pc, #128]	@ (8003080 <HAL_PWREx_EnableOverDrive+0x98>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003006:	603b      	str	r3, [r7, #0]
 8003008:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800300a:	4b1e      	ldr	r3, [pc, #120]	@ (8003084 <HAL_PWREx_EnableOverDrive+0x9c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a1d      	ldr	r2, [pc, #116]	@ (8003084 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003014:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003016:	f7fe f94f 	bl	80012b8 <HAL_GetTick>
 800301a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800301c:	e009      	b.n	8003032 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800301e:	f7fe f94b 	bl	80012b8 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800302c:	d901      	bls.n	8003032 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e022      	b.n	8003078 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003032:	4b14      	ldr	r3, [pc, #80]	@ (8003084 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800303a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800303e:	d1ee      	bne.n	800301e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003040:	4b10      	ldr	r3, [pc, #64]	@ (8003084 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a0f      	ldr	r2, [pc, #60]	@ (8003084 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003046:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800304a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800304c:	f7fe f934 	bl	80012b8 <HAL_GetTick>
 8003050:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003052:	e009      	b.n	8003068 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003054:	f7fe f930 	bl	80012b8 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003062:	d901      	bls.n	8003068 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e007      	b.n	8003078 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003068:	4b06      	ldr	r3, [pc, #24]	@ (8003084 <HAL_PWREx_EnableOverDrive+0x9c>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003070:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003074:	d1ee      	bne.n	8003054 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40023800 	.word	0x40023800
 8003084:	40007000 	.word	0x40007000

08003088 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003090:	2300      	movs	r3, #0
 8003092:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e29b      	b.n	80035d6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 8087 	beq.w	80031ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030ac:	4b96      	ldr	r3, [pc, #600]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 030c 	and.w	r3, r3, #12
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d00c      	beq.n	80030d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030b8:	4b93      	ldr	r3, [pc, #588]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 030c 	and.w	r3, r3, #12
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d112      	bne.n	80030ea <HAL_RCC_OscConfig+0x62>
 80030c4:	4b90      	ldr	r3, [pc, #576]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030d0:	d10b      	bne.n	80030ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d2:	4b8d      	ldr	r3, [pc, #564]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d06c      	beq.n	80031b8 <HAL_RCC_OscConfig+0x130>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d168      	bne.n	80031b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e275      	b.n	80035d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030f2:	d106      	bne.n	8003102 <HAL_RCC_OscConfig+0x7a>
 80030f4:	4b84      	ldr	r3, [pc, #528]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a83      	ldr	r2, [pc, #524]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 80030fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	e02e      	b.n	8003160 <HAL_RCC_OscConfig+0xd8>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10c      	bne.n	8003124 <HAL_RCC_OscConfig+0x9c>
 800310a:	4b7f      	ldr	r3, [pc, #508]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a7e      	ldr	r2, [pc, #504]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 8003110:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	4b7c      	ldr	r3, [pc, #496]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a7b      	ldr	r2, [pc, #492]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 800311c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	e01d      	b.n	8003160 <HAL_RCC_OscConfig+0xd8>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800312c:	d10c      	bne.n	8003148 <HAL_RCC_OscConfig+0xc0>
 800312e:	4b76      	ldr	r3, [pc, #472]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a75      	ldr	r2, [pc, #468]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 8003134:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	4b73      	ldr	r3, [pc, #460]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a72      	ldr	r2, [pc, #456]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 8003140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	e00b      	b.n	8003160 <HAL_RCC_OscConfig+0xd8>
 8003148:	4b6f      	ldr	r3, [pc, #444]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a6e      	ldr	r2, [pc, #440]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 800314e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	4b6c      	ldr	r3, [pc, #432]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a6b      	ldr	r2, [pc, #428]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 800315a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800315e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d013      	beq.n	8003190 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003168:	f7fe f8a6 	bl	80012b8 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003170:	f7fe f8a2 	bl	80012b8 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b64      	cmp	r3, #100	@ 0x64
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e229      	b.n	80035d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003182:	4b61      	ldr	r3, [pc, #388]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0xe8>
 800318e:	e014      	b.n	80031ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003190:	f7fe f892 	bl	80012b8 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003198:	f7fe f88e 	bl	80012b8 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	@ 0x64
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e215      	b.n	80035d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031aa:	4b57      	ldr	r3, [pc, #348]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f0      	bne.n	8003198 <HAL_RCC_OscConfig+0x110>
 80031b6:	e000      	b.n	80031ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d069      	beq.n	800329a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031c6:	4b50      	ldr	r3, [pc, #320]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00b      	beq.n	80031ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031d2:	4b4d      	ldr	r3, [pc, #308]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d11c      	bne.n	8003218 <HAL_RCC_OscConfig+0x190>
 80031de:	4b4a      	ldr	r3, [pc, #296]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d116      	bne.n	8003218 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ea:	4b47      	ldr	r3, [pc, #284]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d005      	beq.n	8003202 <HAL_RCC_OscConfig+0x17a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d001      	beq.n	8003202 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e1e9      	b.n	80035d6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003202:	4b41      	ldr	r3, [pc, #260]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	493d      	ldr	r1, [pc, #244]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 8003212:	4313      	orrs	r3, r2
 8003214:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003216:	e040      	b.n	800329a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d023      	beq.n	8003268 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003220:	4b39      	ldr	r3, [pc, #228]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a38      	ldr	r2, [pc, #224]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322c:	f7fe f844 	bl	80012b8 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003234:	f7fe f840 	bl	80012b8 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e1c7      	b.n	80035d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003246:	4b30      	ldr	r3, [pc, #192]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0f0      	beq.n	8003234 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003252:	4b2d      	ldr	r3, [pc, #180]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4929      	ldr	r1, [pc, #164]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 8003262:	4313      	orrs	r3, r2
 8003264:	600b      	str	r3, [r1, #0]
 8003266:	e018      	b.n	800329a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003268:	4b27      	ldr	r3, [pc, #156]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a26      	ldr	r2, [pc, #152]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 800326e:	f023 0301 	bic.w	r3, r3, #1
 8003272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fe f820 	bl	80012b8 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800327c:	f7fe f81c 	bl	80012b8 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e1a3      	b.n	80035d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328e:	4b1e      	ldr	r3, [pc, #120]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d038      	beq.n	8003318 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d019      	beq.n	80032e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ae:	4b16      	ldr	r3, [pc, #88]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 80032b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032b2:	4a15      	ldr	r2, [pc, #84]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 80032b4:	f043 0301 	orr.w	r3, r3, #1
 80032b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ba:	f7fd fffd 	bl	80012b8 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c2:	f7fd fff9 	bl	80012b8 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e180      	b.n	80035d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 80032d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x23a>
 80032e0:	e01a      	b.n	8003318 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032e2:	4b09      	ldr	r3, [pc, #36]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 80032e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032e6:	4a08      	ldr	r2, [pc, #32]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 80032e8:	f023 0301 	bic.w	r3, r3, #1
 80032ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ee:	f7fd ffe3 	bl	80012b8 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f4:	e00a      	b.n	800330c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f6:	f7fd ffdf 	bl	80012b8 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d903      	bls.n	800330c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e166      	b.n	80035d6 <HAL_RCC_OscConfig+0x54e>
 8003308:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800330c:	4b92      	ldr	r3, [pc, #584]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 800330e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1ee      	bne.n	80032f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 80a4 	beq.w	800346e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003326:	4b8c      	ldr	r3, [pc, #560]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10d      	bne.n	800334e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003332:	4b89      	ldr	r3, [pc, #548]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	4a88      	ldr	r2, [pc, #544]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 8003338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800333c:	6413      	str	r3, [r2, #64]	@ 0x40
 800333e:	4b86      	ldr	r3, [pc, #536]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003346:	60bb      	str	r3, [r7, #8]
 8003348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800334a:	2301      	movs	r3, #1
 800334c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800334e:	4b83      	ldr	r3, [pc, #524]	@ (800355c <HAL_RCC_OscConfig+0x4d4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003356:	2b00      	cmp	r3, #0
 8003358:	d118      	bne.n	800338c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800335a:	4b80      	ldr	r3, [pc, #512]	@ (800355c <HAL_RCC_OscConfig+0x4d4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a7f      	ldr	r2, [pc, #508]	@ (800355c <HAL_RCC_OscConfig+0x4d4>)
 8003360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003366:	f7fd ffa7 	bl	80012b8 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336e:	f7fd ffa3 	bl	80012b8 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b64      	cmp	r3, #100	@ 0x64
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e12a      	b.n	80035d6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003380:	4b76      	ldr	r3, [pc, #472]	@ (800355c <HAL_RCC_OscConfig+0x4d4>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d106      	bne.n	80033a2 <HAL_RCC_OscConfig+0x31a>
 8003394:	4b70      	ldr	r3, [pc, #448]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003398:	4a6f      	ldr	r2, [pc, #444]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	6713      	str	r3, [r2, #112]	@ 0x70
 80033a0:	e02d      	b.n	80033fe <HAL_RCC_OscConfig+0x376>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10c      	bne.n	80033c4 <HAL_RCC_OscConfig+0x33c>
 80033aa:	4b6b      	ldr	r3, [pc, #428]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ae:	4a6a      	ldr	r2, [pc, #424]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80033b6:	4b68      	ldr	r3, [pc, #416]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ba:	4a67      	ldr	r2, [pc, #412]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 80033bc:	f023 0304 	bic.w	r3, r3, #4
 80033c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80033c2:	e01c      	b.n	80033fe <HAL_RCC_OscConfig+0x376>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	2b05      	cmp	r3, #5
 80033ca:	d10c      	bne.n	80033e6 <HAL_RCC_OscConfig+0x35e>
 80033cc:	4b62      	ldr	r3, [pc, #392]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 80033ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d0:	4a61      	ldr	r2, [pc, #388]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 80033d2:	f043 0304 	orr.w	r3, r3, #4
 80033d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80033d8:	4b5f      	ldr	r3, [pc, #380]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 80033da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033dc:	4a5e      	ldr	r2, [pc, #376]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80033e4:	e00b      	b.n	80033fe <HAL_RCC_OscConfig+0x376>
 80033e6:	4b5c      	ldr	r3, [pc, #368]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ea:	4a5b      	ldr	r2, [pc, #364]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 80033ec:	f023 0301 	bic.w	r3, r3, #1
 80033f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80033f2:	4b59      	ldr	r3, [pc, #356]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 80033f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f6:	4a58      	ldr	r2, [pc, #352]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 80033f8:	f023 0304 	bic.w	r3, r3, #4
 80033fc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d015      	beq.n	8003432 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003406:	f7fd ff57 	bl	80012b8 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340c:	e00a      	b.n	8003424 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340e:	f7fd ff53 	bl	80012b8 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e0d8      	b.n	80035d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003424:	4b4c      	ldr	r3, [pc, #304]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 8003426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0ee      	beq.n	800340e <HAL_RCC_OscConfig+0x386>
 8003430:	e014      	b.n	800345c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003432:	f7fd ff41 	bl	80012b8 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003438:	e00a      	b.n	8003450 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343a:	f7fd ff3d 	bl	80012b8 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003448:	4293      	cmp	r3, r2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e0c2      	b.n	80035d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003450:	4b41      	ldr	r3, [pc, #260]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 8003452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1ee      	bne.n	800343a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800345c:	7dfb      	ldrb	r3, [r7, #23]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d105      	bne.n	800346e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003462:	4b3d      	ldr	r3, [pc, #244]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003466:	4a3c      	ldr	r2, [pc, #240]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 8003468:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800346c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 80ae 	beq.w	80035d4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003478:	4b37      	ldr	r3, [pc, #220]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 030c 	and.w	r3, r3, #12
 8003480:	2b08      	cmp	r3, #8
 8003482:	d06d      	beq.n	8003560 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d14b      	bne.n	8003524 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348c:	4b32      	ldr	r3, [pc, #200]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a31      	ldr	r2, [pc, #196]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 8003492:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003498:	f7fd ff0e 	bl	80012b8 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a0:	f7fd ff0a 	bl	80012b8 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e091      	b.n	80035d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b2:	4b29      	ldr	r3, [pc, #164]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f0      	bne.n	80034a0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69da      	ldr	r2, [r3, #28]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034cc:	019b      	lsls	r3, r3, #6
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	3b01      	subs	r3, #1
 80034d8:	041b      	lsls	r3, r3, #16
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e0:	061b      	lsls	r3, r3, #24
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e8:	071b      	lsls	r3, r3, #28
 80034ea:	491b      	ldr	r1, [pc, #108]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034f0:	4b19      	ldr	r3, [pc, #100]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a18      	ldr	r2, [pc, #96]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 80034f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fd fedc 	bl	80012b8 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003504:	f7fd fed8 	bl	80012b8 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e05f      	b.n	80035d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003516:	4b10      	ldr	r3, [pc, #64]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0f0      	beq.n	8003504 <HAL_RCC_OscConfig+0x47c>
 8003522:	e057      	b.n	80035d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003524:	4b0c      	ldr	r3, [pc, #48]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a0b      	ldr	r2, [pc, #44]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 800352a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800352e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003530:	f7fd fec2 	bl	80012b8 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003538:	f7fd febe 	bl	80012b8 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e045      	b.n	80035d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354a:	4b03      	ldr	r3, [pc, #12]	@ (8003558 <HAL_RCC_OscConfig+0x4d0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x4b0>
 8003556:	e03d      	b.n	80035d4 <HAL_RCC_OscConfig+0x54c>
 8003558:	40023800 	.word	0x40023800
 800355c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003560:	4b1f      	ldr	r3, [pc, #124]	@ (80035e0 <HAL_RCC_OscConfig+0x558>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d030      	beq.n	80035d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003578:	429a      	cmp	r2, r3
 800357a:	d129      	bne.n	80035d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003586:	429a      	cmp	r2, r3
 8003588:	d122      	bne.n	80035d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003590:	4013      	ands	r3, r2
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003596:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003598:	4293      	cmp	r3, r2
 800359a:	d119      	bne.n	80035d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a6:	085b      	lsrs	r3, r3, #1
 80035a8:	3b01      	subs	r3, #1
 80035aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d10f      	bne.n	80035d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035bc:	429a      	cmp	r2, r3
 80035be:	d107      	bne.n	80035d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d001      	beq.n	80035d4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800

080035e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e0d0      	b.n	800379e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035fc:	4b6a      	ldr	r3, [pc, #424]	@ (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 030f 	and.w	r3, r3, #15
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d910      	bls.n	800362c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360a:	4b67      	ldr	r3, [pc, #412]	@ (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f023 020f 	bic.w	r2, r3, #15
 8003612:	4965      	ldr	r1, [pc, #404]	@ (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	4313      	orrs	r3, r2
 8003618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800361a:	4b63      	ldr	r3, [pc, #396]	@ (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d001      	beq.n	800362c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e0b8      	b.n	800379e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d020      	beq.n	800367a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003644:	4b59      	ldr	r3, [pc, #356]	@ (80037ac <HAL_RCC_ClockConfig+0x1c8>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	4a58      	ldr	r2, [pc, #352]	@ (80037ac <HAL_RCC_ClockConfig+0x1c8>)
 800364a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800364e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800365c:	4b53      	ldr	r3, [pc, #332]	@ (80037ac <HAL_RCC_ClockConfig+0x1c8>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	4a52      	ldr	r2, [pc, #328]	@ (80037ac <HAL_RCC_ClockConfig+0x1c8>)
 8003662:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003666:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003668:	4b50      	ldr	r3, [pc, #320]	@ (80037ac <HAL_RCC_ClockConfig+0x1c8>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	494d      	ldr	r1, [pc, #308]	@ (80037ac <HAL_RCC_ClockConfig+0x1c8>)
 8003676:	4313      	orrs	r3, r2
 8003678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d040      	beq.n	8003708 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d107      	bne.n	800369e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368e:	4b47      	ldr	r3, [pc, #284]	@ (80037ac <HAL_RCC_ClockConfig+0x1c8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d115      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e07f      	b.n	800379e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d107      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a6:	4b41      	ldr	r3, [pc, #260]	@ (80037ac <HAL_RCC_ClockConfig+0x1c8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d109      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e073      	b.n	800379e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b6:	4b3d      	ldr	r3, [pc, #244]	@ (80037ac <HAL_RCC_ClockConfig+0x1c8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e06b      	b.n	800379e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036c6:	4b39      	ldr	r3, [pc, #228]	@ (80037ac <HAL_RCC_ClockConfig+0x1c8>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f023 0203 	bic.w	r2, r3, #3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	4936      	ldr	r1, [pc, #216]	@ (80037ac <HAL_RCC_ClockConfig+0x1c8>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d8:	f7fd fdee 	bl	80012b8 <HAL_GetTick>
 80036dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036de:	e00a      	b.n	80036f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e0:	f7fd fdea 	bl	80012b8 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e053      	b.n	800379e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f6:	4b2d      	ldr	r3, [pc, #180]	@ (80037ac <HAL_RCC_ClockConfig+0x1c8>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 020c 	and.w	r2, r3, #12
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	429a      	cmp	r2, r3
 8003706:	d1eb      	bne.n	80036e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003708:	4b27      	ldr	r3, [pc, #156]	@ (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d210      	bcs.n	8003738 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003716:	4b24      	ldr	r3, [pc, #144]	@ (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f023 020f 	bic.w	r2, r3, #15
 800371e:	4922      	ldr	r1, [pc, #136]	@ (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	4313      	orrs	r3, r2
 8003724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003726:	4b20      	ldr	r3, [pc, #128]	@ (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	d001      	beq.n	8003738 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e032      	b.n	800379e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003744:	4b19      	ldr	r3, [pc, #100]	@ (80037ac <HAL_RCC_ClockConfig+0x1c8>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4916      	ldr	r1, [pc, #88]	@ (80037ac <HAL_RCC_ClockConfig+0x1c8>)
 8003752:	4313      	orrs	r3, r2
 8003754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d009      	beq.n	8003776 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003762:	4b12      	ldr	r3, [pc, #72]	@ (80037ac <HAL_RCC_ClockConfig+0x1c8>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	490e      	ldr	r1, [pc, #56]	@ (80037ac <HAL_RCC_ClockConfig+0x1c8>)
 8003772:	4313      	orrs	r3, r2
 8003774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003776:	f000 f821 	bl	80037bc <HAL_RCC_GetSysClockFreq>
 800377a:	4602      	mov	r2, r0
 800377c:	4b0b      	ldr	r3, [pc, #44]	@ (80037ac <HAL_RCC_ClockConfig+0x1c8>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	490a      	ldr	r1, [pc, #40]	@ (80037b0 <HAL_RCC_ClockConfig+0x1cc>)
 8003788:	5ccb      	ldrb	r3, [r1, r3]
 800378a:	fa22 f303 	lsr.w	r3, r2, r3
 800378e:	4a09      	ldr	r2, [pc, #36]	@ (80037b4 <HAL_RCC_ClockConfig+0x1d0>)
 8003790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003792:	4b09      	ldr	r3, [pc, #36]	@ (80037b8 <HAL_RCC_ClockConfig+0x1d4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f7fd fab8 	bl	8000d0c <HAL_InitTick>

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40023c00 	.word	0x40023c00
 80037ac:	40023800 	.word	0x40023800
 80037b0:	08018098 	.word	0x08018098
 80037b4:	20000000 	.word	0x20000000
 80037b8:	20000004 	.word	0x20000004

080037bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037c0:	b090      	sub	sp, #64	@ 0x40
 80037c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80037c8:	2300      	movs	r3, #0
 80037ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037cc:	2300      	movs	r3, #0
 80037ce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037d4:	4b59      	ldr	r3, [pc, #356]	@ (800393c <HAL_RCC_GetSysClockFreq+0x180>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 030c 	and.w	r3, r3, #12
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d00d      	beq.n	80037fc <HAL_RCC_GetSysClockFreq+0x40>
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	f200 80a1 	bhi.w	8003928 <HAL_RCC_GetSysClockFreq+0x16c>
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <HAL_RCC_GetSysClockFreq+0x34>
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d003      	beq.n	80037f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80037ee:	e09b      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037f0:	4b53      	ldr	r3, [pc, #332]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x184>)
 80037f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037f4:	e09b      	b.n	800392e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037f6:	4b53      	ldr	r3, [pc, #332]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x188>)
 80037f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037fa:	e098      	b.n	800392e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037fc:	4b4f      	ldr	r3, [pc, #316]	@ (800393c <HAL_RCC_GetSysClockFreq+0x180>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003804:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003806:	4b4d      	ldr	r3, [pc, #308]	@ (800393c <HAL_RCC_GetSysClockFreq+0x180>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d028      	beq.n	8003864 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003812:	4b4a      	ldr	r3, [pc, #296]	@ (800393c <HAL_RCC_GetSysClockFreq+0x180>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	099b      	lsrs	r3, r3, #6
 8003818:	2200      	movs	r2, #0
 800381a:	623b      	str	r3, [r7, #32]
 800381c:	627a      	str	r2, [r7, #36]	@ 0x24
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003824:	2100      	movs	r1, #0
 8003826:	4b47      	ldr	r3, [pc, #284]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x188>)
 8003828:	fb03 f201 	mul.w	r2, r3, r1
 800382c:	2300      	movs	r3, #0
 800382e:	fb00 f303 	mul.w	r3, r0, r3
 8003832:	4413      	add	r3, r2
 8003834:	4a43      	ldr	r2, [pc, #268]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x188>)
 8003836:	fba0 1202 	umull	r1, r2, r0, r2
 800383a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800383c:	460a      	mov	r2, r1
 800383e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003840:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003842:	4413      	add	r3, r2
 8003844:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003848:	2200      	movs	r2, #0
 800384a:	61bb      	str	r3, [r7, #24]
 800384c:	61fa      	str	r2, [r7, #28]
 800384e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003852:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003856:	f7fc fd43 	bl	80002e0 <__aeabi_uldivmod>
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	4613      	mov	r3, r2
 8003860:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003862:	e053      	b.n	800390c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003864:	4b35      	ldr	r3, [pc, #212]	@ (800393c <HAL_RCC_GetSysClockFreq+0x180>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	099b      	lsrs	r3, r3, #6
 800386a:	2200      	movs	r2, #0
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	617a      	str	r2, [r7, #20]
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003876:	f04f 0b00 	mov.w	fp, #0
 800387a:	4652      	mov	r2, sl
 800387c:	465b      	mov	r3, fp
 800387e:	f04f 0000 	mov.w	r0, #0
 8003882:	f04f 0100 	mov.w	r1, #0
 8003886:	0159      	lsls	r1, r3, #5
 8003888:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800388c:	0150      	lsls	r0, r2, #5
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	ebb2 080a 	subs.w	r8, r2, sl
 8003896:	eb63 090b 	sbc.w	r9, r3, fp
 800389a:	f04f 0200 	mov.w	r2, #0
 800389e:	f04f 0300 	mov.w	r3, #0
 80038a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80038a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80038aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80038ae:	ebb2 0408 	subs.w	r4, r2, r8
 80038b2:	eb63 0509 	sbc.w	r5, r3, r9
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	00eb      	lsls	r3, r5, #3
 80038c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038c4:	00e2      	lsls	r2, r4, #3
 80038c6:	4614      	mov	r4, r2
 80038c8:	461d      	mov	r5, r3
 80038ca:	eb14 030a 	adds.w	r3, r4, sl
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	eb45 030b 	adc.w	r3, r5, fp
 80038d4:	607b      	str	r3, [r7, #4]
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038e2:	4629      	mov	r1, r5
 80038e4:	028b      	lsls	r3, r1, #10
 80038e6:	4621      	mov	r1, r4
 80038e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038ec:	4621      	mov	r1, r4
 80038ee:	028a      	lsls	r2, r1, #10
 80038f0:	4610      	mov	r0, r2
 80038f2:	4619      	mov	r1, r3
 80038f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f6:	2200      	movs	r2, #0
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	60fa      	str	r2, [r7, #12]
 80038fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003900:	f7fc fcee 	bl	80002e0 <__aeabi_uldivmod>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	4613      	mov	r3, r2
 800390a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800390c:	4b0b      	ldr	r3, [pc, #44]	@ (800393c <HAL_RCC_GetSysClockFreq+0x180>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	0c1b      	lsrs	r3, r3, #16
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	3301      	adds	r3, #1
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800391c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800391e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003920:	fbb2 f3f3 	udiv	r3, r2, r3
 8003924:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003926:	e002      	b.n	800392e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003928:	4b05      	ldr	r3, [pc, #20]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x184>)
 800392a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800392c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800392e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003930:	4618      	mov	r0, r3
 8003932:	3740      	adds	r7, #64	@ 0x40
 8003934:	46bd      	mov	sp, r7
 8003936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800393a:	bf00      	nop
 800393c:	40023800 	.word	0x40023800
 8003940:	00f42400 	.word	0x00f42400
 8003944:	017d7840 	.word	0x017d7840

08003948 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800394c:	4b03      	ldr	r3, [pc, #12]	@ (800395c <HAL_RCC_GetHCLKFreq+0x14>)
 800394e:	681b      	ldr	r3, [r3, #0]
}
 8003950:	4618      	mov	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	20000000 	.word	0x20000000

08003960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003964:	f7ff fff0 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 8003968:	4602      	mov	r2, r0
 800396a:	4b05      	ldr	r3, [pc, #20]	@ (8003980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	0a9b      	lsrs	r3, r3, #10
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	4903      	ldr	r1, [pc, #12]	@ (8003984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003976:	5ccb      	ldrb	r3, [r1, r3]
 8003978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800397c:	4618      	mov	r0, r3
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40023800 	.word	0x40023800
 8003984:	080180a8 	.word	0x080180a8

08003988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800398c:	f7ff ffdc 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 8003990:	4602      	mov	r2, r0
 8003992:	4b05      	ldr	r3, [pc, #20]	@ (80039a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	0b5b      	lsrs	r3, r3, #13
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	4903      	ldr	r1, [pc, #12]	@ (80039ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800399e:	5ccb      	ldrb	r3, [r1, r3]
 80039a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40023800 	.word	0x40023800
 80039ac:	080180a8 	.word	0x080180a8

080039b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	220f      	movs	r2, #15
 80039be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039c0:	4b12      	ldr	r3, [pc, #72]	@ (8003a0c <HAL_RCC_GetClockConfig+0x5c>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 0203 	and.w	r2, r3, #3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039cc:	4b0f      	ldr	r3, [pc, #60]	@ (8003a0c <HAL_RCC_GetClockConfig+0x5c>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039d8:	4b0c      	ldr	r3, [pc, #48]	@ (8003a0c <HAL_RCC_GetClockConfig+0x5c>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80039e4:	4b09      	ldr	r3, [pc, #36]	@ (8003a0c <HAL_RCC_GetClockConfig+0x5c>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	08db      	lsrs	r3, r3, #3
 80039ea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039f2:	4b07      	ldr	r3, [pc, #28]	@ (8003a10 <HAL_RCC_GetClockConfig+0x60>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 020f 	and.w	r2, r3, #15
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	601a      	str	r2, [r3, #0]
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40023c00 	.word	0x40023c00

08003a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d012      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a3c:	4b69      	ldr	r3, [pc, #420]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4a68      	ldr	r2, [pc, #416]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a42:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003a46:	6093      	str	r3, [r2, #8]
 8003a48:	4b66      	ldr	r3, [pc, #408]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a50:	4964      	ldr	r1, [pc, #400]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d017      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a6e:	4b5d      	ldr	r3, [pc, #372]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a74:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a7c:	4959      	ldr	r1, [pc, #356]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d017      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003aaa:	4b4e      	ldr	r3, [pc, #312]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ab0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab8:	494a      	ldr	r1, [pc, #296]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ac8:	d101      	bne.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003aca:	2301      	movs	r3, #1
 8003acc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 808b 	beq.w	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003af8:	4b3a      	ldr	r3, [pc, #232]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afc:	4a39      	ldr	r2, [pc, #228]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b02:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b04:	4b37      	ldr	r3, [pc, #220]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b10:	4b35      	ldr	r3, [pc, #212]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a34      	ldr	r2, [pc, #208]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b1c:	f7fd fbcc 	bl	80012b8 <HAL_GetTick>
 8003b20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b24:	f7fd fbc8 	bl	80012b8 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b64      	cmp	r3, #100	@ 0x64
 8003b30:	d901      	bls.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e38f      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b36:	4b2c      	ldr	r3, [pc, #176]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b42:	4b28      	ldr	r3, [pc, #160]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d035      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d02e      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b60:	4b20      	ldr	r3, [pc, #128]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b74:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b76:	4b1b      	ldr	r3, [pc, #108]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7a:	4a1a      	ldr	r2, [pc, #104]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b80:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b82:	4a18      	ldr	r2, [pc, #96]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b88:	4b16      	ldr	r3, [pc, #88]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d114      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b94:	f7fd fb90 	bl	80012b8 <HAL_GetTick>
 8003b98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9a:	e00a      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b9c:	f7fd fb8c 	bl	80012b8 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e351      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0ee      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bca:	d111      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003bcc:	4b05      	ldr	r3, [pc, #20]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003bd8:	4b04      	ldr	r3, [pc, #16]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003bda:	400b      	ands	r3, r1
 8003bdc:	4901      	ldr	r1, [pc, #4]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	608b      	str	r3, [r1, #8]
 8003be2:	e00b      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003be4:	40023800 	.word	0x40023800
 8003be8:	40007000 	.word	0x40007000
 8003bec:	0ffffcff 	.word	0x0ffffcff
 8003bf0:	4bac      	ldr	r3, [pc, #688]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	4aab      	ldr	r2, [pc, #684]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bf6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003bfa:	6093      	str	r3, [r2, #8]
 8003bfc:	4ba9      	ldr	r3, [pc, #676]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bfe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c08:	49a6      	ldr	r1, [pc, #664]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0310 	and.w	r3, r3, #16
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d010      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c1a:	4ba2      	ldr	r3, [pc, #648]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c20:	4aa0      	ldr	r2, [pc, #640]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003c2a:	4b9e      	ldr	r3, [pc, #632]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c34:	499b      	ldr	r1, [pc, #620]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c48:	4b96      	ldr	r3, [pc, #600]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c56:	4993      	ldr	r1, [pc, #588]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c6a:	4b8e      	ldr	r3, [pc, #568]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c70:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c78:	498a      	ldr	r1, [pc, #552]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c8c:	4b85      	ldr	r3, [pc, #532]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c9a:	4982      	ldr	r1, [pc, #520]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cae:	4b7d      	ldr	r3, [pc, #500]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cbc:	4979      	ldr	r1, [pc, #484]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cd0:	4b74      	ldr	r3, [pc, #464]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd6:	f023 0203 	bic.w	r2, r3, #3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cde:	4971      	ldr	r1, [pc, #452]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cf2:	4b6c      	ldr	r3, [pc, #432]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf8:	f023 020c 	bic.w	r2, r3, #12
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d00:	4968      	ldr	r1, [pc, #416]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d14:	4b63      	ldr	r3, [pc, #396]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d1a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d22:	4960      	ldr	r1, [pc, #384]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d36:	4b5b      	ldr	r3, [pc, #364]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d3c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d44:	4957      	ldr	r1, [pc, #348]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d58:	4b52      	ldr	r3, [pc, #328]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d5e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d66:	494f      	ldr	r1, [pc, #316]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d80:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d88:	4946      	ldr	r1, [pc, #280]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00a      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d9c:	4b41      	ldr	r3, [pc, #260]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003daa:	493e      	ldr	r1, [pc, #248]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003dbe:	4b39      	ldr	r3, [pc, #228]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dcc:	4935      	ldr	r1, [pc, #212]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00a      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003de0:	4b30      	ldr	r3, [pc, #192]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dee:	492d      	ldr	r1, [pc, #180]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d011      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e02:	4b28      	ldr	r3, [pc, #160]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e08:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e10:	4924      	ldr	r1, [pc, #144]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e20:	d101      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e22:	2301      	movs	r3, #1
 8003e24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e32:	2301      	movs	r3, #1
 8003e34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e42:	4b18      	ldr	r3, [pc, #96]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e48:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e50:	4914      	ldr	r1, [pc, #80]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00b      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e64:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e74:	490b      	ldr	r1, [pc, #44]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00f      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003e88:	4b06      	ldr	r3, [pc, #24]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e8e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e98:	4902      	ldr	r1, [pc, #8]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003ea0:	e002      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003ea2:	bf00      	nop
 8003ea4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00b      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003eb4:	4b8a      	ldr	r3, [pc, #552]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec4:	4986      	ldr	r1, [pc, #536]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00b      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ed8:	4b81      	ldr	r3, [pc, #516]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ede:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ee8:	497d      	ldr	r1, [pc, #500]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d006      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 80d6 	beq.w	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f04:	4b76      	ldr	r3, [pc, #472]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a75      	ldr	r2, [pc, #468]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f10:	f7fd f9d2 	bl	80012b8 <HAL_GetTick>
 8003f14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f18:	f7fd f9ce 	bl	80012b8 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b64      	cmp	r3, #100	@ 0x64
 8003f24:	d901      	bls.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e195      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f2a:	4b6d      	ldr	r3, [pc, #436]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f0      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d021      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d11d      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f4a:	4b65      	ldr	r3, [pc, #404]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f50:	0c1b      	lsrs	r3, r3, #16
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f58:	4b61      	ldr	r3, [pc, #388]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f5e:	0e1b      	lsrs	r3, r3, #24
 8003f60:	f003 030f 	and.w	r3, r3, #15
 8003f64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	019a      	lsls	r2, r3, #6
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	041b      	lsls	r3, r3, #16
 8003f70:	431a      	orrs	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	061b      	lsls	r3, r3, #24
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	071b      	lsls	r3, r3, #28
 8003f7e:	4958      	ldr	r1, [pc, #352]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d004      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f9a:	d00a      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d02e      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fb0:	d129      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003fb2:	4b4b      	ldr	r3, [pc, #300]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fb8:	0c1b      	lsrs	r3, r3, #16
 8003fba:	f003 0303 	and.w	r3, r3, #3
 8003fbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fc0:	4b47      	ldr	r3, [pc, #284]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fc6:	0f1b      	lsrs	r3, r3, #28
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	019a      	lsls	r2, r3, #6
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	041b      	lsls	r3, r3, #16
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	061b      	lsls	r3, r3, #24
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	071b      	lsls	r3, r3, #28
 8003fe6:	493e      	ldr	r1, [pc, #248]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003fee:	4b3c      	ldr	r3, [pc, #240]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ff4:	f023 021f 	bic.w	r2, r3, #31
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	4938      	ldr	r1, [pc, #224]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d01d      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004012:	4b33      	ldr	r3, [pc, #204]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004014:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004018:	0e1b      	lsrs	r3, r3, #24
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004020:	4b2f      	ldr	r3, [pc, #188]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004022:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004026:	0f1b      	lsrs	r3, r3, #28
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	019a      	lsls	r2, r3, #6
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	041b      	lsls	r3, r3, #16
 800403a:	431a      	orrs	r2, r3
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	061b      	lsls	r3, r3, #24
 8004040:	431a      	orrs	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	071b      	lsls	r3, r3, #28
 8004046:	4926      	ldr	r1, [pc, #152]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d011      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	019a      	lsls	r2, r3, #6
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	041b      	lsls	r3, r3, #16
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	061b      	lsls	r3, r3, #24
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	071b      	lsls	r3, r3, #28
 8004076:	491a      	ldr	r1, [pc, #104]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800407e:	4b18      	ldr	r3, [pc, #96]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a17      	ldr	r2, [pc, #92]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004084:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800408a:	f7fd f915 	bl	80012b8 <HAL_GetTick>
 800408e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004090:	e008      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004092:	f7fd f911 	bl	80012b8 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b64      	cmp	r3, #100	@ 0x64
 800409e:	d901      	bls.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e0d8      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040a4:	4b0e      	ldr	r3, [pc, #56]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	f040 80ce 	bne.w	8004254 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80040b8:	4b09      	ldr	r3, [pc, #36]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a08      	ldr	r2, [pc, #32]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c4:	f7fd f8f8 	bl	80012b8 <HAL_GetTick>
 80040c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040ca:	e00b      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040cc:	f7fd f8f4 	bl	80012b8 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b64      	cmp	r3, #100	@ 0x64
 80040d8:	d904      	bls.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e0bb      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80040de:	bf00      	nop
 80040e0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040e4:	4b5e      	ldr	r3, [pc, #376]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040f0:	d0ec      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004102:	2b00      	cmp	r3, #0
 8004104:	d009      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800410e:	2b00      	cmp	r3, #0
 8004110:	d02e      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004116:	2b00      	cmp	r3, #0
 8004118:	d12a      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800411a:	4b51      	ldr	r3, [pc, #324]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800411c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004120:	0c1b      	lsrs	r3, r3, #16
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004128:	4b4d      	ldr	r3, [pc, #308]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412e:	0f1b      	lsrs	r3, r3, #28
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	019a      	lsls	r2, r3, #6
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	041b      	lsls	r3, r3, #16
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	061b      	lsls	r3, r3, #24
 8004148:	431a      	orrs	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	071b      	lsls	r3, r3, #28
 800414e:	4944      	ldr	r1, [pc, #272]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004156:	4b42      	ldr	r3, [pc, #264]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004158:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800415c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004164:	3b01      	subs	r3, #1
 8004166:	021b      	lsls	r3, r3, #8
 8004168:	493d      	ldr	r1, [pc, #244]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d022      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004180:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004184:	d11d      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004186:	4b36      	ldr	r3, [pc, #216]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800418c:	0e1b      	lsrs	r3, r3, #24
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004194:	4b32      	ldr	r3, [pc, #200]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419a:	0f1b      	lsrs	r3, r3, #28
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	019a      	lsls	r2, r3, #6
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	041b      	lsls	r3, r3, #16
 80041ae:	431a      	orrs	r2, r3
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	061b      	lsls	r3, r3, #24
 80041b4:	431a      	orrs	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	071b      	lsls	r3, r3, #28
 80041ba:	4929      	ldr	r1, [pc, #164]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d028      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041ce:	4b24      	ldr	r3, [pc, #144]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d4:	0e1b      	lsrs	r3, r3, #24
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041dc:	4b20      	ldr	r3, [pc, #128]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e2:	0c1b      	lsrs	r3, r3, #16
 80041e4:	f003 0303 	and.w	r3, r3, #3
 80041e8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	019a      	lsls	r2, r3, #6
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	041b      	lsls	r3, r3, #16
 80041f4:	431a      	orrs	r2, r3
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	061b      	lsls	r3, r3, #24
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	071b      	lsls	r3, r3, #28
 8004202:	4917      	ldr	r1, [pc, #92]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800420a:	4b15      	ldr	r3, [pc, #84]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800420c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004210:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	4911      	ldr	r1, [pc, #68]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004220:	4b0f      	ldr	r3, [pc, #60]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a0e      	ldr	r2, [pc, #56]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004226:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800422a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800422c:	f7fd f844 	bl	80012b8 <HAL_GetTick>
 8004230:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004234:	f7fd f840 	bl	80012b8 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b64      	cmp	r3, #100	@ 0x64
 8004240:	d901      	bls.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e007      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004246:	4b06      	ldr	r3, [pc, #24]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800424e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004252:	d1ef      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3720      	adds	r7, #32
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40023800 	.word	0x40023800

08004264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e049      	b.n	800430a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d106      	bne.n	8004290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f841 	bl	8004312 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3304      	adds	r3, #4
 80042a0:	4619      	mov	r1, r3
 80042a2:	4610      	mov	r0, r2
 80042a4:	f000 f9e8 	bl	8004678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004312:	b480      	push	{r7}
 8004314:	b083      	sub	sp, #12
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
	...

08004328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b01      	cmp	r3, #1
 800433a:	d001      	beq.n	8004340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e054      	b.n	80043ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0201 	orr.w	r2, r2, #1
 8004356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a26      	ldr	r2, [pc, #152]	@ (80043f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d022      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x80>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800436a:	d01d      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x80>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a22      	ldr	r2, [pc, #136]	@ (80043fc <HAL_TIM_Base_Start_IT+0xd4>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d018      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x80>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a21      	ldr	r2, [pc, #132]	@ (8004400 <HAL_TIM_Base_Start_IT+0xd8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d013      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x80>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1f      	ldr	r2, [pc, #124]	@ (8004404 <HAL_TIM_Base_Start_IT+0xdc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00e      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x80>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1e      	ldr	r2, [pc, #120]	@ (8004408 <HAL_TIM_Base_Start_IT+0xe0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d009      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x80>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a1c      	ldr	r2, [pc, #112]	@ (800440c <HAL_TIM_Base_Start_IT+0xe4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d004      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x80>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004410 <HAL_TIM_Base_Start_IT+0xe8>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d115      	bne.n	80043d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	4b19      	ldr	r3, [pc, #100]	@ (8004414 <HAL_TIM_Base_Start_IT+0xec>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b06      	cmp	r3, #6
 80043b8:	d015      	beq.n	80043e6 <HAL_TIM_Base_Start_IT+0xbe>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043c0:	d011      	beq.n	80043e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0201 	orr.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d2:	e008      	b.n	80043e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	e000      	b.n	80043e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40010000 	.word	0x40010000
 80043fc:	40000400 	.word	0x40000400
 8004400:	40000800 	.word	0x40000800
 8004404:	40000c00 	.word	0x40000c00
 8004408:	40010400 	.word	0x40010400
 800440c:	40014000 	.word	0x40014000
 8004410:	40001800 	.word	0x40001800
 8004414:	00010007 	.word	0x00010007

08004418 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d020      	beq.n	800447c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d01b      	beq.n	800447c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0202 	mvn.w	r2, #2
 800444c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f8e9 	bl	800463a <HAL_TIM_IC_CaptureCallback>
 8004468:	e005      	b.n	8004476 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f8db 	bl	8004626 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f8ec 	bl	800464e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	2b00      	cmp	r3, #0
 8004484:	d020      	beq.n	80044c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	d01b      	beq.n	80044c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f06f 0204 	mvn.w	r2, #4
 8004498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2202      	movs	r2, #2
 800449e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f8c3 	bl	800463a <HAL_TIM_IC_CaptureCallback>
 80044b4:	e005      	b.n	80044c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f8b5 	bl	8004626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f8c6 	bl	800464e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d020      	beq.n	8004514 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f003 0308 	and.w	r3, r3, #8
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d01b      	beq.n	8004514 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f06f 0208 	mvn.w	r2, #8
 80044e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2204      	movs	r2, #4
 80044ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f89d 	bl	800463a <HAL_TIM_IC_CaptureCallback>
 8004500:	e005      	b.n	800450e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f88f 	bl	8004626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f8a0 	bl	800464e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f003 0310 	and.w	r3, r3, #16
 800451a:	2b00      	cmp	r3, #0
 800451c:	d020      	beq.n	8004560 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f003 0310 	and.w	r3, r3, #16
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01b      	beq.n	8004560 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f06f 0210 	mvn.w	r2, #16
 8004530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2208      	movs	r2, #8
 8004536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f877 	bl	800463a <HAL_TIM_IC_CaptureCallback>
 800454c:	e005      	b.n	800455a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f869 	bl	8004626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f87a 	bl	800464e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00c      	beq.n	8004584 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d007      	beq.n	8004584 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f06f 0201 	mvn.w	r2, #1
 800457c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fc faaa 	bl	8000ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800458a:	2b00      	cmp	r3, #0
 800458c:	d104      	bne.n	8004598 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00c      	beq.n	80045b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d007      	beq.n	80045b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80045aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f913 	bl	80047d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00c      	beq.n	80045d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d007      	beq.n	80045d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80045ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f90b 	bl	80047ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00c      	beq.n	80045fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d007      	beq.n	80045fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f834 	bl	8004662 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f003 0320 	and.w	r3, r3, #32
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00c      	beq.n	800461e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b00      	cmp	r3, #0
 800460c:	d007      	beq.n	800461e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f06f 0220 	mvn.w	r2, #32
 8004616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f8d3 	bl	80047c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800461e:	bf00      	nop
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
	...

08004678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a43      	ldr	r2, [pc, #268]	@ (8004798 <TIM_Base_SetConfig+0x120>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d013      	beq.n	80046b8 <TIM_Base_SetConfig+0x40>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004696:	d00f      	beq.n	80046b8 <TIM_Base_SetConfig+0x40>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a40      	ldr	r2, [pc, #256]	@ (800479c <TIM_Base_SetConfig+0x124>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d00b      	beq.n	80046b8 <TIM_Base_SetConfig+0x40>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a3f      	ldr	r2, [pc, #252]	@ (80047a0 <TIM_Base_SetConfig+0x128>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d007      	beq.n	80046b8 <TIM_Base_SetConfig+0x40>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a3e      	ldr	r2, [pc, #248]	@ (80047a4 <TIM_Base_SetConfig+0x12c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d003      	beq.n	80046b8 <TIM_Base_SetConfig+0x40>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a3d      	ldr	r2, [pc, #244]	@ (80047a8 <TIM_Base_SetConfig+0x130>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d108      	bne.n	80046ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a32      	ldr	r2, [pc, #200]	@ (8004798 <TIM_Base_SetConfig+0x120>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d02b      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046d8:	d027      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a2f      	ldr	r2, [pc, #188]	@ (800479c <TIM_Base_SetConfig+0x124>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d023      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a2e      	ldr	r2, [pc, #184]	@ (80047a0 <TIM_Base_SetConfig+0x128>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d01f      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a2d      	ldr	r2, [pc, #180]	@ (80047a4 <TIM_Base_SetConfig+0x12c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d01b      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a2c      	ldr	r2, [pc, #176]	@ (80047a8 <TIM_Base_SetConfig+0x130>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d017      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a2b      	ldr	r2, [pc, #172]	@ (80047ac <TIM_Base_SetConfig+0x134>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d013      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a2a      	ldr	r2, [pc, #168]	@ (80047b0 <TIM_Base_SetConfig+0x138>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d00f      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a29      	ldr	r2, [pc, #164]	@ (80047b4 <TIM_Base_SetConfig+0x13c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00b      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a28      	ldr	r2, [pc, #160]	@ (80047b8 <TIM_Base_SetConfig+0x140>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d007      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a27      	ldr	r2, [pc, #156]	@ (80047bc <TIM_Base_SetConfig+0x144>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d003      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a26      	ldr	r2, [pc, #152]	@ (80047c0 <TIM_Base_SetConfig+0x148>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d108      	bne.n	800473c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	4313      	orrs	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	689a      	ldr	r2, [r3, #8]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a0e      	ldr	r2, [pc, #56]	@ (8004798 <TIM_Base_SetConfig+0x120>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d003      	beq.n	800476a <TIM_Base_SetConfig+0xf2>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a10      	ldr	r2, [pc, #64]	@ (80047a8 <TIM_Base_SetConfig+0x130>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d103      	bne.n	8004772 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	691a      	ldr	r2, [r3, #16]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f043 0204 	orr.w	r2, r3, #4
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	601a      	str	r2, [r3, #0]
}
 800478a:	bf00      	nop
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40010000 	.word	0x40010000
 800479c:	40000400 	.word	0x40000400
 80047a0:	40000800 	.word	0x40000800
 80047a4:	40000c00 	.word	0x40000c00
 80047a8:	40010400 	.word	0x40010400
 80047ac:	40014000 	.word	0x40014000
 80047b0:	40014400 	.word	0x40014400
 80047b4:	40014800 	.word	0x40014800
 80047b8:	40001800 	.word	0x40001800
 80047bc:	40001c00 	.word	0x40001c00
 80047c0:	40002000 	.word	0x40002000

080047c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e040      	b.n	8004894 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004816:	2b00      	cmp	r3, #0
 8004818:	d106      	bne.n	8004828 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7fc f998 	bl	8000b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2224      	movs	r2, #36	@ 0x24
 800482c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0201 	bic.w	r2, r2, #1
 800483c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fa8c 	bl	8004d64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f825 	bl	800489c <UART_SetConfig>
 8004852:	4603      	mov	r3, r0
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e01b      	b.n	8004894 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800486a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800487a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 fb0b 	bl	8004ea8 <UART_CheckIdleState>
 8004892:	4603      	mov	r3, r0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b088      	sub	sp, #32
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	4313      	orrs	r3, r2
 80048be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	4ba6      	ldr	r3, [pc, #664]	@ (8004b60 <UART_SetConfig+0x2c4>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6812      	ldr	r2, [r2, #0]
 80048ce:	6979      	ldr	r1, [r7, #20]
 80048d0:	430b      	orrs	r3, r1
 80048d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	430a      	orrs	r2, r1
 800490c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a94      	ldr	r2, [pc, #592]	@ (8004b64 <UART_SetConfig+0x2c8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d120      	bne.n	800495a <UART_SetConfig+0xbe>
 8004918:	4b93      	ldr	r3, [pc, #588]	@ (8004b68 <UART_SetConfig+0x2cc>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	2b03      	cmp	r3, #3
 8004924:	d816      	bhi.n	8004954 <UART_SetConfig+0xb8>
 8004926:	a201      	add	r2, pc, #4	@ (adr r2, 800492c <UART_SetConfig+0x90>)
 8004928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492c:	0800493d 	.word	0x0800493d
 8004930:	08004949 	.word	0x08004949
 8004934:	08004943 	.word	0x08004943
 8004938:	0800494f 	.word	0x0800494f
 800493c:	2301      	movs	r3, #1
 800493e:	77fb      	strb	r3, [r7, #31]
 8004940:	e150      	b.n	8004be4 <UART_SetConfig+0x348>
 8004942:	2302      	movs	r3, #2
 8004944:	77fb      	strb	r3, [r7, #31]
 8004946:	e14d      	b.n	8004be4 <UART_SetConfig+0x348>
 8004948:	2304      	movs	r3, #4
 800494a:	77fb      	strb	r3, [r7, #31]
 800494c:	e14a      	b.n	8004be4 <UART_SetConfig+0x348>
 800494e:	2308      	movs	r3, #8
 8004950:	77fb      	strb	r3, [r7, #31]
 8004952:	e147      	b.n	8004be4 <UART_SetConfig+0x348>
 8004954:	2310      	movs	r3, #16
 8004956:	77fb      	strb	r3, [r7, #31]
 8004958:	e144      	b.n	8004be4 <UART_SetConfig+0x348>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a83      	ldr	r2, [pc, #524]	@ (8004b6c <UART_SetConfig+0x2d0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d132      	bne.n	80049ca <UART_SetConfig+0x12e>
 8004964:	4b80      	ldr	r3, [pc, #512]	@ (8004b68 <UART_SetConfig+0x2cc>)
 8004966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496a:	f003 030c 	and.w	r3, r3, #12
 800496e:	2b0c      	cmp	r3, #12
 8004970:	d828      	bhi.n	80049c4 <UART_SetConfig+0x128>
 8004972:	a201      	add	r2, pc, #4	@ (adr r2, 8004978 <UART_SetConfig+0xdc>)
 8004974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004978:	080049ad 	.word	0x080049ad
 800497c:	080049c5 	.word	0x080049c5
 8004980:	080049c5 	.word	0x080049c5
 8004984:	080049c5 	.word	0x080049c5
 8004988:	080049b9 	.word	0x080049b9
 800498c:	080049c5 	.word	0x080049c5
 8004990:	080049c5 	.word	0x080049c5
 8004994:	080049c5 	.word	0x080049c5
 8004998:	080049b3 	.word	0x080049b3
 800499c:	080049c5 	.word	0x080049c5
 80049a0:	080049c5 	.word	0x080049c5
 80049a4:	080049c5 	.word	0x080049c5
 80049a8:	080049bf 	.word	0x080049bf
 80049ac:	2300      	movs	r3, #0
 80049ae:	77fb      	strb	r3, [r7, #31]
 80049b0:	e118      	b.n	8004be4 <UART_SetConfig+0x348>
 80049b2:	2302      	movs	r3, #2
 80049b4:	77fb      	strb	r3, [r7, #31]
 80049b6:	e115      	b.n	8004be4 <UART_SetConfig+0x348>
 80049b8:	2304      	movs	r3, #4
 80049ba:	77fb      	strb	r3, [r7, #31]
 80049bc:	e112      	b.n	8004be4 <UART_SetConfig+0x348>
 80049be:	2308      	movs	r3, #8
 80049c0:	77fb      	strb	r3, [r7, #31]
 80049c2:	e10f      	b.n	8004be4 <UART_SetConfig+0x348>
 80049c4:	2310      	movs	r3, #16
 80049c6:	77fb      	strb	r3, [r7, #31]
 80049c8:	e10c      	b.n	8004be4 <UART_SetConfig+0x348>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a68      	ldr	r2, [pc, #416]	@ (8004b70 <UART_SetConfig+0x2d4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d120      	bne.n	8004a16 <UART_SetConfig+0x17a>
 80049d4:	4b64      	ldr	r3, [pc, #400]	@ (8004b68 <UART_SetConfig+0x2cc>)
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049da:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80049de:	2b30      	cmp	r3, #48	@ 0x30
 80049e0:	d013      	beq.n	8004a0a <UART_SetConfig+0x16e>
 80049e2:	2b30      	cmp	r3, #48	@ 0x30
 80049e4:	d814      	bhi.n	8004a10 <UART_SetConfig+0x174>
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	d009      	beq.n	80049fe <UART_SetConfig+0x162>
 80049ea:	2b20      	cmp	r3, #32
 80049ec:	d810      	bhi.n	8004a10 <UART_SetConfig+0x174>
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <UART_SetConfig+0x15c>
 80049f2:	2b10      	cmp	r3, #16
 80049f4:	d006      	beq.n	8004a04 <UART_SetConfig+0x168>
 80049f6:	e00b      	b.n	8004a10 <UART_SetConfig+0x174>
 80049f8:	2300      	movs	r3, #0
 80049fa:	77fb      	strb	r3, [r7, #31]
 80049fc:	e0f2      	b.n	8004be4 <UART_SetConfig+0x348>
 80049fe:	2302      	movs	r3, #2
 8004a00:	77fb      	strb	r3, [r7, #31]
 8004a02:	e0ef      	b.n	8004be4 <UART_SetConfig+0x348>
 8004a04:	2304      	movs	r3, #4
 8004a06:	77fb      	strb	r3, [r7, #31]
 8004a08:	e0ec      	b.n	8004be4 <UART_SetConfig+0x348>
 8004a0a:	2308      	movs	r3, #8
 8004a0c:	77fb      	strb	r3, [r7, #31]
 8004a0e:	e0e9      	b.n	8004be4 <UART_SetConfig+0x348>
 8004a10:	2310      	movs	r3, #16
 8004a12:	77fb      	strb	r3, [r7, #31]
 8004a14:	e0e6      	b.n	8004be4 <UART_SetConfig+0x348>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a56      	ldr	r2, [pc, #344]	@ (8004b74 <UART_SetConfig+0x2d8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d120      	bne.n	8004a62 <UART_SetConfig+0x1c6>
 8004a20:	4b51      	ldr	r3, [pc, #324]	@ (8004b68 <UART_SetConfig+0x2cc>)
 8004a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004a2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a2c:	d013      	beq.n	8004a56 <UART_SetConfig+0x1ba>
 8004a2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a30:	d814      	bhi.n	8004a5c <UART_SetConfig+0x1c0>
 8004a32:	2b80      	cmp	r3, #128	@ 0x80
 8004a34:	d009      	beq.n	8004a4a <UART_SetConfig+0x1ae>
 8004a36:	2b80      	cmp	r3, #128	@ 0x80
 8004a38:	d810      	bhi.n	8004a5c <UART_SetConfig+0x1c0>
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <UART_SetConfig+0x1a8>
 8004a3e:	2b40      	cmp	r3, #64	@ 0x40
 8004a40:	d006      	beq.n	8004a50 <UART_SetConfig+0x1b4>
 8004a42:	e00b      	b.n	8004a5c <UART_SetConfig+0x1c0>
 8004a44:	2300      	movs	r3, #0
 8004a46:	77fb      	strb	r3, [r7, #31]
 8004a48:	e0cc      	b.n	8004be4 <UART_SetConfig+0x348>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	77fb      	strb	r3, [r7, #31]
 8004a4e:	e0c9      	b.n	8004be4 <UART_SetConfig+0x348>
 8004a50:	2304      	movs	r3, #4
 8004a52:	77fb      	strb	r3, [r7, #31]
 8004a54:	e0c6      	b.n	8004be4 <UART_SetConfig+0x348>
 8004a56:	2308      	movs	r3, #8
 8004a58:	77fb      	strb	r3, [r7, #31]
 8004a5a:	e0c3      	b.n	8004be4 <UART_SetConfig+0x348>
 8004a5c:	2310      	movs	r3, #16
 8004a5e:	77fb      	strb	r3, [r7, #31]
 8004a60:	e0c0      	b.n	8004be4 <UART_SetConfig+0x348>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a44      	ldr	r2, [pc, #272]	@ (8004b78 <UART_SetConfig+0x2dc>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d125      	bne.n	8004ab8 <UART_SetConfig+0x21c>
 8004a6c:	4b3e      	ldr	r3, [pc, #248]	@ (8004b68 <UART_SetConfig+0x2cc>)
 8004a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a7a:	d017      	beq.n	8004aac <UART_SetConfig+0x210>
 8004a7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a80:	d817      	bhi.n	8004ab2 <UART_SetConfig+0x216>
 8004a82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a86:	d00b      	beq.n	8004aa0 <UART_SetConfig+0x204>
 8004a88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a8c:	d811      	bhi.n	8004ab2 <UART_SetConfig+0x216>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <UART_SetConfig+0x1fe>
 8004a92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a96:	d006      	beq.n	8004aa6 <UART_SetConfig+0x20a>
 8004a98:	e00b      	b.n	8004ab2 <UART_SetConfig+0x216>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	77fb      	strb	r3, [r7, #31]
 8004a9e:	e0a1      	b.n	8004be4 <UART_SetConfig+0x348>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	77fb      	strb	r3, [r7, #31]
 8004aa4:	e09e      	b.n	8004be4 <UART_SetConfig+0x348>
 8004aa6:	2304      	movs	r3, #4
 8004aa8:	77fb      	strb	r3, [r7, #31]
 8004aaa:	e09b      	b.n	8004be4 <UART_SetConfig+0x348>
 8004aac:	2308      	movs	r3, #8
 8004aae:	77fb      	strb	r3, [r7, #31]
 8004ab0:	e098      	b.n	8004be4 <UART_SetConfig+0x348>
 8004ab2:	2310      	movs	r3, #16
 8004ab4:	77fb      	strb	r3, [r7, #31]
 8004ab6:	e095      	b.n	8004be4 <UART_SetConfig+0x348>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a2f      	ldr	r2, [pc, #188]	@ (8004b7c <UART_SetConfig+0x2e0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d125      	bne.n	8004b0e <UART_SetConfig+0x272>
 8004ac2:	4b29      	ldr	r3, [pc, #164]	@ (8004b68 <UART_SetConfig+0x2cc>)
 8004ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004acc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ad0:	d017      	beq.n	8004b02 <UART_SetConfig+0x266>
 8004ad2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ad6:	d817      	bhi.n	8004b08 <UART_SetConfig+0x26c>
 8004ad8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004adc:	d00b      	beq.n	8004af6 <UART_SetConfig+0x25a>
 8004ade:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ae2:	d811      	bhi.n	8004b08 <UART_SetConfig+0x26c>
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <UART_SetConfig+0x254>
 8004ae8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aec:	d006      	beq.n	8004afc <UART_SetConfig+0x260>
 8004aee:	e00b      	b.n	8004b08 <UART_SetConfig+0x26c>
 8004af0:	2301      	movs	r3, #1
 8004af2:	77fb      	strb	r3, [r7, #31]
 8004af4:	e076      	b.n	8004be4 <UART_SetConfig+0x348>
 8004af6:	2302      	movs	r3, #2
 8004af8:	77fb      	strb	r3, [r7, #31]
 8004afa:	e073      	b.n	8004be4 <UART_SetConfig+0x348>
 8004afc:	2304      	movs	r3, #4
 8004afe:	77fb      	strb	r3, [r7, #31]
 8004b00:	e070      	b.n	8004be4 <UART_SetConfig+0x348>
 8004b02:	2308      	movs	r3, #8
 8004b04:	77fb      	strb	r3, [r7, #31]
 8004b06:	e06d      	b.n	8004be4 <UART_SetConfig+0x348>
 8004b08:	2310      	movs	r3, #16
 8004b0a:	77fb      	strb	r3, [r7, #31]
 8004b0c:	e06a      	b.n	8004be4 <UART_SetConfig+0x348>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a1b      	ldr	r2, [pc, #108]	@ (8004b80 <UART_SetConfig+0x2e4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d138      	bne.n	8004b8a <UART_SetConfig+0x2ee>
 8004b18:	4b13      	ldr	r3, [pc, #76]	@ (8004b68 <UART_SetConfig+0x2cc>)
 8004b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b1e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004b22:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b26:	d017      	beq.n	8004b58 <UART_SetConfig+0x2bc>
 8004b28:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b2c:	d82a      	bhi.n	8004b84 <UART_SetConfig+0x2e8>
 8004b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b32:	d00b      	beq.n	8004b4c <UART_SetConfig+0x2b0>
 8004b34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b38:	d824      	bhi.n	8004b84 <UART_SetConfig+0x2e8>
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <UART_SetConfig+0x2aa>
 8004b3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b42:	d006      	beq.n	8004b52 <UART_SetConfig+0x2b6>
 8004b44:	e01e      	b.n	8004b84 <UART_SetConfig+0x2e8>
 8004b46:	2300      	movs	r3, #0
 8004b48:	77fb      	strb	r3, [r7, #31]
 8004b4a:	e04b      	b.n	8004be4 <UART_SetConfig+0x348>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	77fb      	strb	r3, [r7, #31]
 8004b50:	e048      	b.n	8004be4 <UART_SetConfig+0x348>
 8004b52:	2304      	movs	r3, #4
 8004b54:	77fb      	strb	r3, [r7, #31]
 8004b56:	e045      	b.n	8004be4 <UART_SetConfig+0x348>
 8004b58:	2308      	movs	r3, #8
 8004b5a:	77fb      	strb	r3, [r7, #31]
 8004b5c:	e042      	b.n	8004be4 <UART_SetConfig+0x348>
 8004b5e:	bf00      	nop
 8004b60:	efff69f3 	.word	0xefff69f3
 8004b64:	40011000 	.word	0x40011000
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	40004400 	.word	0x40004400
 8004b70:	40004800 	.word	0x40004800
 8004b74:	40004c00 	.word	0x40004c00
 8004b78:	40005000 	.word	0x40005000
 8004b7c:	40011400 	.word	0x40011400
 8004b80:	40007800 	.word	0x40007800
 8004b84:	2310      	movs	r3, #16
 8004b86:	77fb      	strb	r3, [r7, #31]
 8004b88:	e02c      	b.n	8004be4 <UART_SetConfig+0x348>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a72      	ldr	r2, [pc, #456]	@ (8004d58 <UART_SetConfig+0x4bc>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d125      	bne.n	8004be0 <UART_SetConfig+0x344>
 8004b94:	4b71      	ldr	r3, [pc, #452]	@ (8004d5c <UART_SetConfig+0x4c0>)
 8004b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b9a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004b9e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004ba2:	d017      	beq.n	8004bd4 <UART_SetConfig+0x338>
 8004ba4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004ba8:	d817      	bhi.n	8004bda <UART_SetConfig+0x33e>
 8004baa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bae:	d00b      	beq.n	8004bc8 <UART_SetConfig+0x32c>
 8004bb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bb4:	d811      	bhi.n	8004bda <UART_SetConfig+0x33e>
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <UART_SetConfig+0x326>
 8004bba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bbe:	d006      	beq.n	8004bce <UART_SetConfig+0x332>
 8004bc0:	e00b      	b.n	8004bda <UART_SetConfig+0x33e>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	77fb      	strb	r3, [r7, #31]
 8004bc6:	e00d      	b.n	8004be4 <UART_SetConfig+0x348>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	77fb      	strb	r3, [r7, #31]
 8004bcc:	e00a      	b.n	8004be4 <UART_SetConfig+0x348>
 8004bce:	2304      	movs	r3, #4
 8004bd0:	77fb      	strb	r3, [r7, #31]
 8004bd2:	e007      	b.n	8004be4 <UART_SetConfig+0x348>
 8004bd4:	2308      	movs	r3, #8
 8004bd6:	77fb      	strb	r3, [r7, #31]
 8004bd8:	e004      	b.n	8004be4 <UART_SetConfig+0x348>
 8004bda:	2310      	movs	r3, #16
 8004bdc:	77fb      	strb	r3, [r7, #31]
 8004bde:	e001      	b.n	8004be4 <UART_SetConfig+0x348>
 8004be0:	2310      	movs	r3, #16
 8004be2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bec:	d15b      	bne.n	8004ca6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004bee:	7ffb      	ldrb	r3, [r7, #31]
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d828      	bhi.n	8004c46 <UART_SetConfig+0x3aa>
 8004bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bfc <UART_SetConfig+0x360>)
 8004bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfa:	bf00      	nop
 8004bfc:	08004c21 	.word	0x08004c21
 8004c00:	08004c29 	.word	0x08004c29
 8004c04:	08004c31 	.word	0x08004c31
 8004c08:	08004c47 	.word	0x08004c47
 8004c0c:	08004c37 	.word	0x08004c37
 8004c10:	08004c47 	.word	0x08004c47
 8004c14:	08004c47 	.word	0x08004c47
 8004c18:	08004c47 	.word	0x08004c47
 8004c1c:	08004c3f 	.word	0x08004c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c20:	f7fe fe9e 	bl	8003960 <HAL_RCC_GetPCLK1Freq>
 8004c24:	61b8      	str	r0, [r7, #24]
        break;
 8004c26:	e013      	b.n	8004c50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c28:	f7fe feae 	bl	8003988 <HAL_RCC_GetPCLK2Freq>
 8004c2c:	61b8      	str	r0, [r7, #24]
        break;
 8004c2e:	e00f      	b.n	8004c50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c30:	4b4b      	ldr	r3, [pc, #300]	@ (8004d60 <UART_SetConfig+0x4c4>)
 8004c32:	61bb      	str	r3, [r7, #24]
        break;
 8004c34:	e00c      	b.n	8004c50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c36:	f7fe fdc1 	bl	80037bc <HAL_RCC_GetSysClockFreq>
 8004c3a:	61b8      	str	r0, [r7, #24]
        break;
 8004c3c:	e008      	b.n	8004c50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c42:	61bb      	str	r3, [r7, #24]
        break;
 8004c44:	e004      	b.n	8004c50 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	77bb      	strb	r3, [r7, #30]
        break;
 8004c4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d074      	beq.n	8004d40 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	005a      	lsls	r2, r3, #1
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	085b      	lsrs	r3, r3, #1
 8004c60:	441a      	add	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	2b0f      	cmp	r3, #15
 8004c70:	d916      	bls.n	8004ca0 <UART_SetConfig+0x404>
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c78:	d212      	bcs.n	8004ca0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	f023 030f 	bic.w	r3, r3, #15
 8004c82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	085b      	lsrs	r3, r3, #1
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	89fb      	ldrh	r3, [r7, #14]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	89fa      	ldrh	r2, [r7, #14]
 8004c9c:	60da      	str	r2, [r3, #12]
 8004c9e:	e04f      	b.n	8004d40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	77bb      	strb	r3, [r7, #30]
 8004ca4:	e04c      	b.n	8004d40 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ca6:	7ffb      	ldrb	r3, [r7, #31]
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d828      	bhi.n	8004cfe <UART_SetConfig+0x462>
 8004cac:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb4 <UART_SetConfig+0x418>)
 8004cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb2:	bf00      	nop
 8004cb4:	08004cd9 	.word	0x08004cd9
 8004cb8:	08004ce1 	.word	0x08004ce1
 8004cbc:	08004ce9 	.word	0x08004ce9
 8004cc0:	08004cff 	.word	0x08004cff
 8004cc4:	08004cef 	.word	0x08004cef
 8004cc8:	08004cff 	.word	0x08004cff
 8004ccc:	08004cff 	.word	0x08004cff
 8004cd0:	08004cff 	.word	0x08004cff
 8004cd4:	08004cf7 	.word	0x08004cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd8:	f7fe fe42 	bl	8003960 <HAL_RCC_GetPCLK1Freq>
 8004cdc:	61b8      	str	r0, [r7, #24]
        break;
 8004cde:	e013      	b.n	8004d08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ce0:	f7fe fe52 	bl	8003988 <HAL_RCC_GetPCLK2Freq>
 8004ce4:	61b8      	str	r0, [r7, #24]
        break;
 8004ce6:	e00f      	b.n	8004d08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d60 <UART_SetConfig+0x4c4>)
 8004cea:	61bb      	str	r3, [r7, #24]
        break;
 8004cec:	e00c      	b.n	8004d08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cee:	f7fe fd65 	bl	80037bc <HAL_RCC_GetSysClockFreq>
 8004cf2:	61b8      	str	r0, [r7, #24]
        break;
 8004cf4:	e008      	b.n	8004d08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cfa:	61bb      	str	r3, [r7, #24]
        break;
 8004cfc:	e004      	b.n	8004d08 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	77bb      	strb	r3, [r7, #30]
        break;
 8004d06:	bf00      	nop
    }

    if (pclk != 0U)
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d018      	beq.n	8004d40 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	085a      	lsrs	r2, r3, #1
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	441a      	add	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	2b0f      	cmp	r3, #15
 8004d26:	d909      	bls.n	8004d3c <UART_SetConfig+0x4a0>
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d2e:	d205      	bcs.n	8004d3c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	60da      	str	r2, [r3, #12]
 8004d3a:	e001      	b.n	8004d40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3720      	adds	r7, #32
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	40007c00 	.word	0x40007c00
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	00f42400 	.word	0x00f42400

08004d64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d70:	f003 0308 	and.w	r3, r3, #8
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd6:	f003 0304 	and.w	r3, r3, #4
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df8:	f003 0310 	and.w	r3, r3, #16
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d01a      	beq.n	8004e7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e62:	d10a      	bne.n	8004e7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	605a      	str	r2, [r3, #4]
  }
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b098      	sub	sp, #96	@ 0x60
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004eb8:	f7fc f9fe 	bl	80012b8 <HAL_GetTick>
 8004ebc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0308 	and.w	r3, r3, #8
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d12e      	bne.n	8004f2a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ecc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f88c 	bl	8004ff8 <UART_WaitOnFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d021      	beq.n	8004f2a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eee:	e853 3f00 	ldrex	r3, [r3]
 8004ef2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ef6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004efa:	653b      	str	r3, [r7, #80]	@ 0x50
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	461a      	mov	r2, r3
 8004f02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f04:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f06:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f0c:	e841 2300 	strex	r3, r2, [r1]
 8004f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1e6      	bne.n	8004ee6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e062      	b.n	8004ff0 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d149      	bne.n	8004fcc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f40:	2200      	movs	r2, #0
 8004f42:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f856 	bl	8004ff8 <UART_WaitOnFlagUntilTimeout>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d03c      	beq.n	8004fcc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5a:	e853 3f00 	ldrex	r3, [r3]
 8004f5e:	623b      	str	r3, [r7, #32]
   return(result);
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f70:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f72:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f78:	e841 2300 	strex	r3, r2, [r1]
 8004f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1e6      	bne.n	8004f52 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3308      	adds	r3, #8
 8004f8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	e853 3f00 	ldrex	r3, [r3]
 8004f92:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0301 	bic.w	r3, r3, #1
 8004f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3308      	adds	r3, #8
 8004fa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fa4:	61fa      	str	r2, [r7, #28]
 8004fa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa8:	69b9      	ldr	r1, [r7, #24]
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	e841 2300 	strex	r3, r2, [r1]
 8004fb0:	617b      	str	r3, [r7, #20]
   return(result);
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1e5      	bne.n	8004f84 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e011      	b.n	8004ff0 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3758      	adds	r7, #88	@ 0x58
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	603b      	str	r3, [r7, #0]
 8005004:	4613      	mov	r3, r2
 8005006:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005008:	e04f      	b.n	80050aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005010:	d04b      	beq.n	80050aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005012:	f7fc f951 	bl	80012b8 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	429a      	cmp	r2, r3
 8005020:	d302      	bcc.n	8005028 <UART_WaitOnFlagUntilTimeout+0x30>
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e04e      	b.n	80050ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	2b00      	cmp	r3, #0
 8005038:	d037      	beq.n	80050aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b80      	cmp	r3, #128	@ 0x80
 800503e:	d034      	beq.n	80050aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2b40      	cmp	r3, #64	@ 0x40
 8005044:	d031      	beq.n	80050aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b08      	cmp	r3, #8
 8005052:	d110      	bne.n	8005076 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2208      	movs	r2, #8
 800505a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 f838 	bl	80050d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2208      	movs	r2, #8
 8005066:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e029      	b.n	80050ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005080:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005084:	d111      	bne.n	80050aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800508e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f81e 	bl	80050d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2220      	movs	r2, #32
 800509a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e00f      	b.n	80050ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69da      	ldr	r2, [r3, #28]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4013      	ands	r3, r2
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	bf0c      	ite	eq
 80050ba:	2301      	moveq	r3, #1
 80050bc:	2300      	movne	r3, #0
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	461a      	mov	r2, r3
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d0a0      	beq.n	800500a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b095      	sub	sp, #84	@ 0x54
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e2:	e853 3f00 	ldrex	r3, [r3]
 80050e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80050fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005100:	e841 2300 	strex	r3, r2, [r1]
 8005104:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e6      	bne.n	80050da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3308      	adds	r3, #8
 8005112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	e853 3f00 	ldrex	r3, [r3]
 800511a:	61fb      	str	r3, [r7, #28]
   return(result);
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f023 0301 	bic.w	r3, r3, #1
 8005122:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3308      	adds	r3, #8
 800512a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800512c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800512e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005130:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005134:	e841 2300 	strex	r3, r2, [r1]
 8005138:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1e5      	bne.n	800510c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005144:	2b01      	cmp	r3, #1
 8005146:	d118      	bne.n	800517a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	60bb      	str	r3, [r7, #8]
   return(result);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f023 0310 	bic.w	r3, r3, #16
 800515c:	647b      	str	r3, [r7, #68]	@ 0x44
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005166:	61bb      	str	r3, [r7, #24]
 8005168:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	6979      	ldr	r1, [r7, #20]
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	613b      	str	r3, [r7, #16]
   return(result);
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e6      	bne.n	8005148 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2220      	movs	r2, #32
 800517e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800518e:	bf00      	nop
 8005190:	3754      	adds	r7, #84	@ 0x54
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
	...

0800519c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800519c:	b084      	sub	sp, #16
 800519e:	b580      	push	{r7, lr}
 80051a0:	b084      	sub	sp, #16
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	f107 001c 	add.w	r0, r7, #28
 80051aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d121      	bne.n	80051fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	4b21      	ldr	r3, [pc, #132]	@ (800524c <USB_CoreInit+0xb0>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d105      	bne.n	80051ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fa92 	bl	8005718 <USB_CoreReset>
 80051f4:	4603      	mov	r3, r0
 80051f6:	73fb      	strb	r3, [r7, #15]
 80051f8:	e010      	b.n	800521c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fa86 	bl	8005718 <USB_CoreReset>
 800520c:	4603      	mov	r3, r0
 800520e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005214:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800521c:	7fbb      	ldrb	r3, [r7, #30]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d10b      	bne.n	800523a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f043 0206 	orr.w	r2, r3, #6
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f043 0220 	orr.w	r2, r3, #32
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800523a:	7bfb      	ldrb	r3, [r7, #15]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005246:	b004      	add	sp, #16
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	ffbdffbf 	.word	0xffbdffbf

08005250 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f023 0201 	bic.w	r2, r3, #1
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	460b      	mov	r3, r1
 800527c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800528e:	78fb      	ldrb	r3, [r7, #3]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d115      	bne.n	80052c0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80052a0:	200a      	movs	r0, #10
 80052a2:	f7fc f815 	bl	80012d0 <HAL_Delay>
      ms += 10U;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	330a      	adds	r3, #10
 80052aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 fa25 	bl	80056fc <USB_GetMode>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d01e      	beq.n	80052f6 <USB_SetCurrentMode+0x84>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2bc7      	cmp	r3, #199	@ 0xc7
 80052bc:	d9f0      	bls.n	80052a0 <USB_SetCurrentMode+0x2e>
 80052be:	e01a      	b.n	80052f6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80052c0:	78fb      	ldrb	r3, [r7, #3]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d115      	bne.n	80052f2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80052d2:	200a      	movs	r0, #10
 80052d4:	f7fb fffc 	bl	80012d0 <HAL_Delay>
      ms += 10U;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	330a      	adds	r3, #10
 80052dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fa0c 	bl	80056fc <USB_GetMode>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d005      	beq.n	80052f6 <USB_SetCurrentMode+0x84>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2bc7      	cmp	r3, #199	@ 0xc7
 80052ee:	d9f0      	bls.n	80052d2 <USB_SetCurrentMode+0x60>
 80052f0:	e001      	b.n	80052f6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e005      	b.n	8005302 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2bc8      	cmp	r3, #200	@ 0xc8
 80052fa:	d101      	bne.n	8005300 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e000      	b.n	8005302 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800530c:	b084      	sub	sp, #16
 800530e:	b580      	push	{r7, lr}
 8005310:	b086      	sub	sp, #24
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800531a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005326:	2300      	movs	r3, #0
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	e009      	b.n	8005340 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	3340      	adds	r3, #64	@ 0x40
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	2200      	movs	r2, #0
 8005338:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	3301      	adds	r3, #1
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	2b0e      	cmp	r3, #14
 8005344:	d9f2      	bls.n	800532c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005346:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800534a:	2b00      	cmp	r3, #0
 800534c:	d11c      	bne.n	8005388 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800535c:	f043 0302 	orr.w	r3, r3, #2
 8005360:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005366:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	e005      	b.n	8005394 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800538c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800539a:	461a      	mov	r2, r3
 800539c:	2300      	movs	r3, #0
 800539e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053a0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d10d      	bne.n	80053c4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80053a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d104      	bne.n	80053ba <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80053b0:	2100      	movs	r1, #0
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f968 	bl	8005688 <USB_SetDevSpeed>
 80053b8:	e008      	b.n	80053cc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80053ba:	2101      	movs	r1, #1
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f963 	bl	8005688 <USB_SetDevSpeed>
 80053c2:	e003      	b.n	80053cc <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053c4:	2103      	movs	r1, #3
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f95e 	bl	8005688 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053cc:	2110      	movs	r1, #16
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f8fa 	bl	80055c8 <USB_FlushTxFifo>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f924 	bl	800562c <USB_FlushRxFifo>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053f4:	461a      	mov	r2, r3
 80053f6:	2300      	movs	r3, #0
 80053f8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005400:	461a      	mov	r2, r3
 8005402:	2300      	movs	r3, #0
 8005404:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800540c:	461a      	mov	r2, r3
 800540e:	2300      	movs	r3, #0
 8005410:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005412:	2300      	movs	r3, #0
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	e043      	b.n	80054a0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800542a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800542e:	d118      	bne.n	8005462 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10a      	bne.n	800544c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4413      	add	r3, r2
 800543e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005442:	461a      	mov	r2, r3
 8005444:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	e013      	b.n	8005474 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005458:	461a      	mov	r2, r3
 800545a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	e008      	b.n	8005474 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4413      	add	r3, r2
 800546a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800546e:	461a      	mov	r2, r3
 8005470:	2300      	movs	r3, #0
 8005472:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005480:	461a      	mov	r2, r3
 8005482:	2300      	movs	r3, #0
 8005484:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005492:	461a      	mov	r2, r3
 8005494:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005498:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	3301      	adds	r3, #1
 800549e:	613b      	str	r3, [r7, #16]
 80054a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80054a4:	461a      	mov	r2, r3
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d3b5      	bcc.n	8005418 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054ac:	2300      	movs	r3, #0
 80054ae:	613b      	str	r3, [r7, #16]
 80054b0:	e043      	b.n	800553a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054c8:	d118      	bne.n	80054fc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10a      	bne.n	80054e6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054dc:	461a      	mov	r2, r3
 80054de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80054e2:	6013      	str	r3, [r2, #0]
 80054e4:	e013      	b.n	800550e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054f2:	461a      	mov	r2, r3
 80054f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	e008      	b.n	800550e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005508:	461a      	mov	r2, r3
 800550a:	2300      	movs	r3, #0
 800550c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800551a:	461a      	mov	r2, r3
 800551c:	2300      	movs	r3, #0
 800551e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800552c:	461a      	mov	r2, r3
 800552e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005532:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	3301      	adds	r3, #1
 8005538:	613b      	str	r3, [r7, #16]
 800553a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800553e:	461a      	mov	r2, r3
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	4293      	cmp	r3, r2
 8005544:	d3b5      	bcc.n	80054b2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005554:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005558:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005566:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005568:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800556c:	2b00      	cmp	r3, #0
 800556e:	d105      	bne.n	800557c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	f043 0210 	orr.w	r2, r3, #16
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699a      	ldr	r2, [r3, #24]
 8005580:	4b0f      	ldr	r3, [pc, #60]	@ (80055c0 <USB_DevInit+0x2b4>)
 8005582:	4313      	orrs	r3, r2
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005588:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800558c:	2b00      	cmp	r3, #0
 800558e:	d005      	beq.n	800559c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	f043 0208 	orr.w	r2, r3, #8
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800559c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d105      	bne.n	80055b0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	699a      	ldr	r2, [r3, #24]
 80055a8:	4b06      	ldr	r3, [pc, #24]	@ (80055c4 <USB_DevInit+0x2b8>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055bc:	b004      	add	sp, #16
 80055be:	4770      	bx	lr
 80055c0:	803c3800 	.word	0x803c3800
 80055c4:	40000004 	.word	0x40000004

080055c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3301      	adds	r3, #1
 80055da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055e2:	d901      	bls.n	80055e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e01b      	b.n	8005620 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	daf2      	bge.n	80055d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	019b      	lsls	r3, r3, #6
 80055f8:	f043 0220 	orr.w	r2, r3, #32
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3301      	adds	r3, #1
 8005604:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800560c:	d901      	bls.n	8005612 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e006      	b.n	8005620 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f003 0320 	and.w	r3, r3, #32
 800561a:	2b20      	cmp	r3, #32
 800561c:	d0f0      	beq.n	8005600 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3301      	adds	r3, #1
 800563c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005644:	d901      	bls.n	800564a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e018      	b.n	800567c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	2b00      	cmp	r3, #0
 8005650:	daf2      	bge.n	8005638 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2210      	movs	r2, #16
 800565a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	3301      	adds	r3, #1
 8005660:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005668:	d901      	bls.n	800566e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e006      	b.n	800567c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f003 0310 	and.w	r3, r3, #16
 8005676:	2b10      	cmp	r3, #16
 8005678:	d0f0      	beq.n	800565c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	460b      	mov	r3, r1
 8005692:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	78fb      	ldrb	r3, [r7, #3]
 80056a2:	68f9      	ldr	r1, [r7, #12]
 80056a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056a8:	4313      	orrs	r3, r2
 80056aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b085      	sub	sp, #20
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80056d4:	f023 0303 	bic.w	r3, r3, #3
 80056d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056e8:	f043 0302 	orr.w	r3, r3, #2
 80056ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	f003 0301 	and.w	r3, r3, #1
}
 800570c:	4618      	mov	r0, r3
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	3301      	adds	r3, #1
 8005728:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005730:	d901      	bls.n	8005736 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e022      	b.n	800577c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	2b00      	cmp	r3, #0
 800573c:	daf2      	bge.n	8005724 <USB_CoreReset+0xc>

  count = 10U;
 800573e:	230a      	movs	r3, #10
 8005740:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005742:	e002      	b.n	800574a <USB_CoreReset+0x32>
  {
    count--;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	3b01      	subs	r3, #1
 8005748:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1f9      	bne.n	8005744 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f043 0201 	orr.w	r2, r3, #1
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	3301      	adds	r3, #1
 8005760:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005768:	d901      	bls.n	800576e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e006      	b.n	800577c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b01      	cmp	r3, #1
 8005778:	d0f0      	beq.n	800575c <USB_CoreReset+0x44>

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800578e:	4b92      	ldr	r3, [pc, #584]	@ (80059d8 <MX_LWIP_Init+0x250>)
 8005790:	22c0      	movs	r2, #192	@ 0xc0
 8005792:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005794:	4b90      	ldr	r3, [pc, #576]	@ (80059d8 <MX_LWIP_Init+0x250>)
 8005796:	22a8      	movs	r2, #168	@ 0xa8
 8005798:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 8;
 800579a:	4b8f      	ldr	r3, [pc, #572]	@ (80059d8 <MX_LWIP_Init+0x250>)
 800579c:	2208      	movs	r2, #8
 800579e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 215;
 80057a0:	4b8d      	ldr	r3, [pc, #564]	@ (80059d8 <MX_LWIP_Init+0x250>)
 80057a2:	22d7      	movs	r2, #215	@ 0xd7
 80057a4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80057a6:	4b8d      	ldr	r3, [pc, #564]	@ (80059dc <MX_LWIP_Init+0x254>)
 80057a8:	22ff      	movs	r2, #255	@ 0xff
 80057aa:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80057ac:	4b8b      	ldr	r3, [pc, #556]	@ (80059dc <MX_LWIP_Init+0x254>)
 80057ae:	22ff      	movs	r2, #255	@ 0xff
 80057b0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80057b2:	4b8a      	ldr	r3, [pc, #552]	@ (80059dc <MX_LWIP_Init+0x254>)
 80057b4:	22ff      	movs	r2, #255	@ 0xff
 80057b6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80057b8:	4b88      	ldr	r3, [pc, #544]	@ (80059dc <MX_LWIP_Init+0x254>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80057be:	4b88      	ldr	r3, [pc, #544]	@ (80059e0 <MX_LWIP_Init+0x258>)
 80057c0:	22c0      	movs	r2, #192	@ 0xc0
 80057c2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80057c4:	4b86      	ldr	r3, [pc, #536]	@ (80059e0 <MX_LWIP_Init+0x258>)
 80057c6:	22a8      	movs	r2, #168	@ 0xa8
 80057c8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 8;
 80057ca:	4b85      	ldr	r3, [pc, #532]	@ (80059e0 <MX_LWIP_Init+0x258>)
 80057cc:	2208      	movs	r2, #8
 80057ce:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80057d0:	4b83      	ldr	r3, [pc, #524]	@ (80059e0 <MX_LWIP_Init+0x258>)
 80057d2:	2201      	movs	r2, #1
 80057d4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80057d6:	2100      	movs	r1, #0
 80057d8:	2000      	movs	r0, #0
 80057da:	f004 ff27 	bl	800a62c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80057de:	4b7e      	ldr	r3, [pc, #504]	@ (80059d8 <MX_LWIP_Init+0x250>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	061a      	lsls	r2, r3, #24
 80057e4:	4b7c      	ldr	r3, [pc, #496]	@ (80059d8 <MX_LWIP_Init+0x250>)
 80057e6:	785b      	ldrb	r3, [r3, #1]
 80057e8:	041b      	lsls	r3, r3, #16
 80057ea:	431a      	orrs	r2, r3
 80057ec:	4b7a      	ldr	r3, [pc, #488]	@ (80059d8 <MX_LWIP_Init+0x250>)
 80057ee:	789b      	ldrb	r3, [r3, #2]
 80057f0:	021b      	lsls	r3, r3, #8
 80057f2:	4313      	orrs	r3, r2
 80057f4:	4a78      	ldr	r2, [pc, #480]	@ (80059d8 <MX_LWIP_Init+0x250>)
 80057f6:	78d2      	ldrb	r2, [r2, #3]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	061a      	lsls	r2, r3, #24
 80057fc:	4b76      	ldr	r3, [pc, #472]	@ (80059d8 <MX_LWIP_Init+0x250>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	0619      	lsls	r1, r3, #24
 8005802:	4b75      	ldr	r3, [pc, #468]	@ (80059d8 <MX_LWIP_Init+0x250>)
 8005804:	785b      	ldrb	r3, [r3, #1]
 8005806:	041b      	lsls	r3, r3, #16
 8005808:	4319      	orrs	r1, r3
 800580a:	4b73      	ldr	r3, [pc, #460]	@ (80059d8 <MX_LWIP_Init+0x250>)
 800580c:	789b      	ldrb	r3, [r3, #2]
 800580e:	021b      	lsls	r3, r3, #8
 8005810:	430b      	orrs	r3, r1
 8005812:	4971      	ldr	r1, [pc, #452]	@ (80059d8 <MX_LWIP_Init+0x250>)
 8005814:	78c9      	ldrb	r1, [r1, #3]
 8005816:	430b      	orrs	r3, r1
 8005818:	021b      	lsls	r3, r3, #8
 800581a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800581e:	431a      	orrs	r2, r3
 8005820:	4b6d      	ldr	r3, [pc, #436]	@ (80059d8 <MX_LWIP_Init+0x250>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	0619      	lsls	r1, r3, #24
 8005826:	4b6c      	ldr	r3, [pc, #432]	@ (80059d8 <MX_LWIP_Init+0x250>)
 8005828:	785b      	ldrb	r3, [r3, #1]
 800582a:	041b      	lsls	r3, r3, #16
 800582c:	4319      	orrs	r1, r3
 800582e:	4b6a      	ldr	r3, [pc, #424]	@ (80059d8 <MX_LWIP_Init+0x250>)
 8005830:	789b      	ldrb	r3, [r3, #2]
 8005832:	021b      	lsls	r3, r3, #8
 8005834:	430b      	orrs	r3, r1
 8005836:	4968      	ldr	r1, [pc, #416]	@ (80059d8 <MX_LWIP_Init+0x250>)
 8005838:	78c9      	ldrb	r1, [r1, #3]
 800583a:	430b      	orrs	r3, r1
 800583c:	0a1b      	lsrs	r3, r3, #8
 800583e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005842:	431a      	orrs	r2, r3
 8005844:	4b64      	ldr	r3, [pc, #400]	@ (80059d8 <MX_LWIP_Init+0x250>)
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	0619      	lsls	r1, r3, #24
 800584a:	4b63      	ldr	r3, [pc, #396]	@ (80059d8 <MX_LWIP_Init+0x250>)
 800584c:	785b      	ldrb	r3, [r3, #1]
 800584e:	041b      	lsls	r3, r3, #16
 8005850:	4319      	orrs	r1, r3
 8005852:	4b61      	ldr	r3, [pc, #388]	@ (80059d8 <MX_LWIP_Init+0x250>)
 8005854:	789b      	ldrb	r3, [r3, #2]
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	430b      	orrs	r3, r1
 800585a:	495f      	ldr	r1, [pc, #380]	@ (80059d8 <MX_LWIP_Init+0x250>)
 800585c:	78c9      	ldrb	r1, [r1, #3]
 800585e:	430b      	orrs	r3, r1
 8005860:	0e1b      	lsrs	r3, r3, #24
 8005862:	4313      	orrs	r3, r2
 8005864:	4a5f      	ldr	r2, [pc, #380]	@ (80059e4 <MX_LWIP_Init+0x25c>)
 8005866:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005868:	4b5c      	ldr	r3, [pc, #368]	@ (80059dc <MX_LWIP_Init+0x254>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	061a      	lsls	r2, r3, #24
 800586e:	4b5b      	ldr	r3, [pc, #364]	@ (80059dc <MX_LWIP_Init+0x254>)
 8005870:	785b      	ldrb	r3, [r3, #1]
 8005872:	041b      	lsls	r3, r3, #16
 8005874:	431a      	orrs	r2, r3
 8005876:	4b59      	ldr	r3, [pc, #356]	@ (80059dc <MX_LWIP_Init+0x254>)
 8005878:	789b      	ldrb	r3, [r3, #2]
 800587a:	021b      	lsls	r3, r3, #8
 800587c:	4313      	orrs	r3, r2
 800587e:	4a57      	ldr	r2, [pc, #348]	@ (80059dc <MX_LWIP_Init+0x254>)
 8005880:	78d2      	ldrb	r2, [r2, #3]
 8005882:	4313      	orrs	r3, r2
 8005884:	061a      	lsls	r2, r3, #24
 8005886:	4b55      	ldr	r3, [pc, #340]	@ (80059dc <MX_LWIP_Init+0x254>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	0619      	lsls	r1, r3, #24
 800588c:	4b53      	ldr	r3, [pc, #332]	@ (80059dc <MX_LWIP_Init+0x254>)
 800588e:	785b      	ldrb	r3, [r3, #1]
 8005890:	041b      	lsls	r3, r3, #16
 8005892:	4319      	orrs	r1, r3
 8005894:	4b51      	ldr	r3, [pc, #324]	@ (80059dc <MX_LWIP_Init+0x254>)
 8005896:	789b      	ldrb	r3, [r3, #2]
 8005898:	021b      	lsls	r3, r3, #8
 800589a:	430b      	orrs	r3, r1
 800589c:	494f      	ldr	r1, [pc, #316]	@ (80059dc <MX_LWIP_Init+0x254>)
 800589e:	78c9      	ldrb	r1, [r1, #3]
 80058a0:	430b      	orrs	r3, r1
 80058a2:	021b      	lsls	r3, r3, #8
 80058a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80058a8:	431a      	orrs	r2, r3
 80058aa:	4b4c      	ldr	r3, [pc, #304]	@ (80059dc <MX_LWIP_Init+0x254>)
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	0619      	lsls	r1, r3, #24
 80058b0:	4b4a      	ldr	r3, [pc, #296]	@ (80059dc <MX_LWIP_Init+0x254>)
 80058b2:	785b      	ldrb	r3, [r3, #1]
 80058b4:	041b      	lsls	r3, r3, #16
 80058b6:	4319      	orrs	r1, r3
 80058b8:	4b48      	ldr	r3, [pc, #288]	@ (80059dc <MX_LWIP_Init+0x254>)
 80058ba:	789b      	ldrb	r3, [r3, #2]
 80058bc:	021b      	lsls	r3, r3, #8
 80058be:	430b      	orrs	r3, r1
 80058c0:	4946      	ldr	r1, [pc, #280]	@ (80059dc <MX_LWIP_Init+0x254>)
 80058c2:	78c9      	ldrb	r1, [r1, #3]
 80058c4:	430b      	orrs	r3, r1
 80058c6:	0a1b      	lsrs	r3, r3, #8
 80058c8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80058cc:	431a      	orrs	r2, r3
 80058ce:	4b43      	ldr	r3, [pc, #268]	@ (80059dc <MX_LWIP_Init+0x254>)
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	0619      	lsls	r1, r3, #24
 80058d4:	4b41      	ldr	r3, [pc, #260]	@ (80059dc <MX_LWIP_Init+0x254>)
 80058d6:	785b      	ldrb	r3, [r3, #1]
 80058d8:	041b      	lsls	r3, r3, #16
 80058da:	4319      	orrs	r1, r3
 80058dc:	4b3f      	ldr	r3, [pc, #252]	@ (80059dc <MX_LWIP_Init+0x254>)
 80058de:	789b      	ldrb	r3, [r3, #2]
 80058e0:	021b      	lsls	r3, r3, #8
 80058e2:	430b      	orrs	r3, r1
 80058e4:	493d      	ldr	r1, [pc, #244]	@ (80059dc <MX_LWIP_Init+0x254>)
 80058e6:	78c9      	ldrb	r1, [r1, #3]
 80058e8:	430b      	orrs	r3, r1
 80058ea:	0e1b      	lsrs	r3, r3, #24
 80058ec:	4313      	orrs	r3, r2
 80058ee:	4a3e      	ldr	r2, [pc, #248]	@ (80059e8 <MX_LWIP_Init+0x260>)
 80058f0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80058f2:	4b3b      	ldr	r3, [pc, #236]	@ (80059e0 <MX_LWIP_Init+0x258>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	061a      	lsls	r2, r3, #24
 80058f8:	4b39      	ldr	r3, [pc, #228]	@ (80059e0 <MX_LWIP_Init+0x258>)
 80058fa:	785b      	ldrb	r3, [r3, #1]
 80058fc:	041b      	lsls	r3, r3, #16
 80058fe:	431a      	orrs	r2, r3
 8005900:	4b37      	ldr	r3, [pc, #220]	@ (80059e0 <MX_LWIP_Init+0x258>)
 8005902:	789b      	ldrb	r3, [r3, #2]
 8005904:	021b      	lsls	r3, r3, #8
 8005906:	4313      	orrs	r3, r2
 8005908:	4a35      	ldr	r2, [pc, #212]	@ (80059e0 <MX_LWIP_Init+0x258>)
 800590a:	78d2      	ldrb	r2, [r2, #3]
 800590c:	4313      	orrs	r3, r2
 800590e:	061a      	lsls	r2, r3, #24
 8005910:	4b33      	ldr	r3, [pc, #204]	@ (80059e0 <MX_LWIP_Init+0x258>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	0619      	lsls	r1, r3, #24
 8005916:	4b32      	ldr	r3, [pc, #200]	@ (80059e0 <MX_LWIP_Init+0x258>)
 8005918:	785b      	ldrb	r3, [r3, #1]
 800591a:	041b      	lsls	r3, r3, #16
 800591c:	4319      	orrs	r1, r3
 800591e:	4b30      	ldr	r3, [pc, #192]	@ (80059e0 <MX_LWIP_Init+0x258>)
 8005920:	789b      	ldrb	r3, [r3, #2]
 8005922:	021b      	lsls	r3, r3, #8
 8005924:	430b      	orrs	r3, r1
 8005926:	492e      	ldr	r1, [pc, #184]	@ (80059e0 <MX_LWIP_Init+0x258>)
 8005928:	78c9      	ldrb	r1, [r1, #3]
 800592a:	430b      	orrs	r3, r1
 800592c:	021b      	lsls	r3, r3, #8
 800592e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005932:	431a      	orrs	r2, r3
 8005934:	4b2a      	ldr	r3, [pc, #168]	@ (80059e0 <MX_LWIP_Init+0x258>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	0619      	lsls	r1, r3, #24
 800593a:	4b29      	ldr	r3, [pc, #164]	@ (80059e0 <MX_LWIP_Init+0x258>)
 800593c:	785b      	ldrb	r3, [r3, #1]
 800593e:	041b      	lsls	r3, r3, #16
 8005940:	4319      	orrs	r1, r3
 8005942:	4b27      	ldr	r3, [pc, #156]	@ (80059e0 <MX_LWIP_Init+0x258>)
 8005944:	789b      	ldrb	r3, [r3, #2]
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	430b      	orrs	r3, r1
 800594a:	4925      	ldr	r1, [pc, #148]	@ (80059e0 <MX_LWIP_Init+0x258>)
 800594c:	78c9      	ldrb	r1, [r1, #3]
 800594e:	430b      	orrs	r3, r1
 8005950:	0a1b      	lsrs	r3, r3, #8
 8005952:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005956:	431a      	orrs	r2, r3
 8005958:	4b21      	ldr	r3, [pc, #132]	@ (80059e0 <MX_LWIP_Init+0x258>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	0619      	lsls	r1, r3, #24
 800595e:	4b20      	ldr	r3, [pc, #128]	@ (80059e0 <MX_LWIP_Init+0x258>)
 8005960:	785b      	ldrb	r3, [r3, #1]
 8005962:	041b      	lsls	r3, r3, #16
 8005964:	4319      	orrs	r1, r3
 8005966:	4b1e      	ldr	r3, [pc, #120]	@ (80059e0 <MX_LWIP_Init+0x258>)
 8005968:	789b      	ldrb	r3, [r3, #2]
 800596a:	021b      	lsls	r3, r3, #8
 800596c:	430b      	orrs	r3, r1
 800596e:	491c      	ldr	r1, [pc, #112]	@ (80059e0 <MX_LWIP_Init+0x258>)
 8005970:	78c9      	ldrb	r1, [r1, #3]
 8005972:	430b      	orrs	r3, r1
 8005974:	0e1b      	lsrs	r3, r3, #24
 8005976:	4313      	orrs	r3, r2
 8005978:	4a1c      	ldr	r2, [pc, #112]	@ (80059ec <MX_LWIP_Init+0x264>)
 800597a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800597c:	4b1c      	ldr	r3, [pc, #112]	@ (80059f0 <MX_LWIP_Init+0x268>)
 800597e:	9302      	str	r3, [sp, #8]
 8005980:	4b1c      	ldr	r3, [pc, #112]	@ (80059f4 <MX_LWIP_Init+0x26c>)
 8005982:	9301      	str	r3, [sp, #4]
 8005984:	2300      	movs	r3, #0
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	4b18      	ldr	r3, [pc, #96]	@ (80059ec <MX_LWIP_Init+0x264>)
 800598a:	4a17      	ldr	r2, [pc, #92]	@ (80059e8 <MX_LWIP_Init+0x260>)
 800598c:	4915      	ldr	r1, [pc, #84]	@ (80059e4 <MX_LWIP_Init+0x25c>)
 800598e:	481a      	ldr	r0, [pc, #104]	@ (80059f8 <MX_LWIP_Init+0x270>)
 8005990:	f005 fc12 	bl	800b1b8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005994:	4818      	ldr	r0, [pc, #96]	@ (80059f8 <MX_LWIP_Init+0x270>)
 8005996:	f005 fdc1 	bl	800b51c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800599a:	4817      	ldr	r0, [pc, #92]	@ (80059f8 <MX_LWIP_Init+0x270>)
 800599c:	f005 fdce 	bl	800b53c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80059a0:	4916      	ldr	r1, [pc, #88]	@ (80059fc <MX_LWIP_Init+0x274>)
 80059a2:	4815      	ldr	r0, [pc, #84]	@ (80059f8 <MX_LWIP_Init+0x270>)
 80059a4:	f005 fecc 	bl	800b740 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80059a8:	2224      	movs	r2, #36	@ 0x24
 80059aa:	2100      	movs	r1, #0
 80059ac:	4814      	ldr	r0, [pc, #80]	@ (8005a00 <MX_LWIP_Init+0x278>)
 80059ae:	f00e ff4d 	bl	801484c <memset>
  attributes.name = "EthLink";
 80059b2:	4b13      	ldr	r3, [pc, #76]	@ (8005a00 <MX_LWIP_Init+0x278>)
 80059b4:	4a13      	ldr	r2, [pc, #76]	@ (8005a04 <MX_LWIP_Init+0x27c>)
 80059b6:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80059b8:	4b11      	ldr	r3, [pc, #68]	@ (8005a00 <MX_LWIP_Init+0x278>)
 80059ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80059be:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80059c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005a00 <MX_LWIP_Init+0x278>)
 80059c2:	2210      	movs	r2, #16
 80059c4:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80059c6:	4a0e      	ldr	r2, [pc, #56]	@ (8005a00 <MX_LWIP_Init+0x278>)
 80059c8:	490b      	ldr	r1, [pc, #44]	@ (80059f8 <MX_LWIP_Init+0x270>)
 80059ca:	480f      	ldr	r0, [pc, #60]	@ (8005a08 <MX_LWIP_Init+0x280>)
 80059cc:	f000 fdc6 	bl	800655c <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80059d0:	bf00      	nop
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	200007ec 	.word	0x200007ec
 80059dc:	200007f0 	.word	0x200007f0
 80059e0:	200007f4 	.word	0x200007f4
 80059e4:	200007e0 	.word	0x200007e0
 80059e8:	200007e4 	.word	0x200007e4
 80059ec:	200007e8 	.word	0x200007e8
 80059f0:	0800a569 	.word	0x0800a569
 80059f4:	08005f4d 	.word	0x08005f4d
 80059f8:	200007ac 	.word	0x200007ac
 80059fc:	08005a0d 	.word	0x08005a0d
 8005a00:	200007f8 	.word	0x200007f8
 8005a04:	0801554c 	.word	0x0801554c
 8005a08:	08006215 	.word	0x08006215

08005a0c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005a32:	2320      	movs	r3, #32
 8005a34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a36:	f3bf 8f4f 	dsb	sy
}
 8005a3a:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8005a3c:	e00b      	b.n	8005a56 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8005a3e:	4a0d      	ldr	r2, [pc, #52]	@ (8005a74 <SCB_InvalidateDCache_by_Addr+0x54>)
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	dcf0      	bgt.n	8005a3e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005a5c:	f3bf 8f4f 	dsb	sy
}
 8005a60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005a62:	f3bf 8f6f 	isb	sy
}
 8005a66:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8005a68:	bf00      	nop
 8005a6a:	371c      	adds	r7, #28
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	e000ed00 	.word	0xe000ed00

08005a78 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8005a80:	4b04      	ldr	r3, [pc, #16]	@ (8005a94 <HAL_ETH_RxCpltCallback+0x1c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 f887 	bl	8006b98 <osSemaphoreRelease>
}
 8005a8a:	bf00      	nop
 8005a8c:	3708      	adds	r7, #8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	200051a8 	.word	0x200051a8

08005a98 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8005aa0:	4b04      	ldr	r3, [pc, #16]	@ (8005ab4 <HAL_ETH_TxCpltCallback+0x1c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f001 f877 	bl	8006b98 <osSemaphoreRelease>
}
 8005aaa:	bf00      	nop
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	200051ac 	.word	0x200051ac

08005ab8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7fc fb54 	bl	800216e <HAL_ETH_GetDMAError>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005acc:	2b80      	cmp	r3, #128	@ 0x80
 8005ace:	d104      	bne.n	8005ada <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005ad0:	4b04      	ldr	r3, [pc, #16]	@ (8005ae4 <HAL_ETH_ErrorCallback+0x2c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f001 f85f 	bl	8006b98 <osSemaphoreRelease>
  }
}
 8005ada:	bf00      	nop
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	200051a8 	.word	0x200051a8

08005ae8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b0aa      	sub	sp, #168	@ 0xa8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005af0:	2300      	movs	r3, #0
 8005af2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 8005afc:	2300      	movs	r3, #0
 8005afe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8005b02:	f107 0310 	add.w	r3, r7, #16
 8005b06:	2264      	movs	r2, #100	@ 0x64
 8005b08:	2100      	movs	r1, #0
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f00e fe9e 	bl	801484c <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005b10:	4b89      	ldr	r3, [pc, #548]	@ (8005d38 <low_level_init+0x250>)
 8005b12:	4a8a      	ldr	r2, [pc, #552]	@ (8005d3c <low_level_init+0x254>)
 8005b14:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005b16:	2300      	movs	r3, #0
 8005b18:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005b1a:	2380      	movs	r3, #128	@ 0x80
 8005b1c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005b1e:	23e1      	movs	r3, #225	@ 0xe1
 8005b20:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005b22:	2300      	movs	r3, #0
 8005b24:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005b26:	2300      	movs	r3, #0
 8005b28:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005b2e:	4a82      	ldr	r2, [pc, #520]	@ (8005d38 <low_level_init+0x250>)
 8005b30:	f107 0308 	add.w	r3, r7, #8
 8005b34:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005b36:	4b80      	ldr	r3, [pc, #512]	@ (8005d38 <low_level_init+0x250>)
 8005b38:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005b3c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005b3e:	4b7e      	ldr	r3, [pc, #504]	@ (8005d38 <low_level_init+0x250>)
 8005b40:	4a7f      	ldr	r2, [pc, #508]	@ (8005d40 <low_level_init+0x258>)
 8005b42:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005b44:	4b7c      	ldr	r3, [pc, #496]	@ (8005d38 <low_level_init+0x250>)
 8005b46:	4a7f      	ldr	r2, [pc, #508]	@ (8005d44 <low_level_init+0x25c>)
 8005b48:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005b4a:	4b7b      	ldr	r3, [pc, #492]	@ (8005d38 <low_level_init+0x250>)
 8005b4c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005b50:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005b52:	4879      	ldr	r0, [pc, #484]	@ (8005d38 <low_level_init+0x250>)
 8005b54:	f7fb fcc2 	bl	80014dc <HAL_ETH_Init>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005b5e:	2238      	movs	r2, #56	@ 0x38
 8005b60:	2100      	movs	r1, #0
 8005b62:	4879      	ldr	r0, [pc, #484]	@ (8005d48 <low_level_init+0x260>)
 8005b64:	f00e fe72 	bl	801484c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005b68:	4b77      	ldr	r3, [pc, #476]	@ (8005d48 <low_level_init+0x260>)
 8005b6a:	2221      	movs	r2, #33	@ 0x21
 8005b6c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005b6e:	4b76      	ldr	r3, [pc, #472]	@ (8005d48 <low_level_init+0x260>)
 8005b70:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8005b74:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005b76:	4b74      	ldr	r3, [pc, #464]	@ (8005d48 <low_level_init+0x260>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005b7c:	4873      	ldr	r0, [pc, #460]	@ (8005d4c <low_level_init+0x264>)
 8005b7e:	f005 f9d5 	bl	800af2c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2206      	movs	r2, #6
 8005b86:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8005d38 <low_level_init+0x250>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	781a      	ldrb	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005b96:	4b68      	ldr	r3, [pc, #416]	@ (8005d38 <low_level_init+0x250>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	785a      	ldrb	r2, [r3, #1]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005ba2:	4b65      	ldr	r3, [pc, #404]	@ (8005d38 <low_level_init+0x250>)
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	789a      	ldrb	r2, [r3, #2]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005bae:	4b62      	ldr	r3, [pc, #392]	@ (8005d38 <low_level_init+0x250>)
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	78da      	ldrb	r2, [r3, #3]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005bba:	4b5f      	ldr	r3, [pc, #380]	@ (8005d38 <low_level_init+0x250>)
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	791a      	ldrb	r2, [r3, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005bc6:	4b5c      	ldr	r3, [pc, #368]	@ (8005d38 <low_level_init+0x250>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	795a      	ldrb	r2, [r3, #5]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005bd8:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005be0:	f043 030a 	orr.w	r3, r3, #10
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8005bec:	2200      	movs	r2, #0
 8005bee:	2100      	movs	r1, #0
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	f000 fecf 	bl	8006994 <osSemaphoreNew>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	4a55      	ldr	r2, [pc, #340]	@ (8005d50 <low_level_init+0x268>)
 8005bfa:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2100      	movs	r1, #0
 8005c00:	2001      	movs	r0, #1
 8005c02:	f000 fec7 	bl	8006994 <osSemaphoreNew>
 8005c06:	4603      	mov	r3, r0
 8005c08:	4a52      	ldr	r2, [pc, #328]	@ (8005d54 <low_level_init+0x26c>)
 8005c0a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005c0c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8005c10:	2224      	movs	r2, #36	@ 0x24
 8005c12:	2100      	movs	r1, #0
 8005c14:	4618      	mov	r0, r3
 8005c16:	f00e fe19 	bl	801484c <memset>
  attributes.name = "EthIf";
 8005c1a:	4b4f      	ldr	r3, [pc, #316]	@ (8005d58 <low_level_init+0x270>)
 8005c1c:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005c1e:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8005c22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8005c26:	2330      	movs	r3, #48	@ 0x30
 8005c28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8005c2c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8005c30:	461a      	mov	r2, r3
 8005c32:	6879      	ldr	r1, [r7, #4]
 8005c34:	4849      	ldr	r0, [pc, #292]	@ (8005d5c <low_level_init+0x274>)
 8005c36:	f000 fc91 	bl	800655c <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005c3a:	4949      	ldr	r1, [pc, #292]	@ (8005d60 <low_level_init+0x278>)
 8005c3c:	4849      	ldr	r0, [pc, #292]	@ (8005d64 <low_level_init+0x27c>)
 8005c3e:	f7fb fa14 	bl	800106a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8005c42:	4848      	ldr	r0, [pc, #288]	@ (8005d64 <low_level_init+0x27c>)
 8005c44:	f7fb fa43 	bl	80010ce <LAN8742_Init>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d006      	beq.n	8005c5c <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f005 fd46 	bl	800b6e0 <netif_set_link_down>
    netif_set_down(netif);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f005 fcdd 	bl	800b614 <netif_set_down>
 8005c5a:	e06a      	b.n	8005d32 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8005c5c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d164      	bne.n	8005d2e <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005c64:	483f      	ldr	r0, [pc, #252]	@ (8005d64 <low_level_init+0x27c>)
 8005c66:	f7fb fa7f 	bl	8001168 <LAN8742_GetLinkState>
 8005c6a:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8005c6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	dc06      	bgt.n	8005c84 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f005 fd32 	bl	800b6e0 <netif_set_link_down>
      netif_set_down(netif);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f005 fcc9 	bl	800b614 <netif_set_down>
 8005c82:	e056      	b.n	8005d32 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8005c84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c88:	3b02      	subs	r3, #2
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	d82a      	bhi.n	8005ce4 <low_level_init+0x1fc>
 8005c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c94 <low_level_init+0x1ac>)
 8005c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c94:	08005ca5 	.word	0x08005ca5
 8005c98:	08005cb7 	.word	0x08005cb7
 8005c9c:	08005cc7 	.word	0x08005cc7
 8005ca0:	08005cd7 	.word	0x08005cd7
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8005ca4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005ca8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8005cac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005cb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8005cb4:	e01f      	b.n	8005cf6 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8005cbc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005cc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8005cc4:	e017      	b.n	8005cf6 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8005cc6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005cca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8005cd4:	e00f      	b.n	8005cf6 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8005ce2:	e008      	b.n	8005cf6 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8005ce4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005ce8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8005cec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005cf0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8005cf4:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005cf6:	f107 0310 	add.w	r3, r7, #16
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	480e      	ldr	r0, [pc, #56]	@ (8005d38 <low_level_init+0x250>)
 8005cfe:	f7fc f8d5 	bl	8001eac <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8005d02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005d06:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8005d08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005d0e:	f107 0310 	add.w	r3, r7, #16
 8005d12:	4619      	mov	r1, r3
 8005d14:	4808      	ldr	r0, [pc, #32]	@ (8005d38 <low_level_init+0x250>)
 8005d16:	f7fc f9c0 	bl	800209a <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8005d1a:	4807      	ldr	r0, [pc, #28]	@ (8005d38 <low_level_init+0x250>)
 8005d1c:	f7fb fc78 	bl	8001610 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f005 fc0b 	bl	800b53c <netif_set_up>
    netif_set_link_up(netif);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f005 fca6 	bl	800b678 <netif_set_link_up>
 8005d2c:	e001      	b.n	8005d32 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 8005d2e:	f7fa fee5 	bl	8000afc <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8005d32:	37a8      	adds	r7, #168	@ 0xa8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	200051b0 	.word	0x200051b0
 8005d3c:	40028000 	.word	0x40028000
 8005d40:	2000012c 	.word	0x2000012c
 8005d44:	2000008c 	.word	0x2000008c
 8005d48:	20005260 	.word	0x20005260
 8005d4c:	080180b0 	.word	0x080180b0
 8005d50:	200051a8 	.word	0x200051a8
 8005d54:	200051ac 	.word	0x200051ac
 8005d58:	08015554 	.word	0x08015554
 8005d5c:	08005ef9 	.word	0x08005ef9
 8005d60:	2000000c 	.word	0x2000000c
 8005d64:	20005298 	.word	0x20005298

08005d68 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b092      	sub	sp, #72	@ 0x48
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8005d76:	2300      	movs	r3, #0
 8005d78:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005d80:	f107 030c 	add.w	r3, r7, #12
 8005d84:	2230      	movs	r2, #48	@ 0x30
 8005d86:	2100      	movs	r1, #0
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f00e fd5f 	bl	801484c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005d8e:	f107 030c 	add.w	r3, r7, #12
 8005d92:	2230      	movs	r2, #48	@ 0x30
 8005d94:	2100      	movs	r1, #0
 8005d96:	4618      	mov	r0, r3
 8005d98:	f00e fd58 	bl	801484c <memset>

  for(q = p; q != NULL; q = q->next)
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005da0:	e045      	b.n	8005e2e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005da2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005da4:	2b03      	cmp	r3, #3
 8005da6:	d902      	bls.n	8005dae <low_level_output+0x46>
      return ERR_IF;
 8005da8:	f06f 030b 	mvn.w	r3, #11
 8005dac:	e07f      	b.n	8005eae <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8005dae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005db0:	6859      	ldr	r1, [r3, #4]
 8005db2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005db4:	4613      	mov	r3, r2
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	4413      	add	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	3348      	adds	r3, #72	@ 0x48
 8005dbe:	443b      	add	r3, r7
 8005dc0:	3b3c      	subs	r3, #60	@ 0x3c
 8005dc2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005dc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dc6:	895b      	ldrh	r3, [r3, #10]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dcc:	4613      	mov	r3, r2
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	4413      	add	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	3348      	adds	r3, #72	@ 0x48
 8005dd6:	443b      	add	r3, r7
 8005dd8:	3b38      	subs	r3, #56	@ 0x38
 8005dda:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d011      	beq.n	8005e06 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005de2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005de4:	1e5a      	subs	r2, r3, #1
 8005de6:	f107 000c 	add.w	r0, r7, #12
 8005dea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005dec:	460b      	mov	r3, r1
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	440b      	add	r3, r1
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	18c1      	adds	r1, r0, r3
 8005df6:	4613      	mov	r3, r2
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	4413      	add	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	3348      	adds	r3, #72	@ 0x48
 8005e00:	443b      	add	r3, r7
 8005e02:	3b34      	subs	r3, #52	@ 0x34
 8005e04:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005e06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d109      	bne.n	8005e22 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005e0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e10:	4613      	mov	r3, r2
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	4413      	add	r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	3348      	adds	r3, #72	@ 0x48
 8005e1a:	443b      	add	r3, r7
 8005e1c:	3b34      	subs	r3, #52	@ 0x34
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005e22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e24:	3301      	adds	r3, #1
 8005e26:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8005e28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1b6      	bne.n	8005da2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	891b      	ldrh	r3, [r3, #8]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8005eb8 <low_level_output+0x150>)
 8005e3c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005e3e:	4a1e      	ldr	r2, [pc, #120]	@ (8005eb8 <low_level_output+0x150>)
 8005e40:	f107 030c 	add.w	r3, r7, #12
 8005e44:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005e46:	4a1c      	ldr	r2, [pc, #112]	@ (8005eb8 <low_level_output+0x150>)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8005e4c:	6838      	ldr	r0, [r7, #0]
 8005e4e:	f006 f8cb 	bl	800bfe8 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8005e52:	4919      	ldr	r1, [pc, #100]	@ (8005eb8 <low_level_output+0x150>)
 8005e54:	4819      	ldr	r0, [pc, #100]	@ (8005ebc <low_level_output+0x154>)
 8005e56:	f7fb fccb 	bl	80017f0 <HAL_ETH_Transmit_IT>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d103      	bne.n	8005e68 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005e66:	e01b      	b.n	8005ea0 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8005e68:	4814      	ldr	r0, [pc, #80]	@ (8005ebc <low_level_output+0x154>)
 8005e6a:	f7fc f973 	bl	8002154 <HAL_ETH_GetError>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00d      	beq.n	8005e94 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8005e78:	4b11      	ldr	r3, [pc, #68]	@ (8005ec0 <low_level_output+0x158>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8005e80:	4618      	mov	r0, r3
 8005e82:	f000 fe23 	bl	8006acc <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8005e86:	480d      	ldr	r0, [pc, #52]	@ (8005ebc <low_level_output+0x154>)
 8005e88:	f7fb fe52 	bl	8001b30 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8005e8c:	23fe      	movs	r3, #254	@ 0xfe
 8005e8e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005e92:	e005      	b.n	8005ea0 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8005e94:	6838      	ldr	r0, [r7, #0]
 8005e96:	f006 f801 	bl	800be9c <pbuf_free>
        errval =  ERR_IF;
 8005e9a:	23f4      	movs	r3, #244	@ 0xf4
 8005e9c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8005ea0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005ea4:	f113 0f02 	cmn.w	r3, #2
 8005ea8:	d0d3      	beq.n	8005e52 <low_level_output+0xea>

  return errval;
 8005eaa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3748      	adds	r7, #72	@ 0x48
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20005260 	.word	0x20005260
 8005ebc:	200051b0 	.word	0x200051b0
 8005ec0:	200051ac 	.word	0x200051ac

08005ec4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005ed0:	4b07      	ldr	r3, [pc, #28]	@ (8005ef0 <low_level_input+0x2c>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d105      	bne.n	8005ee4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005ed8:	f107 030c 	add.w	r3, r7, #12
 8005edc:	4619      	mov	r1, r3
 8005ede:	4805      	ldr	r0, [pc, #20]	@ (8005ef4 <low_level_input+0x30>)
 8005ee0:	f7fb fce2 	bl	80018a8 <HAL_ETH_ReadData>
  }

  return p;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	200051a4 	.word	0x200051a4
 8005ef4:	200051b0 	.word	0x200051b0

08005ef8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005f00:	2300      	movs	r3, #0
 8005f02:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005f08:	4b0f      	ldr	r3, [pc, #60]	@ (8005f48 <ethernetif_input+0x50>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8005f10:	4618      	mov	r0, r3
 8005f12:	f000 fddb 	bl	8006acc <osSemaphoreAcquire>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1f5      	bne.n	8005f08 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005f1c:	68b8      	ldr	r0, [r7, #8]
 8005f1e:	f7ff ffd1 	bl	8005ec4 <low_level_input>
 8005f22:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00a      	beq.n	8005f40 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	68b9      	ldr	r1, [r7, #8]
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	4798      	blx	r3
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f005 ffae 	bl	800be9c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1ea      	bne.n	8005f1c <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005f46:	e7df      	b.n	8005f08 <ethernetif_input+0x10>
 8005f48:	200051a8 	.word	0x200051a8

08005f4c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d106      	bne.n	8005f68 <ethernetif_init+0x1c>
 8005f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8005f94 <ethernetif_init+0x48>)
 8005f5c:	f240 220d 	movw	r2, #525	@ 0x20d
 8005f60:	490d      	ldr	r1, [pc, #52]	@ (8005f98 <ethernetif_init+0x4c>)
 8005f62:	480e      	ldr	r0, [pc, #56]	@ (8005f9c <ethernetif_init+0x50>)
 8005f64:	f00e fb78 	bl	8014658 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2273      	movs	r2, #115	@ 0x73
 8005f6c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2274      	movs	r2, #116	@ 0x74
 8005f74:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a09      	ldr	r2, [pc, #36]	@ (8005fa0 <ethernetif_init+0x54>)
 8005f7c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a08      	ldr	r2, [pc, #32]	@ (8005fa4 <ethernetif_init+0x58>)
 8005f82:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f7ff fdaf 	bl	8005ae8 <low_level_init>

  return ERR_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	0801555c 	.word	0x0801555c
 8005f98:	08015578 	.word	0x08015578
 8005f9c:	08015588 	.word	0x08015588
 8005fa0:	08012581 	.word	0x08012581
 8005fa4:	08005d69 	.word	0x08005d69

08005fa8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005fb4:	68f9      	ldr	r1, [r7, #12]
 8005fb6:	4809      	ldr	r0, [pc, #36]	@ (8005fdc <pbuf_free_custom+0x34>)
 8005fb8:	f005 f8a8 	bl	800b10c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005fbc:	4b08      	ldr	r3, [pc, #32]	@ (8005fe0 <pbuf_free_custom+0x38>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d107      	bne.n	8005fd4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005fc4:	4b06      	ldr	r3, [pc, #24]	@ (8005fe0 <pbuf_free_custom+0x38>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005fca:	4b06      	ldr	r3, [pc, #24]	@ (8005fe4 <pbuf_free_custom+0x3c>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 fde2 	bl	8006b98 <osSemaphoreRelease>
  }
}
 8005fd4:	bf00      	nop
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	080180b0 	.word	0x080180b0
 8005fe0:	200051a4 	.word	0x200051a4
 8005fe4:	200051a8 	.word	0x200051a8

08005fe8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005fec:	f7fb f964 	bl	80012b8 <HAL_GetTick>
 8005ff0:	4603      	mov	r3, r0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	bd80      	pop	{r7, pc}
	...

08005ff8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08e      	sub	sp, #56	@ 0x38
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006000:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006004:	2200      	movs	r2, #0
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	605a      	str	r2, [r3, #4]
 800600a:	609a      	str	r2, [r3, #8]
 800600c:	60da      	str	r2, [r3, #12]
 800600e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a52      	ldr	r2, [pc, #328]	@ (8006160 <HAL_ETH_MspInit+0x168>)
 8006016:	4293      	cmp	r3, r2
 8006018:	f040 809e 	bne.w	8006158 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800601c:	4b51      	ldr	r3, [pc, #324]	@ (8006164 <HAL_ETH_MspInit+0x16c>)
 800601e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006020:	4a50      	ldr	r2, [pc, #320]	@ (8006164 <HAL_ETH_MspInit+0x16c>)
 8006022:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006026:	6313      	str	r3, [r2, #48]	@ 0x30
 8006028:	4b4e      	ldr	r3, [pc, #312]	@ (8006164 <HAL_ETH_MspInit+0x16c>)
 800602a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800602c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006030:	623b      	str	r3, [r7, #32]
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	4b4b      	ldr	r3, [pc, #300]	@ (8006164 <HAL_ETH_MspInit+0x16c>)
 8006036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006038:	4a4a      	ldr	r2, [pc, #296]	@ (8006164 <HAL_ETH_MspInit+0x16c>)
 800603a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800603e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006040:	4b48      	ldr	r3, [pc, #288]	@ (8006164 <HAL_ETH_MspInit+0x16c>)
 8006042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006044:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006048:	61fb      	str	r3, [r7, #28]
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	4b45      	ldr	r3, [pc, #276]	@ (8006164 <HAL_ETH_MspInit+0x16c>)
 800604e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006050:	4a44      	ldr	r2, [pc, #272]	@ (8006164 <HAL_ETH_MspInit+0x16c>)
 8006052:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006056:	6313      	str	r3, [r2, #48]	@ 0x30
 8006058:	4b42      	ldr	r3, [pc, #264]	@ (8006164 <HAL_ETH_MspInit+0x16c>)
 800605a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006060:	61bb      	str	r3, [r7, #24]
 8006062:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006064:	4b3f      	ldr	r3, [pc, #252]	@ (8006164 <HAL_ETH_MspInit+0x16c>)
 8006066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006068:	4a3e      	ldr	r2, [pc, #248]	@ (8006164 <HAL_ETH_MspInit+0x16c>)
 800606a:	f043 0304 	orr.w	r3, r3, #4
 800606e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006070:	4b3c      	ldr	r3, [pc, #240]	@ (8006164 <HAL_ETH_MspInit+0x16c>)
 8006072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	617b      	str	r3, [r7, #20]
 800607a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800607c:	4b39      	ldr	r3, [pc, #228]	@ (8006164 <HAL_ETH_MspInit+0x16c>)
 800607e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006080:	4a38      	ldr	r2, [pc, #224]	@ (8006164 <HAL_ETH_MspInit+0x16c>)
 8006082:	f043 0301 	orr.w	r3, r3, #1
 8006086:	6313      	str	r3, [r2, #48]	@ 0x30
 8006088:	4b36      	ldr	r3, [pc, #216]	@ (8006164 <HAL_ETH_MspInit+0x16c>)
 800608a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	613b      	str	r3, [r7, #16]
 8006092:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006094:	4b33      	ldr	r3, [pc, #204]	@ (8006164 <HAL_ETH_MspInit+0x16c>)
 8006096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006098:	4a32      	ldr	r2, [pc, #200]	@ (8006164 <HAL_ETH_MspInit+0x16c>)
 800609a:	f043 0302 	orr.w	r3, r3, #2
 800609e:	6313      	str	r3, [r2, #48]	@ 0x30
 80060a0:	4b30      	ldr	r3, [pc, #192]	@ (8006164 <HAL_ETH_MspInit+0x16c>)
 80060a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	60fb      	str	r3, [r7, #12]
 80060aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80060ac:	4b2d      	ldr	r3, [pc, #180]	@ (8006164 <HAL_ETH_MspInit+0x16c>)
 80060ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b0:	4a2c      	ldr	r2, [pc, #176]	@ (8006164 <HAL_ETH_MspInit+0x16c>)
 80060b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80060b8:	4b2a      	ldr	r3, [pc, #168]	@ (8006164 <HAL_ETH_MspInit+0x16c>)
 80060ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c0:	60bb      	str	r3, [r7, #8]
 80060c2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80060c4:	2332      	movs	r3, #50	@ 0x32
 80060c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060c8:	2302      	movs	r3, #2
 80060ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060cc:	2300      	movs	r3, #0
 80060ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060d0:	2303      	movs	r3, #3
 80060d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80060d4:	230b      	movs	r3, #11
 80060d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060dc:	4619      	mov	r1, r3
 80060de:	4822      	ldr	r0, [pc, #136]	@ (8006168 <HAL_ETH_MspInit+0x170>)
 80060e0:	f7fc fc72 	bl	80029c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80060e4:	2386      	movs	r3, #134	@ 0x86
 80060e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060e8:	2302      	movs	r3, #2
 80060ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ec:	2300      	movs	r3, #0
 80060ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060f0:	2303      	movs	r3, #3
 80060f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80060f4:	230b      	movs	r3, #11
 80060f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060fc:	4619      	mov	r1, r3
 80060fe:	481b      	ldr	r0, [pc, #108]	@ (800616c <HAL_ETH_MspInit+0x174>)
 8006100:	f7fc fc62 	bl	80029c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006104:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006108:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800610a:	2302      	movs	r3, #2
 800610c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800610e:	2300      	movs	r3, #0
 8006110:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006112:	2303      	movs	r3, #3
 8006114:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006116:	230b      	movs	r3, #11
 8006118:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800611a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800611e:	4619      	mov	r1, r3
 8006120:	4813      	ldr	r0, [pc, #76]	@ (8006170 <HAL_ETH_MspInit+0x178>)
 8006122:	f7fc fc51 	bl	80029c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006126:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800612a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800612c:	2302      	movs	r3, #2
 800612e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006130:	2300      	movs	r3, #0
 8006132:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006134:	2303      	movs	r3, #3
 8006136:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006138:	230b      	movs	r3, #11
 800613a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800613c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006140:	4619      	mov	r1, r3
 8006142:	480c      	ldr	r0, [pc, #48]	@ (8006174 <HAL_ETH_MspInit+0x17c>)
 8006144:	f7fc fc40 	bl	80029c8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006148:	2200      	movs	r2, #0
 800614a:	2105      	movs	r1, #5
 800614c:	203d      	movs	r0, #61	@ 0x3d
 800614e:	f7fb f99b 	bl	8001488 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006152:	203d      	movs	r0, #61	@ 0x3d
 8006154:	f7fb f9b4 	bl	80014c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006158:	bf00      	nop
 800615a:	3738      	adds	r7, #56	@ 0x38
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	40028000 	.word	0x40028000
 8006164:	40023800 	.word	0x40023800
 8006168:	40020800 	.word	0x40020800
 800616c:	40020000 	.word	0x40020000
 8006170:	40020400 	.word	0x40020400
 8006174:	40021800 	.word	0x40021800

08006178 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800617c:	4802      	ldr	r0, [pc, #8]	@ (8006188 <ETH_PHY_IO_Init+0x10>)
 800617e:	f7fb ffa7 	bl	80020d0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	bd80      	pop	{r7, pc}
 8006188:	200051b0 	.word	0x200051b0

0800618c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
  return 0;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	68f9      	ldr	r1, [r7, #12]
 80061ae:	4807      	ldr	r0, [pc, #28]	@ (80061cc <ETH_PHY_IO_ReadReg+0x30>)
 80061b0:	f7fb fde8 	bl	8001d84 <HAL_ETH_ReadPHYRegister>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80061ba:	f04f 33ff 	mov.w	r3, #4294967295
 80061be:	e000      	b.n	80061c2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	200051b0 	.word	0x200051b0

080061d0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	68f9      	ldr	r1, [r7, #12]
 80061e2:	4807      	ldr	r0, [pc, #28]	@ (8006200 <ETH_PHY_IO_WriteReg+0x30>)
 80061e4:	f7fb fe19 	bl	8001e1a <HAL_ETH_WritePHYRegister>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d002      	beq.n	80061f4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80061ee:	f04f 33ff 	mov.w	r3, #4294967295
 80061f2:	e000      	b.n	80061f6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	200051b0 	.word	0x200051b0

08006204 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006208:	f7fb f856 	bl	80012b8 <HAL_GetTick>
 800620c:	4603      	mov	r3, r0
}
 800620e:	4618      	mov	r0, r3
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b0a0      	sub	sp, #128	@ 0x80
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800621c:	f107 0308 	add.w	r3, r7, #8
 8006220:	2264      	movs	r2, #100	@ 0x64
 8006222:	2100      	movs	r1, #0
 8006224:	4618      	mov	r0, r3
 8006226:	f00e fb11 	bl	801484c <memset>
  int32_t PHYLinkState = 0;
 800622a:	2300      	movs	r3, #0
 800622c:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006232:	2300      	movs	r3, #0
 8006234:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006236:	2300      	movs	r3, #0
 8006238:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800623e:	483a      	ldr	r0, [pc, #232]	@ (8006328 <ethernet_link_thread+0x114>)
 8006240:	f7fa ff92 	bl	8001168 <LAN8742_GetLinkState>
 8006244:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006246:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006248:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800624c:	089b      	lsrs	r3, r3, #2
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00c      	beq.n	8006272 <ethernet_link_thread+0x5e>
 8006258:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800625a:	2b01      	cmp	r3, #1
 800625c:	dc09      	bgt.n	8006272 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800625e:	4833      	ldr	r0, [pc, #204]	@ (800632c <ethernet_link_thread+0x118>)
 8006260:	f7fb fa46 	bl	80016f0 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8006264:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006266:	f005 f9d5 	bl	800b614 <netif_set_down>
    netif_set_link_down(netif);
 800626a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800626c:	f005 fa38 	bl	800b6e0 <netif_set_link_down>
 8006270:	e055      	b.n	800631e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006272:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006274:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006278:	f003 0304 	and.w	r3, r3, #4
 800627c:	2b00      	cmp	r3, #0
 800627e:	d14e      	bne.n	800631e <ethernet_link_thread+0x10a>
 8006280:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006282:	2b01      	cmp	r3, #1
 8006284:	dd4b      	ble.n	800631e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8006286:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006288:	3b02      	subs	r3, #2
 800628a:	2b03      	cmp	r3, #3
 800628c:	d82a      	bhi.n	80062e4 <ethernet_link_thread+0xd0>
 800628e:	a201      	add	r2, pc, #4	@ (adr r2, 8006294 <ethernet_link_thread+0x80>)
 8006290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006294:	080062a5 	.word	0x080062a5
 8006298:	080062b7 	.word	0x080062b7
 800629c:	080062c7 	.word	0x080062c7
 80062a0:	080062d7 	.word	0x080062d7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80062a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80062a8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80062aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80062ae:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80062b0:	2301      	movs	r3, #1
 80062b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80062b4:	e017      	b.n	80062e6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80062b6:	2300      	movs	r3, #0
 80062b8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80062ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80062be:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80062c0:	2301      	movs	r3, #1
 80062c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80062c4:	e00f      	b.n	80062e6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80062c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80062ca:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80062cc:	2300      	movs	r3, #0
 80062ce:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80062d0:	2301      	movs	r3, #1
 80062d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80062d4:	e007      	b.n	80062e6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80062d6:	2300      	movs	r3, #0
 80062d8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80062da:	2300      	movs	r3, #0
 80062dc:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80062de:	2301      	movs	r3, #1
 80062e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80062e2:	e000      	b.n	80062e6 <ethernet_link_thread+0xd2>
    default:
      break;
 80062e4:	bf00      	nop
    }

    if(linkchanged)
 80062e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d018      	beq.n	800631e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80062ec:	f107 0308 	add.w	r3, r7, #8
 80062f0:	4619      	mov	r1, r3
 80062f2:	480e      	ldr	r0, [pc, #56]	@ (800632c <ethernet_link_thread+0x118>)
 80062f4:	f7fb fdda 	bl	8001eac <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80062f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062fa:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80062fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062fe:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006300:	f107 0308 	add.w	r3, r7, #8
 8006304:	4619      	mov	r1, r3
 8006306:	4809      	ldr	r0, [pc, #36]	@ (800632c <ethernet_link_thread+0x118>)
 8006308:	f7fb fec7 	bl	800209a <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800630c:	4807      	ldr	r0, [pc, #28]	@ (800632c <ethernet_link_thread+0x118>)
 800630e:	f7fb f97f 	bl	8001610 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8006312:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006314:	f005 f912 	bl	800b53c <netif_set_up>
      netif_set_link_up(netif);
 8006318:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800631a:	f005 f9ad 	bl	800b678 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800631e:	2064      	movs	r0, #100	@ 0x64
 8006320:	f000 f9c2 	bl	80066a8 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006324:	e78b      	b.n	800623e <ethernet_link_thread+0x2a>
 8006326:	bf00      	nop
 8006328:	20005298 	.word	0x20005298
 800632c:	200051b0 	.word	0x200051b0

08006330 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af02      	add	r7, sp, #8
 8006336:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006338:	4812      	ldr	r0, [pc, #72]	@ (8006384 <HAL_ETH_RxAllocateCallback+0x54>)
 800633a:	f004 fe73 	bl	800b024 <memp_malloc_pool>
 800633e:	60f8      	str	r0, [r7, #12]
  if (p)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d014      	beq.n	8006370 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f103 0220 	add.w	r2, r3, #32
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4a0d      	ldr	r2, [pc, #52]	@ (8006388 <HAL_ETH_RxAllocateCallback+0x58>)
 8006354:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800635e:	9201      	str	r2, [sp, #4]
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2241      	movs	r2, #65	@ 0x41
 8006366:	2100      	movs	r1, #0
 8006368:	2000      	movs	r0, #0
 800636a:	f005 fbdd 	bl	800bb28 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800636e:	e005      	b.n	800637c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006370:	4b06      	ldr	r3, [pc, #24]	@ (800638c <HAL_ETH_RxAllocateCallback+0x5c>)
 8006372:	2201      	movs	r2, #1
 8006374:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]
}
 800637c:	bf00      	nop
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	080180b0 	.word	0x080180b0
 8006388:	08005fa9 	.word	0x08005fa9
 800638c:	200051a4 	.word	0x200051a4

08006390 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80063a6:	2300      	movs	r3, #0
 80063a8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3b20      	subs	r3, #32
 80063ae:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	2200      	movs	r2, #0
 80063b4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	2200      	movs	r2, #0
 80063ba:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	887a      	ldrh	r2, [r7, #2]
 80063c0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d103      	bne.n	80063d2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	69fa      	ldr	r2, [r7, #28]
 80063ce:	601a      	str	r2, [r3, #0]
 80063d0:	e003      	b.n	80063da <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	69fa      	ldr	r2, [r7, #28]
 80063d8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	69fa      	ldr	r2, [r7, #28]
 80063de:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	61fb      	str	r3, [r7, #28]
 80063e6:	e009      	b.n	80063fc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	891a      	ldrh	r2, [r3, #8]
 80063ec:	887b      	ldrh	r3, [r7, #2]
 80063ee:	4413      	add	r3, r2
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	61fb      	str	r3, [r7, #28]
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1f2      	bne.n	80063e8 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8006402:	887b      	ldrh	r3, [r7, #2]
 8006404:	4619      	mov	r1, r3
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7ff fb0a 	bl	8005a20 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800640c:	bf00      	nop
 800640e:	3720      	adds	r7, #32
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f005 fd3d 	bl	800be9c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8006422:	bf00      	nop
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800642a:	b480      	push	{r7}
 800642c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800642e:	bf00      	nop
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800643e:	f3ef 8305 	mrs	r3, IPSR
 8006442:	60bb      	str	r3, [r7, #8]
  return(result);
 8006444:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10f      	bne.n	800646a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800644a:	f3ef 8310 	mrs	r3, PRIMASK
 800644e:	607b      	str	r3, [r7, #4]
  return(result);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d105      	bne.n	8006462 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006456:	f3ef 8311 	mrs	r3, BASEPRI
 800645a:	603b      	str	r3, [r7, #0]
  return(result);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d007      	beq.n	8006472 <osKernelInitialize+0x3a>
 8006462:	4b0e      	ldr	r3, [pc, #56]	@ (800649c <osKernelInitialize+0x64>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b02      	cmp	r3, #2
 8006468:	d103      	bne.n	8006472 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800646a:	f06f 0305 	mvn.w	r3, #5
 800646e:	60fb      	str	r3, [r7, #12]
 8006470:	e00c      	b.n	800648c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006472:	4b0a      	ldr	r3, [pc, #40]	@ (800649c <osKernelInitialize+0x64>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d105      	bne.n	8006486 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800647a:	4b08      	ldr	r3, [pc, #32]	@ (800649c <osKernelInitialize+0x64>)
 800647c:	2201      	movs	r2, #1
 800647e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006480:	2300      	movs	r3, #0
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	e002      	b.n	800648c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006486:	f04f 33ff 	mov.w	r3, #4294967295
 800648a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800648c:	68fb      	ldr	r3, [r7, #12]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	200052b8 	.word	0x200052b8

080064a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064a6:	f3ef 8305 	mrs	r3, IPSR
 80064aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80064ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10f      	bne.n	80064d2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064b2:	f3ef 8310 	mrs	r3, PRIMASK
 80064b6:	607b      	str	r3, [r7, #4]
  return(result);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d105      	bne.n	80064ca <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064be:	f3ef 8311 	mrs	r3, BASEPRI
 80064c2:	603b      	str	r3, [r7, #0]
  return(result);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d007      	beq.n	80064da <osKernelStart+0x3a>
 80064ca:	4b0f      	ldr	r3, [pc, #60]	@ (8006508 <osKernelStart+0x68>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d103      	bne.n	80064da <osKernelStart+0x3a>
    stat = osErrorISR;
 80064d2:	f06f 0305 	mvn.w	r3, #5
 80064d6:	60fb      	str	r3, [r7, #12]
 80064d8:	e010      	b.n	80064fc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80064da:	4b0b      	ldr	r3, [pc, #44]	@ (8006508 <osKernelStart+0x68>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d109      	bne.n	80064f6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80064e2:	f7ff ffa2 	bl	800642a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80064e6:	4b08      	ldr	r3, [pc, #32]	@ (8006508 <osKernelStart+0x68>)
 80064e8:	2202      	movs	r2, #2
 80064ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80064ec:	f002 f92e 	bl	800874c <vTaskStartScheduler>
      stat = osOK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	e002      	b.n	80064fc <osKernelStart+0x5c>
    } else {
      stat = osError;
 80064f6:	f04f 33ff 	mov.w	r3, #4294967295
 80064fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80064fc:	68fb      	ldr	r3, [r7, #12]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	200052b8 	.word	0x200052b8

0800650c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006512:	f3ef 8305 	mrs	r3, IPSR
 8006516:	60bb      	str	r3, [r7, #8]
  return(result);
 8006518:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10f      	bne.n	800653e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800651e:	f3ef 8310 	mrs	r3, PRIMASK
 8006522:	607b      	str	r3, [r7, #4]
  return(result);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d105      	bne.n	8006536 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800652a:	f3ef 8311 	mrs	r3, BASEPRI
 800652e:	603b      	str	r3, [r7, #0]
  return(result);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d007      	beq.n	8006546 <osKernelGetTickCount+0x3a>
 8006536:	4b08      	ldr	r3, [pc, #32]	@ (8006558 <osKernelGetTickCount+0x4c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b02      	cmp	r3, #2
 800653c:	d103      	bne.n	8006546 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800653e:	f002 fa37 	bl	80089b0 <xTaskGetTickCountFromISR>
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	e002      	b.n	800654c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8006546:	f002 fa23 	bl	8008990 <xTaskGetTickCount>
 800654a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800654c:	68fb      	ldr	r3, [r7, #12]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	200052b8 	.word	0x200052b8

0800655c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800655c:	b580      	push	{r7, lr}
 800655e:	b090      	sub	sp, #64	@ 0x40
 8006560:	af04      	add	r7, sp, #16
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006568:	2300      	movs	r3, #0
 800656a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800656c:	f3ef 8305 	mrs	r3, IPSR
 8006570:	61fb      	str	r3, [r7, #28]
  return(result);
 8006572:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006574:	2b00      	cmp	r3, #0
 8006576:	f040 8090 	bne.w	800669a <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800657a:	f3ef 8310 	mrs	r3, PRIMASK
 800657e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d105      	bne.n	8006592 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006586:	f3ef 8311 	mrs	r3, BASEPRI
 800658a:	617b      	str	r3, [r7, #20]
  return(result);
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <osThreadNew+0x3e>
 8006592:	4b44      	ldr	r3, [pc, #272]	@ (80066a4 <osThreadNew+0x148>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2b02      	cmp	r3, #2
 8006598:	d07f      	beq.n	800669a <osThreadNew+0x13e>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d07c      	beq.n	800669a <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 80065a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80065a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80065a6:	2318      	movs	r3, #24
 80065a8:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80065aa:	2300      	movs	r3, #0
 80065ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80065ae:	f04f 33ff 	mov.w	r3, #4294967295
 80065b2:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d045      	beq.n	8006646 <osThreadNew+0xea>
      if (attr->name != NULL) {
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d002      	beq.n	80065c8 <osThreadNew+0x6c>
        name = attr->name;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80065d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d008      	beq.n	80065ee <osThreadNew+0x92>
 80065dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065de:	2b38      	cmp	r3, #56	@ 0x38
 80065e0:	d805      	bhi.n	80065ee <osThreadNew+0x92>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <osThreadNew+0x96>
        return (NULL);
 80065ee:	2300      	movs	r3, #0
 80065f0:	e054      	b.n	800669c <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	089b      	lsrs	r3, r3, #2
 8006600:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00e      	beq.n	8006628 <osThreadNew+0xcc>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	2ba7      	cmp	r3, #167	@ 0xa7
 8006610:	d90a      	bls.n	8006628 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006616:	2b00      	cmp	r3, #0
 8006618:	d006      	beq.n	8006628 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <osThreadNew+0xcc>
        mem = 1;
 8006622:	2301      	movs	r3, #1
 8006624:	623b      	str	r3, [r7, #32]
 8006626:	e010      	b.n	800664a <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10c      	bne.n	800664a <osThreadNew+0xee>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d108      	bne.n	800664a <osThreadNew+0xee>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d104      	bne.n	800664a <osThreadNew+0xee>
          mem = 0;
 8006640:	2300      	movs	r3, #0
 8006642:	623b      	str	r3, [r7, #32]
 8006644:	e001      	b.n	800664a <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8006646:	2300      	movs	r3, #0
 8006648:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d110      	bne.n	8006672 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006658:	9202      	str	r2, [sp, #8]
 800665a:	9301      	str	r3, [sp, #4]
 800665c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006664:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f001 fe72 	bl	8008350 <xTaskCreateStatic>
 800666c:	4603      	mov	r3, r0
 800666e:	613b      	str	r3, [r7, #16]
 8006670:	e013      	b.n	800669a <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d110      	bne.n	800669a <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667a:	b29a      	uxth	r2, r3
 800667c:	f107 0310 	add.w	r3, r7, #16
 8006680:	9301      	str	r3, [sp, #4]
 8006682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f001 fec6 	bl	800841c <xTaskCreate>
 8006690:	4603      	mov	r3, r0
 8006692:	2b01      	cmp	r3, #1
 8006694:	d001      	beq.n	800669a <osThreadNew+0x13e>
          hTask = NULL;
 8006696:	2300      	movs	r3, #0
 8006698:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800669a:	693b      	ldr	r3, [r7, #16]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3730      	adds	r7, #48	@ 0x30
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	200052b8 	.word	0x200052b8

080066a8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066b0:	f3ef 8305 	mrs	r3, IPSR
 80066b4:	613b      	str	r3, [r7, #16]
  return(result);
 80066b6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10f      	bne.n	80066dc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066bc:	f3ef 8310 	mrs	r3, PRIMASK
 80066c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d105      	bne.n	80066d4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066c8:	f3ef 8311 	mrs	r3, BASEPRI
 80066cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d007      	beq.n	80066e4 <osDelay+0x3c>
 80066d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006700 <osDelay+0x58>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d103      	bne.n	80066e4 <osDelay+0x3c>
    stat = osErrorISR;
 80066dc:	f06f 0305 	mvn.w	r3, #5
 80066e0:	617b      	str	r3, [r7, #20]
 80066e2:	e007      	b.n	80066f4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80066e4:	2300      	movs	r3, #0
 80066e6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f001 fff4 	bl	80086dc <vTaskDelay>
    }
  }

  return (stat);
 80066f4:	697b      	ldr	r3, [r7, #20]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3718      	adds	r7, #24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	200052b8 	.word	0x200052b8

08006704 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006704:	b580      	push	{r7, lr}
 8006706:	b08a      	sub	sp, #40	@ 0x28
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800670c:	2300      	movs	r3, #0
 800670e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006710:	f3ef 8305 	mrs	r3, IPSR
 8006714:	613b      	str	r3, [r7, #16]
  return(result);
 8006716:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8006718:	2b00      	cmp	r3, #0
 800671a:	f040 8085 	bne.w	8006828 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800671e:	f3ef 8310 	mrs	r3, PRIMASK
 8006722:	60fb      	str	r3, [r7, #12]
  return(result);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d105      	bne.n	8006736 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800672a:	f3ef 8311 	mrs	r3, BASEPRI
 800672e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <osMutexNew+0x3a>
 8006736:	4b3f      	ldr	r3, [pc, #252]	@ (8006834 <osMutexNew+0x130>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b02      	cmp	r3, #2
 800673c:	d074      	beq.n	8006828 <osMutexNew+0x124>
    if (attr != NULL) {
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d003      	beq.n	800674c <osMutexNew+0x48>
      type = attr->attr_bits;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	623b      	str	r3, [r7, #32]
 800674a:	e001      	b.n	8006750 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800674c:	2300      	movs	r3, #0
 800674e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	2b00      	cmp	r3, #0
 8006758:	d002      	beq.n	8006760 <osMutexNew+0x5c>
      rmtx = 1U;
 800675a:	2301      	movs	r3, #1
 800675c:	61fb      	str	r3, [r7, #28]
 800675e:	e001      	b.n	8006764 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8006760:	2300      	movs	r3, #0
 8006762:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	f003 0308 	and.w	r3, r3, #8
 800676a:	2b00      	cmp	r3, #0
 800676c:	d15c      	bne.n	8006828 <osMutexNew+0x124>
      mem = -1;
 800676e:	f04f 33ff 	mov.w	r3, #4294967295
 8006772:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d015      	beq.n	80067a6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d006      	beq.n	8006790 <osMutexNew+0x8c>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	2b4f      	cmp	r3, #79	@ 0x4f
 8006788:	d902      	bls.n	8006790 <osMutexNew+0x8c>
          mem = 1;
 800678a:	2301      	movs	r3, #1
 800678c:	61bb      	str	r3, [r7, #24]
 800678e:	e00c      	b.n	80067aa <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d108      	bne.n	80067aa <osMutexNew+0xa6>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d104      	bne.n	80067aa <osMutexNew+0xa6>
            mem = 0;
 80067a0:	2300      	movs	r3, #0
 80067a2:	61bb      	str	r3, [r7, #24]
 80067a4:	e001      	b.n	80067aa <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80067a6:	2300      	movs	r3, #0
 80067a8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d112      	bne.n	80067d6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d007      	beq.n	80067c6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	4619      	mov	r1, r3
 80067bc:	2004      	movs	r0, #4
 80067be:	f000 fe22 	bl	8007406 <xQueueCreateMutexStatic>
 80067c2:	6278      	str	r0, [r7, #36]	@ 0x24
 80067c4:	e016      	b.n	80067f4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	4619      	mov	r1, r3
 80067cc:	2001      	movs	r0, #1
 80067ce:	f000 fe1a 	bl	8007406 <xQueueCreateMutexStatic>
 80067d2:	6278      	str	r0, [r7, #36]	@ 0x24
 80067d4:	e00e      	b.n	80067f4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10b      	bne.n	80067f4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d004      	beq.n	80067ec <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80067e2:	2004      	movs	r0, #4
 80067e4:	f000 fdf7 	bl	80073d6 <xQueueCreateMutex>
 80067e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80067ea:	e003      	b.n	80067f4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80067ec:	2001      	movs	r0, #1
 80067ee:	f000 fdf2 	bl	80073d6 <xQueueCreateMutex>
 80067f2:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80067f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00c      	beq.n	8006814 <osMutexNew+0x110>
        if (attr != NULL) {
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <osMutexNew+0x104>
          name = attr->name;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	617b      	str	r3, [r7, #20]
 8006806:	e001      	b.n	800680c <osMutexNew+0x108>
        } else {
          name = NULL;
 8006808:	2300      	movs	r3, #0
 800680a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800680c:	6979      	ldr	r1, [r7, #20]
 800680e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006810:	f001 fd16 	bl	8008240 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006816:	2b00      	cmp	r3, #0
 8006818:	d006      	beq.n	8006828 <osMutexNew+0x124>
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006822:	f043 0301 	orr.w	r3, r3, #1
 8006826:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800682a:	4618      	mov	r0, r3
 800682c:	3728      	adds	r7, #40	@ 0x28
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	200052b8 	.word	0x200052b8

08006838 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006838:	b580      	push	{r7, lr}
 800683a:	b088      	sub	sp, #32
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f023 0301 	bic.w	r3, r3, #1
 8006848:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006852:	2300      	movs	r3, #0
 8006854:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006856:	f3ef 8305 	mrs	r3, IPSR
 800685a:	613b      	str	r3, [r7, #16]
  return(result);
 800685c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10f      	bne.n	8006882 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006862:	f3ef 8310 	mrs	r3, PRIMASK
 8006866:	60fb      	str	r3, [r7, #12]
  return(result);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d105      	bne.n	800687a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800686e:	f3ef 8311 	mrs	r3, BASEPRI
 8006872:	60bb      	str	r3, [r7, #8]
  return(result);
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d007      	beq.n	800688a <osMutexAcquire+0x52>
 800687a:	4b1d      	ldr	r3, [pc, #116]	@ (80068f0 <osMutexAcquire+0xb8>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b02      	cmp	r3, #2
 8006880:	d103      	bne.n	800688a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8006882:	f06f 0305 	mvn.w	r3, #5
 8006886:	61fb      	str	r3, [r7, #28]
 8006888:	e02c      	b.n	80068e4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d103      	bne.n	8006898 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8006890:	f06f 0303 	mvn.w	r3, #3
 8006894:	61fb      	str	r3, [r7, #28]
 8006896:	e025      	b.n	80068e4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d011      	beq.n	80068c2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800689e:	6839      	ldr	r1, [r7, #0]
 80068a0:	69b8      	ldr	r0, [r7, #24]
 80068a2:	f000 fe02 	bl	80074aa <xQueueTakeMutexRecursive>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d01b      	beq.n	80068e4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d003      	beq.n	80068ba <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80068b2:	f06f 0301 	mvn.w	r3, #1
 80068b6:	61fb      	str	r3, [r7, #28]
 80068b8:	e014      	b.n	80068e4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80068ba:	f06f 0302 	mvn.w	r3, #2
 80068be:	61fb      	str	r3, [r7, #28]
 80068c0:	e010      	b.n	80068e4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	69b8      	ldr	r0, [r7, #24]
 80068c6:	f001 f9cd 	bl	8007c64 <xQueueSemaphoreTake>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d009      	beq.n	80068e4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80068d6:	f06f 0301 	mvn.w	r3, #1
 80068da:	61fb      	str	r3, [r7, #28]
 80068dc:	e002      	b.n	80068e4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80068de:	f06f 0302 	mvn.w	r3, #2
 80068e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80068e4:	69fb      	ldr	r3, [r7, #28]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3720      	adds	r7, #32
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	200052b8 	.word	0x200052b8

080068f4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b088      	sub	sp, #32
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f023 0301 	bic.w	r3, r3, #1
 8006902:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800690c:	2300      	movs	r3, #0
 800690e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006910:	f3ef 8305 	mrs	r3, IPSR
 8006914:	613b      	str	r3, [r7, #16]
  return(result);
 8006916:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10f      	bne.n	800693c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800691c:	f3ef 8310 	mrs	r3, PRIMASK
 8006920:	60fb      	str	r3, [r7, #12]
  return(result);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d105      	bne.n	8006934 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006928:	f3ef 8311 	mrs	r3, BASEPRI
 800692c:	60bb      	str	r3, [r7, #8]
  return(result);
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d007      	beq.n	8006944 <osMutexRelease+0x50>
 8006934:	4b16      	ldr	r3, [pc, #88]	@ (8006990 <osMutexRelease+0x9c>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b02      	cmp	r3, #2
 800693a:	d103      	bne.n	8006944 <osMutexRelease+0x50>
    stat = osErrorISR;
 800693c:	f06f 0305 	mvn.w	r3, #5
 8006940:	61fb      	str	r3, [r7, #28]
 8006942:	e01f      	b.n	8006984 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d103      	bne.n	8006952 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800694a:	f06f 0303 	mvn.w	r3, #3
 800694e:	61fb      	str	r3, [r7, #28]
 8006950:	e018      	b.n	8006984 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d009      	beq.n	800696c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006958:	69b8      	ldr	r0, [r7, #24]
 800695a:	f000 fd6f 	bl	800743c <xQueueGiveMutexRecursive>
 800695e:	4603      	mov	r3, r0
 8006960:	2b01      	cmp	r3, #1
 8006962:	d00f      	beq.n	8006984 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006964:	f06f 0302 	mvn.w	r3, #2
 8006968:	61fb      	str	r3, [r7, #28]
 800696a:	e00b      	b.n	8006984 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800696c:	2300      	movs	r3, #0
 800696e:	2200      	movs	r2, #0
 8006970:	2100      	movs	r1, #0
 8006972:	69b8      	ldr	r0, [r7, #24]
 8006974:	f000 fe48 	bl	8007608 <xQueueGenericSend>
 8006978:	4603      	mov	r3, r0
 800697a:	2b01      	cmp	r3, #1
 800697c:	d002      	beq.n	8006984 <osMutexRelease+0x90>
        stat = osErrorResource;
 800697e:	f06f 0302 	mvn.w	r3, #2
 8006982:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8006984:	69fb      	ldr	r3, [r7, #28]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3720      	adds	r7, #32
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	200052b8 	.word	0x200052b8

08006994 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006994:	b580      	push	{r7, lr}
 8006996:	b08c      	sub	sp, #48	@ 0x30
 8006998:	af02      	add	r7, sp, #8
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80069a0:	2300      	movs	r3, #0
 80069a2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069a4:	f3ef 8305 	mrs	r3, IPSR
 80069a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80069aa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f040 8086 	bne.w	8006abe <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069b2:	f3ef 8310 	mrs	r3, PRIMASK
 80069b6:	617b      	str	r3, [r7, #20]
  return(result);
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d105      	bne.n	80069ca <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069be:	f3ef 8311 	mrs	r3, BASEPRI
 80069c2:	613b      	str	r3, [r7, #16]
  return(result);
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <osSemaphoreNew+0x3e>
 80069ca:	4b3f      	ldr	r3, [pc, #252]	@ (8006ac8 <osSemaphoreNew+0x134>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d075      	beq.n	8006abe <osSemaphoreNew+0x12a>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d072      	beq.n	8006abe <osSemaphoreNew+0x12a>
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d86e      	bhi.n	8006abe <osSemaphoreNew+0x12a>
    mem = -1;
 80069e0:	f04f 33ff 	mov.w	r3, #4294967295
 80069e4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d015      	beq.n	8006a18 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d006      	beq.n	8006a02 <osSemaphoreNew+0x6e>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	2b4f      	cmp	r3, #79	@ 0x4f
 80069fa:	d902      	bls.n	8006a02 <osSemaphoreNew+0x6e>
        mem = 1;
 80069fc:	2301      	movs	r3, #1
 80069fe:	623b      	str	r3, [r7, #32]
 8006a00:	e00c      	b.n	8006a1c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d108      	bne.n	8006a1c <osSemaphoreNew+0x88>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d104      	bne.n	8006a1c <osSemaphoreNew+0x88>
          mem = 0;
 8006a12:	2300      	movs	r3, #0
 8006a14:	623b      	str	r3, [r7, #32]
 8006a16:	e001      	b.n	8006a1c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a22:	d04c      	beq.n	8006abe <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d128      	bne.n	8006a7c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d10a      	bne.n	8006a46 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	2203      	movs	r2, #3
 8006a36:	9200      	str	r2, [sp, #0]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	2001      	movs	r0, #1
 8006a3e:	f000 fbc3 	bl	80071c8 <xQueueGenericCreateStatic>
 8006a42:	6278      	str	r0, [r7, #36]	@ 0x24
 8006a44:	e005      	b.n	8006a52 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8006a46:	2203      	movs	r2, #3
 8006a48:	2100      	movs	r1, #0
 8006a4a:	2001      	movs	r0, #1
 8006a4c:	f000 fc43 	bl	80072d6 <xQueueGenericCreate>
 8006a50:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d022      	beq.n	8006a9e <osSemaphoreNew+0x10a>
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d01f      	beq.n	8006a9e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006a5e:	2300      	movs	r3, #0
 8006a60:	2200      	movs	r2, #0
 8006a62:	2100      	movs	r1, #0
 8006a64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006a66:	f000 fdcf 	bl	8007608 <xQueueGenericSend>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d016      	beq.n	8006a9e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006a70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006a72:	f001 fa97 	bl	8007fa4 <vQueueDelete>
            hSemaphore = NULL;
 8006a76:	2300      	movs	r3, #0
 8006a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a7a:	e010      	b.n	8006a9e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d108      	bne.n	8006a94 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	461a      	mov	r2, r3
 8006a88:	68b9      	ldr	r1, [r7, #8]
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 fd46 	bl	800751c <xQueueCreateCountingSemaphoreStatic>
 8006a90:	6278      	str	r0, [r7, #36]	@ 0x24
 8006a92:	e004      	b.n	8006a9e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006a94:	68b9      	ldr	r1, [r7, #8]
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f000 fd7d 	bl	8007596 <xQueueCreateCountingSemaphore>
 8006a9c:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00c      	beq.n	8006abe <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <osSemaphoreNew+0x11e>
          name = attr->name;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	61fb      	str	r3, [r7, #28]
 8006ab0:	e001      	b.n	8006ab6 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006ab6:	69f9      	ldr	r1, [r7, #28]
 8006ab8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006aba:	f001 fbc1 	bl	8008240 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3728      	adds	r7, #40	@ 0x28
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	200052b8 	.word	0x200052b8

08006acc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b088      	sub	sp, #32
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d103      	bne.n	8006aec <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006ae4:	f06f 0303 	mvn.w	r3, #3
 8006ae8:	61fb      	str	r3, [r7, #28]
 8006aea:	e04b      	b.n	8006b84 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aec:	f3ef 8305 	mrs	r3, IPSR
 8006af0:	617b      	str	r3, [r7, #20]
  return(result);
 8006af2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10f      	bne.n	8006b18 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006af8:	f3ef 8310 	mrs	r3, PRIMASK
 8006afc:	613b      	str	r3, [r7, #16]
  return(result);
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d105      	bne.n	8006b10 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b04:	f3ef 8311 	mrs	r3, BASEPRI
 8006b08:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d026      	beq.n	8006b5e <osSemaphoreAcquire+0x92>
 8006b10:	4b1f      	ldr	r3, [pc, #124]	@ (8006b90 <osSemaphoreAcquire+0xc4>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d122      	bne.n	8006b5e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8006b1e:	f06f 0303 	mvn.w	r3, #3
 8006b22:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006b24:	e02d      	b.n	8006b82 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8006b26:	2300      	movs	r3, #0
 8006b28:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006b2a:	f107 0308 	add.w	r3, r7, #8
 8006b2e:	461a      	mov	r2, r3
 8006b30:	2100      	movs	r1, #0
 8006b32:	69b8      	ldr	r0, [r7, #24]
 8006b34:	f001 f9ae 	bl	8007e94 <xQueueReceiveFromISR>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d003      	beq.n	8006b46 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8006b3e:	f06f 0302 	mvn.w	r3, #2
 8006b42:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006b44:	e01d      	b.n	8006b82 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d01a      	beq.n	8006b82 <osSemaphoreAcquire+0xb6>
 8006b4c:	4b11      	ldr	r3, [pc, #68]	@ (8006b94 <osSemaphoreAcquire+0xc8>)
 8006b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8006b5c:	e011      	b.n	8006b82 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	69b8      	ldr	r0, [r7, #24]
 8006b62:	f001 f87f 	bl	8007c64 <xQueueSemaphoreTake>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d00b      	beq.n	8006b84 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d003      	beq.n	8006b7a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8006b72:	f06f 0301 	mvn.w	r3, #1
 8006b76:	61fb      	str	r3, [r7, #28]
 8006b78:	e004      	b.n	8006b84 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8006b7a:	f06f 0302 	mvn.w	r3, #2
 8006b7e:	61fb      	str	r3, [r7, #28]
 8006b80:	e000      	b.n	8006b84 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8006b82:	bf00      	nop
      }
    }
  }

  return (stat);
 8006b84:	69fb      	ldr	r3, [r7, #28]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3720      	adds	r7, #32
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	200052b8 	.word	0x200052b8
 8006b94:	e000ed04 	.word	0xe000ed04

08006b98 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b088      	sub	sp, #32
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d103      	bne.n	8006bb6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006bae:	f06f 0303 	mvn.w	r3, #3
 8006bb2:	61fb      	str	r3, [r7, #28]
 8006bb4:	e03e      	b.n	8006c34 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bb6:	f3ef 8305 	mrs	r3, IPSR
 8006bba:	617b      	str	r3, [r7, #20]
  return(result);
 8006bbc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10f      	bne.n	8006be2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8006bc6:	613b      	str	r3, [r7, #16]
  return(result);
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d105      	bne.n	8006bda <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bce:	f3ef 8311 	mrs	r3, BASEPRI
 8006bd2:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d01e      	beq.n	8006c18 <osSemaphoreRelease+0x80>
 8006bda:	4b19      	ldr	r3, [pc, #100]	@ (8006c40 <osSemaphoreRelease+0xa8>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d11a      	bne.n	8006c18 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8006be2:	2300      	movs	r3, #0
 8006be4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006be6:	f107 0308 	add.w	r3, r7, #8
 8006bea:	4619      	mov	r1, r3
 8006bec:	69b8      	ldr	r0, [r7, #24]
 8006bee:	f000 feb8 	bl	8007962 <xQueueGiveFromISR>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d003      	beq.n	8006c00 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8006bf8:	f06f 0302 	mvn.w	r3, #2
 8006bfc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006bfe:	e018      	b.n	8006c32 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d015      	beq.n	8006c32 <osSemaphoreRelease+0x9a>
 8006c06:	4b0f      	ldr	r3, [pc, #60]	@ (8006c44 <osSemaphoreRelease+0xac>)
 8006c08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c0c:	601a      	str	r2, [r3, #0]
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006c16:	e00c      	b.n	8006c32 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006c18:	2300      	movs	r3, #0
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	69b8      	ldr	r0, [r7, #24]
 8006c20:	f000 fcf2 	bl	8007608 <xQueueGenericSend>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d004      	beq.n	8006c34 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8006c2a:	f06f 0302 	mvn.w	r3, #2
 8006c2e:	61fb      	str	r3, [r7, #28]
 8006c30:	e000      	b.n	8006c34 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006c32:	bf00      	nop
    }
  }

  return (stat);
 8006c34:	69fb      	ldr	r3, [r7, #28]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3720      	adds	r7, #32
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	200052b8 	.word	0x200052b8
 8006c44:	e000ed04 	.word	0xe000ed04

08006c48 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08c      	sub	sp, #48	@ 0x30
 8006c4c:	af02      	add	r7, sp, #8
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006c54:	2300      	movs	r3, #0
 8006c56:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c58:	f3ef 8305 	mrs	r3, IPSR
 8006c5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8006c5e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d16f      	bne.n	8006d44 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c64:	f3ef 8310 	mrs	r3, PRIMASK
 8006c68:	617b      	str	r3, [r7, #20]
  return(result);
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d105      	bne.n	8006c7c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c70:	f3ef 8311 	mrs	r3, BASEPRI
 8006c74:	613b      	str	r3, [r7, #16]
  return(result);
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <osMessageQueueNew+0x3c>
 8006c7c:	4b34      	ldr	r3, [pc, #208]	@ (8006d50 <osMessageQueueNew+0x108>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d05f      	beq.n	8006d44 <osMessageQueueNew+0xfc>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d05c      	beq.n	8006d44 <osMessageQueueNew+0xfc>
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d059      	beq.n	8006d44 <osMessageQueueNew+0xfc>
    mem = -1;
 8006c90:	f04f 33ff 	mov.w	r3, #4294967295
 8006c94:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d029      	beq.n	8006cf0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d012      	beq.n	8006cca <osMessageQueueNew+0x82>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	2b4f      	cmp	r3, #79	@ 0x4f
 8006caa:	d90e      	bls.n	8006cca <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00a      	beq.n	8006cca <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	695a      	ldr	r2, [r3, #20]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	68b9      	ldr	r1, [r7, #8]
 8006cbc:	fb01 f303 	mul.w	r3, r1, r3
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d302      	bcc.n	8006cca <osMessageQueueNew+0x82>
        mem = 1;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	623b      	str	r3, [r7, #32]
 8006cc8:	e014      	b.n	8006cf4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d110      	bne.n	8006cf4 <osMessageQueueNew+0xac>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10c      	bne.n	8006cf4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d108      	bne.n	8006cf4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d104      	bne.n	8006cf4 <osMessageQueueNew+0xac>
          mem = 0;
 8006cea:	2300      	movs	r3, #0
 8006cec:	623b      	str	r3, [r7, #32]
 8006cee:	e001      	b.n	8006cf4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d10b      	bne.n	8006d12 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	691a      	ldr	r2, [r3, #16]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	2100      	movs	r1, #0
 8006d04:	9100      	str	r1, [sp, #0]
 8006d06:	68b9      	ldr	r1, [r7, #8]
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 fa5d 	bl	80071c8 <xQueueGenericCreateStatic>
 8006d0e:	6278      	str	r0, [r7, #36]	@ 0x24
 8006d10:	e008      	b.n	8006d24 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006d12:	6a3b      	ldr	r3, [r7, #32]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d105      	bne.n	8006d24 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006d18:	2200      	movs	r2, #0
 8006d1a:	68b9      	ldr	r1, [r7, #8]
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 fada 	bl	80072d6 <xQueueGenericCreate>
 8006d22:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00c      	beq.n	8006d44 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d003      	beq.n	8006d38 <osMessageQueueNew+0xf0>
        name = attr->name;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	61fb      	str	r3, [r7, #28]
 8006d36:	e001      	b.n	8006d3c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006d3c:	69f9      	ldr	r1, [r7, #28]
 8006d3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006d40:	f001 fa7e 	bl	8008240 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3728      	adds	r7, #40	@ 0x28
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	200052b8 	.word	0x200052b8

08006d54 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08a      	sub	sp, #40	@ 0x28
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	603b      	str	r3, [r7, #0]
 8006d60:	4613      	mov	r3, r2
 8006d62:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d6c:	f3ef 8305 	mrs	r3, IPSR
 8006d70:	61fb      	str	r3, [r7, #28]
  return(result);
 8006d72:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10f      	bne.n	8006d98 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d78:	f3ef 8310 	mrs	r3, PRIMASK
 8006d7c:	61bb      	str	r3, [r7, #24]
  return(result);
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d105      	bne.n	8006d90 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d84:	f3ef 8311 	mrs	r3, BASEPRI
 8006d88:	617b      	str	r3, [r7, #20]
  return(result);
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d02c      	beq.n	8006dea <osMessageQueuePut+0x96>
 8006d90:	4b28      	ldr	r3, [pc, #160]	@ (8006e34 <osMessageQueuePut+0xe0>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d128      	bne.n	8006dea <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d98:	6a3b      	ldr	r3, [r7, #32]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d005      	beq.n	8006daa <osMessageQueuePut+0x56>
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <osMessageQueuePut+0x56>
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006daa:	f06f 0303 	mvn.w	r3, #3
 8006dae:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006db0:	e039      	b.n	8006e26 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006db2:	2300      	movs	r3, #0
 8006db4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006db6:	f107 0210 	add.w	r2, r7, #16
 8006dba:	2300      	movs	r3, #0
 8006dbc:	68b9      	ldr	r1, [r7, #8]
 8006dbe:	6a38      	ldr	r0, [r7, #32]
 8006dc0:	f000 fd2c 	bl	800781c <xQueueGenericSendFromISR>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d003      	beq.n	8006dd2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006dca:	f06f 0302 	mvn.w	r3, #2
 8006dce:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006dd0:	e029      	b.n	8006e26 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d026      	beq.n	8006e26 <osMessageQueuePut+0xd2>
 8006dd8:	4b17      	ldr	r3, [pc, #92]	@ (8006e38 <osMessageQueuePut+0xe4>)
 8006dda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dde:	601a      	str	r2, [r3, #0]
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006de8:	e01d      	b.n	8006e26 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d002      	beq.n	8006df6 <osMessageQueuePut+0xa2>
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d103      	bne.n	8006dfe <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006df6:	f06f 0303 	mvn.w	r3, #3
 8006dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dfc:	e014      	b.n	8006e28 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006dfe:	2300      	movs	r3, #0
 8006e00:	683a      	ldr	r2, [r7, #0]
 8006e02:	68b9      	ldr	r1, [r7, #8]
 8006e04:	6a38      	ldr	r0, [r7, #32]
 8006e06:	f000 fbff 	bl	8007608 <xQueueGenericSend>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d00b      	beq.n	8006e28 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d003      	beq.n	8006e1e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006e16:	f06f 0301 	mvn.w	r3, #1
 8006e1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e1c:	e004      	b.n	8006e28 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006e1e:	f06f 0302 	mvn.w	r3, #2
 8006e22:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e24:	e000      	b.n	8006e28 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e26:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3728      	adds	r7, #40	@ 0x28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	200052b8 	.word	0x200052b8
 8006e38:	e000ed04 	.word	0xe000ed04

08006e3c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b08a      	sub	sp, #40	@ 0x28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
 8006e48:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e52:	f3ef 8305 	mrs	r3, IPSR
 8006e56:	61fb      	str	r3, [r7, #28]
  return(result);
 8006e58:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10f      	bne.n	8006e7e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e5e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e62:	61bb      	str	r3, [r7, #24]
  return(result);
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d105      	bne.n	8006e76 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e6a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e6e:	617b      	str	r3, [r7, #20]
  return(result);
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d02c      	beq.n	8006ed0 <osMessageQueueGet+0x94>
 8006e76:	4b28      	ldr	r3, [pc, #160]	@ (8006f18 <osMessageQueueGet+0xdc>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d128      	bne.n	8006ed0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d005      	beq.n	8006e90 <osMessageQueueGet+0x54>
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d002      	beq.n	8006e90 <osMessageQueueGet+0x54>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d003      	beq.n	8006e98 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006e90:	f06f 0303 	mvn.w	r3, #3
 8006e94:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e96:	e038      	b.n	8006f0a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006e9c:	f107 0310 	add.w	r3, r7, #16
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	68b9      	ldr	r1, [r7, #8]
 8006ea4:	6a38      	ldr	r0, [r7, #32]
 8006ea6:	f000 fff5 	bl	8007e94 <xQueueReceiveFromISR>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d003      	beq.n	8006eb8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006eb0:	f06f 0302 	mvn.w	r3, #2
 8006eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006eb6:	e028      	b.n	8006f0a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d025      	beq.n	8006f0a <osMessageQueueGet+0xce>
 8006ebe:	4b17      	ldr	r3, [pc, #92]	@ (8006f1c <osMessageQueueGet+0xe0>)
 8006ec0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ece:	e01c      	b.n	8006f0a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <osMessageQueueGet+0xa0>
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d103      	bne.n	8006ee4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006edc:	f06f 0303 	mvn.w	r3, #3
 8006ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ee2:	e013      	b.n	8006f0c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	68b9      	ldr	r1, [r7, #8]
 8006ee8:	6a38      	ldr	r0, [r7, #32]
 8006eea:	f000 fdd3 	bl	8007a94 <xQueueReceive>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d00b      	beq.n	8006f0c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d003      	beq.n	8006f02 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006efa:	f06f 0301 	mvn.w	r3, #1
 8006efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f00:	e004      	b.n	8006f0c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006f02:	f06f 0302 	mvn.w	r3, #2
 8006f06:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f08:	e000      	b.n	8006f0c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f0a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3728      	adds	r7, #40	@ 0x28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	200052b8 	.word	0x200052b8
 8006f1c:	e000ed04 	.word	0xe000ed04

08006f20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	4a07      	ldr	r2, [pc, #28]	@ (8006f4c <vApplicationGetIdleTaskMemory+0x2c>)
 8006f30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	4a06      	ldr	r2, [pc, #24]	@ (8006f50 <vApplicationGetIdleTaskMemory+0x30>)
 8006f36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006f3e:	601a      	str	r2, [r3, #0]
}
 8006f40:	bf00      	nop
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	200052bc 	.word	0x200052bc
 8006f50:	20005364 	.word	0x20005364

08006f54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4a07      	ldr	r2, [pc, #28]	@ (8006f80 <vApplicationGetTimerTaskMemory+0x2c>)
 8006f64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	4a06      	ldr	r2, [pc, #24]	@ (8006f84 <vApplicationGetTimerTaskMemory+0x30>)
 8006f6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f72:	601a      	str	r2, [r3, #0]
}
 8006f74:	bf00      	nop
 8006f76:	3714      	adds	r7, #20
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr
 8006f80:	20005764 	.word	0x20005764
 8006f84:	2000580c 	.word	0x2000580c

08006f88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f103 0208 	add.w	r2, r3, #8
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f103 0208 	add.w	r2, r3, #8
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f103 0208 	add.w	r2, r3, #8
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b085      	sub	sp, #20
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	689a      	ldr	r2, [r3, #8]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	683a      	ldr	r2, [r7, #0]
 8007006:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	1c5a      	adds	r2, r3, #1
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	601a      	str	r2, [r3, #0]
}
 800701e:	bf00      	nop
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800702a:	b480      	push	{r7}
 800702c:	b085      	sub	sp, #20
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007040:	d103      	bne.n	800704a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	e00c      	b.n	8007064 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	3308      	adds	r3, #8
 800704e:	60fb      	str	r3, [r7, #12]
 8007050:	e002      	b.n	8007058 <vListInsert+0x2e>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	429a      	cmp	r2, r3
 8007062:	d2f6      	bcs.n	8007052 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	683a      	ldr	r2, [r7, #0]
 800707e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	601a      	str	r2, [r3, #0]
}
 8007090:	bf00      	nop
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	6892      	ldr	r2, [r2, #8]
 80070b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6852      	ldr	r2, [r2, #4]
 80070bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d103      	bne.n	80070d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	689a      	ldr	r2, [r3, #8]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	1e5a      	subs	r2, r3, #1
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10d      	bne.n	8007120 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007108:	b672      	cpsid	i
 800710a:	f383 8811 	msr	BASEPRI, r3
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	b662      	cpsie	i
 8007118:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800711a:	bf00      	nop
 800711c:	bf00      	nop
 800711e:	e7fd      	b.n	800711c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007120:	f002 fe14 	bl	8009d4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800712c:	68f9      	ldr	r1, [r7, #12]
 800712e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007130:	fb01 f303 	mul.w	r3, r1, r3
 8007134:	441a      	add	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007150:	3b01      	subs	r3, #1
 8007152:	68f9      	ldr	r1, [r7, #12]
 8007154:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007156:	fb01 f303 	mul.w	r3, r1, r3
 800715a:	441a      	add	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	22ff      	movs	r2, #255	@ 0xff
 8007164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	22ff      	movs	r2, #255	@ 0xff
 800716c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d114      	bne.n	80071a0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d01a      	beq.n	80071b4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	3310      	adds	r3, #16
 8007182:	4618      	mov	r0, r3
 8007184:	f001 fda0 	bl	8008cc8 <xTaskRemoveFromEventList>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d012      	beq.n	80071b4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800718e:	4b0d      	ldr	r3, [pc, #52]	@ (80071c4 <xQueueGenericReset+0xd4>)
 8007190:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	e009      	b.n	80071b4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	3310      	adds	r3, #16
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7ff feef 	bl	8006f88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3324      	adds	r3, #36	@ 0x24
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7ff feea 	bl	8006f88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80071b4:	f002 fe00 	bl	8009db8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80071b8:	2301      	movs	r3, #1
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	e000ed04 	.word	0xe000ed04

080071c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08e      	sub	sp, #56	@ 0x38
 80071cc:	af02      	add	r7, sp, #8
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
 80071d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10d      	bne.n	80071f8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e0:	b672      	cpsid	i
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	b662      	cpsie	i
 80071f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80071f2:	bf00      	nop
 80071f4:	bf00      	nop
 80071f6:	e7fd      	b.n	80071f4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10d      	bne.n	800721a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80071fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007202:	b672      	cpsid	i
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	b662      	cpsie	i
 8007212:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007214:	bf00      	nop
 8007216:	bf00      	nop
 8007218:	e7fd      	b.n	8007216 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d002      	beq.n	8007226 <xQueueGenericCreateStatic+0x5e>
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <xQueueGenericCreateStatic+0x62>
 8007226:	2301      	movs	r3, #1
 8007228:	e000      	b.n	800722c <xQueueGenericCreateStatic+0x64>
 800722a:	2300      	movs	r3, #0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10d      	bne.n	800724c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8007230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007234:	b672      	cpsid	i
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	b662      	cpsie	i
 8007244:	623b      	str	r3, [r7, #32]
}
 8007246:	bf00      	nop
 8007248:	bf00      	nop
 800724a:	e7fd      	b.n	8007248 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d102      	bne.n	8007258 <xQueueGenericCreateStatic+0x90>
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d101      	bne.n	800725c <xQueueGenericCreateStatic+0x94>
 8007258:	2301      	movs	r3, #1
 800725a:	e000      	b.n	800725e <xQueueGenericCreateStatic+0x96>
 800725c:	2300      	movs	r3, #0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10d      	bne.n	800727e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8007262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007266:	b672      	cpsid	i
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	b662      	cpsie	i
 8007276:	61fb      	str	r3, [r7, #28]
}
 8007278:	bf00      	nop
 800727a:	bf00      	nop
 800727c:	e7fd      	b.n	800727a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800727e:	2350      	movs	r3, #80	@ 0x50
 8007280:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2b50      	cmp	r3, #80	@ 0x50
 8007286:	d00d      	beq.n	80072a4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8007288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800728c:	b672      	cpsid	i
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	b662      	cpsie	i
 800729c:	61bb      	str	r3, [r7, #24]
}
 800729e:	bf00      	nop
 80072a0:	bf00      	nop
 80072a2:	e7fd      	b.n	80072a0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80072a4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80072aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00d      	beq.n	80072cc <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80072b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80072b8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80072bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	4613      	mov	r3, r2
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	68b9      	ldr	r1, [r7, #8]
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 f848 	bl	800735c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80072cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3730      	adds	r7, #48	@ 0x30
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b08a      	sub	sp, #40	@ 0x28
 80072da:	af02      	add	r7, sp, #8
 80072dc:	60f8      	str	r0, [r7, #12]
 80072de:	60b9      	str	r1, [r7, #8]
 80072e0:	4613      	mov	r3, r2
 80072e2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10d      	bne.n	8007306 <xQueueGenericCreate+0x30>
	__asm volatile
 80072ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ee:	b672      	cpsid	i
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	b662      	cpsie	i
 80072fe:	613b      	str	r3, [r7, #16]
}
 8007300:	bf00      	nop
 8007302:	bf00      	nop
 8007304:	e7fd      	b.n	8007302 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d102      	bne.n	8007312 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800730c:	2300      	movs	r3, #0
 800730e:	61fb      	str	r3, [r7, #28]
 8007310:	e004      	b.n	800731c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	fb02 f303 	mul.w	r3, r2, r3
 800731a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	3350      	adds	r3, #80	@ 0x50
 8007320:	4618      	mov	r0, r3
 8007322:	f002 fe41 	bl	8009fa8 <pvPortMalloc>
 8007326:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d011      	beq.n	8007352 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	3350      	adds	r3, #80	@ 0x50
 8007336:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007340:	79fa      	ldrb	r2, [r7, #7]
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	4613      	mov	r3, r2
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	68b9      	ldr	r1, [r7, #8]
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 f805 	bl	800735c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007352:	69bb      	ldr	r3, [r7, #24]
	}
 8007354:	4618      	mov	r0, r3
 8007356:	3720      	adds	r7, #32
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
 8007368:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d103      	bne.n	8007378 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	69ba      	ldr	r2, [r7, #24]
 8007374:	601a      	str	r2, [r3, #0]
 8007376:	e002      	b.n	800737e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800738a:	2101      	movs	r1, #1
 800738c:	69b8      	ldr	r0, [r7, #24]
 800738e:	f7ff feaf 	bl	80070f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	78fa      	ldrb	r2, [r7, #3]
 8007396:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800739a:	bf00      	nop
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b082      	sub	sp, #8
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00e      	beq.n	80073ce <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80073c2:	2300      	movs	r3, #0
 80073c4:	2200      	movs	r2, #0
 80073c6:	2100      	movs	r1, #0
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f91d 	bl	8007608 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80073ce:	bf00      	nop
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b086      	sub	sp, #24
 80073da:	af00      	add	r7, sp, #0
 80073dc:	4603      	mov	r3, r0
 80073de:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80073e0:	2301      	movs	r3, #1
 80073e2:	617b      	str	r3, [r7, #20]
 80073e4:	2300      	movs	r3, #0
 80073e6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80073e8:	79fb      	ldrb	r3, [r7, #7]
 80073ea:	461a      	mov	r2, r3
 80073ec:	6939      	ldr	r1, [r7, #16]
 80073ee:	6978      	ldr	r0, [r7, #20]
 80073f0:	f7ff ff71 	bl	80072d6 <xQueueGenericCreate>
 80073f4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f7ff ffd3 	bl	80073a2 <prvInitialiseMutex>

		return xNewQueue;
 80073fc:	68fb      	ldr	r3, [r7, #12]
	}
 80073fe:	4618      	mov	r0, r3
 8007400:	3718      	adds	r7, #24
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007406:	b580      	push	{r7, lr}
 8007408:	b088      	sub	sp, #32
 800740a:	af02      	add	r7, sp, #8
 800740c:	4603      	mov	r3, r0
 800740e:	6039      	str	r1, [r7, #0]
 8007410:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007412:	2301      	movs	r3, #1
 8007414:	617b      	str	r3, [r7, #20]
 8007416:	2300      	movs	r3, #0
 8007418:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800741a:	79fb      	ldrb	r3, [r7, #7]
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2200      	movs	r2, #0
 8007422:	6939      	ldr	r1, [r7, #16]
 8007424:	6978      	ldr	r0, [r7, #20]
 8007426:	f7ff fecf 	bl	80071c8 <xQueueGenericCreateStatic>
 800742a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f7ff ffb8 	bl	80073a2 <prvInitialiseMutex>

		return xNewQueue;
 8007432:	68fb      	ldr	r3, [r7, #12]
	}
 8007434:	4618      	mov	r0, r3
 8007436:	3718      	adds	r7, #24
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800743c:	b590      	push	{r4, r7, lr}
 800743e:	b087      	sub	sp, #28
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10d      	bne.n	800746a <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800744e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007452:	b672      	cpsid	i
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	b662      	cpsie	i
 8007462:	60fb      	str	r3, [r7, #12]
}
 8007464:	bf00      	nop
 8007466:	bf00      	nop
 8007468:	e7fd      	b.n	8007466 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	689c      	ldr	r4, [r3, #8]
 800746e:	f001 fdf9 	bl	8009064 <xTaskGetCurrentTaskHandle>
 8007472:	4603      	mov	r3, r0
 8007474:	429c      	cmp	r4, r3
 8007476:	d111      	bne.n	800749c <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	1e5a      	subs	r2, r3, #1
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d105      	bne.n	8007496 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800748a:	2300      	movs	r3, #0
 800748c:	2200      	movs	r2, #0
 800748e:	2100      	movs	r1, #0
 8007490:	6938      	ldr	r0, [r7, #16]
 8007492:	f000 f8b9 	bl	8007608 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007496:	2301      	movs	r3, #1
 8007498:	617b      	str	r3, [r7, #20]
 800749a:	e001      	b.n	80074a0 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800749c:	2300      	movs	r3, #0
 800749e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80074a0:	697b      	ldr	r3, [r7, #20]
	}
 80074a2:	4618      	mov	r0, r3
 80074a4:	371c      	adds	r7, #28
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd90      	pop	{r4, r7, pc}

080074aa <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80074aa:	b590      	push	{r4, r7, lr}
 80074ac:	b087      	sub	sp, #28
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10d      	bne.n	80074da <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c2:	b672      	cpsid	i
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	b662      	cpsie	i
 80074d2:	60fb      	str	r3, [r7, #12]
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop
 80074d8:	e7fd      	b.n	80074d6 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	689c      	ldr	r4, [r3, #8]
 80074de:	f001 fdc1 	bl	8009064 <xTaskGetCurrentTaskHandle>
 80074e2:	4603      	mov	r3, r0
 80074e4:	429c      	cmp	r4, r3
 80074e6:	d107      	bne.n	80074f8 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	1c5a      	adds	r2, r3, #1
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80074f2:	2301      	movs	r3, #1
 80074f4:	617b      	str	r3, [r7, #20]
 80074f6:	e00c      	b.n	8007512 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6938      	ldr	r0, [r7, #16]
 80074fc:	f000 fbb2 	bl	8007c64 <xQueueSemaphoreTake>
 8007500:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d004      	beq.n	8007512 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	1c5a      	adds	r2, r3, #1
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007512:	697b      	ldr	r3, [r7, #20]
	}
 8007514:	4618      	mov	r0, r3
 8007516:	371c      	adds	r7, #28
 8007518:	46bd      	mov	sp, r7
 800751a:	bd90      	pop	{r4, r7, pc}

0800751c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08a      	sub	sp, #40	@ 0x28
 8007520:	af02      	add	r7, sp, #8
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10d      	bne.n	800754a <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007532:	b672      	cpsid	i
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	b662      	cpsie	i
 8007542:	61bb      	str	r3, [r7, #24]
}
 8007544:	bf00      	nop
 8007546:	bf00      	nop
 8007548:	e7fd      	b.n	8007546 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	429a      	cmp	r2, r3
 8007550:	d90d      	bls.n	800756e <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007556:	b672      	cpsid	i
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	b662      	cpsie	i
 8007566:	617b      	str	r3, [r7, #20]
}
 8007568:	bf00      	nop
 800756a:	bf00      	nop
 800756c:	e7fd      	b.n	800756a <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800756e:	2302      	movs	r3, #2
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	2100      	movs	r1, #0
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f7ff fe25 	bl	80071c8 <xQueueGenericCreateStatic>
 800757e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800758c:	69fb      	ldr	r3, [r7, #28]
	}
 800758e:	4618      	mov	r0, r3
 8007590:	3720      	adds	r7, #32
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007596:	b580      	push	{r7, lr}
 8007598:	b086      	sub	sp, #24
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10d      	bne.n	80075c2 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 80075a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075aa:	b672      	cpsid	i
 80075ac:	f383 8811 	msr	BASEPRI, r3
 80075b0:	f3bf 8f6f 	isb	sy
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	b662      	cpsie	i
 80075ba:	613b      	str	r3, [r7, #16]
}
 80075bc:	bf00      	nop
 80075be:	bf00      	nop
 80075c0:	e7fd      	b.n	80075be <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d90d      	bls.n	80075e6 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ce:	b672      	cpsid	i
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	b662      	cpsie	i
 80075de:	60fb      	str	r3, [r7, #12]
}
 80075e0:	bf00      	nop
 80075e2:	bf00      	nop
 80075e4:	e7fd      	b.n	80075e2 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80075e6:	2202      	movs	r2, #2
 80075e8:	2100      	movs	r1, #0
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7ff fe73 	bl	80072d6 <xQueueGenericCreate>
 80075f0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80075fe:	697b      	ldr	r3, [r7, #20]
	}
 8007600:	4618      	mov	r0, r3
 8007602:	3718      	adds	r7, #24
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b08e      	sub	sp, #56	@ 0x38
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
 8007614:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007616:	2300      	movs	r3, #0
 8007618:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800761e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10d      	bne.n	8007640 <xQueueGenericSend+0x38>
	__asm volatile
 8007624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007628:	b672      	cpsid	i
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	b662      	cpsie	i
 8007638:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800763a:	bf00      	nop
 800763c:	bf00      	nop
 800763e:	e7fd      	b.n	800763c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d103      	bne.n	800764e <xQueueGenericSend+0x46>
 8007646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800764a:	2b00      	cmp	r3, #0
 800764c:	d101      	bne.n	8007652 <xQueueGenericSend+0x4a>
 800764e:	2301      	movs	r3, #1
 8007650:	e000      	b.n	8007654 <xQueueGenericSend+0x4c>
 8007652:	2300      	movs	r3, #0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10d      	bne.n	8007674 <xQueueGenericSend+0x6c>
	__asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765c:	b672      	cpsid	i
 800765e:	f383 8811 	msr	BASEPRI, r3
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	b662      	cpsie	i
 800766c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800766e:	bf00      	nop
 8007670:	bf00      	nop
 8007672:	e7fd      	b.n	8007670 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	2b02      	cmp	r3, #2
 8007678:	d103      	bne.n	8007682 <xQueueGenericSend+0x7a>
 800767a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800767e:	2b01      	cmp	r3, #1
 8007680:	d101      	bne.n	8007686 <xQueueGenericSend+0x7e>
 8007682:	2301      	movs	r3, #1
 8007684:	e000      	b.n	8007688 <xQueueGenericSend+0x80>
 8007686:	2300      	movs	r3, #0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10d      	bne.n	80076a8 <xQueueGenericSend+0xa0>
	__asm volatile
 800768c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007690:	b672      	cpsid	i
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	b662      	cpsie	i
 80076a0:	623b      	str	r3, [r7, #32]
}
 80076a2:	bf00      	nop
 80076a4:	bf00      	nop
 80076a6:	e7fd      	b.n	80076a4 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076a8:	f001 fcec 	bl	8009084 <xTaskGetSchedulerState>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d102      	bne.n	80076b8 <xQueueGenericSend+0xb0>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <xQueueGenericSend+0xb4>
 80076b8:	2301      	movs	r3, #1
 80076ba:	e000      	b.n	80076be <xQueueGenericSend+0xb6>
 80076bc:	2300      	movs	r3, #0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10d      	bne.n	80076de <xQueueGenericSend+0xd6>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c6:	b672      	cpsid	i
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	b662      	cpsie	i
 80076d6:	61fb      	str	r3, [r7, #28]
}
 80076d8:	bf00      	nop
 80076da:	bf00      	nop
 80076dc:	e7fd      	b.n	80076da <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076de:	f002 fb35 	bl	8009d4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d302      	bcc.n	80076f4 <xQueueGenericSend+0xec>
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d129      	bne.n	8007748 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80076f4:	683a      	ldr	r2, [r7, #0]
 80076f6:	68b9      	ldr	r1, [r7, #8]
 80076f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076fa:	f000 fc91 	bl	8008020 <prvCopyDataToQueue>
 80076fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007704:	2b00      	cmp	r3, #0
 8007706:	d010      	beq.n	800772a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800770a:	3324      	adds	r3, #36	@ 0x24
 800770c:	4618      	mov	r0, r3
 800770e:	f001 fadb 	bl	8008cc8 <xTaskRemoveFromEventList>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d013      	beq.n	8007740 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007718:	4b3f      	ldr	r3, [pc, #252]	@ (8007818 <xQueueGenericSend+0x210>)
 800771a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800771e:	601a      	str	r2, [r3, #0]
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	e00a      	b.n	8007740 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800772a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800772c:	2b00      	cmp	r3, #0
 800772e:	d007      	beq.n	8007740 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007730:	4b39      	ldr	r3, [pc, #228]	@ (8007818 <xQueueGenericSend+0x210>)
 8007732:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007736:	601a      	str	r2, [r3, #0]
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007740:	f002 fb3a 	bl	8009db8 <vPortExitCritical>
				return pdPASS;
 8007744:	2301      	movs	r3, #1
 8007746:	e063      	b.n	8007810 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d103      	bne.n	8007756 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800774e:	f002 fb33 	bl	8009db8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007752:	2300      	movs	r3, #0
 8007754:	e05c      	b.n	8007810 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007758:	2b00      	cmp	r3, #0
 800775a:	d106      	bne.n	800776a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800775c:	f107 0314 	add.w	r3, r7, #20
 8007760:	4618      	mov	r0, r3
 8007762:	f001 fb17 	bl	8008d94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007766:	2301      	movs	r3, #1
 8007768:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800776a:	f002 fb25 	bl	8009db8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800776e:	f001 f861 	bl	8008834 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007772:	f002 faeb 	bl	8009d4c <vPortEnterCritical>
 8007776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007778:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800777c:	b25b      	sxtb	r3, r3
 800777e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007782:	d103      	bne.n	800778c <xQueueGenericSend+0x184>
 8007784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007786:	2200      	movs	r2, #0
 8007788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800778c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007792:	b25b      	sxtb	r3, r3
 8007794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007798:	d103      	bne.n	80077a2 <xQueueGenericSend+0x19a>
 800779a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077a2:	f002 fb09 	bl	8009db8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077a6:	1d3a      	adds	r2, r7, #4
 80077a8:	f107 0314 	add.w	r3, r7, #20
 80077ac:	4611      	mov	r1, r2
 80077ae:	4618      	mov	r0, r3
 80077b0:	f001 fb06 	bl	8008dc0 <xTaskCheckForTimeOut>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d124      	bne.n	8007804 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80077ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077bc:	f000 fd28 	bl	8008210 <prvIsQueueFull>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d018      	beq.n	80077f8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80077c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c8:	3310      	adds	r3, #16
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	4611      	mov	r1, r2
 80077ce:	4618      	mov	r0, r3
 80077d0:	f001 fa24 	bl	8008c1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80077d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077d6:	f000 fcb3 	bl	8008140 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80077da:	f001 f839 	bl	8008850 <xTaskResumeAll>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f47f af7c 	bne.w	80076de <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80077e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007818 <xQueueGenericSend+0x210>)
 80077e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077ec:	601a      	str	r2, [r3, #0]
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	e772      	b.n	80076de <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80077f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077fa:	f000 fca1 	bl	8008140 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077fe:	f001 f827 	bl	8008850 <xTaskResumeAll>
 8007802:	e76c      	b.n	80076de <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007804:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007806:	f000 fc9b 	bl	8008140 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800780a:	f001 f821 	bl	8008850 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800780e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007810:	4618      	mov	r0, r3
 8007812:	3738      	adds	r7, #56	@ 0x38
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	e000ed04 	.word	0xe000ed04

0800781c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b08e      	sub	sp, #56	@ 0x38
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
 8007828:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800782e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10d      	bne.n	8007850 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8007834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007838:	b672      	cpsid	i
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	b662      	cpsie	i
 8007848:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800784a:	bf00      	nop
 800784c:	bf00      	nop
 800784e:	e7fd      	b.n	800784c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d103      	bne.n	800785e <xQueueGenericSendFromISR+0x42>
 8007856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <xQueueGenericSendFromISR+0x46>
 800785e:	2301      	movs	r3, #1
 8007860:	e000      	b.n	8007864 <xQueueGenericSendFromISR+0x48>
 8007862:	2300      	movs	r3, #0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d10d      	bne.n	8007884 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8007868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786c:	b672      	cpsid	i
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	b662      	cpsie	i
 800787c:	623b      	str	r3, [r7, #32]
}
 800787e:	bf00      	nop
 8007880:	bf00      	nop
 8007882:	e7fd      	b.n	8007880 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	2b02      	cmp	r3, #2
 8007888:	d103      	bne.n	8007892 <xQueueGenericSendFromISR+0x76>
 800788a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800788e:	2b01      	cmp	r3, #1
 8007890:	d101      	bne.n	8007896 <xQueueGenericSendFromISR+0x7a>
 8007892:	2301      	movs	r3, #1
 8007894:	e000      	b.n	8007898 <xQueueGenericSendFromISR+0x7c>
 8007896:	2300      	movs	r3, #0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10d      	bne.n	80078b8 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800789c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a0:	b672      	cpsid	i
 80078a2:	f383 8811 	msr	BASEPRI, r3
 80078a6:	f3bf 8f6f 	isb	sy
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	b662      	cpsie	i
 80078b0:	61fb      	str	r3, [r7, #28]
}
 80078b2:	bf00      	nop
 80078b4:	bf00      	nop
 80078b6:	e7fd      	b.n	80078b4 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078b8:	f002 fb30 	bl	8009f1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80078bc:	f3ef 8211 	mrs	r2, BASEPRI
 80078c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c4:	b672      	cpsid	i
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	b662      	cpsie	i
 80078d4:	61ba      	str	r2, [r7, #24]
 80078d6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80078d8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80078da:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d302      	bcc.n	80078ee <xQueueGenericSendFromISR+0xd2>
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d12c      	bne.n	8007948 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80078ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	68b9      	ldr	r1, [r7, #8]
 80078fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078fe:	f000 fb8f 	bl	8008020 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007902:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8007906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790a:	d112      	bne.n	8007932 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800790c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007910:	2b00      	cmp	r3, #0
 8007912:	d016      	beq.n	8007942 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007916:	3324      	adds	r3, #36	@ 0x24
 8007918:	4618      	mov	r0, r3
 800791a:	f001 f9d5 	bl	8008cc8 <xTaskRemoveFromEventList>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00e      	beq.n	8007942 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00b      	beq.n	8007942 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	e007      	b.n	8007942 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007932:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007936:	3301      	adds	r3, #1
 8007938:	b2db      	uxtb	r3, r3
 800793a:	b25a      	sxtb	r2, r3
 800793c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800793e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007942:	2301      	movs	r3, #1
 8007944:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8007946:	e001      	b.n	800794c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007948:	2300      	movs	r3, #0
 800794a:	637b      	str	r3, [r7, #52]	@ 0x34
 800794c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800794e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007956:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800795a:	4618      	mov	r0, r3
 800795c:	3738      	adds	r7, #56	@ 0x38
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b08e      	sub	sp, #56	@ 0x38
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10d      	bne.n	8007992 <xQueueGiveFromISR+0x30>
	__asm volatile
 8007976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797a:	b672      	cpsid	i
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	b662      	cpsie	i
 800798a:	623b      	str	r3, [r7, #32]
}
 800798c:	bf00      	nop
 800798e:	bf00      	nop
 8007990:	e7fd      	b.n	800798e <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00d      	beq.n	80079b6 <xQueueGiveFromISR+0x54>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799e:	b672      	cpsid	i
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	b662      	cpsie	i
 80079ae:	61fb      	str	r3, [r7, #28]
}
 80079b0:	bf00      	nop
 80079b2:	bf00      	nop
 80079b4:	e7fd      	b.n	80079b2 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80079b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d103      	bne.n	80079c6 <xQueueGiveFromISR+0x64>
 80079be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <xQueueGiveFromISR+0x68>
 80079c6:	2301      	movs	r3, #1
 80079c8:	e000      	b.n	80079cc <xQueueGiveFromISR+0x6a>
 80079ca:	2300      	movs	r3, #0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10d      	bne.n	80079ec <xQueueGiveFromISR+0x8a>
	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d4:	b672      	cpsid	i
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	b662      	cpsie	i
 80079e4:	61bb      	str	r3, [r7, #24]
}
 80079e6:	bf00      	nop
 80079e8:	bf00      	nop
 80079ea:	e7fd      	b.n	80079e8 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079ec:	f002 fa96 	bl	8009f1c <vPortValidateInterruptPriority>
	__asm volatile
 80079f0:	f3ef 8211 	mrs	r2, BASEPRI
 80079f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f8:	b672      	cpsid	i
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	b662      	cpsie	i
 8007a08:	617a      	str	r2, [r7, #20]
 8007a0a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007a0c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a14:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d22b      	bcs.n	8007a78 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2c:	1c5a      	adds	r2, r3, #1
 8007a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a30:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a32:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a3a:	d112      	bne.n	8007a62 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d016      	beq.n	8007a72 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a46:	3324      	adds	r3, #36	@ 0x24
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f001 f93d 	bl	8008cc8 <xTaskRemoveFromEventList>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00e      	beq.n	8007a72 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00b      	beq.n	8007a72 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	601a      	str	r2, [r3, #0]
 8007a60:	e007      	b.n	8007a72 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a66:	3301      	adds	r3, #1
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	b25a      	sxtb	r2, r3
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007a72:	2301      	movs	r3, #1
 8007a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a76:	e001      	b.n	8007a7c <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a7e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f383 8811 	msr	BASEPRI, r3
}
 8007a86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3738      	adds	r7, #56	@ 0x38
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b08c      	sub	sp, #48	@ 0x30
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10d      	bne.n	8007aca <xQueueReceive+0x36>
	__asm volatile
 8007aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab2:	b672      	cpsid	i
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	b662      	cpsie	i
 8007ac2:	623b      	str	r3, [r7, #32]
}
 8007ac4:	bf00      	nop
 8007ac6:	bf00      	nop
 8007ac8:	e7fd      	b.n	8007ac6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d103      	bne.n	8007ad8 <xQueueReceive+0x44>
 8007ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <xQueueReceive+0x48>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e000      	b.n	8007ade <xQueueReceive+0x4a>
 8007adc:	2300      	movs	r3, #0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10d      	bne.n	8007afe <xQueueReceive+0x6a>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae6:	b672      	cpsid	i
 8007ae8:	f383 8811 	msr	BASEPRI, r3
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	b662      	cpsie	i
 8007af6:	61fb      	str	r3, [r7, #28]
}
 8007af8:	bf00      	nop
 8007afa:	bf00      	nop
 8007afc:	e7fd      	b.n	8007afa <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007afe:	f001 fac1 	bl	8009084 <xTaskGetSchedulerState>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d102      	bne.n	8007b0e <xQueueReceive+0x7a>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <xQueueReceive+0x7e>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e000      	b.n	8007b14 <xQueueReceive+0x80>
 8007b12:	2300      	movs	r3, #0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10d      	bne.n	8007b34 <xQueueReceive+0xa0>
	__asm volatile
 8007b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b1c:	b672      	cpsid	i
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	b662      	cpsie	i
 8007b2c:	61bb      	str	r3, [r7, #24]
}
 8007b2e:	bf00      	nop
 8007b30:	bf00      	nop
 8007b32:	e7fd      	b.n	8007b30 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b34:	f002 f90a 	bl	8009d4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b3c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d01f      	beq.n	8007b84 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b44:	68b9      	ldr	r1, [r7, #8]
 8007b46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b48:	f000 fad4 	bl	80080f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4e:	1e5a      	subs	r2, r3, #1
 8007b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b52:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00f      	beq.n	8007b7c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5e:	3310      	adds	r3, #16
 8007b60:	4618      	mov	r0, r3
 8007b62:	f001 f8b1 	bl	8008cc8 <xTaskRemoveFromEventList>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d007      	beq.n	8007b7c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b6c:	4b3c      	ldr	r3, [pc, #240]	@ (8007c60 <xQueueReceive+0x1cc>)
 8007b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b7c:	f002 f91c 	bl	8009db8 <vPortExitCritical>
				return pdPASS;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e069      	b.n	8007c58 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d103      	bne.n	8007b92 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b8a:	f002 f915 	bl	8009db8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	e062      	b.n	8007c58 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d106      	bne.n	8007ba6 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b98:	f107 0310 	add.w	r3, r7, #16
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f001 f8f9 	bl	8008d94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ba6:	f002 f907 	bl	8009db8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007baa:	f000 fe43 	bl	8008834 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007bae:	f002 f8cd 	bl	8009d4c <vPortEnterCritical>
 8007bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007bb8:	b25b      	sxtb	r3, r3
 8007bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bbe:	d103      	bne.n	8007bc8 <xQueueReceive+0x134>
 8007bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007bce:	b25b      	sxtb	r3, r3
 8007bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd4:	d103      	bne.n	8007bde <xQueueReceive+0x14a>
 8007bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007bde:	f002 f8eb 	bl	8009db8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007be2:	1d3a      	adds	r2, r7, #4
 8007be4:	f107 0310 	add.w	r3, r7, #16
 8007be8:	4611      	mov	r1, r2
 8007bea:	4618      	mov	r0, r3
 8007bec:	f001 f8e8 	bl	8008dc0 <xTaskCheckForTimeOut>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d123      	bne.n	8007c3e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bf8:	f000 faf4 	bl	80081e4 <prvIsQueueEmpty>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d017      	beq.n	8007c32 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c04:	3324      	adds	r3, #36	@ 0x24
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	4611      	mov	r1, r2
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f001 f806 	bl	8008c1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c12:	f000 fa95 	bl	8008140 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c16:	f000 fe1b 	bl	8008850 <xTaskResumeAll>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d189      	bne.n	8007b34 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8007c20:	4b0f      	ldr	r3, [pc, #60]	@ (8007c60 <xQueueReceive+0x1cc>)
 8007c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	e780      	b.n	8007b34 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007c32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c34:	f000 fa84 	bl	8008140 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c38:	f000 fe0a 	bl	8008850 <xTaskResumeAll>
 8007c3c:	e77a      	b.n	8007b34 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007c3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c40:	f000 fa7e 	bl	8008140 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c44:	f000 fe04 	bl	8008850 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c4a:	f000 facb 	bl	80081e4 <prvIsQueueEmpty>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f43f af6f 	beq.w	8007b34 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3730      	adds	r7, #48	@ 0x30
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	e000ed04 	.word	0xe000ed04

08007c64 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b08e      	sub	sp, #56	@ 0x38
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007c76:	2300      	movs	r3, #0
 8007c78:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10d      	bne.n	8007c9c <xQueueSemaphoreTake+0x38>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c84:	b672      	cpsid	i
 8007c86:	f383 8811 	msr	BASEPRI, r3
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	b662      	cpsie	i
 8007c94:	623b      	str	r3, [r7, #32]
}
 8007c96:	bf00      	nop
 8007c98:	bf00      	nop
 8007c9a:	e7fd      	b.n	8007c98 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00d      	beq.n	8007cc0 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8007ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca8:	b672      	cpsid	i
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	b662      	cpsie	i
 8007cb8:	61fb      	str	r3, [r7, #28]
}
 8007cba:	bf00      	nop
 8007cbc:	bf00      	nop
 8007cbe:	e7fd      	b.n	8007cbc <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cc0:	f001 f9e0 	bl	8009084 <xTaskGetSchedulerState>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d102      	bne.n	8007cd0 <xQueueSemaphoreTake+0x6c>
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d101      	bne.n	8007cd4 <xQueueSemaphoreTake+0x70>
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e000      	b.n	8007cd6 <xQueueSemaphoreTake+0x72>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10d      	bne.n	8007cf6 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8007cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cde:	b672      	cpsid	i
 8007ce0:	f383 8811 	msr	BASEPRI, r3
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	b662      	cpsie	i
 8007cee:	61bb      	str	r3, [r7, #24]
}
 8007cf0:	bf00      	nop
 8007cf2:	bf00      	nop
 8007cf4:	e7fd      	b.n	8007cf2 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cf6:	f002 f829 	bl	8009d4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cfe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d024      	beq.n	8007d50 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d08:	1e5a      	subs	r2, r3, #1
 8007d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d0c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d104      	bne.n	8007d20 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007d16:	f001 fb37 	bl	8009388 <pvTaskIncrementMutexHeldCount>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d1e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00f      	beq.n	8007d48 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d2a:	3310      	adds	r3, #16
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 ffcb 	bl	8008cc8 <xTaskRemoveFromEventList>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d007      	beq.n	8007d48 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d38:	4b55      	ldr	r3, [pc, #340]	@ (8007e90 <xQueueSemaphoreTake+0x22c>)
 8007d3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d3e:	601a      	str	r2, [r3, #0]
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d48:	f002 f836 	bl	8009db8 <vPortExitCritical>
				return pdPASS;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e09a      	b.n	8007e86 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d114      	bne.n	8007d80 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00d      	beq.n	8007d78 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8007d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d60:	b672      	cpsid	i
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	b662      	cpsie	i
 8007d70:	617b      	str	r3, [r7, #20]
}
 8007d72:	bf00      	nop
 8007d74:	bf00      	nop
 8007d76:	e7fd      	b.n	8007d74 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007d78:	f002 f81e 	bl	8009db8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	e082      	b.n	8007e86 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d106      	bne.n	8007d94 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d86:	f107 030c 	add.w	r3, r7, #12
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f001 f802 	bl	8008d94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d90:	2301      	movs	r3, #1
 8007d92:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d94:	f002 f810 	bl	8009db8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d98:	f000 fd4c 	bl	8008834 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d9c:	f001 ffd6 	bl	8009d4c <vPortEnterCritical>
 8007da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007da6:	b25b      	sxtb	r3, r3
 8007da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dac:	d103      	bne.n	8007db6 <xQueueSemaphoreTake+0x152>
 8007dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007db8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007dbc:	b25b      	sxtb	r3, r3
 8007dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc2:	d103      	bne.n	8007dcc <xQueueSemaphoreTake+0x168>
 8007dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007dcc:	f001 fff4 	bl	8009db8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dd0:	463a      	mov	r2, r7
 8007dd2:	f107 030c 	add.w	r3, r7, #12
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f000 fff1 	bl	8008dc0 <xTaskCheckForTimeOut>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d132      	bne.n	8007e4a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007de4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007de6:	f000 f9fd 	bl	80081e4 <prvIsQueueEmpty>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d026      	beq.n	8007e3e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d109      	bne.n	8007e0c <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8007df8:	f001 ffa8 	bl	8009d4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	4618      	mov	r0, r3
 8007e02:	f001 f95d 	bl	80090c0 <xTaskPriorityInherit>
 8007e06:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007e08:	f001 ffd6 	bl	8009db8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e0e:	3324      	adds	r3, #36	@ 0x24
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	4611      	mov	r1, r2
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 ff01 	bl	8008c1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007e1c:	f000 f990 	bl	8008140 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e20:	f000 fd16 	bl	8008850 <xTaskResumeAll>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f47f af65 	bne.w	8007cf6 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8007e2c:	4b18      	ldr	r3, [pc, #96]	@ (8007e90 <xQueueSemaphoreTake+0x22c>)
 8007e2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e32:	601a      	str	r2, [r3, #0]
 8007e34:	f3bf 8f4f 	dsb	sy
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	e75b      	b.n	8007cf6 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007e3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007e40:	f000 f97e 	bl	8008140 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e44:	f000 fd04 	bl	8008850 <xTaskResumeAll>
 8007e48:	e755      	b.n	8007cf6 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007e4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007e4c:	f000 f978 	bl	8008140 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e50:	f000 fcfe 	bl	8008850 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007e56:	f000 f9c5 	bl	80081e4 <prvIsQueueEmpty>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f43f af4a 	beq.w	8007cf6 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00d      	beq.n	8007e84 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8007e68:	f001 ff70 	bl	8009d4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007e6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007e6e:	f000 f8bf 	bl	8007ff0 <prvGetDisinheritPriorityAfterTimeout>
 8007e72:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f001 f9fc 	bl	8009278 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007e80:	f001 ff9a 	bl	8009db8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3738      	adds	r7, #56	@ 0x38
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	e000ed04 	.word	0xe000ed04

08007e94 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b08e      	sub	sp, #56	@ 0x38
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10d      	bne.n	8007ec6 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8007eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eae:	b672      	cpsid	i
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	b662      	cpsie	i
 8007ebe:	623b      	str	r3, [r7, #32]
}
 8007ec0:	bf00      	nop
 8007ec2:	bf00      	nop
 8007ec4:	e7fd      	b.n	8007ec2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d103      	bne.n	8007ed4 <xQueueReceiveFromISR+0x40>
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d101      	bne.n	8007ed8 <xQueueReceiveFromISR+0x44>
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e000      	b.n	8007eda <xQueueReceiveFromISR+0x46>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10d      	bne.n	8007efa <xQueueReceiveFromISR+0x66>
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee2:	b672      	cpsid	i
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	b662      	cpsie	i
 8007ef2:	61fb      	str	r3, [r7, #28]
}
 8007ef4:	bf00      	nop
 8007ef6:	bf00      	nop
 8007ef8:	e7fd      	b.n	8007ef6 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007efa:	f002 f80f 	bl	8009f1c <vPortValidateInterruptPriority>
	__asm volatile
 8007efe:	f3ef 8211 	mrs	r2, BASEPRI
 8007f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f06:	b672      	cpsid	i
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	b662      	cpsie	i
 8007f16:	61ba      	str	r2, [r7, #24]
 8007f18:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007f1a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f22:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d02f      	beq.n	8007f8a <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f34:	68b9      	ldr	r1, [r7, #8]
 8007f36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f38:	f000 f8dc 	bl	80080f4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f3e:	1e5a      	subs	r2, r3, #1
 8007f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f42:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007f44:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f4c:	d112      	bne.n	8007f74 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d016      	beq.n	8007f84 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f58:	3310      	adds	r3, #16
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 feb4 	bl	8008cc8 <xTaskRemoveFromEventList>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00e      	beq.n	8007f84 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00b      	beq.n	8007f84 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	601a      	str	r2, [r3, #0]
 8007f72:	e007      	b.n	8007f84 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007f74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f78:	3301      	adds	r3, #1
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	b25a      	sxtb	r2, r3
 8007f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007f84:	2301      	movs	r3, #1
 8007f86:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f88:	e001      	b.n	8007f8e <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f90:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	f383 8811 	msr	BASEPRI, r3
}
 8007f98:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3738      	adds	r7, #56	@ 0x38
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10d      	bne.n	8007fd2 <vQueueDelete+0x2e>
	__asm volatile
 8007fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fba:	b672      	cpsid	i
 8007fbc:	f383 8811 	msr	BASEPRI, r3
 8007fc0:	f3bf 8f6f 	isb	sy
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	b662      	cpsie	i
 8007fca:	60bb      	str	r3, [r7, #8]
}
 8007fcc:	bf00      	nop
 8007fce:	bf00      	nop
 8007fd0:	e7fd      	b.n	8007fce <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f000 f95e 	bl	8008294 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d102      	bne.n	8007fe8 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f002 f8ae 	bl	800a144 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007fe8:	bf00      	nop
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d006      	beq.n	800800e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800800a:	60fb      	str	r3, [r7, #12]
 800800c:	e001      	b.n	8008012 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800800e:	2300      	movs	r3, #0
 8008010:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008012:	68fb      	ldr	r3, [r7, #12]
	}
 8008014:	4618      	mov	r0, r3
 8008016:	3714      	adds	r7, #20
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800802c:	2300      	movs	r3, #0
 800802e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008034:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10d      	bne.n	800805a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d14d      	bne.n	80080e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	4618      	mov	r0, r3
 800804c:	f001 f8a0 	bl	8009190 <xTaskPriorityDisinherit>
 8008050:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	609a      	str	r2, [r3, #8]
 8008058:	e043      	b.n	80080e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d119      	bne.n	8008094 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6858      	ldr	r0, [r3, #4]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008068:	461a      	mov	r2, r3
 800806a:	68b9      	ldr	r1, [r7, #8]
 800806c:	f00c fcb9 	bl	80149e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	685a      	ldr	r2, [r3, #4]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008078:	441a      	add	r2, r3
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	685a      	ldr	r2, [r3, #4]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	429a      	cmp	r2, r3
 8008088:	d32b      	bcc.n	80080e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	605a      	str	r2, [r3, #4]
 8008092:	e026      	b.n	80080e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	68d8      	ldr	r0, [r3, #12]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800809c:	461a      	mov	r2, r3
 800809e:	68b9      	ldr	r1, [r7, #8]
 80080a0:	f00c fc9f 	bl	80149e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	68da      	ldr	r2, [r3, #12]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ac:	425b      	negs	r3, r3
 80080ae:	441a      	add	r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	68da      	ldr	r2, [r3, #12]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d207      	bcs.n	80080d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	689a      	ldr	r2, [r3, #8]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c8:	425b      	negs	r3, r3
 80080ca:	441a      	add	r2, r3
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d105      	bne.n	80080e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d002      	beq.n	80080e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	3b01      	subs	r3, #1
 80080e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	1c5a      	adds	r2, r3, #1
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80080ea:	697b      	ldr	r3, [r7, #20]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3718      	adds	r7, #24
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008102:	2b00      	cmp	r3, #0
 8008104:	d018      	beq.n	8008138 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68da      	ldr	r2, [r3, #12]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800810e:	441a      	add	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	68da      	ldr	r2, [r3, #12]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	429a      	cmp	r2, r3
 800811e:	d303      	bcc.n	8008128 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	68d9      	ldr	r1, [r3, #12]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008130:	461a      	mov	r2, r3
 8008132:	6838      	ldr	r0, [r7, #0]
 8008134:	f00c fc55 	bl	80149e2 <memcpy>
	}
}
 8008138:	bf00      	nop
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008148:	f001 fe00 	bl	8009d4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008152:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008154:	e011      	b.n	800817a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800815a:	2b00      	cmp	r3, #0
 800815c:	d012      	beq.n	8008184 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	3324      	adds	r3, #36	@ 0x24
 8008162:	4618      	mov	r0, r3
 8008164:	f000 fdb0 	bl	8008cc8 <xTaskRemoveFromEventList>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800816e:	f000 fe8f 	bl	8008e90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008172:	7bfb      	ldrb	r3, [r7, #15]
 8008174:	3b01      	subs	r3, #1
 8008176:	b2db      	uxtb	r3, r3
 8008178:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800817a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800817e:	2b00      	cmp	r3, #0
 8008180:	dce9      	bgt.n	8008156 <prvUnlockQueue+0x16>
 8008182:	e000      	b.n	8008186 <prvUnlockQueue+0x46>
					break;
 8008184:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	22ff      	movs	r2, #255	@ 0xff
 800818a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800818e:	f001 fe13 	bl	8009db8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008192:	f001 fddb 	bl	8009d4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800819c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800819e:	e011      	b.n	80081c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d012      	beq.n	80081ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	3310      	adds	r3, #16
 80081ac:	4618      	mov	r0, r3
 80081ae:	f000 fd8b 	bl	8008cc8 <xTaskRemoveFromEventList>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80081b8:	f000 fe6a 	bl	8008e90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80081bc:	7bbb      	ldrb	r3, [r7, #14]
 80081be:	3b01      	subs	r3, #1
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	dce9      	bgt.n	80081a0 <prvUnlockQueue+0x60>
 80081cc:	e000      	b.n	80081d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80081ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	22ff      	movs	r2, #255	@ 0xff
 80081d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80081d8:	f001 fdee 	bl	8009db8 <vPortExitCritical>
}
 80081dc:	bf00      	nop
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80081ec:	f001 fdae 	bl	8009d4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d102      	bne.n	80081fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80081f8:	2301      	movs	r3, #1
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	e001      	b.n	8008202 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80081fe:	2300      	movs	r3, #0
 8008200:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008202:	f001 fdd9 	bl	8009db8 <vPortExitCritical>

	return xReturn;
 8008206:	68fb      	ldr	r3, [r7, #12]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008218:	f001 fd98 	bl	8009d4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008224:	429a      	cmp	r2, r3
 8008226:	d102      	bne.n	800822e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008228:	2301      	movs	r3, #1
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	e001      	b.n	8008232 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800822e:	2300      	movs	r3, #0
 8008230:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008232:	f001 fdc1 	bl	8009db8 <vPortExitCritical>

	return xReturn;
 8008236:	68fb      	ldr	r3, [r7, #12]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800824a:	2300      	movs	r3, #0
 800824c:	60fb      	str	r3, [r7, #12]
 800824e:	e014      	b.n	800827a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008250:	4a0f      	ldr	r2, [pc, #60]	@ (8008290 <vQueueAddToRegistry+0x50>)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10b      	bne.n	8008274 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800825c:	490c      	ldr	r1, [pc, #48]	@ (8008290 <vQueueAddToRegistry+0x50>)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	683a      	ldr	r2, [r7, #0]
 8008262:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008266:	4a0a      	ldr	r2, [pc, #40]	@ (8008290 <vQueueAddToRegistry+0x50>)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	00db      	lsls	r3, r3, #3
 800826c:	4413      	add	r3, r2
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008272:	e006      	b.n	8008282 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	3301      	adds	r3, #1
 8008278:	60fb      	str	r3, [r7, #12]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2b07      	cmp	r3, #7
 800827e:	d9e7      	bls.n	8008250 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008280:	bf00      	nop
 8008282:	bf00      	nop
 8008284:	3714      	adds	r7, #20
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	2000600c 	.word	0x2000600c

08008294 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800829c:	2300      	movs	r3, #0
 800829e:	60fb      	str	r3, [r7, #12]
 80082a0:	e016      	b.n	80082d0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80082a2:	4a10      	ldr	r2, [pc, #64]	@ (80082e4 <vQueueUnregisterQueue+0x50>)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	00db      	lsls	r3, r3, #3
 80082a8:	4413      	add	r3, r2
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d10b      	bne.n	80082ca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80082b2:	4a0c      	ldr	r2, [pc, #48]	@ (80082e4 <vQueueUnregisterQueue+0x50>)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2100      	movs	r1, #0
 80082b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80082bc:	4a09      	ldr	r2, [pc, #36]	@ (80082e4 <vQueueUnregisterQueue+0x50>)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	00db      	lsls	r3, r3, #3
 80082c2:	4413      	add	r3, r2
 80082c4:	2200      	movs	r2, #0
 80082c6:	605a      	str	r2, [r3, #4]
				break;
 80082c8:	e006      	b.n	80082d8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	3301      	adds	r3, #1
 80082ce:	60fb      	str	r3, [r7, #12]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2b07      	cmp	r3, #7
 80082d4:	d9e5      	bls.n	80082a2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80082d6:	bf00      	nop
 80082d8:	bf00      	nop
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	2000600c 	.word	0x2000600c

080082e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80082f8:	f001 fd28 	bl	8009d4c <vPortEnterCritical>
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008302:	b25b      	sxtb	r3, r3
 8008304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008308:	d103      	bne.n	8008312 <vQueueWaitForMessageRestricted+0x2a>
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008318:	b25b      	sxtb	r3, r3
 800831a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831e:	d103      	bne.n	8008328 <vQueueWaitForMessageRestricted+0x40>
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	2200      	movs	r2, #0
 8008324:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008328:	f001 fd46 	bl	8009db8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008330:	2b00      	cmp	r3, #0
 8008332:	d106      	bne.n	8008342 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	3324      	adds	r3, #36	@ 0x24
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	68b9      	ldr	r1, [r7, #8]
 800833c:	4618      	mov	r0, r3
 800833e:	f000 fc95 	bl	8008c6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008342:	6978      	ldr	r0, [r7, #20]
 8008344:	f7ff fefc 	bl	8008140 <prvUnlockQueue>
	}
 8008348:	bf00      	nop
 800834a:	3718      	adds	r7, #24
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008350:	b580      	push	{r7, lr}
 8008352:	b08e      	sub	sp, #56	@ 0x38
 8008354:	af04      	add	r7, sp, #16
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
 800835c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800835e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10d      	bne.n	8008380 <xTaskCreateStatic+0x30>
	__asm volatile
 8008364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008368:	b672      	cpsid	i
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	b662      	cpsie	i
 8008378:	623b      	str	r3, [r7, #32]
}
 800837a:	bf00      	nop
 800837c:	bf00      	nop
 800837e:	e7fd      	b.n	800837c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10d      	bne.n	80083a2 <xTaskCreateStatic+0x52>
	__asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838a:	b672      	cpsid	i
 800838c:	f383 8811 	msr	BASEPRI, r3
 8008390:	f3bf 8f6f 	isb	sy
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	b662      	cpsie	i
 800839a:	61fb      	str	r3, [r7, #28]
}
 800839c:	bf00      	nop
 800839e:	bf00      	nop
 80083a0:	e7fd      	b.n	800839e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80083a2:	23a8      	movs	r3, #168	@ 0xa8
 80083a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	2ba8      	cmp	r3, #168	@ 0xa8
 80083aa:	d00d      	beq.n	80083c8 <xTaskCreateStatic+0x78>
	__asm volatile
 80083ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b0:	b672      	cpsid	i
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	b662      	cpsie	i
 80083c0:	61bb      	str	r3, [r7, #24]
}
 80083c2:	bf00      	nop
 80083c4:	bf00      	nop
 80083c6:	e7fd      	b.n	80083c4 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80083c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80083ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d01e      	beq.n	800840e <xTaskCreateStatic+0xbe>
 80083d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d01b      	beq.n	800840e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80083da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083de:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80083e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e2:	2202      	movs	r2, #2
 80083e4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80083e8:	2300      	movs	r3, #0
 80083ea:	9303      	str	r3, [sp, #12]
 80083ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ee:	9302      	str	r3, [sp, #8]
 80083f0:	f107 0314 	add.w	r3, r7, #20
 80083f4:	9301      	str	r3, [sp, #4]
 80083f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	68b9      	ldr	r1, [r7, #8]
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f000 f851 	bl	80084a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008406:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008408:	f000 f8f8 	bl	80085fc <prvAddNewTaskToReadyList>
 800840c:	e001      	b.n	8008412 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800840e:	2300      	movs	r3, #0
 8008410:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008412:	697b      	ldr	r3, [r7, #20]
	}
 8008414:	4618      	mov	r0, r3
 8008416:	3728      	adds	r7, #40	@ 0x28
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800841c:	b580      	push	{r7, lr}
 800841e:	b08c      	sub	sp, #48	@ 0x30
 8008420:	af04      	add	r7, sp, #16
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	603b      	str	r3, [r7, #0]
 8008428:	4613      	mov	r3, r2
 800842a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800842c:	88fb      	ldrh	r3, [r7, #6]
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4618      	mov	r0, r3
 8008432:	f001 fdb9 	bl	8009fa8 <pvPortMalloc>
 8008436:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00e      	beq.n	800845c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800843e:	20a8      	movs	r0, #168	@ 0xa8
 8008440:	f001 fdb2 	bl	8009fa8 <pvPortMalloc>
 8008444:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d003      	beq.n	8008454 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	631a      	str	r2, [r3, #48]	@ 0x30
 8008452:	e005      	b.n	8008460 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008454:	6978      	ldr	r0, [r7, #20]
 8008456:	f001 fe75 	bl	800a144 <vPortFree>
 800845a:	e001      	b.n	8008460 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800845c:	2300      	movs	r3, #0
 800845e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d017      	beq.n	8008496 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800846e:	88fa      	ldrh	r2, [r7, #6]
 8008470:	2300      	movs	r3, #0
 8008472:	9303      	str	r3, [sp, #12]
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	9302      	str	r3, [sp, #8]
 8008478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800847a:	9301      	str	r3, [sp, #4]
 800847c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	68b9      	ldr	r1, [r7, #8]
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f000 f80f 	bl	80084a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800848a:	69f8      	ldr	r0, [r7, #28]
 800848c:	f000 f8b6 	bl	80085fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008490:	2301      	movs	r3, #1
 8008492:	61bb      	str	r3, [r7, #24]
 8008494:	e002      	b.n	800849c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008496:	f04f 33ff 	mov.w	r3, #4294967295
 800849a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800849c:	69bb      	ldr	r3, [r7, #24]
	}
 800849e:	4618      	mov	r0, r3
 80084a0:	3720      	adds	r7, #32
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
	...

080084a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b088      	sub	sp, #32
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80084b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	461a      	mov	r2, r3
 80084c0:	21a5      	movs	r1, #165	@ 0xa5
 80084c2:	f00c f9c3 	bl	801484c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80084c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084ca:	6879      	ldr	r1, [r7, #4]
 80084cc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80084d0:	440b      	add	r3, r1
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	f023 0307 	bic.w	r3, r3, #7
 80084de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	f003 0307 	and.w	r3, r3, #7
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00d      	beq.n	8008506 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80084ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ee:	b672      	cpsid	i
 80084f0:	f383 8811 	msr	BASEPRI, r3
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	b662      	cpsie	i
 80084fe:	617b      	str	r3, [r7, #20]
}
 8008500:	bf00      	nop
 8008502:	bf00      	nop
 8008504:	e7fd      	b.n	8008502 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d01f      	beq.n	800854c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800850c:	2300      	movs	r3, #0
 800850e:	61fb      	str	r3, [r7, #28]
 8008510:	e012      	b.n	8008538 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	4413      	add	r3, r2
 8008518:	7819      	ldrb	r1, [r3, #0]
 800851a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	4413      	add	r3, r2
 8008520:	3334      	adds	r3, #52	@ 0x34
 8008522:	460a      	mov	r2, r1
 8008524:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	4413      	add	r3, r2
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d006      	beq.n	8008540 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	3301      	adds	r3, #1
 8008536:	61fb      	str	r3, [r7, #28]
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	2b0f      	cmp	r3, #15
 800853c:	d9e9      	bls.n	8008512 <prvInitialiseNewTask+0x6a>
 800853e:	e000      	b.n	8008542 <prvInitialiseNewTask+0x9a>
			{
				break;
 8008540:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008544:	2200      	movs	r2, #0
 8008546:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800854a:	e003      	b.n	8008554 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800854c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854e:	2200      	movs	r2, #0
 8008550:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008556:	2b37      	cmp	r3, #55	@ 0x37
 8008558:	d901      	bls.n	800855e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800855a:	2337      	movs	r3, #55	@ 0x37
 800855c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800855e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008560:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008562:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008566:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008568:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800856a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856c:	2200      	movs	r2, #0
 800856e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008572:	3304      	adds	r3, #4
 8008574:	4618      	mov	r0, r3
 8008576:	f7fe fd27 	bl	8006fc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800857a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857c:	3318      	adds	r3, #24
 800857e:	4618      	mov	r0, r3
 8008580:	f7fe fd22 	bl	8006fc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008588:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800858a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800858c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008592:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008596:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008598:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800859a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859c:	2200      	movs	r2, #0
 800859e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80085a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80085aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ac:	3354      	adds	r3, #84	@ 0x54
 80085ae:	224c      	movs	r2, #76	@ 0x4c
 80085b0:	2100      	movs	r1, #0
 80085b2:	4618      	mov	r0, r3
 80085b4:	f00c f94a 	bl	801484c <memset>
 80085b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ba:	4a0d      	ldr	r2, [pc, #52]	@ (80085f0 <prvInitialiseNewTask+0x148>)
 80085bc:	659a      	str	r2, [r3, #88]	@ 0x58
 80085be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c0:	4a0c      	ldr	r2, [pc, #48]	@ (80085f4 <prvInitialiseNewTask+0x14c>)
 80085c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80085c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c6:	4a0c      	ldr	r2, [pc, #48]	@ (80085f8 <prvInitialiseNewTask+0x150>)
 80085c8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	68f9      	ldr	r1, [r7, #12]
 80085ce:	69b8      	ldr	r0, [r7, #24]
 80085d0:	f001 faaa 	bl	8009b28 <pxPortInitialiseStack>
 80085d4:	4602      	mov	r2, r0
 80085d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80085da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d002      	beq.n	80085e6 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80085e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085e6:	bf00      	nop
 80085e8:	3720      	adds	r7, #32
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	2000d508 	.word	0x2000d508
 80085f4:	2000d570 	.word	0x2000d570
 80085f8:	2000d5d8 	.word	0x2000d5d8

080085fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008604:	f001 fba2 	bl	8009d4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008608:	4b2d      	ldr	r3, [pc, #180]	@ (80086c0 <prvAddNewTaskToReadyList+0xc4>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3301      	adds	r3, #1
 800860e:	4a2c      	ldr	r2, [pc, #176]	@ (80086c0 <prvAddNewTaskToReadyList+0xc4>)
 8008610:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008612:	4b2c      	ldr	r3, [pc, #176]	@ (80086c4 <prvAddNewTaskToReadyList+0xc8>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d109      	bne.n	800862e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800861a:	4a2a      	ldr	r2, [pc, #168]	@ (80086c4 <prvAddNewTaskToReadyList+0xc8>)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008620:	4b27      	ldr	r3, [pc, #156]	@ (80086c0 <prvAddNewTaskToReadyList+0xc4>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d110      	bne.n	800864a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008628:	f000 fc56 	bl	8008ed8 <prvInitialiseTaskLists>
 800862c:	e00d      	b.n	800864a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800862e:	4b26      	ldr	r3, [pc, #152]	@ (80086c8 <prvAddNewTaskToReadyList+0xcc>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d109      	bne.n	800864a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008636:	4b23      	ldr	r3, [pc, #140]	@ (80086c4 <prvAddNewTaskToReadyList+0xc8>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008640:	429a      	cmp	r2, r3
 8008642:	d802      	bhi.n	800864a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008644:	4a1f      	ldr	r2, [pc, #124]	@ (80086c4 <prvAddNewTaskToReadyList+0xc8>)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800864a:	4b20      	ldr	r3, [pc, #128]	@ (80086cc <prvAddNewTaskToReadyList+0xd0>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	3301      	adds	r3, #1
 8008650:	4a1e      	ldr	r2, [pc, #120]	@ (80086cc <prvAddNewTaskToReadyList+0xd0>)
 8008652:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008654:	4b1d      	ldr	r3, [pc, #116]	@ (80086cc <prvAddNewTaskToReadyList+0xd0>)
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008660:	4b1b      	ldr	r3, [pc, #108]	@ (80086d0 <prvAddNewTaskToReadyList+0xd4>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	429a      	cmp	r2, r3
 8008666:	d903      	bls.n	8008670 <prvAddNewTaskToReadyList+0x74>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800866c:	4a18      	ldr	r2, [pc, #96]	@ (80086d0 <prvAddNewTaskToReadyList+0xd4>)
 800866e:	6013      	str	r3, [r2, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008674:	4613      	mov	r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	4413      	add	r3, r2
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	4a15      	ldr	r2, [pc, #84]	@ (80086d4 <prvAddNewTaskToReadyList+0xd8>)
 800867e:	441a      	add	r2, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	3304      	adds	r3, #4
 8008684:	4619      	mov	r1, r3
 8008686:	4610      	mov	r0, r2
 8008688:	f7fe fcab 	bl	8006fe2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800868c:	f001 fb94 	bl	8009db8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008690:	4b0d      	ldr	r3, [pc, #52]	@ (80086c8 <prvAddNewTaskToReadyList+0xcc>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00e      	beq.n	80086b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008698:	4b0a      	ldr	r3, [pc, #40]	@ (80086c4 <prvAddNewTaskToReadyList+0xc8>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d207      	bcs.n	80086b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80086a6:	4b0c      	ldr	r3, [pc, #48]	@ (80086d8 <prvAddNewTaskToReadyList+0xdc>)
 80086a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086ac:	601a      	str	r2, [r3, #0]
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086b6:	bf00      	nop
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	20006520 	.word	0x20006520
 80086c4:	2000604c 	.word	0x2000604c
 80086c8:	2000652c 	.word	0x2000652c
 80086cc:	2000653c 	.word	0x2000653c
 80086d0:	20006528 	.word	0x20006528
 80086d4:	20006050 	.word	0x20006050
 80086d8:	e000ed04 	.word	0xe000ed04

080086dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80086e4:	2300      	movs	r3, #0
 80086e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d01a      	beq.n	8008724 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80086ee:	4b15      	ldr	r3, [pc, #84]	@ (8008744 <vTaskDelay+0x68>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00d      	beq.n	8008712 <vTaskDelay+0x36>
	__asm volatile
 80086f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086fa:	b672      	cpsid	i
 80086fc:	f383 8811 	msr	BASEPRI, r3
 8008700:	f3bf 8f6f 	isb	sy
 8008704:	f3bf 8f4f 	dsb	sy
 8008708:	b662      	cpsie	i
 800870a:	60bb      	str	r3, [r7, #8]
}
 800870c:	bf00      	nop
 800870e:	bf00      	nop
 8008710:	e7fd      	b.n	800870e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008712:	f000 f88f 	bl	8008834 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008716:	2100      	movs	r1, #0
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fe49 	bl	80093b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800871e:	f000 f897 	bl	8008850 <xTaskResumeAll>
 8008722:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d107      	bne.n	800873a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800872a:	4b07      	ldr	r3, [pc, #28]	@ (8008748 <vTaskDelay+0x6c>)
 800872c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008730:	601a      	str	r2, [r3, #0]
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800873a:	bf00      	nop
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	20006548 	.word	0x20006548
 8008748:	e000ed04 	.word	0xe000ed04

0800874c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b08a      	sub	sp, #40	@ 0x28
 8008750:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008752:	2300      	movs	r3, #0
 8008754:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008756:	2300      	movs	r3, #0
 8008758:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800875a:	463a      	mov	r2, r7
 800875c:	1d39      	adds	r1, r7, #4
 800875e:	f107 0308 	add.w	r3, r7, #8
 8008762:	4618      	mov	r0, r3
 8008764:	f7fe fbdc 	bl	8006f20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008768:	6839      	ldr	r1, [r7, #0]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	9202      	str	r2, [sp, #8]
 8008770:	9301      	str	r3, [sp, #4]
 8008772:	2300      	movs	r3, #0
 8008774:	9300      	str	r3, [sp, #0]
 8008776:	2300      	movs	r3, #0
 8008778:	460a      	mov	r2, r1
 800877a:	4926      	ldr	r1, [pc, #152]	@ (8008814 <vTaskStartScheduler+0xc8>)
 800877c:	4826      	ldr	r0, [pc, #152]	@ (8008818 <vTaskStartScheduler+0xcc>)
 800877e:	f7ff fde7 	bl	8008350 <xTaskCreateStatic>
 8008782:	4603      	mov	r3, r0
 8008784:	4a25      	ldr	r2, [pc, #148]	@ (800881c <vTaskStartScheduler+0xd0>)
 8008786:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008788:	4b24      	ldr	r3, [pc, #144]	@ (800881c <vTaskStartScheduler+0xd0>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d002      	beq.n	8008796 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008790:	2301      	movs	r3, #1
 8008792:	617b      	str	r3, [r7, #20]
 8008794:	e001      	b.n	800879a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008796:	2300      	movs	r3, #0
 8008798:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d102      	bne.n	80087a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80087a0:	f000 fe5a 	bl	8009458 <xTimerCreateTimerTask>
 80087a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d11d      	bne.n	80087e8 <vTaskStartScheduler+0x9c>
	__asm volatile
 80087ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b0:	b672      	cpsid	i
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	b662      	cpsie	i
 80087c0:	613b      	str	r3, [r7, #16]
}
 80087c2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80087c4:	4b16      	ldr	r3, [pc, #88]	@ (8008820 <vTaskStartScheduler+0xd4>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	3354      	adds	r3, #84	@ 0x54
 80087ca:	4a16      	ldr	r2, [pc, #88]	@ (8008824 <vTaskStartScheduler+0xd8>)
 80087cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80087ce:	4b16      	ldr	r3, [pc, #88]	@ (8008828 <vTaskStartScheduler+0xdc>)
 80087d0:	f04f 32ff 	mov.w	r2, #4294967295
 80087d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80087d6:	4b15      	ldr	r3, [pc, #84]	@ (800882c <vTaskStartScheduler+0xe0>)
 80087d8:	2201      	movs	r2, #1
 80087da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80087dc:	4b14      	ldr	r3, [pc, #80]	@ (8008830 <vTaskStartScheduler+0xe4>)
 80087de:	2200      	movs	r2, #0
 80087e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80087e2:	f001 fa35 	bl	8009c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80087e6:	e011      	b.n	800880c <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ee:	d10d      	bne.n	800880c <vTaskStartScheduler+0xc0>
	__asm volatile
 80087f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f4:	b672      	cpsid	i
 80087f6:	f383 8811 	msr	BASEPRI, r3
 80087fa:	f3bf 8f6f 	isb	sy
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	b662      	cpsie	i
 8008804:	60fb      	str	r3, [r7, #12]
}
 8008806:	bf00      	nop
 8008808:	bf00      	nop
 800880a:	e7fd      	b.n	8008808 <vTaskStartScheduler+0xbc>
}
 800880c:	bf00      	nop
 800880e:	3718      	adds	r7, #24
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	080155b0 	.word	0x080155b0
 8008818:	08008ea9 	.word	0x08008ea9
 800881c:	20006544 	.word	0x20006544
 8008820:	2000604c 	.word	0x2000604c
 8008824:	2000003c 	.word	0x2000003c
 8008828:	20006540 	.word	0x20006540
 800882c:	2000652c 	.word	0x2000652c
 8008830:	20006524 	.word	0x20006524

08008834 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008834:	b480      	push	{r7}
 8008836:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008838:	4b04      	ldr	r3, [pc, #16]	@ (800884c <vTaskSuspendAll+0x18>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	3301      	adds	r3, #1
 800883e:	4a03      	ldr	r2, [pc, #12]	@ (800884c <vTaskSuspendAll+0x18>)
 8008840:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008842:	bf00      	nop
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	20006548 	.word	0x20006548

08008850 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008856:	2300      	movs	r3, #0
 8008858:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800885a:	2300      	movs	r3, #0
 800885c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800885e:	4b43      	ldr	r3, [pc, #268]	@ (800896c <xTaskResumeAll+0x11c>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d10d      	bne.n	8008882 <xTaskResumeAll+0x32>
	__asm volatile
 8008866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800886a:	b672      	cpsid	i
 800886c:	f383 8811 	msr	BASEPRI, r3
 8008870:	f3bf 8f6f 	isb	sy
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	b662      	cpsie	i
 800887a:	603b      	str	r3, [r7, #0]
}
 800887c:	bf00      	nop
 800887e:	bf00      	nop
 8008880:	e7fd      	b.n	800887e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008882:	f001 fa63 	bl	8009d4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008886:	4b39      	ldr	r3, [pc, #228]	@ (800896c <xTaskResumeAll+0x11c>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	3b01      	subs	r3, #1
 800888c:	4a37      	ldr	r2, [pc, #220]	@ (800896c <xTaskResumeAll+0x11c>)
 800888e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008890:	4b36      	ldr	r3, [pc, #216]	@ (800896c <xTaskResumeAll+0x11c>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d162      	bne.n	800895e <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008898:	4b35      	ldr	r3, [pc, #212]	@ (8008970 <xTaskResumeAll+0x120>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d05e      	beq.n	800895e <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088a0:	e02f      	b.n	8008902 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088a2:	4b34      	ldr	r3, [pc, #208]	@ (8008974 <xTaskResumeAll+0x124>)
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	3318      	adds	r3, #24
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fbf4 	bl	800709c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	3304      	adds	r3, #4
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7fe fbef 	bl	800709c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088c2:	4b2d      	ldr	r3, [pc, #180]	@ (8008978 <xTaskResumeAll+0x128>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d903      	bls.n	80088d2 <xTaskResumeAll+0x82>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ce:	4a2a      	ldr	r2, [pc, #168]	@ (8008978 <xTaskResumeAll+0x128>)
 80088d0:	6013      	str	r3, [r2, #0]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088d6:	4613      	mov	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4413      	add	r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	4a27      	ldr	r2, [pc, #156]	@ (800897c <xTaskResumeAll+0x12c>)
 80088e0:	441a      	add	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	3304      	adds	r3, #4
 80088e6:	4619      	mov	r1, r3
 80088e8:	4610      	mov	r0, r2
 80088ea:	f7fe fb7a 	bl	8006fe2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088f2:	4b23      	ldr	r3, [pc, #140]	@ (8008980 <xTaskResumeAll+0x130>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d302      	bcc.n	8008902 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80088fc:	4b21      	ldr	r3, [pc, #132]	@ (8008984 <xTaskResumeAll+0x134>)
 80088fe:	2201      	movs	r2, #1
 8008900:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008902:	4b1c      	ldr	r3, [pc, #112]	@ (8008974 <xTaskResumeAll+0x124>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1cb      	bne.n	80088a2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008910:	f000 fb88 	bl	8009024 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008914:	4b1c      	ldr	r3, [pc, #112]	@ (8008988 <xTaskResumeAll+0x138>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d010      	beq.n	8008942 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008920:	f000 f858 	bl	80089d4 <xTaskIncrementTick>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d002      	beq.n	8008930 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800892a:	4b16      	ldr	r3, [pc, #88]	@ (8008984 <xTaskResumeAll+0x134>)
 800892c:	2201      	movs	r2, #1
 800892e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	3b01      	subs	r3, #1
 8008934:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1f1      	bne.n	8008920 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800893c:	4b12      	ldr	r3, [pc, #72]	@ (8008988 <xTaskResumeAll+0x138>)
 800893e:	2200      	movs	r2, #0
 8008940:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008942:	4b10      	ldr	r3, [pc, #64]	@ (8008984 <xTaskResumeAll+0x134>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d009      	beq.n	800895e <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800894a:	2301      	movs	r3, #1
 800894c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800894e:	4b0f      	ldr	r3, [pc, #60]	@ (800898c <xTaskResumeAll+0x13c>)
 8008950:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008954:	601a      	str	r2, [r3, #0]
 8008956:	f3bf 8f4f 	dsb	sy
 800895a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800895e:	f001 fa2b 	bl	8009db8 <vPortExitCritical>

	return xAlreadyYielded;
 8008962:	68bb      	ldr	r3, [r7, #8]
}
 8008964:	4618      	mov	r0, r3
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	20006548 	.word	0x20006548
 8008970:	20006520 	.word	0x20006520
 8008974:	200064e0 	.word	0x200064e0
 8008978:	20006528 	.word	0x20006528
 800897c:	20006050 	.word	0x20006050
 8008980:	2000604c 	.word	0x2000604c
 8008984:	20006534 	.word	0x20006534
 8008988:	20006530 	.word	0x20006530
 800898c:	e000ed04 	.word	0xe000ed04

08008990 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008996:	4b05      	ldr	r3, [pc, #20]	@ (80089ac <xTaskGetTickCount+0x1c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800899c:	687b      	ldr	r3, [r7, #4]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	20006524 	.word	0x20006524

080089b0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089b6:	f001 fab1 	bl	8009f1c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80089ba:	2300      	movs	r3, #0
 80089bc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80089be:	4b04      	ldr	r3, [pc, #16]	@ (80089d0 <xTaskGetTickCountFromISR+0x20>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80089c4:	683b      	ldr	r3, [r7, #0]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	20006524 	.word	0x20006524

080089d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80089da:	2300      	movs	r3, #0
 80089dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089de:	4b50      	ldr	r3, [pc, #320]	@ (8008b20 <xTaskIncrementTick+0x14c>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f040 808c 	bne.w	8008b00 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80089e8:	4b4e      	ldr	r3, [pc, #312]	@ (8008b24 <xTaskIncrementTick+0x150>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	3301      	adds	r3, #1
 80089ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80089f0:	4a4c      	ldr	r2, [pc, #304]	@ (8008b24 <xTaskIncrementTick+0x150>)
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d123      	bne.n	8008a44 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80089fc:	4b4a      	ldr	r3, [pc, #296]	@ (8008b28 <xTaskIncrementTick+0x154>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00d      	beq.n	8008a22 <xTaskIncrementTick+0x4e>
	__asm volatile
 8008a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a0a:	b672      	cpsid	i
 8008a0c:	f383 8811 	msr	BASEPRI, r3
 8008a10:	f3bf 8f6f 	isb	sy
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	b662      	cpsie	i
 8008a1a:	603b      	str	r3, [r7, #0]
}
 8008a1c:	bf00      	nop
 8008a1e:	bf00      	nop
 8008a20:	e7fd      	b.n	8008a1e <xTaskIncrementTick+0x4a>
 8008a22:	4b41      	ldr	r3, [pc, #260]	@ (8008b28 <xTaskIncrementTick+0x154>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	60fb      	str	r3, [r7, #12]
 8008a28:	4b40      	ldr	r3, [pc, #256]	@ (8008b2c <xTaskIncrementTick+0x158>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a3e      	ldr	r2, [pc, #248]	@ (8008b28 <xTaskIncrementTick+0x154>)
 8008a2e:	6013      	str	r3, [r2, #0]
 8008a30:	4a3e      	ldr	r2, [pc, #248]	@ (8008b2c <xTaskIncrementTick+0x158>)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6013      	str	r3, [r2, #0]
 8008a36:	4b3e      	ldr	r3, [pc, #248]	@ (8008b30 <xTaskIncrementTick+0x15c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	4a3c      	ldr	r2, [pc, #240]	@ (8008b30 <xTaskIncrementTick+0x15c>)
 8008a3e:	6013      	str	r3, [r2, #0]
 8008a40:	f000 faf0 	bl	8009024 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a44:	4b3b      	ldr	r3, [pc, #236]	@ (8008b34 <xTaskIncrementTick+0x160>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	693a      	ldr	r2, [r7, #16]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d349      	bcc.n	8008ae2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a4e:	4b36      	ldr	r3, [pc, #216]	@ (8008b28 <xTaskIncrementTick+0x154>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d104      	bne.n	8008a62 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a58:	4b36      	ldr	r3, [pc, #216]	@ (8008b34 <xTaskIncrementTick+0x160>)
 8008a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a5e:	601a      	str	r2, [r3, #0]
					break;
 8008a60:	e03f      	b.n	8008ae2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a62:	4b31      	ldr	r3, [pc, #196]	@ (8008b28 <xTaskIncrementTick+0x154>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d203      	bcs.n	8008a82 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a7a:	4a2e      	ldr	r2, [pc, #184]	@ (8008b34 <xTaskIncrementTick+0x160>)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a80:	e02f      	b.n	8008ae2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	3304      	adds	r3, #4
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fe fb08 	bl	800709c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d004      	beq.n	8008a9e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	3318      	adds	r3, #24
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7fe faff 	bl	800709c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aa2:	4b25      	ldr	r3, [pc, #148]	@ (8008b38 <xTaskIncrementTick+0x164>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d903      	bls.n	8008ab2 <xTaskIncrementTick+0xde>
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aae:	4a22      	ldr	r2, [pc, #136]	@ (8008b38 <xTaskIncrementTick+0x164>)
 8008ab0:	6013      	str	r3, [r2, #0]
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	4a1f      	ldr	r2, [pc, #124]	@ (8008b3c <xTaskIncrementTick+0x168>)
 8008ac0:	441a      	add	r2, r3
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	4610      	mov	r0, r2
 8008aca:	f7fe fa8a 	bl	8006fe2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8008b40 <xTaskIncrementTick+0x16c>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d3b8      	bcc.n	8008a4e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8008adc:	2301      	movs	r3, #1
 8008ade:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ae0:	e7b5      	b.n	8008a4e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ae2:	4b17      	ldr	r3, [pc, #92]	@ (8008b40 <xTaskIncrementTick+0x16c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ae8:	4914      	ldr	r1, [pc, #80]	@ (8008b3c <xTaskIncrementTick+0x168>)
 8008aea:	4613      	mov	r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	440b      	add	r3, r1
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d907      	bls.n	8008b0a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8008afa:	2301      	movs	r3, #1
 8008afc:	617b      	str	r3, [r7, #20]
 8008afe:	e004      	b.n	8008b0a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008b00:	4b10      	ldr	r3, [pc, #64]	@ (8008b44 <xTaskIncrementTick+0x170>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3301      	adds	r3, #1
 8008b06:	4a0f      	ldr	r2, [pc, #60]	@ (8008b44 <xTaskIncrementTick+0x170>)
 8008b08:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8008b48 <xTaskIncrementTick+0x174>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8008b12:	2301      	movs	r3, #1
 8008b14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008b16:	697b      	ldr	r3, [r7, #20]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3718      	adds	r7, #24
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	20006548 	.word	0x20006548
 8008b24:	20006524 	.word	0x20006524
 8008b28:	200064d8 	.word	0x200064d8
 8008b2c:	200064dc 	.word	0x200064dc
 8008b30:	20006538 	.word	0x20006538
 8008b34:	20006540 	.word	0x20006540
 8008b38:	20006528 	.word	0x20006528
 8008b3c:	20006050 	.word	0x20006050
 8008b40:	2000604c 	.word	0x2000604c
 8008b44:	20006530 	.word	0x20006530
 8008b48:	20006534 	.word	0x20006534

08008b4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b52:	4b2c      	ldr	r3, [pc, #176]	@ (8008c04 <vTaskSwitchContext+0xb8>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d003      	beq.n	8008b62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8008c08 <vTaskSwitchContext+0xbc>)
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b60:	e049      	b.n	8008bf6 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8008b62:	4b29      	ldr	r3, [pc, #164]	@ (8008c08 <vTaskSwitchContext+0xbc>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b68:	4b28      	ldr	r3, [pc, #160]	@ (8008c0c <vTaskSwitchContext+0xc0>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	60fb      	str	r3, [r7, #12]
 8008b6e:	e013      	b.n	8008b98 <vTaskSwitchContext+0x4c>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d10d      	bne.n	8008b92 <vTaskSwitchContext+0x46>
	__asm volatile
 8008b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7a:	b672      	cpsid	i
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	b662      	cpsie	i
 8008b8a:	607b      	str	r3, [r7, #4]
}
 8008b8c:	bf00      	nop
 8008b8e:	bf00      	nop
 8008b90:	e7fd      	b.n	8008b8e <vTaskSwitchContext+0x42>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	3b01      	subs	r3, #1
 8008b96:	60fb      	str	r3, [r7, #12]
 8008b98:	491d      	ldr	r1, [pc, #116]	@ (8008c10 <vTaskSwitchContext+0xc4>)
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4413      	add	r3, r2
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	440b      	add	r3, r1
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d0e1      	beq.n	8008b70 <vTaskSwitchContext+0x24>
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4413      	add	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4a16      	ldr	r2, [pc, #88]	@ (8008c10 <vTaskSwitchContext+0xc4>)
 8008bb8:	4413      	add	r3, r2
 8008bba:	60bb      	str	r3, [r7, #8]
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	685a      	ldr	r2, [r3, #4]
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	605a      	str	r2, [r3, #4]
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	685a      	ldr	r2, [r3, #4]
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	3308      	adds	r3, #8
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d104      	bne.n	8008bdc <vTaskSwitchContext+0x90>
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	605a      	str	r2, [r3, #4]
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	4a0c      	ldr	r2, [pc, #48]	@ (8008c14 <vTaskSwitchContext+0xc8>)
 8008be4:	6013      	str	r3, [r2, #0]
 8008be6:	4a09      	ldr	r2, [pc, #36]	@ (8008c0c <vTaskSwitchContext+0xc0>)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008bec:	4b09      	ldr	r3, [pc, #36]	@ (8008c14 <vTaskSwitchContext+0xc8>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3354      	adds	r3, #84	@ 0x54
 8008bf2:	4a09      	ldr	r2, [pc, #36]	@ (8008c18 <vTaskSwitchContext+0xcc>)
 8008bf4:	6013      	str	r3, [r2, #0]
}
 8008bf6:	bf00      	nop
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	20006548 	.word	0x20006548
 8008c08:	20006534 	.word	0x20006534
 8008c0c:	20006528 	.word	0x20006528
 8008c10:	20006050 	.word	0x20006050
 8008c14:	2000604c 	.word	0x2000604c
 8008c18:	2000003c 	.word	0x2000003c

08008c1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10d      	bne.n	8008c48 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8008c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c30:	b672      	cpsid	i
 8008c32:	f383 8811 	msr	BASEPRI, r3
 8008c36:	f3bf 8f6f 	isb	sy
 8008c3a:	f3bf 8f4f 	dsb	sy
 8008c3e:	b662      	cpsie	i
 8008c40:	60fb      	str	r3, [r7, #12]
}
 8008c42:	bf00      	nop
 8008c44:	bf00      	nop
 8008c46:	e7fd      	b.n	8008c44 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c48:	4b07      	ldr	r3, [pc, #28]	@ (8008c68 <vTaskPlaceOnEventList+0x4c>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3318      	adds	r3, #24
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7fe f9ea 	bl	800702a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c56:	2101      	movs	r1, #1
 8008c58:	6838      	ldr	r0, [r7, #0]
 8008c5a:	f000 fba9 	bl	80093b0 <prvAddCurrentTaskToDelayedList>
}
 8008c5e:	bf00      	nop
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	2000604c 	.word	0x2000604c

08008c6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b086      	sub	sp, #24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d10d      	bne.n	8008c9a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c82:	b672      	cpsid	i
 8008c84:	f383 8811 	msr	BASEPRI, r3
 8008c88:	f3bf 8f6f 	isb	sy
 8008c8c:	f3bf 8f4f 	dsb	sy
 8008c90:	b662      	cpsie	i
 8008c92:	617b      	str	r3, [r7, #20]
}
 8008c94:	bf00      	nop
 8008c96:	bf00      	nop
 8008c98:	e7fd      	b.n	8008c96 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8008cc4 <vTaskPlaceOnEventListRestricted+0x58>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	3318      	adds	r3, #24
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f7fe f99d 	bl	8006fe2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d002      	beq.n	8008cb4 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8008cae:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008cb4:	6879      	ldr	r1, [r7, #4]
 8008cb6:	68b8      	ldr	r0, [r7, #8]
 8008cb8:	f000 fb7a 	bl	80093b0 <prvAddCurrentTaskToDelayedList>
	}
 8008cbc:	bf00      	nop
 8008cbe:	3718      	adds	r7, #24
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	2000604c 	.word	0x2000604c

08008cc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10d      	bne.n	8008cfa <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8008cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce2:	b672      	cpsid	i
 8008ce4:	f383 8811 	msr	BASEPRI, r3
 8008ce8:	f3bf 8f6f 	isb	sy
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	b662      	cpsie	i
 8008cf2:	60fb      	str	r3, [r7, #12]
}
 8008cf4:	bf00      	nop
 8008cf6:	bf00      	nop
 8008cf8:	e7fd      	b.n	8008cf6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	3318      	adds	r3, #24
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7fe f9cc 	bl	800709c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d04:	4b1d      	ldr	r3, [pc, #116]	@ (8008d7c <xTaskRemoveFromEventList+0xb4>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d11d      	bne.n	8008d48 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	3304      	adds	r3, #4
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7fe f9c3 	bl	800709c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d1a:	4b19      	ldr	r3, [pc, #100]	@ (8008d80 <xTaskRemoveFromEventList+0xb8>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d903      	bls.n	8008d2a <xTaskRemoveFromEventList+0x62>
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d26:	4a16      	ldr	r2, [pc, #88]	@ (8008d80 <xTaskRemoveFromEventList+0xb8>)
 8008d28:	6013      	str	r3, [r2, #0]
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d2e:	4613      	mov	r3, r2
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	4413      	add	r3, r2
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4a13      	ldr	r2, [pc, #76]	@ (8008d84 <xTaskRemoveFromEventList+0xbc>)
 8008d38:	441a      	add	r2, r3
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	3304      	adds	r3, #4
 8008d3e:	4619      	mov	r1, r3
 8008d40:	4610      	mov	r0, r2
 8008d42:	f7fe f94e 	bl	8006fe2 <vListInsertEnd>
 8008d46:	e005      	b.n	8008d54 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	3318      	adds	r3, #24
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	480e      	ldr	r0, [pc, #56]	@ (8008d88 <xTaskRemoveFromEventList+0xc0>)
 8008d50:	f7fe f947 	bl	8006fe2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d58:	4b0c      	ldr	r3, [pc, #48]	@ (8008d8c <xTaskRemoveFromEventList+0xc4>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d905      	bls.n	8008d6e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d62:	2301      	movs	r3, #1
 8008d64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d66:	4b0a      	ldr	r3, [pc, #40]	@ (8008d90 <xTaskRemoveFromEventList+0xc8>)
 8008d68:	2201      	movs	r2, #1
 8008d6a:	601a      	str	r2, [r3, #0]
 8008d6c:	e001      	b.n	8008d72 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d72:	697b      	ldr	r3, [r7, #20]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3718      	adds	r7, #24
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	20006548 	.word	0x20006548
 8008d80:	20006528 	.word	0x20006528
 8008d84:	20006050 	.word	0x20006050
 8008d88:	200064e0 	.word	0x200064e0
 8008d8c:	2000604c 	.word	0x2000604c
 8008d90:	20006534 	.word	0x20006534

08008d94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d9c:	4b06      	ldr	r3, [pc, #24]	@ (8008db8 <vTaskInternalSetTimeOutState+0x24>)
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008da4:	4b05      	ldr	r3, [pc, #20]	@ (8008dbc <vTaskInternalSetTimeOutState+0x28>)
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	605a      	str	r2, [r3, #4]
}
 8008dac:	bf00      	nop
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr
 8008db8:	20006538 	.word	0x20006538
 8008dbc:	20006524 	.word	0x20006524

08008dc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b088      	sub	sp, #32
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10d      	bne.n	8008dec <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8008dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd4:	b672      	cpsid	i
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	b662      	cpsie	i
 8008de4:	613b      	str	r3, [r7, #16]
}
 8008de6:	bf00      	nop
 8008de8:	bf00      	nop
 8008dea:	e7fd      	b.n	8008de8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10d      	bne.n	8008e0e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8008df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df6:	b672      	cpsid	i
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	b662      	cpsie	i
 8008e06:	60fb      	str	r3, [r7, #12]
}
 8008e08:	bf00      	nop
 8008e0a:	bf00      	nop
 8008e0c:	e7fd      	b.n	8008e0a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8008e0e:	f000 ff9d 	bl	8009d4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e12:	4b1d      	ldr	r3, [pc, #116]	@ (8008e88 <xTaskCheckForTimeOut+0xc8>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	69ba      	ldr	r2, [r7, #24]
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e2a:	d102      	bne.n	8008e32 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	61fb      	str	r3, [r7, #28]
 8008e30:	e023      	b.n	8008e7a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	4b15      	ldr	r3, [pc, #84]	@ (8008e8c <xTaskCheckForTimeOut+0xcc>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d007      	beq.n	8008e4e <xTaskCheckForTimeOut+0x8e>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	69ba      	ldr	r2, [r7, #24]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d302      	bcc.n	8008e4e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	61fb      	str	r3, [r7, #28]
 8008e4c:	e015      	b.n	8008e7a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	697a      	ldr	r2, [r7, #20]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d20b      	bcs.n	8008e70 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	1ad2      	subs	r2, r2, r3
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7ff ff95 	bl	8008d94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	61fb      	str	r3, [r7, #28]
 8008e6e:	e004      	b.n	8008e7a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	2200      	movs	r2, #0
 8008e74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e76:	2301      	movs	r3, #1
 8008e78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e7a:	f000 ff9d 	bl	8009db8 <vPortExitCritical>

	return xReturn;
 8008e7e:	69fb      	ldr	r3, [r7, #28]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3720      	adds	r7, #32
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	20006524 	.word	0x20006524
 8008e8c:	20006538 	.word	0x20006538

08008e90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e90:	b480      	push	{r7}
 8008e92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e94:	4b03      	ldr	r3, [pc, #12]	@ (8008ea4 <vTaskMissedYield+0x14>)
 8008e96:	2201      	movs	r2, #1
 8008e98:	601a      	str	r2, [r3, #0]
}
 8008e9a:	bf00      	nop
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr
 8008ea4:	20006534 	.word	0x20006534

08008ea8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008eb0:	f000 f852 	bl	8008f58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008eb4:	4b06      	ldr	r3, [pc, #24]	@ (8008ed0 <prvIdleTask+0x28>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d9f9      	bls.n	8008eb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ebc:	4b05      	ldr	r3, [pc, #20]	@ (8008ed4 <prvIdleTask+0x2c>)
 8008ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ec2:	601a      	str	r2, [r3, #0]
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ecc:	e7f0      	b.n	8008eb0 <prvIdleTask+0x8>
 8008ece:	bf00      	nop
 8008ed0:	20006050 	.word	0x20006050
 8008ed4:	e000ed04 	.word	0xe000ed04

08008ed8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ede:	2300      	movs	r3, #0
 8008ee0:	607b      	str	r3, [r7, #4]
 8008ee2:	e00c      	b.n	8008efe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	4413      	add	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4a12      	ldr	r2, [pc, #72]	@ (8008f38 <prvInitialiseTaskLists+0x60>)
 8008ef0:	4413      	add	r3, r2
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7fe f848 	bl	8006f88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	3301      	adds	r3, #1
 8008efc:	607b      	str	r3, [r7, #4]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2b37      	cmp	r3, #55	@ 0x37
 8008f02:	d9ef      	bls.n	8008ee4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f04:	480d      	ldr	r0, [pc, #52]	@ (8008f3c <prvInitialiseTaskLists+0x64>)
 8008f06:	f7fe f83f 	bl	8006f88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f0a:	480d      	ldr	r0, [pc, #52]	@ (8008f40 <prvInitialiseTaskLists+0x68>)
 8008f0c:	f7fe f83c 	bl	8006f88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f10:	480c      	ldr	r0, [pc, #48]	@ (8008f44 <prvInitialiseTaskLists+0x6c>)
 8008f12:	f7fe f839 	bl	8006f88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f16:	480c      	ldr	r0, [pc, #48]	@ (8008f48 <prvInitialiseTaskLists+0x70>)
 8008f18:	f7fe f836 	bl	8006f88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f1c:	480b      	ldr	r0, [pc, #44]	@ (8008f4c <prvInitialiseTaskLists+0x74>)
 8008f1e:	f7fe f833 	bl	8006f88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f22:	4b0b      	ldr	r3, [pc, #44]	@ (8008f50 <prvInitialiseTaskLists+0x78>)
 8008f24:	4a05      	ldr	r2, [pc, #20]	@ (8008f3c <prvInitialiseTaskLists+0x64>)
 8008f26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f28:	4b0a      	ldr	r3, [pc, #40]	@ (8008f54 <prvInitialiseTaskLists+0x7c>)
 8008f2a:	4a05      	ldr	r2, [pc, #20]	@ (8008f40 <prvInitialiseTaskLists+0x68>)
 8008f2c:	601a      	str	r2, [r3, #0]
}
 8008f2e:	bf00      	nop
 8008f30:	3708      	adds	r7, #8
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	20006050 	.word	0x20006050
 8008f3c:	200064b0 	.word	0x200064b0
 8008f40:	200064c4 	.word	0x200064c4
 8008f44:	200064e0 	.word	0x200064e0
 8008f48:	200064f4 	.word	0x200064f4
 8008f4c:	2000650c 	.word	0x2000650c
 8008f50:	200064d8 	.word	0x200064d8
 8008f54:	200064dc 	.word	0x200064dc

08008f58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f5e:	e019      	b.n	8008f94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f60:	f000 fef4 	bl	8009d4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f64:	4b10      	ldr	r3, [pc, #64]	@ (8008fa8 <prvCheckTasksWaitingTermination+0x50>)
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	3304      	adds	r3, #4
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fe f893 	bl	800709c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f76:	4b0d      	ldr	r3, [pc, #52]	@ (8008fac <prvCheckTasksWaitingTermination+0x54>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	4a0b      	ldr	r2, [pc, #44]	@ (8008fac <prvCheckTasksWaitingTermination+0x54>)
 8008f7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f80:	4b0b      	ldr	r3, [pc, #44]	@ (8008fb0 <prvCheckTasksWaitingTermination+0x58>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	3b01      	subs	r3, #1
 8008f86:	4a0a      	ldr	r2, [pc, #40]	@ (8008fb0 <prvCheckTasksWaitingTermination+0x58>)
 8008f88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f8a:	f000 ff15 	bl	8009db8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f810 	bl	8008fb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f94:	4b06      	ldr	r3, [pc, #24]	@ (8008fb0 <prvCheckTasksWaitingTermination+0x58>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1e1      	bne.n	8008f60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f9c:	bf00      	nop
 8008f9e:	bf00      	nop
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	200064f4 	.word	0x200064f4
 8008fac:	20006520 	.word	0x20006520
 8008fb0:	20006508 	.word	0x20006508

08008fb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	3354      	adds	r3, #84	@ 0x54
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f00b fc5b 	bl	801487c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d108      	bne.n	8008fe2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f001 f8b5 	bl	800a144 <vPortFree>
				vPortFree( pxTCB );
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f001 f8b2 	bl	800a144 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008fe0:	e01b      	b.n	800901a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d103      	bne.n	8008ff4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f001 f8a9 	bl	800a144 <vPortFree>
	}
 8008ff2:	e012      	b.n	800901a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d00d      	beq.n	800901a <prvDeleteTCB+0x66>
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009002:	b672      	cpsid	i
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	b662      	cpsie	i
 8009012:	60fb      	str	r3, [r7, #12]
}
 8009014:	bf00      	nop
 8009016:	bf00      	nop
 8009018:	e7fd      	b.n	8009016 <prvDeleteTCB+0x62>
	}
 800901a:	bf00      	nop
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
	...

08009024 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800902a:	4b0c      	ldr	r3, [pc, #48]	@ (800905c <prvResetNextTaskUnblockTime+0x38>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d104      	bne.n	800903e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009034:	4b0a      	ldr	r3, [pc, #40]	@ (8009060 <prvResetNextTaskUnblockTime+0x3c>)
 8009036:	f04f 32ff 	mov.w	r2, #4294967295
 800903a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800903c:	e008      	b.n	8009050 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800903e:	4b07      	ldr	r3, [pc, #28]	@ (800905c <prvResetNextTaskUnblockTime+0x38>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	4a04      	ldr	r2, [pc, #16]	@ (8009060 <prvResetNextTaskUnblockTime+0x3c>)
 800904e:	6013      	str	r3, [r2, #0]
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr
 800905c:	200064d8 	.word	0x200064d8
 8009060:	20006540 	.word	0x20006540

08009064 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800906a:	4b05      	ldr	r3, [pc, #20]	@ (8009080 <xTaskGetCurrentTaskHandle+0x1c>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009070:	687b      	ldr	r3, [r7, #4]
	}
 8009072:	4618      	mov	r0, r3
 8009074:	370c      	adds	r7, #12
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	2000604c 	.word	0x2000604c

08009084 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800908a:	4b0b      	ldr	r3, [pc, #44]	@ (80090b8 <xTaskGetSchedulerState+0x34>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d102      	bne.n	8009098 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009092:	2301      	movs	r3, #1
 8009094:	607b      	str	r3, [r7, #4]
 8009096:	e008      	b.n	80090aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009098:	4b08      	ldr	r3, [pc, #32]	@ (80090bc <xTaskGetSchedulerState+0x38>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d102      	bne.n	80090a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80090a0:	2302      	movs	r3, #2
 80090a2:	607b      	str	r3, [r7, #4]
 80090a4:	e001      	b.n	80090aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80090a6:	2300      	movs	r3, #0
 80090a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80090aa:	687b      	ldr	r3, [r7, #4]
	}
 80090ac:	4618      	mov	r0, r3
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr
 80090b8:	2000652c 	.word	0x2000652c
 80090bc:	20006548 	.word	0x20006548

080090c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80090cc:	2300      	movs	r3, #0
 80090ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d051      	beq.n	800917a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090da:	4b2a      	ldr	r3, [pc, #168]	@ (8009184 <xTaskPriorityInherit+0xc4>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d241      	bcs.n	8009168 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	699b      	ldr	r3, [r3, #24]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	db06      	blt.n	80090fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090ec:	4b25      	ldr	r3, [pc, #148]	@ (8009184 <xTaskPriorityInherit+0xc4>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	6959      	ldr	r1, [r3, #20]
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009102:	4613      	mov	r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4413      	add	r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	4a1f      	ldr	r2, [pc, #124]	@ (8009188 <xTaskPriorityInherit+0xc8>)
 800910c:	4413      	add	r3, r2
 800910e:	4299      	cmp	r1, r3
 8009110:	d122      	bne.n	8009158 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	3304      	adds	r3, #4
 8009116:	4618      	mov	r0, r3
 8009118:	f7fd ffc0 	bl	800709c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800911c:	4b19      	ldr	r3, [pc, #100]	@ (8009184 <xTaskPriorityInherit+0xc4>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800912a:	4b18      	ldr	r3, [pc, #96]	@ (800918c <xTaskPriorityInherit+0xcc>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	429a      	cmp	r2, r3
 8009130:	d903      	bls.n	800913a <xTaskPriorityInherit+0x7a>
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009136:	4a15      	ldr	r2, [pc, #84]	@ (800918c <xTaskPriorityInherit+0xcc>)
 8009138:	6013      	str	r3, [r2, #0]
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800913e:	4613      	mov	r3, r2
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	4413      	add	r3, r2
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	4a10      	ldr	r2, [pc, #64]	@ (8009188 <xTaskPriorityInherit+0xc8>)
 8009148:	441a      	add	r2, r3
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	3304      	adds	r3, #4
 800914e:	4619      	mov	r1, r3
 8009150:	4610      	mov	r0, r2
 8009152:	f7fd ff46 	bl	8006fe2 <vListInsertEnd>
 8009156:	e004      	b.n	8009162 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009158:	4b0a      	ldr	r3, [pc, #40]	@ (8009184 <xTaskPriorityInherit+0xc4>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009162:	2301      	movs	r3, #1
 8009164:	60fb      	str	r3, [r7, #12]
 8009166:	e008      	b.n	800917a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800916c:	4b05      	ldr	r3, [pc, #20]	@ (8009184 <xTaskPriorityInherit+0xc4>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009172:	429a      	cmp	r2, r3
 8009174:	d201      	bcs.n	800917a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009176:	2301      	movs	r3, #1
 8009178:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800917a:	68fb      	ldr	r3, [r7, #12]
	}
 800917c:	4618      	mov	r0, r3
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}
 8009184:	2000604c 	.word	0x2000604c
 8009188:	20006050 	.word	0x20006050
 800918c:	20006528 	.word	0x20006528

08009190 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800919c:	2300      	movs	r3, #0
 800919e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d05c      	beq.n	8009260 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80091a6:	4b31      	ldr	r3, [pc, #196]	@ (800926c <xTaskPriorityDisinherit+0xdc>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	693a      	ldr	r2, [r7, #16]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d00d      	beq.n	80091cc <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80091b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b4:	b672      	cpsid	i
 80091b6:	f383 8811 	msr	BASEPRI, r3
 80091ba:	f3bf 8f6f 	isb	sy
 80091be:	f3bf 8f4f 	dsb	sy
 80091c2:	b662      	cpsie	i
 80091c4:	60fb      	str	r3, [r7, #12]
}
 80091c6:	bf00      	nop
 80091c8:	bf00      	nop
 80091ca:	e7fd      	b.n	80091c8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10d      	bne.n	80091f0 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80091d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d8:	b672      	cpsid	i
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	b662      	cpsie	i
 80091e8:	60bb      	str	r3, [r7, #8]
}
 80091ea:	bf00      	nop
 80091ec:	bf00      	nop
 80091ee:	e7fd      	b.n	80091ec <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091f4:	1e5a      	subs	r2, r3, #1
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009202:	429a      	cmp	r2, r3
 8009204:	d02c      	beq.n	8009260 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800920a:	2b00      	cmp	r3, #0
 800920c:	d128      	bne.n	8009260 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	3304      	adds	r3, #4
 8009212:	4618      	mov	r0, r3
 8009214:	f7fd ff42 	bl	800709c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009224:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009230:	4b0f      	ldr	r3, [pc, #60]	@ (8009270 <xTaskPriorityDisinherit+0xe0>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	429a      	cmp	r2, r3
 8009236:	d903      	bls.n	8009240 <xTaskPriorityDisinherit+0xb0>
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800923c:	4a0c      	ldr	r2, [pc, #48]	@ (8009270 <xTaskPriorityDisinherit+0xe0>)
 800923e:	6013      	str	r3, [r2, #0]
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009244:	4613      	mov	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4413      	add	r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	4a09      	ldr	r2, [pc, #36]	@ (8009274 <xTaskPriorityDisinherit+0xe4>)
 800924e:	441a      	add	r2, r3
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	3304      	adds	r3, #4
 8009254:	4619      	mov	r1, r3
 8009256:	4610      	mov	r0, r2
 8009258:	f7fd fec3 	bl	8006fe2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800925c:	2301      	movs	r3, #1
 800925e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009260:	697b      	ldr	r3, [r7, #20]
	}
 8009262:	4618      	mov	r0, r3
 8009264:	3718      	adds	r7, #24
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	2000604c 	.word	0x2000604c
 8009270:	20006528 	.word	0x20006528
 8009274:	20006050 	.word	0x20006050

08009278 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009278:	b580      	push	{r7, lr}
 800927a:	b088      	sub	sp, #32
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009286:	2301      	movs	r3, #1
 8009288:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d070      	beq.n	8009372 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009294:	2b00      	cmp	r3, #0
 8009296:	d10d      	bne.n	80092b4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8009298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800929c:	b672      	cpsid	i
 800929e:	f383 8811 	msr	BASEPRI, r3
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	b662      	cpsie	i
 80092ac:	60fb      	str	r3, [r7, #12]
}
 80092ae:	bf00      	nop
 80092b0:	bf00      	nop
 80092b2:	e7fd      	b.n	80092b0 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092b8:	683a      	ldr	r2, [r7, #0]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d902      	bls.n	80092c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	61fb      	str	r3, [r7, #28]
 80092c2:	e002      	b.n	80092ca <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092c8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ce:	69fa      	ldr	r2, [r7, #28]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d04e      	beq.n	8009372 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092d8:	697a      	ldr	r2, [r7, #20]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d149      	bne.n	8009372 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80092de:	4b27      	ldr	r3, [pc, #156]	@ (800937c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	69ba      	ldr	r2, [r7, #24]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d10d      	bne.n	8009304 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 80092e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ec:	b672      	cpsid	i
 80092ee:	f383 8811 	msr	BASEPRI, r3
 80092f2:	f3bf 8f6f 	isb	sy
 80092f6:	f3bf 8f4f 	dsb	sy
 80092fa:	b662      	cpsie	i
 80092fc:	60bb      	str	r3, [r7, #8]
}
 80092fe:	bf00      	nop
 8009300:	bf00      	nop
 8009302:	e7fd      	b.n	8009300 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009304:	69bb      	ldr	r3, [r7, #24]
 8009306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009308:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	69fa      	ldr	r2, [r7, #28]
 800930e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	2b00      	cmp	r3, #0
 8009316:	db04      	blt.n	8009322 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	6959      	ldr	r1, [r3, #20]
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	4613      	mov	r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	4413      	add	r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4a13      	ldr	r2, [pc, #76]	@ (8009380 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009332:	4413      	add	r3, r2
 8009334:	4299      	cmp	r1, r3
 8009336:	d11c      	bne.n	8009372 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	3304      	adds	r3, #4
 800933c:	4618      	mov	r0, r3
 800933e:	f7fd fead 	bl	800709c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009346:	4b0f      	ldr	r3, [pc, #60]	@ (8009384 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	429a      	cmp	r2, r3
 800934c:	d903      	bls.n	8009356 <vTaskPriorityDisinheritAfterTimeout+0xde>
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009352:	4a0c      	ldr	r2, [pc, #48]	@ (8009384 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8009354:	6013      	str	r3, [r2, #0]
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800935a:	4613      	mov	r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	4413      	add	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4a07      	ldr	r2, [pc, #28]	@ (8009380 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009364:	441a      	add	r2, r3
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	3304      	adds	r3, #4
 800936a:	4619      	mov	r1, r3
 800936c:	4610      	mov	r0, r2
 800936e:	f7fd fe38 	bl	8006fe2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009372:	bf00      	nop
 8009374:	3720      	adds	r7, #32
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	2000604c 	.word	0x2000604c
 8009380:	20006050 	.word	0x20006050
 8009384:	20006528 	.word	0x20006528

08009388 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009388:	b480      	push	{r7}
 800938a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800938c:	4b07      	ldr	r3, [pc, #28]	@ (80093ac <pvTaskIncrementMutexHeldCount+0x24>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d004      	beq.n	800939e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009394:	4b05      	ldr	r3, [pc, #20]	@ (80093ac <pvTaskIncrementMutexHeldCount+0x24>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800939a:	3201      	adds	r2, #1
 800939c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800939e:	4b03      	ldr	r3, [pc, #12]	@ (80093ac <pvTaskIncrementMutexHeldCount+0x24>)
 80093a0:	681b      	ldr	r3, [r3, #0]
	}
 80093a2:	4618      	mov	r0, r3
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr
 80093ac:	2000604c 	.word	0x2000604c

080093b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80093ba:	4b21      	ldr	r3, [pc, #132]	@ (8009440 <prvAddCurrentTaskToDelayedList+0x90>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093c0:	4b20      	ldr	r3, [pc, #128]	@ (8009444 <prvAddCurrentTaskToDelayedList+0x94>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	3304      	adds	r3, #4
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7fd fe68 	bl	800709c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d2:	d10a      	bne.n	80093ea <prvAddCurrentTaskToDelayedList+0x3a>
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d007      	beq.n	80093ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093da:	4b1a      	ldr	r3, [pc, #104]	@ (8009444 <prvAddCurrentTaskToDelayedList+0x94>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	3304      	adds	r3, #4
 80093e0:	4619      	mov	r1, r3
 80093e2:	4819      	ldr	r0, [pc, #100]	@ (8009448 <prvAddCurrentTaskToDelayedList+0x98>)
 80093e4:	f7fd fdfd 	bl	8006fe2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80093e8:	e026      	b.n	8009438 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4413      	add	r3, r2
 80093f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80093f2:	4b14      	ldr	r3, [pc, #80]	@ (8009444 <prvAddCurrentTaskToDelayedList+0x94>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80093fa:	68ba      	ldr	r2, [r7, #8]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d209      	bcs.n	8009416 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009402:	4b12      	ldr	r3, [pc, #72]	@ (800944c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	4b0f      	ldr	r3, [pc, #60]	@ (8009444 <prvAddCurrentTaskToDelayedList+0x94>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	3304      	adds	r3, #4
 800940c:	4619      	mov	r1, r3
 800940e:	4610      	mov	r0, r2
 8009410:	f7fd fe0b 	bl	800702a <vListInsert>
}
 8009414:	e010      	b.n	8009438 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009416:	4b0e      	ldr	r3, [pc, #56]	@ (8009450 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	4b0a      	ldr	r3, [pc, #40]	@ (8009444 <prvAddCurrentTaskToDelayedList+0x94>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	3304      	adds	r3, #4
 8009420:	4619      	mov	r1, r3
 8009422:	4610      	mov	r0, r2
 8009424:	f7fd fe01 	bl	800702a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009428:	4b0a      	ldr	r3, [pc, #40]	@ (8009454 <prvAddCurrentTaskToDelayedList+0xa4>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	68ba      	ldr	r2, [r7, #8]
 800942e:	429a      	cmp	r2, r3
 8009430:	d202      	bcs.n	8009438 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009432:	4a08      	ldr	r2, [pc, #32]	@ (8009454 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	6013      	str	r3, [r2, #0]
}
 8009438:	bf00      	nop
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	20006524 	.word	0x20006524
 8009444:	2000604c 	.word	0x2000604c
 8009448:	2000650c 	.word	0x2000650c
 800944c:	200064dc 	.word	0x200064dc
 8009450:	200064d8 	.word	0x200064d8
 8009454:	20006540 	.word	0x20006540

08009458 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b08a      	sub	sp, #40	@ 0x28
 800945c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800945e:	2300      	movs	r3, #0
 8009460:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009462:	f000 fb21 	bl	8009aa8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009466:	4b1e      	ldr	r3, [pc, #120]	@ (80094e0 <xTimerCreateTimerTask+0x88>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d021      	beq.n	80094b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800946e:	2300      	movs	r3, #0
 8009470:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009472:	2300      	movs	r3, #0
 8009474:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009476:	1d3a      	adds	r2, r7, #4
 8009478:	f107 0108 	add.w	r1, r7, #8
 800947c:	f107 030c 	add.w	r3, r7, #12
 8009480:	4618      	mov	r0, r3
 8009482:	f7fd fd67 	bl	8006f54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009486:	6879      	ldr	r1, [r7, #4]
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	9202      	str	r2, [sp, #8]
 800948e:	9301      	str	r3, [sp, #4]
 8009490:	2302      	movs	r3, #2
 8009492:	9300      	str	r3, [sp, #0]
 8009494:	2300      	movs	r3, #0
 8009496:	460a      	mov	r2, r1
 8009498:	4912      	ldr	r1, [pc, #72]	@ (80094e4 <xTimerCreateTimerTask+0x8c>)
 800949a:	4813      	ldr	r0, [pc, #76]	@ (80094e8 <xTimerCreateTimerTask+0x90>)
 800949c:	f7fe ff58 	bl	8008350 <xTaskCreateStatic>
 80094a0:	4603      	mov	r3, r0
 80094a2:	4a12      	ldr	r2, [pc, #72]	@ (80094ec <xTimerCreateTimerTask+0x94>)
 80094a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80094a6:	4b11      	ldr	r3, [pc, #68]	@ (80094ec <xTimerCreateTimerTask+0x94>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80094ae:	2301      	movs	r3, #1
 80094b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10d      	bne.n	80094d4 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 80094b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094bc:	b672      	cpsid	i
 80094be:	f383 8811 	msr	BASEPRI, r3
 80094c2:	f3bf 8f6f 	isb	sy
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	b662      	cpsie	i
 80094cc:	613b      	str	r3, [r7, #16]
}
 80094ce:	bf00      	nop
 80094d0:	bf00      	nop
 80094d2:	e7fd      	b.n	80094d0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80094d4:	697b      	ldr	r3, [r7, #20]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3718      	adds	r7, #24
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	2000657c 	.word	0x2000657c
 80094e4:	080155b8 	.word	0x080155b8
 80094e8:	08009631 	.word	0x08009631
 80094ec:	20006580 	.word	0x20006580

080094f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b08a      	sub	sp, #40	@ 0x28
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	607a      	str	r2, [r7, #4]
 80094fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80094fe:	2300      	movs	r3, #0
 8009500:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d10d      	bne.n	8009524 <xTimerGenericCommand+0x34>
	__asm volatile
 8009508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800950c:	b672      	cpsid	i
 800950e:	f383 8811 	msr	BASEPRI, r3
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	b662      	cpsie	i
 800951c:	623b      	str	r3, [r7, #32]
}
 800951e:	bf00      	nop
 8009520:	bf00      	nop
 8009522:	e7fd      	b.n	8009520 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009524:	4b19      	ldr	r3, [pc, #100]	@ (800958c <xTimerGenericCommand+0x9c>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d02a      	beq.n	8009582 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	2b05      	cmp	r3, #5
 800953c:	dc18      	bgt.n	8009570 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800953e:	f7ff fda1 	bl	8009084 <xTaskGetSchedulerState>
 8009542:	4603      	mov	r3, r0
 8009544:	2b02      	cmp	r3, #2
 8009546:	d109      	bne.n	800955c <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009548:	4b10      	ldr	r3, [pc, #64]	@ (800958c <xTimerGenericCommand+0x9c>)
 800954a:	6818      	ldr	r0, [r3, #0]
 800954c:	f107 0110 	add.w	r1, r7, #16
 8009550:	2300      	movs	r3, #0
 8009552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009554:	f7fe f858 	bl	8007608 <xQueueGenericSend>
 8009558:	6278      	str	r0, [r7, #36]	@ 0x24
 800955a:	e012      	b.n	8009582 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800955c:	4b0b      	ldr	r3, [pc, #44]	@ (800958c <xTimerGenericCommand+0x9c>)
 800955e:	6818      	ldr	r0, [r3, #0]
 8009560:	f107 0110 	add.w	r1, r7, #16
 8009564:	2300      	movs	r3, #0
 8009566:	2200      	movs	r2, #0
 8009568:	f7fe f84e 	bl	8007608 <xQueueGenericSend>
 800956c:	6278      	str	r0, [r7, #36]	@ 0x24
 800956e:	e008      	b.n	8009582 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009570:	4b06      	ldr	r3, [pc, #24]	@ (800958c <xTimerGenericCommand+0x9c>)
 8009572:	6818      	ldr	r0, [r3, #0]
 8009574:	f107 0110 	add.w	r1, r7, #16
 8009578:	2300      	movs	r3, #0
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	f7fe f94e 	bl	800781c <xQueueGenericSendFromISR>
 8009580:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009584:	4618      	mov	r0, r3
 8009586:	3728      	adds	r7, #40	@ 0x28
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	2000657c 	.word	0x2000657c

08009590 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b088      	sub	sp, #32
 8009594:	af02      	add	r7, sp, #8
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800959a:	4b24      	ldr	r3, [pc, #144]	@ (800962c <prvProcessExpiredTimer+0x9c>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	3304      	adds	r3, #4
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7fd fd77 	bl	800709c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095b4:	f003 0304 	and.w	r3, r3, #4
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d025      	beq.n	8009608 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	699a      	ldr	r2, [r3, #24]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	18d1      	adds	r1, r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	683a      	ldr	r2, [r7, #0]
 80095c8:	6978      	ldr	r0, [r7, #20]
 80095ca:	f000 f8d7 	bl	800977c <prvInsertTimerInActiveList>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d022      	beq.n	800961a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095d4:	2300      	movs	r3, #0
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	2300      	movs	r3, #0
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	2100      	movs	r1, #0
 80095de:	6978      	ldr	r0, [r7, #20]
 80095e0:	f7ff ff86 	bl	80094f0 <xTimerGenericCommand>
 80095e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d116      	bne.n	800961a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80095ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f0:	b672      	cpsid	i
 80095f2:	f383 8811 	msr	BASEPRI, r3
 80095f6:	f3bf 8f6f 	isb	sy
 80095fa:	f3bf 8f4f 	dsb	sy
 80095fe:	b662      	cpsie	i
 8009600:	60fb      	str	r3, [r7, #12]
}
 8009602:	bf00      	nop
 8009604:	bf00      	nop
 8009606:	e7fd      	b.n	8009604 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800960e:	f023 0301 	bic.w	r3, r3, #1
 8009612:	b2da      	uxtb	r2, r3
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	6a1b      	ldr	r3, [r3, #32]
 800961e:	6978      	ldr	r0, [r7, #20]
 8009620:	4798      	blx	r3
}
 8009622:	bf00      	nop
 8009624:	3718      	adds	r7, #24
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	20006574 	.word	0x20006574

08009630 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009638:	f107 0308 	add.w	r3, r7, #8
 800963c:	4618      	mov	r0, r3
 800963e:	f000 f859 	bl	80096f4 <prvGetNextExpireTime>
 8009642:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	4619      	mov	r1, r3
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f000 f805 	bl	8009658 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800964e:	f000 f8d7 	bl	8009800 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009652:	bf00      	nop
 8009654:	e7f0      	b.n	8009638 <prvTimerTask+0x8>
	...

08009658 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009662:	f7ff f8e7 	bl	8008834 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009666:	f107 0308 	add.w	r3, r7, #8
 800966a:	4618      	mov	r0, r3
 800966c:	f000 f866 	bl	800973c <prvSampleTimeNow>
 8009670:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d130      	bne.n	80096da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d10a      	bne.n	8009694 <prvProcessTimerOrBlockTask+0x3c>
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	429a      	cmp	r2, r3
 8009684:	d806      	bhi.n	8009694 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009686:	f7ff f8e3 	bl	8008850 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800968a:	68f9      	ldr	r1, [r7, #12]
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f7ff ff7f 	bl	8009590 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009692:	e024      	b.n	80096de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d008      	beq.n	80096ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800969a:	4b13      	ldr	r3, [pc, #76]	@ (80096e8 <prvProcessTimerOrBlockTask+0x90>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d101      	bne.n	80096a8 <prvProcessTimerOrBlockTask+0x50>
 80096a4:	2301      	movs	r3, #1
 80096a6:	e000      	b.n	80096aa <prvProcessTimerOrBlockTask+0x52>
 80096a8:	2300      	movs	r3, #0
 80096aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80096ac:	4b0f      	ldr	r3, [pc, #60]	@ (80096ec <prvProcessTimerOrBlockTask+0x94>)
 80096ae:	6818      	ldr	r0, [r3, #0]
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	1ad3      	subs	r3, r2, r3
 80096b6:	683a      	ldr	r2, [r7, #0]
 80096b8:	4619      	mov	r1, r3
 80096ba:	f7fe fe15 	bl	80082e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80096be:	f7ff f8c7 	bl	8008850 <xTaskResumeAll>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d10a      	bne.n	80096de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80096c8:	4b09      	ldr	r3, [pc, #36]	@ (80096f0 <prvProcessTimerOrBlockTask+0x98>)
 80096ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096ce:	601a      	str	r2, [r3, #0]
 80096d0:	f3bf 8f4f 	dsb	sy
 80096d4:	f3bf 8f6f 	isb	sy
}
 80096d8:	e001      	b.n	80096de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80096da:	f7ff f8b9 	bl	8008850 <xTaskResumeAll>
}
 80096de:	bf00      	nop
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	20006578 	.word	0x20006578
 80096ec:	2000657c 	.word	0x2000657c
 80096f0:	e000ed04 	.word	0xe000ed04

080096f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80096fc:	4b0e      	ldr	r3, [pc, #56]	@ (8009738 <prvGetNextExpireTime+0x44>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d101      	bne.n	800970a <prvGetNextExpireTime+0x16>
 8009706:	2201      	movs	r2, #1
 8009708:	e000      	b.n	800970c <prvGetNextExpireTime+0x18>
 800970a:	2200      	movs	r2, #0
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d105      	bne.n	8009724 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009718:	4b07      	ldr	r3, [pc, #28]	@ (8009738 <prvGetNextExpireTime+0x44>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	60fb      	str	r3, [r7, #12]
 8009722:	e001      	b.n	8009728 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009724:	2300      	movs	r3, #0
 8009726:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009728:	68fb      	ldr	r3, [r7, #12]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3714      	adds	r7, #20
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	20006574 	.word	0x20006574

0800973c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009744:	f7ff f924 	bl	8008990 <xTaskGetTickCount>
 8009748:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800974a:	4b0b      	ldr	r3, [pc, #44]	@ (8009778 <prvSampleTimeNow+0x3c>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68fa      	ldr	r2, [r7, #12]
 8009750:	429a      	cmp	r2, r3
 8009752:	d205      	bcs.n	8009760 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009754:	f000 f940 	bl	80099d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	601a      	str	r2, [r3, #0]
 800975e:	e002      	b.n	8009766 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009766:	4a04      	ldr	r2, [pc, #16]	@ (8009778 <prvSampleTimeNow+0x3c>)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800976c:	68fb      	ldr	r3, [r7, #12]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	20006584 	.word	0x20006584

0800977c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
 8009788:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800978a:	2300      	movs	r3, #0
 800978c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	68ba      	ldr	r2, [r7, #8]
 8009792:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800979a:	68ba      	ldr	r2, [r7, #8]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	429a      	cmp	r2, r3
 80097a0:	d812      	bhi.n	80097c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	1ad2      	subs	r2, r2, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	699b      	ldr	r3, [r3, #24]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d302      	bcc.n	80097b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80097b0:	2301      	movs	r3, #1
 80097b2:	617b      	str	r3, [r7, #20]
 80097b4:	e01b      	b.n	80097ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80097b6:	4b10      	ldr	r3, [pc, #64]	@ (80097f8 <prvInsertTimerInActiveList+0x7c>)
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	3304      	adds	r3, #4
 80097be:	4619      	mov	r1, r3
 80097c0:	4610      	mov	r0, r2
 80097c2:	f7fd fc32 	bl	800702a <vListInsert>
 80097c6:	e012      	b.n	80097ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d206      	bcs.n	80097de <prvInsertTimerInActiveList+0x62>
 80097d0:	68ba      	ldr	r2, [r7, #8]
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d302      	bcc.n	80097de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80097d8:	2301      	movs	r3, #1
 80097da:	617b      	str	r3, [r7, #20]
 80097dc:	e007      	b.n	80097ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097de:	4b07      	ldr	r3, [pc, #28]	@ (80097fc <prvInsertTimerInActiveList+0x80>)
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3304      	adds	r3, #4
 80097e6:	4619      	mov	r1, r3
 80097e8:	4610      	mov	r0, r2
 80097ea:	f7fd fc1e 	bl	800702a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80097ee:	697b      	ldr	r3, [r7, #20]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3718      	adds	r7, #24
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	20006578 	.word	0x20006578
 80097fc:	20006574 	.word	0x20006574

08009800 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b08e      	sub	sp, #56	@ 0x38
 8009804:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009806:	e0d4      	b.n	80099b2 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2b00      	cmp	r3, #0
 800980c:	da1b      	bge.n	8009846 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800980e:	1d3b      	adds	r3, r7, #4
 8009810:	3304      	adds	r3, #4
 8009812:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10d      	bne.n	8009836 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800981a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800981e:	b672      	cpsid	i
 8009820:	f383 8811 	msr	BASEPRI, r3
 8009824:	f3bf 8f6f 	isb	sy
 8009828:	f3bf 8f4f 	dsb	sy
 800982c:	b662      	cpsie	i
 800982e:	61fb      	str	r3, [r7, #28]
}
 8009830:	bf00      	nop
 8009832:	bf00      	nop
 8009834:	e7fd      	b.n	8009832 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800983c:	6850      	ldr	r0, [r2, #4]
 800983e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009840:	6892      	ldr	r2, [r2, #8]
 8009842:	4611      	mov	r1, r2
 8009844:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2b00      	cmp	r3, #0
 800984a:	f2c0 80b2 	blt.w	80099b2 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009854:	695b      	ldr	r3, [r3, #20]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d004      	beq.n	8009864 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800985a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800985c:	3304      	adds	r3, #4
 800985e:	4618      	mov	r0, r3
 8009860:	f7fd fc1c 	bl	800709c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009864:	463b      	mov	r3, r7
 8009866:	4618      	mov	r0, r3
 8009868:	f7ff ff68 	bl	800973c <prvSampleTimeNow>
 800986c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2b09      	cmp	r3, #9
 8009872:	f200 809b 	bhi.w	80099ac <prvProcessReceivedCommands+0x1ac>
 8009876:	a201      	add	r2, pc, #4	@ (adr r2, 800987c <prvProcessReceivedCommands+0x7c>)
 8009878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987c:	080098a5 	.word	0x080098a5
 8009880:	080098a5 	.word	0x080098a5
 8009884:	080098a5 	.word	0x080098a5
 8009888:	0800991f 	.word	0x0800991f
 800988c:	08009933 	.word	0x08009933
 8009890:	08009983 	.word	0x08009983
 8009894:	080098a5 	.word	0x080098a5
 8009898:	080098a5 	.word	0x080098a5
 800989c:	0800991f 	.word	0x0800991f
 80098a0:	08009933 	.word	0x08009933
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80098a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098aa:	f043 0301 	orr.w	r3, r3, #1
 80098ae:	b2da      	uxtb	r2, r3
 80098b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80098b6:	68ba      	ldr	r2, [r7, #8]
 80098b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	18d1      	adds	r1, r2, r3
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098c4:	f7ff ff5a 	bl	800977c <prvInsertTimerInActiveList>
 80098c8:	4603      	mov	r3, r0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d070      	beq.n	80099b0 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d0:	6a1b      	ldr	r3, [r3, #32]
 80098d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098dc:	f003 0304 	and.w	r3, r3, #4
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d065      	beq.n	80099b0 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e8:	699b      	ldr	r3, [r3, #24]
 80098ea:	441a      	add	r2, r3
 80098ec:	2300      	movs	r3, #0
 80098ee:	9300      	str	r3, [sp, #0]
 80098f0:	2300      	movs	r3, #0
 80098f2:	2100      	movs	r1, #0
 80098f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098f6:	f7ff fdfb 	bl	80094f0 <xTimerGenericCommand>
 80098fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80098fc:	6a3b      	ldr	r3, [r7, #32]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d156      	bne.n	80099b0 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8009902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009906:	b672      	cpsid	i
 8009908:	f383 8811 	msr	BASEPRI, r3
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	b662      	cpsie	i
 8009916:	61bb      	str	r3, [r7, #24]
}
 8009918:	bf00      	nop
 800991a:	bf00      	nop
 800991c:	e7fd      	b.n	800991a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800991e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009920:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009924:	f023 0301 	bic.w	r3, r3, #1
 8009928:	b2da      	uxtb	r2, r3
 800992a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800992c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009930:	e03f      	b.n	80099b2 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009934:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009938:	f043 0301 	orr.w	r3, r3, #1
 800993c:	b2da      	uxtb	r2, r3
 800993e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009940:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009948:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800994a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800994c:	699b      	ldr	r3, [r3, #24]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d10d      	bne.n	800996e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8009952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009956:	b672      	cpsid	i
 8009958:	f383 8811 	msr	BASEPRI, r3
 800995c:	f3bf 8f6f 	isb	sy
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	b662      	cpsie	i
 8009966:	617b      	str	r3, [r7, #20]
}
 8009968:	bf00      	nop
 800996a:	bf00      	nop
 800996c:	e7fd      	b.n	800996a <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800996e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009970:	699a      	ldr	r2, [r3, #24]
 8009972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009974:	18d1      	adds	r1, r2, r3
 8009976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800997a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800997c:	f7ff fefe 	bl	800977c <prvInsertTimerInActiveList>
					break;
 8009980:	e017      	b.n	80099b2 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009984:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009988:	f003 0302 	and.w	r3, r3, #2
 800998c:	2b00      	cmp	r3, #0
 800998e:	d103      	bne.n	8009998 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8009990:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009992:	f000 fbd7 	bl	800a144 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009996:	e00c      	b.n	80099b2 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800999a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800999e:	f023 0301 	bic.w	r3, r3, #1
 80099a2:	b2da      	uxtb	r2, r3
 80099a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80099aa:	e002      	b.n	80099b2 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80099ac:	bf00      	nop
 80099ae:	e000      	b.n	80099b2 <prvProcessReceivedCommands+0x1b2>
					break;
 80099b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80099b2:	4b08      	ldr	r3, [pc, #32]	@ (80099d4 <prvProcessReceivedCommands+0x1d4>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	1d39      	adds	r1, r7, #4
 80099b8:	2200      	movs	r2, #0
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7fe f86a 	bl	8007a94 <xQueueReceive>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f47f af20 	bne.w	8009808 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80099c8:	bf00      	nop
 80099ca:	bf00      	nop
 80099cc:	3730      	adds	r7, #48	@ 0x30
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	2000657c 	.word	0x2000657c

080099d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b088      	sub	sp, #32
 80099dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80099de:	e04b      	b.n	8009a78 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099e0:	4b2f      	ldr	r3, [pc, #188]	@ (8009aa0 <prvSwitchTimerLists+0xc8>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099ea:	4b2d      	ldr	r3, [pc, #180]	@ (8009aa0 <prvSwitchTimerLists+0xc8>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	3304      	adds	r3, #4
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7fd fb4f 	bl	800709c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6a1b      	ldr	r3, [r3, #32]
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a0c:	f003 0304 	and.w	r3, r3, #4
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d031      	beq.n	8009a78 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	693a      	ldr	r2, [r7, #16]
 8009a1a:	4413      	add	r3, r2
 8009a1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d90e      	bls.n	8009a44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	68ba      	ldr	r2, [r7, #8]
 8009a2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a32:	4b1b      	ldr	r3, [pc, #108]	@ (8009aa0 <prvSwitchTimerLists+0xc8>)
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	3304      	adds	r3, #4
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	4610      	mov	r0, r2
 8009a3e:	f7fd faf4 	bl	800702a <vListInsert>
 8009a42:	e019      	b.n	8009a78 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a44:	2300      	movs	r3, #0
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	2300      	movs	r3, #0
 8009a4a:	693a      	ldr	r2, [r7, #16]
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f7ff fd4e 	bl	80094f0 <xTimerGenericCommand>
 8009a54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d10d      	bne.n	8009a78 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8009a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a60:	b672      	cpsid	i
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	b662      	cpsie	i
 8009a70:	603b      	str	r3, [r7, #0]
}
 8009a72:	bf00      	nop
 8009a74:	bf00      	nop
 8009a76:	e7fd      	b.n	8009a74 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a78:	4b09      	ldr	r3, [pc, #36]	@ (8009aa0 <prvSwitchTimerLists+0xc8>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1ae      	bne.n	80099e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009a82:	4b07      	ldr	r3, [pc, #28]	@ (8009aa0 <prvSwitchTimerLists+0xc8>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009a88:	4b06      	ldr	r3, [pc, #24]	@ (8009aa4 <prvSwitchTimerLists+0xcc>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a04      	ldr	r2, [pc, #16]	@ (8009aa0 <prvSwitchTimerLists+0xc8>)
 8009a8e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009a90:	4a04      	ldr	r2, [pc, #16]	@ (8009aa4 <prvSwitchTimerLists+0xcc>)
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	6013      	str	r3, [r2, #0]
}
 8009a96:	bf00      	nop
 8009a98:	3718      	adds	r7, #24
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	20006574 	.word	0x20006574
 8009aa4:	20006578 	.word	0x20006578

08009aa8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009aae:	f000 f94d 	bl	8009d4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009ab2:	4b15      	ldr	r3, [pc, #84]	@ (8009b08 <prvCheckForValidListAndQueue+0x60>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d120      	bne.n	8009afc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009aba:	4814      	ldr	r0, [pc, #80]	@ (8009b0c <prvCheckForValidListAndQueue+0x64>)
 8009abc:	f7fd fa64 	bl	8006f88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009ac0:	4813      	ldr	r0, [pc, #76]	@ (8009b10 <prvCheckForValidListAndQueue+0x68>)
 8009ac2:	f7fd fa61 	bl	8006f88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009ac6:	4b13      	ldr	r3, [pc, #76]	@ (8009b14 <prvCheckForValidListAndQueue+0x6c>)
 8009ac8:	4a10      	ldr	r2, [pc, #64]	@ (8009b0c <prvCheckForValidListAndQueue+0x64>)
 8009aca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009acc:	4b12      	ldr	r3, [pc, #72]	@ (8009b18 <prvCheckForValidListAndQueue+0x70>)
 8009ace:	4a10      	ldr	r2, [pc, #64]	@ (8009b10 <prvCheckForValidListAndQueue+0x68>)
 8009ad0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	9300      	str	r3, [sp, #0]
 8009ad6:	4b11      	ldr	r3, [pc, #68]	@ (8009b1c <prvCheckForValidListAndQueue+0x74>)
 8009ad8:	4a11      	ldr	r2, [pc, #68]	@ (8009b20 <prvCheckForValidListAndQueue+0x78>)
 8009ada:	2110      	movs	r1, #16
 8009adc:	200a      	movs	r0, #10
 8009ade:	f7fd fb73 	bl	80071c8 <xQueueGenericCreateStatic>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	4a08      	ldr	r2, [pc, #32]	@ (8009b08 <prvCheckForValidListAndQueue+0x60>)
 8009ae6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ae8:	4b07      	ldr	r3, [pc, #28]	@ (8009b08 <prvCheckForValidListAndQueue+0x60>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d005      	beq.n	8009afc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009af0:	4b05      	ldr	r3, [pc, #20]	@ (8009b08 <prvCheckForValidListAndQueue+0x60>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	490b      	ldr	r1, [pc, #44]	@ (8009b24 <prvCheckForValidListAndQueue+0x7c>)
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fe fba2 	bl	8008240 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009afc:	f000 f95c 	bl	8009db8 <vPortExitCritical>
}
 8009b00:	bf00      	nop
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	2000657c 	.word	0x2000657c
 8009b0c:	2000654c 	.word	0x2000654c
 8009b10:	20006560 	.word	0x20006560
 8009b14:	20006574 	.word	0x20006574
 8009b18:	20006578 	.word	0x20006578
 8009b1c:	20006628 	.word	0x20006628
 8009b20:	20006588 	.word	0x20006588
 8009b24:	080155c0 	.word	0x080155c0

08009b28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	3b04      	subs	r3, #4
 8009b38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009b40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	3b04      	subs	r3, #4
 8009b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	f023 0201 	bic.w	r2, r3, #1
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	3b04      	subs	r3, #4
 8009b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b58:	4a0c      	ldr	r2, [pc, #48]	@ (8009b8c <pxPortInitialiseStack+0x64>)
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	3b14      	subs	r3, #20
 8009b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	3b04      	subs	r3, #4
 8009b6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f06f 0202 	mvn.w	r2, #2
 8009b76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	3b20      	subs	r3, #32
 8009b7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3714      	adds	r7, #20
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr
 8009b8c:	08009b91 	.word	0x08009b91

08009b90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009b96:	2300      	movs	r3, #0
 8009b98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009b9a:	4b15      	ldr	r3, [pc, #84]	@ (8009bf0 <prvTaskExitError+0x60>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba2:	d00d      	beq.n	8009bc0 <prvTaskExitError+0x30>
	__asm volatile
 8009ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba8:	b672      	cpsid	i
 8009baa:	f383 8811 	msr	BASEPRI, r3
 8009bae:	f3bf 8f6f 	isb	sy
 8009bb2:	f3bf 8f4f 	dsb	sy
 8009bb6:	b662      	cpsie	i
 8009bb8:	60fb      	str	r3, [r7, #12]
}
 8009bba:	bf00      	nop
 8009bbc:	bf00      	nop
 8009bbe:	e7fd      	b.n	8009bbc <prvTaskExitError+0x2c>
	__asm volatile
 8009bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc4:	b672      	cpsid	i
 8009bc6:	f383 8811 	msr	BASEPRI, r3
 8009bca:	f3bf 8f6f 	isb	sy
 8009bce:	f3bf 8f4f 	dsb	sy
 8009bd2:	b662      	cpsie	i
 8009bd4:	60bb      	str	r3, [r7, #8]
}
 8009bd6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009bd8:	bf00      	nop
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d0fc      	beq.n	8009bda <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009be0:	bf00      	nop
 8009be2:	bf00      	nop
 8009be4:	3714      	adds	r7, #20
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop
 8009bf0:	20000020 	.word	0x20000020
	...

08009c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c00:	4b07      	ldr	r3, [pc, #28]	@ (8009c20 <pxCurrentTCBConst2>)
 8009c02:	6819      	ldr	r1, [r3, #0]
 8009c04:	6808      	ldr	r0, [r1, #0]
 8009c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c0a:	f380 8809 	msr	PSP, r0
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f04f 0000 	mov.w	r0, #0
 8009c16:	f380 8811 	msr	BASEPRI, r0
 8009c1a:	4770      	bx	lr
 8009c1c:	f3af 8000 	nop.w

08009c20 <pxCurrentTCBConst2>:
 8009c20:	2000604c 	.word	0x2000604c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c24:	bf00      	nop
 8009c26:	bf00      	nop

08009c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c28:	4808      	ldr	r0, [pc, #32]	@ (8009c4c <prvPortStartFirstTask+0x24>)
 8009c2a:	6800      	ldr	r0, [r0, #0]
 8009c2c:	6800      	ldr	r0, [r0, #0]
 8009c2e:	f380 8808 	msr	MSP, r0
 8009c32:	f04f 0000 	mov.w	r0, #0
 8009c36:	f380 8814 	msr	CONTROL, r0
 8009c3a:	b662      	cpsie	i
 8009c3c:	b661      	cpsie	f
 8009c3e:	f3bf 8f4f 	dsb	sy
 8009c42:	f3bf 8f6f 	isb	sy
 8009c46:	df00      	svc	0
 8009c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c4a:	bf00      	nop
 8009c4c:	e000ed08 	.word	0xe000ed08

08009c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009c56:	4b37      	ldr	r3, [pc, #220]	@ (8009d34 <xPortStartScheduler+0xe4>)
 8009c58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	22ff      	movs	r2, #255	@ 0xff
 8009c66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c70:	78fb      	ldrb	r3, [r7, #3]
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009c78:	b2da      	uxtb	r2, r3
 8009c7a:	4b2f      	ldr	r3, [pc, #188]	@ (8009d38 <xPortStartScheduler+0xe8>)
 8009c7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8009d3c <xPortStartScheduler+0xec>)
 8009c80:	2207      	movs	r2, #7
 8009c82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c84:	e009      	b.n	8009c9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009c86:	4b2d      	ldr	r3, [pc, #180]	@ (8009d3c <xPortStartScheduler+0xec>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	4a2b      	ldr	r2, [pc, #172]	@ (8009d3c <xPortStartScheduler+0xec>)
 8009c8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009c90:	78fb      	ldrb	r3, [r7, #3]
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	005b      	lsls	r3, r3, #1
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c9a:	78fb      	ldrb	r3, [r7, #3]
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ca2:	2b80      	cmp	r3, #128	@ 0x80
 8009ca4:	d0ef      	beq.n	8009c86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ca6:	4b25      	ldr	r3, [pc, #148]	@ (8009d3c <xPortStartScheduler+0xec>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f1c3 0307 	rsb	r3, r3, #7
 8009cae:	2b04      	cmp	r3, #4
 8009cb0:	d00d      	beq.n	8009cce <xPortStartScheduler+0x7e>
	__asm volatile
 8009cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb6:	b672      	cpsid	i
 8009cb8:	f383 8811 	msr	BASEPRI, r3
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	b662      	cpsie	i
 8009cc6:	60bb      	str	r3, [r7, #8]
}
 8009cc8:	bf00      	nop
 8009cca:	bf00      	nop
 8009ccc:	e7fd      	b.n	8009cca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009cce:	4b1b      	ldr	r3, [pc, #108]	@ (8009d3c <xPortStartScheduler+0xec>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	021b      	lsls	r3, r3, #8
 8009cd4:	4a19      	ldr	r2, [pc, #100]	@ (8009d3c <xPortStartScheduler+0xec>)
 8009cd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009cd8:	4b18      	ldr	r3, [pc, #96]	@ (8009d3c <xPortStartScheduler+0xec>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009ce0:	4a16      	ldr	r2, [pc, #88]	@ (8009d3c <xPortStartScheduler+0xec>)
 8009ce2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	b2da      	uxtb	r2, r3
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009cec:	4b14      	ldr	r3, [pc, #80]	@ (8009d40 <xPortStartScheduler+0xf0>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a13      	ldr	r2, [pc, #76]	@ (8009d40 <xPortStartScheduler+0xf0>)
 8009cf2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009cf6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009cf8:	4b11      	ldr	r3, [pc, #68]	@ (8009d40 <xPortStartScheduler+0xf0>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a10      	ldr	r2, [pc, #64]	@ (8009d40 <xPortStartScheduler+0xf0>)
 8009cfe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009d02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d04:	f000 f8dc 	bl	8009ec0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d08:	4b0e      	ldr	r3, [pc, #56]	@ (8009d44 <xPortStartScheduler+0xf4>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d0e:	f000 f8fb 	bl	8009f08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009d12:	4b0d      	ldr	r3, [pc, #52]	@ (8009d48 <xPortStartScheduler+0xf8>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a0c      	ldr	r2, [pc, #48]	@ (8009d48 <xPortStartScheduler+0xf8>)
 8009d18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009d1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d1e:	f7ff ff83 	bl	8009c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d22:	f7fe ff13 	bl	8008b4c <vTaskSwitchContext>
	prvTaskExitError();
 8009d26:	f7ff ff33 	bl	8009b90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3710      	adds	r7, #16
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}
 8009d34:	e000e400 	.word	0xe000e400
 8009d38:	20006678 	.word	0x20006678
 8009d3c:	2000667c 	.word	0x2000667c
 8009d40:	e000ed20 	.word	0xe000ed20
 8009d44:	20000020 	.word	0x20000020
 8009d48:	e000ef34 	.word	0xe000ef34

08009d4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
	__asm volatile
 8009d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d56:	b672      	cpsid	i
 8009d58:	f383 8811 	msr	BASEPRI, r3
 8009d5c:	f3bf 8f6f 	isb	sy
 8009d60:	f3bf 8f4f 	dsb	sy
 8009d64:	b662      	cpsie	i
 8009d66:	607b      	str	r3, [r7, #4]
}
 8009d68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d6a:	4b11      	ldr	r3, [pc, #68]	@ (8009db0 <vPortEnterCritical+0x64>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	4a0f      	ldr	r2, [pc, #60]	@ (8009db0 <vPortEnterCritical+0x64>)
 8009d72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d74:	4b0e      	ldr	r3, [pc, #56]	@ (8009db0 <vPortEnterCritical+0x64>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d112      	bne.n	8009da2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8009db4 <vPortEnterCritical+0x68>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00d      	beq.n	8009da2 <vPortEnterCritical+0x56>
	__asm volatile
 8009d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d8a:	b672      	cpsid	i
 8009d8c:	f383 8811 	msr	BASEPRI, r3
 8009d90:	f3bf 8f6f 	isb	sy
 8009d94:	f3bf 8f4f 	dsb	sy
 8009d98:	b662      	cpsie	i
 8009d9a:	603b      	str	r3, [r7, #0]
}
 8009d9c:	bf00      	nop
 8009d9e:	bf00      	nop
 8009da0:	e7fd      	b.n	8009d9e <vPortEnterCritical+0x52>
	}
}
 8009da2:	bf00      	nop
 8009da4:	370c      	adds	r7, #12
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr
 8009dae:	bf00      	nop
 8009db0:	20000020 	.word	0x20000020
 8009db4:	e000ed04 	.word	0xe000ed04

08009db8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009dbe:	4b13      	ldr	r3, [pc, #76]	@ (8009e0c <vPortExitCritical+0x54>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d10d      	bne.n	8009de2 <vPortExitCritical+0x2a>
	__asm volatile
 8009dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dca:	b672      	cpsid	i
 8009dcc:	f383 8811 	msr	BASEPRI, r3
 8009dd0:	f3bf 8f6f 	isb	sy
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	b662      	cpsie	i
 8009dda:	607b      	str	r3, [r7, #4]
}
 8009ddc:	bf00      	nop
 8009dde:	bf00      	nop
 8009de0:	e7fd      	b.n	8009dde <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009de2:	4b0a      	ldr	r3, [pc, #40]	@ (8009e0c <vPortExitCritical+0x54>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	3b01      	subs	r3, #1
 8009de8:	4a08      	ldr	r2, [pc, #32]	@ (8009e0c <vPortExitCritical+0x54>)
 8009dea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009dec:	4b07      	ldr	r3, [pc, #28]	@ (8009e0c <vPortExitCritical+0x54>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d105      	bne.n	8009e00 <vPortExitCritical+0x48>
 8009df4:	2300      	movs	r3, #0
 8009df6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	f383 8811 	msr	BASEPRI, r3
}
 8009dfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e00:	bf00      	nop
 8009e02:	370c      	adds	r7, #12
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr
 8009e0c:	20000020 	.word	0x20000020

08009e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e10:	f3ef 8009 	mrs	r0, PSP
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	4b15      	ldr	r3, [pc, #84]	@ (8009e70 <pxCurrentTCBConst>)
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	f01e 0f10 	tst.w	lr, #16
 8009e20:	bf08      	it	eq
 8009e22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e2a:	6010      	str	r0, [r2, #0]
 8009e2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009e34:	b672      	cpsid	i
 8009e36:	f380 8811 	msr	BASEPRI, r0
 8009e3a:	f3bf 8f4f 	dsb	sy
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	b662      	cpsie	i
 8009e44:	f7fe fe82 	bl	8008b4c <vTaskSwitchContext>
 8009e48:	f04f 0000 	mov.w	r0, #0
 8009e4c:	f380 8811 	msr	BASEPRI, r0
 8009e50:	bc09      	pop	{r0, r3}
 8009e52:	6819      	ldr	r1, [r3, #0]
 8009e54:	6808      	ldr	r0, [r1, #0]
 8009e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e5a:	f01e 0f10 	tst.w	lr, #16
 8009e5e:	bf08      	it	eq
 8009e60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009e64:	f380 8809 	msr	PSP, r0
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop

08009e70 <pxCurrentTCBConst>:
 8009e70:	2000604c 	.word	0x2000604c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e74:	bf00      	nop
 8009e76:	bf00      	nop

08009e78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e82:	b672      	cpsid	i
 8009e84:	f383 8811 	msr	BASEPRI, r3
 8009e88:	f3bf 8f6f 	isb	sy
 8009e8c:	f3bf 8f4f 	dsb	sy
 8009e90:	b662      	cpsie	i
 8009e92:	607b      	str	r3, [r7, #4]
}
 8009e94:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009e96:	f7fe fd9d 	bl	80089d4 <xTaskIncrementTick>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d003      	beq.n	8009ea8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009ea0:	4b06      	ldr	r3, [pc, #24]	@ (8009ebc <SysTick_Handler+0x44>)
 8009ea2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ea6:	601a      	str	r2, [r3, #0]
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	f383 8811 	msr	BASEPRI, r3
}
 8009eb2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009eb4:	bf00      	nop
 8009eb6:	3708      	adds	r7, #8
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	e000ed04 	.word	0xe000ed04

08009ec0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8009ef4 <vPortSetupTimerInterrupt+0x34>)
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009eca:	4b0b      	ldr	r3, [pc, #44]	@ (8009ef8 <vPortSetupTimerInterrupt+0x38>)
 8009ecc:	2200      	movs	r2, #0
 8009ece:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8009efc <vPortSetupTimerInterrupt+0x3c>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8009f00 <vPortSetupTimerInterrupt+0x40>)
 8009ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8009eda:	099b      	lsrs	r3, r3, #6
 8009edc:	4a09      	ldr	r2, [pc, #36]	@ (8009f04 <vPortSetupTimerInterrupt+0x44>)
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009ee2:	4b04      	ldr	r3, [pc, #16]	@ (8009ef4 <vPortSetupTimerInterrupt+0x34>)
 8009ee4:	2207      	movs	r2, #7
 8009ee6:	601a      	str	r2, [r3, #0]
}
 8009ee8:	bf00      	nop
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	e000e010 	.word	0xe000e010
 8009ef8:	e000e018 	.word	0xe000e018
 8009efc:	20000000 	.word	0x20000000
 8009f00:	10624dd3 	.word	0x10624dd3
 8009f04:	e000e014 	.word	0xe000e014

08009f08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f08:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009f18 <vPortEnableVFP+0x10>
 8009f0c:	6801      	ldr	r1, [r0, #0]
 8009f0e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009f12:	6001      	str	r1, [r0, #0]
 8009f14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009f16:	bf00      	nop
 8009f18:	e000ed88 	.word	0xe000ed88

08009f1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f22:	f3ef 8305 	mrs	r3, IPSR
 8009f26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2b0f      	cmp	r3, #15
 8009f2c:	d917      	bls.n	8009f5e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f2e:	4a1a      	ldr	r2, [pc, #104]	@ (8009f98 <vPortValidateInterruptPriority+0x7c>)
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	4413      	add	r3, r2
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f38:	4b18      	ldr	r3, [pc, #96]	@ (8009f9c <vPortValidateInterruptPriority+0x80>)
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	7afa      	ldrb	r2, [r7, #11]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d20d      	bcs.n	8009f5e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f46:	b672      	cpsid	i
 8009f48:	f383 8811 	msr	BASEPRI, r3
 8009f4c:	f3bf 8f6f 	isb	sy
 8009f50:	f3bf 8f4f 	dsb	sy
 8009f54:	b662      	cpsie	i
 8009f56:	607b      	str	r3, [r7, #4]
}
 8009f58:	bf00      	nop
 8009f5a:	bf00      	nop
 8009f5c:	e7fd      	b.n	8009f5a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f5e:	4b10      	ldr	r3, [pc, #64]	@ (8009fa0 <vPortValidateInterruptPriority+0x84>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009f66:	4b0f      	ldr	r3, [pc, #60]	@ (8009fa4 <vPortValidateInterruptPriority+0x88>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d90d      	bls.n	8009f8a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8009f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f72:	b672      	cpsid	i
 8009f74:	f383 8811 	msr	BASEPRI, r3
 8009f78:	f3bf 8f6f 	isb	sy
 8009f7c:	f3bf 8f4f 	dsb	sy
 8009f80:	b662      	cpsie	i
 8009f82:	603b      	str	r3, [r7, #0]
}
 8009f84:	bf00      	nop
 8009f86:	bf00      	nop
 8009f88:	e7fd      	b.n	8009f86 <vPortValidateInterruptPriority+0x6a>
	}
 8009f8a:	bf00      	nop
 8009f8c:	3714      	adds	r7, #20
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr
 8009f96:	bf00      	nop
 8009f98:	e000e3f0 	.word	0xe000e3f0
 8009f9c:	20006678 	.word	0x20006678
 8009fa0:	e000ed0c 	.word	0xe000ed0c
 8009fa4:	2000667c 	.word	0x2000667c

08009fa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b08a      	sub	sp, #40	@ 0x28
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009fb4:	f7fe fc3e 	bl	8008834 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009fb8:	4b5d      	ldr	r3, [pc, #372]	@ (800a130 <pvPortMalloc+0x188>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d101      	bne.n	8009fc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009fc0:	f000 f920 	bl	800a204 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009fc4:	4b5b      	ldr	r3, [pc, #364]	@ (800a134 <pvPortMalloc+0x18c>)
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4013      	ands	r3, r2
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f040 8094 	bne.w	800a0fa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d020      	beq.n	800a01a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8009fd8:	2208      	movs	r2, #8
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4413      	add	r3, r2
 8009fde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f003 0307 	and.w	r3, r3, #7
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d017      	beq.n	800a01a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f023 0307 	bic.w	r3, r3, #7
 8009ff0:	3308      	adds	r3, #8
 8009ff2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f003 0307 	and.w	r3, r3, #7
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00d      	beq.n	800a01a <pvPortMalloc+0x72>
	__asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a002:	b672      	cpsid	i
 800a004:	f383 8811 	msr	BASEPRI, r3
 800a008:	f3bf 8f6f 	isb	sy
 800a00c:	f3bf 8f4f 	dsb	sy
 800a010:	b662      	cpsie	i
 800a012:	617b      	str	r3, [r7, #20]
}
 800a014:	bf00      	nop
 800a016:	bf00      	nop
 800a018:	e7fd      	b.n	800a016 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d06c      	beq.n	800a0fa <pvPortMalloc+0x152>
 800a020:	4b45      	ldr	r3, [pc, #276]	@ (800a138 <pvPortMalloc+0x190>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	429a      	cmp	r2, r3
 800a028:	d867      	bhi.n	800a0fa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a02a:	4b44      	ldr	r3, [pc, #272]	@ (800a13c <pvPortMalloc+0x194>)
 800a02c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a02e:	4b43      	ldr	r3, [pc, #268]	@ (800a13c <pvPortMalloc+0x194>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a034:	e004      	b.n	800a040 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800a036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a038:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	429a      	cmp	r2, r3
 800a048:	d903      	bls.n	800a052 <pvPortMalloc+0xaa>
 800a04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1f1      	bne.n	800a036 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a052:	4b37      	ldr	r3, [pc, #220]	@ (800a130 <pvPortMalloc+0x188>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a058:	429a      	cmp	r2, r3
 800a05a:	d04e      	beq.n	800a0fa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a05c:	6a3b      	ldr	r3, [r7, #32]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2208      	movs	r2, #8
 800a062:	4413      	add	r3, r2
 800a064:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	6a3b      	ldr	r3, [r7, #32]
 800a06c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a070:	685a      	ldr	r2, [r3, #4]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	1ad2      	subs	r2, r2, r3
 800a076:	2308      	movs	r3, #8
 800a078:	005b      	lsls	r3, r3, #1
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d922      	bls.n	800a0c4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a07e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	4413      	add	r3, r2
 800a084:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	f003 0307 	and.w	r3, r3, #7
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00d      	beq.n	800a0ac <pvPortMalloc+0x104>
	__asm volatile
 800a090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a094:	b672      	cpsid	i
 800a096:	f383 8811 	msr	BASEPRI, r3
 800a09a:	f3bf 8f6f 	isb	sy
 800a09e:	f3bf 8f4f 	dsb	sy
 800a0a2:	b662      	cpsie	i
 800a0a4:	613b      	str	r3, [r7, #16]
}
 800a0a6:	bf00      	nop
 800a0a8:	bf00      	nop
 800a0aa:	e7fd      	b.n	800a0a8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ae:	685a      	ldr	r2, [r3, #4]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	1ad2      	subs	r2, r2, r3
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a0be:	69b8      	ldr	r0, [r7, #24]
 800a0c0:	f000 f902 	bl	800a2c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a0c4:	4b1c      	ldr	r3, [pc, #112]	@ (800a138 <pvPortMalloc+0x190>)
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	1ad3      	subs	r3, r2, r3
 800a0ce:	4a1a      	ldr	r2, [pc, #104]	@ (800a138 <pvPortMalloc+0x190>)
 800a0d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a0d2:	4b19      	ldr	r3, [pc, #100]	@ (800a138 <pvPortMalloc+0x190>)
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	4b1a      	ldr	r3, [pc, #104]	@ (800a140 <pvPortMalloc+0x198>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d203      	bcs.n	800a0e6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a0de:	4b16      	ldr	r3, [pc, #88]	@ (800a138 <pvPortMalloc+0x190>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a17      	ldr	r2, [pc, #92]	@ (800a140 <pvPortMalloc+0x198>)
 800a0e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e8:	685a      	ldr	r2, [r3, #4]
 800a0ea:	4b12      	ldr	r3, [pc, #72]	@ (800a134 <pvPortMalloc+0x18c>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	431a      	orrs	r2, r3
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a0fa:	f7fe fba9 	bl	8008850 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	f003 0307 	and.w	r3, r3, #7
 800a104:	2b00      	cmp	r3, #0
 800a106:	d00d      	beq.n	800a124 <pvPortMalloc+0x17c>
	__asm volatile
 800a108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a10c:	b672      	cpsid	i
 800a10e:	f383 8811 	msr	BASEPRI, r3
 800a112:	f3bf 8f6f 	isb	sy
 800a116:	f3bf 8f4f 	dsb	sy
 800a11a:	b662      	cpsie	i
 800a11c:	60fb      	str	r3, [r7, #12]
}
 800a11e:	bf00      	nop
 800a120:	bf00      	nop
 800a122:	e7fd      	b.n	800a120 <pvPortMalloc+0x178>
	return pvReturn;
 800a124:	69fb      	ldr	r3, [r7, #28]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3728      	adds	r7, #40	@ 0x28
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	2000a288 	.word	0x2000a288
 800a134:	2000a294 	.word	0x2000a294
 800a138:	2000a28c 	.word	0x2000a28c
 800a13c:	2000a280 	.word	0x2000a280
 800a140:	2000a290 	.word	0x2000a290

0800a144 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b086      	sub	sp, #24
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d04e      	beq.n	800a1f4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a156:	2308      	movs	r3, #8
 800a158:	425b      	negs	r3, r3
 800a15a:	697a      	ldr	r2, [r7, #20]
 800a15c:	4413      	add	r3, r2
 800a15e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	685a      	ldr	r2, [r3, #4]
 800a168:	4b24      	ldr	r3, [pc, #144]	@ (800a1fc <vPortFree+0xb8>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4013      	ands	r3, r2
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d10d      	bne.n	800a18e <vPortFree+0x4a>
	__asm volatile
 800a172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a176:	b672      	cpsid	i
 800a178:	f383 8811 	msr	BASEPRI, r3
 800a17c:	f3bf 8f6f 	isb	sy
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	b662      	cpsie	i
 800a186:	60fb      	str	r3, [r7, #12]
}
 800a188:	bf00      	nop
 800a18a:	bf00      	nop
 800a18c:	e7fd      	b.n	800a18a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00d      	beq.n	800a1b2 <vPortFree+0x6e>
	__asm volatile
 800a196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a19a:	b672      	cpsid	i
 800a19c:	f383 8811 	msr	BASEPRI, r3
 800a1a0:	f3bf 8f6f 	isb	sy
 800a1a4:	f3bf 8f4f 	dsb	sy
 800a1a8:	b662      	cpsie	i
 800a1aa:	60bb      	str	r3, [r7, #8]
}
 800a1ac:	bf00      	nop
 800a1ae:	bf00      	nop
 800a1b0:	e7fd      	b.n	800a1ae <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	685a      	ldr	r2, [r3, #4]
 800a1b6:	4b11      	ldr	r3, [pc, #68]	@ (800a1fc <vPortFree+0xb8>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4013      	ands	r3, r2
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d019      	beq.n	800a1f4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d115      	bne.n	800a1f4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	685a      	ldr	r2, [r3, #4]
 800a1cc:	4b0b      	ldr	r3, [pc, #44]	@ (800a1fc <vPortFree+0xb8>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	43db      	mvns	r3, r3
 800a1d2:	401a      	ands	r2, r3
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a1d8:	f7fe fb2c 	bl	8008834 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	685a      	ldr	r2, [r3, #4]
 800a1e0:	4b07      	ldr	r3, [pc, #28]	@ (800a200 <vPortFree+0xbc>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	4a06      	ldr	r2, [pc, #24]	@ (800a200 <vPortFree+0xbc>)
 800a1e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a1ea:	6938      	ldr	r0, [r7, #16]
 800a1ec:	f000 f86c 	bl	800a2c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a1f0:	f7fe fb2e 	bl	8008850 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a1f4:	bf00      	nop
 800a1f6:	3718      	adds	r7, #24
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	2000a294 	.word	0x2000a294
 800a200:	2000a28c 	.word	0x2000a28c

0800a204 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a20a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a20e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a210:	4b27      	ldr	r3, [pc, #156]	@ (800a2b0 <prvHeapInit+0xac>)
 800a212:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f003 0307 	and.w	r3, r3, #7
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00c      	beq.n	800a238 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	3307      	adds	r3, #7
 800a222:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f023 0307 	bic.w	r3, r3, #7
 800a22a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	1ad3      	subs	r3, r2, r3
 800a232:	4a1f      	ldr	r2, [pc, #124]	@ (800a2b0 <prvHeapInit+0xac>)
 800a234:	4413      	add	r3, r2
 800a236:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a23c:	4a1d      	ldr	r2, [pc, #116]	@ (800a2b4 <prvHeapInit+0xb0>)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a242:	4b1c      	ldr	r3, [pc, #112]	@ (800a2b4 <prvHeapInit+0xb0>)
 800a244:	2200      	movs	r2, #0
 800a246:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	68ba      	ldr	r2, [r7, #8]
 800a24c:	4413      	add	r3, r2
 800a24e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a250:	2208      	movs	r2, #8
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	1a9b      	subs	r3, r3, r2
 800a256:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f023 0307 	bic.w	r3, r3, #7
 800a25e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	4a15      	ldr	r2, [pc, #84]	@ (800a2b8 <prvHeapInit+0xb4>)
 800a264:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a266:	4b14      	ldr	r3, [pc, #80]	@ (800a2b8 <prvHeapInit+0xb4>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2200      	movs	r2, #0
 800a26c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a26e:	4b12      	ldr	r3, [pc, #72]	@ (800a2b8 <prvHeapInit+0xb4>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2200      	movs	r2, #0
 800a274:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	1ad2      	subs	r2, r2, r3
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a284:	4b0c      	ldr	r3, [pc, #48]	@ (800a2b8 <prvHeapInit+0xb4>)
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	4a0a      	ldr	r2, [pc, #40]	@ (800a2bc <prvHeapInit+0xb8>)
 800a292:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	4a09      	ldr	r2, [pc, #36]	@ (800a2c0 <prvHeapInit+0xbc>)
 800a29a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a29c:	4b09      	ldr	r3, [pc, #36]	@ (800a2c4 <prvHeapInit+0xc0>)
 800a29e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a2a2:	601a      	str	r2, [r3, #0]
}
 800a2a4:	bf00      	nop
 800a2a6:	3714      	adds	r7, #20
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr
 800a2b0:	20006680 	.word	0x20006680
 800a2b4:	2000a280 	.word	0x2000a280
 800a2b8:	2000a288 	.word	0x2000a288
 800a2bc:	2000a290 	.word	0x2000a290
 800a2c0:	2000a28c 	.word	0x2000a28c
 800a2c4:	2000a294 	.word	0x2000a294

0800a2c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a2d0:	4b28      	ldr	r3, [pc, #160]	@ (800a374 <prvInsertBlockIntoFreeList+0xac>)
 800a2d2:	60fb      	str	r3, [r7, #12]
 800a2d4:	e002      	b.n	800a2dc <prvInsertBlockIntoFreeList+0x14>
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	60fb      	str	r3, [r7, #12]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d8f7      	bhi.n	800a2d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	68ba      	ldr	r2, [r7, #8]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d108      	bne.n	800a30a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	685a      	ldr	r2, [r3, #4]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	441a      	add	r2, r3
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	68ba      	ldr	r2, [r7, #8]
 800a314:	441a      	add	r2, r3
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d118      	bne.n	800a350 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	4b15      	ldr	r3, [pc, #84]	@ (800a378 <prvInsertBlockIntoFreeList+0xb0>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	429a      	cmp	r2, r3
 800a328:	d00d      	beq.n	800a346 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	685a      	ldr	r2, [r3, #4]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	441a      	add	r2, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	601a      	str	r2, [r3, #0]
 800a344:	e008      	b.n	800a358 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a346:	4b0c      	ldr	r3, [pc, #48]	@ (800a378 <prvInsertBlockIntoFreeList+0xb0>)
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	601a      	str	r2, [r3, #0]
 800a34e:	e003      	b.n	800a358 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d002      	beq.n	800a366 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a366:	bf00      	nop
 800a368:	3714      	adds	r7, #20
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	2000a280 	.word	0x2000a280
 800a378:	2000a288 	.word	0x2000a288

0800a37c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a386:	f007 fabd 	bl	8011904 <sys_timeouts_sleeptime>
 800a38a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a392:	d10b      	bne.n	800a3ac <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a394:	4813      	ldr	r0, [pc, #76]	@ (800a3e4 <tcpip_timeouts_mbox_fetch+0x68>)
 800a396:	f00a f814 	bl	80143c2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a39a:	2200      	movs	r2, #0
 800a39c:	6839      	ldr	r1, [r7, #0]
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f009 ff9c 	bl	80142dc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a3a4:	480f      	ldr	r0, [pc, #60]	@ (800a3e4 <tcpip_timeouts_mbox_fetch+0x68>)
 800a3a6:	f009 fffd 	bl	80143a4 <sys_mutex_lock>
    return;
 800a3aa:	e018      	b.n	800a3de <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d102      	bne.n	800a3b8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a3b2:	f007 fa6d 	bl	8011890 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a3b6:	e7e6      	b.n	800a386 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a3b8:	480a      	ldr	r0, [pc, #40]	@ (800a3e4 <tcpip_timeouts_mbox_fetch+0x68>)
 800a3ba:	f00a f802 	bl	80143c2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	6839      	ldr	r1, [r7, #0]
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f009 ff8a 	bl	80142dc <sys_arch_mbox_fetch>
 800a3c8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a3ca:	4806      	ldr	r0, [pc, #24]	@ (800a3e4 <tcpip_timeouts_mbox_fetch+0x68>)
 800a3cc:	f009 ffea 	bl	80143a4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d6:	d102      	bne.n	800a3de <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a3d8:	f007 fa5a 	bl	8011890 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a3dc:	e7d3      	b.n	800a386 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a3de:	3710      	adds	r7, #16
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}
 800a3e4:	2000a2a4 	.word	0x2000a2a4

0800a3e8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a3f0:	4810      	ldr	r0, [pc, #64]	@ (800a434 <tcpip_thread+0x4c>)
 800a3f2:	f009 ffd7 	bl	80143a4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a3f6:	4b10      	ldr	r3, [pc, #64]	@ (800a438 <tcpip_thread+0x50>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d005      	beq.n	800a40a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a3fe:	4b0e      	ldr	r3, [pc, #56]	@ (800a438 <tcpip_thread+0x50>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a0e      	ldr	r2, [pc, #56]	@ (800a43c <tcpip_thread+0x54>)
 800a404:	6812      	ldr	r2, [r2, #0]
 800a406:	4610      	mov	r0, r2
 800a408:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a40a:	f107 030c 	add.w	r3, r7, #12
 800a40e:	4619      	mov	r1, r3
 800a410:	480b      	ldr	r0, [pc, #44]	@ (800a440 <tcpip_thread+0x58>)
 800a412:	f7ff ffb3 	bl	800a37c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d106      	bne.n	800a42a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a41c:	4b09      	ldr	r3, [pc, #36]	@ (800a444 <tcpip_thread+0x5c>)
 800a41e:	2291      	movs	r2, #145	@ 0x91
 800a420:	4909      	ldr	r1, [pc, #36]	@ (800a448 <tcpip_thread+0x60>)
 800a422:	480a      	ldr	r0, [pc, #40]	@ (800a44c <tcpip_thread+0x64>)
 800a424:	f00a f918 	bl	8014658 <iprintf>
      continue;
 800a428:	e003      	b.n	800a432 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	4618      	mov	r0, r3
 800a42e:	f000 f80f 	bl	800a450 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a432:	e7ea      	b.n	800a40a <tcpip_thread+0x22>
 800a434:	2000a2a4 	.word	0x2000a2a4
 800a438:	2000a298 	.word	0x2000a298
 800a43c:	2000a29c 	.word	0x2000a29c
 800a440:	2000a2a0 	.word	0x2000a2a0
 800a444:	080155c8 	.word	0x080155c8
 800a448:	080155f8 	.word	0x080155f8
 800a44c:	08015618 	.word	0x08015618

0800a450 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d026      	beq.n	800a4ae <tcpip_thread_handle_msg+0x5e>
 800a460:	2b02      	cmp	r3, #2
 800a462:	dc2b      	bgt.n	800a4bc <tcpip_thread_handle_msg+0x6c>
 800a464:	2b00      	cmp	r3, #0
 800a466:	d002      	beq.n	800a46e <tcpip_thread_handle_msg+0x1e>
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d015      	beq.n	800a498 <tcpip_thread_handle_msg+0x48>
 800a46c:	e026      	b.n	800a4bc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	6850      	ldr	r0, [r2, #4]
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	6892      	ldr	r2, [r2, #8]
 800a47a:	4611      	mov	r1, r2
 800a47c:	4798      	blx	r3
 800a47e:	4603      	mov	r3, r0
 800a480:	2b00      	cmp	r3, #0
 800a482:	d004      	beq.n	800a48e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	4618      	mov	r0, r3
 800a48a:	f001 fd07 	bl	800be9c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a48e:	6879      	ldr	r1, [r7, #4]
 800a490:	2009      	movs	r0, #9
 800a492:	f000 fe5f 	bl	800b154 <memp_free>
      break;
 800a496:	e018      	b.n	800a4ca <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	6892      	ldr	r2, [r2, #8]
 800a4a0:	4610      	mov	r0, r2
 800a4a2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a4a4:	6879      	ldr	r1, [r7, #4]
 800a4a6:	2008      	movs	r0, #8
 800a4a8:	f000 fe54 	bl	800b154 <memp_free>
      break;
 800a4ac:	e00d      	b.n	800a4ca <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	6892      	ldr	r2, [r2, #8]
 800a4b6:	4610      	mov	r0, r2
 800a4b8:	4798      	blx	r3
      break;
 800a4ba:	e006      	b.n	800a4ca <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a4bc:	4b05      	ldr	r3, [pc, #20]	@ (800a4d4 <tcpip_thread_handle_msg+0x84>)
 800a4be:	22cf      	movs	r2, #207	@ 0xcf
 800a4c0:	4905      	ldr	r1, [pc, #20]	@ (800a4d8 <tcpip_thread_handle_msg+0x88>)
 800a4c2:	4806      	ldr	r0, [pc, #24]	@ (800a4dc <tcpip_thread_handle_msg+0x8c>)
 800a4c4:	f00a f8c8 	bl	8014658 <iprintf>
      break;
 800a4c8:	bf00      	nop
  }
}
 800a4ca:	bf00      	nop
 800a4cc:	3708      	adds	r7, #8
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	080155c8 	.word	0x080155c8
 800a4d8:	080155f8 	.word	0x080155f8
 800a4dc:	08015618 	.word	0x08015618

0800a4e0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a4ec:	481a      	ldr	r0, [pc, #104]	@ (800a558 <tcpip_inpkt+0x78>)
 800a4ee:	f009 ff26 	bl	801433e <sys_mbox_valid>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d105      	bne.n	800a504 <tcpip_inpkt+0x24>
 800a4f8:	4b18      	ldr	r3, [pc, #96]	@ (800a55c <tcpip_inpkt+0x7c>)
 800a4fa:	22fc      	movs	r2, #252	@ 0xfc
 800a4fc:	4918      	ldr	r1, [pc, #96]	@ (800a560 <tcpip_inpkt+0x80>)
 800a4fe:	4819      	ldr	r0, [pc, #100]	@ (800a564 <tcpip_inpkt+0x84>)
 800a500:	f00a f8aa 	bl	8014658 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a504:	2009      	movs	r0, #9
 800a506:	f000 fdaf 	bl	800b068 <memp_malloc>
 800a50a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d102      	bne.n	800a518 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a512:	f04f 33ff 	mov.w	r3, #4294967295
 800a516:	e01a      	b.n	800a54e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	2200      	movs	r2, #0
 800a51c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	68ba      	ldr	r2, [r7, #8]
 800a528:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a530:	6979      	ldr	r1, [r7, #20]
 800a532:	4809      	ldr	r0, [pc, #36]	@ (800a558 <tcpip_inpkt+0x78>)
 800a534:	f009 feb8 	bl	80142a8 <sys_mbox_trypost>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d006      	beq.n	800a54c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a53e:	6979      	ldr	r1, [r7, #20]
 800a540:	2009      	movs	r0, #9
 800a542:	f000 fe07 	bl	800b154 <memp_free>
    return ERR_MEM;
 800a546:	f04f 33ff 	mov.w	r3, #4294967295
 800a54a:	e000      	b.n	800a54e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a54c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3718      	adds	r7, #24
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	2000a2a0 	.word	0x2000a2a0
 800a55c:	080155c8 	.word	0x080155c8
 800a560:	08015640 	.word	0x08015640
 800a564:	08015618 	.word	0x08015618

0800a568 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a578:	f003 0318 	and.w	r3, r3, #24
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d006      	beq.n	800a58e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a580:	4a08      	ldr	r2, [pc, #32]	@ (800a5a4 <tcpip_input+0x3c>)
 800a582:	6839      	ldr	r1, [r7, #0]
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f7ff ffab 	bl	800a4e0 <tcpip_inpkt>
 800a58a:	4603      	mov	r3, r0
 800a58c:	e005      	b.n	800a59a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a58e:	4a06      	ldr	r2, [pc, #24]	@ (800a5a8 <tcpip_input+0x40>)
 800a590:	6839      	ldr	r1, [r7, #0]
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f7ff ffa4 	bl	800a4e0 <tcpip_inpkt>
 800a598:	4603      	mov	r3, r0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	080140c9 	.word	0x080140c9
 800a5a8:	08012fd1 	.word	0x08012fd1

0800a5ac <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a5b6:	4819      	ldr	r0, [pc, #100]	@ (800a61c <tcpip_try_callback+0x70>)
 800a5b8:	f009 fec1 	bl	801433e <sys_mbox_valid>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d106      	bne.n	800a5d0 <tcpip_try_callback+0x24>
 800a5c2:	4b17      	ldr	r3, [pc, #92]	@ (800a620 <tcpip_try_callback+0x74>)
 800a5c4:	f240 125d 	movw	r2, #349	@ 0x15d
 800a5c8:	4916      	ldr	r1, [pc, #88]	@ (800a624 <tcpip_try_callback+0x78>)
 800a5ca:	4817      	ldr	r0, [pc, #92]	@ (800a628 <tcpip_try_callback+0x7c>)
 800a5cc:	f00a f844 	bl	8014658 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a5d0:	2008      	movs	r0, #8
 800a5d2:	f000 fd49 	bl	800b068 <memp_malloc>
 800a5d6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d102      	bne.n	800a5e4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a5de:	f04f 33ff 	mov.w	r3, #4294967295
 800a5e2:	e017      	b.n	800a614 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	683a      	ldr	r2, [r7, #0]
 800a5f4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a5f6:	68f9      	ldr	r1, [r7, #12]
 800a5f8:	4808      	ldr	r0, [pc, #32]	@ (800a61c <tcpip_try_callback+0x70>)
 800a5fa:	f009 fe55 	bl	80142a8 <sys_mbox_trypost>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d006      	beq.n	800a612 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a604:	68f9      	ldr	r1, [r7, #12]
 800a606:	2008      	movs	r0, #8
 800a608:	f000 fda4 	bl	800b154 <memp_free>
    return ERR_MEM;
 800a60c:	f04f 33ff 	mov.w	r3, #4294967295
 800a610:	e000      	b.n	800a614 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a612:	2300      	movs	r3, #0
}
 800a614:	4618      	mov	r0, r3
 800a616:	3710      	adds	r7, #16
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	2000a2a0 	.word	0x2000a2a0
 800a620:	080155c8 	.word	0x080155c8
 800a624:	08015640 	.word	0x08015640
 800a628:	08015618 	.word	0x08015618

0800a62c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af02      	add	r7, sp, #8
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a636:	f000 f871 	bl	800a71c <lwip_init>

  tcpip_init_done = initfunc;
 800a63a:	4a17      	ldr	r2, [pc, #92]	@ (800a698 <tcpip_init+0x6c>)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a640:	4a16      	ldr	r2, [pc, #88]	@ (800a69c <tcpip_init+0x70>)
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a646:	2106      	movs	r1, #6
 800a648:	4815      	ldr	r0, [pc, #84]	@ (800a6a0 <tcpip_init+0x74>)
 800a64a:	f009 fe13 	bl	8014274 <sys_mbox_new>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d006      	beq.n	800a662 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a654:	4b13      	ldr	r3, [pc, #76]	@ (800a6a4 <tcpip_init+0x78>)
 800a656:	f240 2261 	movw	r2, #609	@ 0x261
 800a65a:	4913      	ldr	r1, [pc, #76]	@ (800a6a8 <tcpip_init+0x7c>)
 800a65c:	4813      	ldr	r0, [pc, #76]	@ (800a6ac <tcpip_init+0x80>)
 800a65e:	f009 fffb 	bl	8014658 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a662:	4813      	ldr	r0, [pc, #76]	@ (800a6b0 <tcpip_init+0x84>)
 800a664:	f009 fe88 	bl	8014378 <sys_mutex_new>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d006      	beq.n	800a67c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a66e:	4b0d      	ldr	r3, [pc, #52]	@ (800a6a4 <tcpip_init+0x78>)
 800a670:	f240 2265 	movw	r2, #613	@ 0x265
 800a674:	490f      	ldr	r1, [pc, #60]	@ (800a6b4 <tcpip_init+0x88>)
 800a676:	480d      	ldr	r0, [pc, #52]	@ (800a6ac <tcpip_init+0x80>)
 800a678:	f009 ffee 	bl	8014658 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a67c:	2318      	movs	r3, #24
 800a67e:	9300      	str	r3, [sp, #0]
 800a680:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a684:	2200      	movs	r2, #0
 800a686:	490c      	ldr	r1, [pc, #48]	@ (800a6b8 <tcpip_init+0x8c>)
 800a688:	480c      	ldr	r0, [pc, #48]	@ (800a6bc <tcpip_init+0x90>)
 800a68a:	f009 fea7 	bl	80143dc <sys_thread_new>
}
 800a68e:	bf00      	nop
 800a690:	3708      	adds	r7, #8
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	2000a298 	.word	0x2000a298
 800a69c:	2000a29c 	.word	0x2000a29c
 800a6a0:	2000a2a0 	.word	0x2000a2a0
 800a6a4:	080155c8 	.word	0x080155c8
 800a6a8:	08015650 	.word	0x08015650
 800a6ac:	08015618 	.word	0x08015618
 800a6b0:	2000a2a4 	.word	0x2000a2a4
 800a6b4:	08015674 	.word	0x08015674
 800a6b8:	0800a3e9 	.word	0x0800a3e9
 800a6bc:	08015698 	.word	0x08015698

0800a6c0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a6ca:	88fb      	ldrh	r3, [r7, #6]
 800a6cc:	021b      	lsls	r3, r3, #8
 800a6ce:	b21a      	sxth	r2, r3
 800a6d0:	88fb      	ldrh	r3, [r7, #6]
 800a6d2:	0a1b      	lsrs	r3, r3, #8
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	b21b      	sxth	r3, r3
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	b21b      	sxth	r3, r3
 800a6dc:	b29b      	uxth	r3, r3
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	370c      	adds	r7, #12
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr

0800a6ea <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a6ea:	b480      	push	{r7}
 800a6ec:	b083      	sub	sp, #12
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	061a      	lsls	r2, r3, #24
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	021b      	lsls	r3, r3, #8
 800a6fa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a6fe:	431a      	orrs	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	0a1b      	lsrs	r3, r3, #8
 800a704:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a708:	431a      	orrs	r2, r3
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	0e1b      	lsrs	r3, r3, #24
 800a70e:	4313      	orrs	r3, r2
}
 800a710:	4618      	mov	r0, r3
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a722:	2300      	movs	r3, #0
 800a724:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a726:	f009 fe1b 	bl	8014360 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a72a:	f000 f8d5 	bl	800a8d8 <mem_init>
  memp_init();
 800a72e:	f000 fc2d 	bl	800af8c <memp_init>
  pbuf_init();
  netif_init();
 800a732:	f000 fd39 	bl	800b1a8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a736:	f007 f91d 	bl	8011974 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a73a:	f001 fe49 	bl	800c3d0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a73e:	f007 f85f 	bl	8011800 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a742:	bf00      	nop
 800a744:	3708      	adds	r7, #8
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
	...

0800a74c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	4603      	mov	r3, r0
 800a754:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a756:	4b05      	ldr	r3, [pc, #20]	@ (800a76c <ptr_to_mem+0x20>)
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	88fb      	ldrh	r3, [r7, #6]
 800a75c:	4413      	add	r3, r2
}
 800a75e:	4618      	mov	r0, r3
 800a760:	370c      	adds	r7, #12
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	2000a2c0 	.word	0x2000a2c0

0800a770 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a778:	4b05      	ldr	r3, [pc, #20]	@ (800a790 <mem_to_ptr+0x20>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	1ad3      	subs	r3, r2, r3
 800a780:	b29b      	uxth	r3, r3
}
 800a782:	4618      	mov	r0, r3
 800a784:	370c      	adds	r7, #12
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	2000a2c0 	.word	0x2000a2c0

0800a794 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a794:	b590      	push	{r4, r7, lr}
 800a796:	b085      	sub	sp, #20
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a79c:	4b45      	ldr	r3, [pc, #276]	@ (800a8b4 <plug_holes+0x120>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d206      	bcs.n	800a7b4 <plug_holes+0x20>
 800a7a6:	4b44      	ldr	r3, [pc, #272]	@ (800a8b8 <plug_holes+0x124>)
 800a7a8:	f240 12df 	movw	r2, #479	@ 0x1df
 800a7ac:	4943      	ldr	r1, [pc, #268]	@ (800a8bc <plug_holes+0x128>)
 800a7ae:	4844      	ldr	r0, [pc, #272]	@ (800a8c0 <plug_holes+0x12c>)
 800a7b0:	f009 ff52 	bl	8014658 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a7b4:	4b43      	ldr	r3, [pc, #268]	@ (800a8c4 <plug_holes+0x130>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d306      	bcc.n	800a7cc <plug_holes+0x38>
 800a7be:	4b3e      	ldr	r3, [pc, #248]	@ (800a8b8 <plug_holes+0x124>)
 800a7c0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800a7c4:	4940      	ldr	r1, [pc, #256]	@ (800a8c8 <plug_holes+0x134>)
 800a7c6:	483e      	ldr	r0, [pc, #248]	@ (800a8c0 <plug_holes+0x12c>)
 800a7c8:	f009 ff46 	bl	8014658 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	791b      	ldrb	r3, [r3, #4]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d006      	beq.n	800a7e2 <plug_holes+0x4e>
 800a7d4:	4b38      	ldr	r3, [pc, #224]	@ (800a8b8 <plug_holes+0x124>)
 800a7d6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800a7da:	493c      	ldr	r1, [pc, #240]	@ (800a8cc <plug_holes+0x138>)
 800a7dc:	4838      	ldr	r0, [pc, #224]	@ (800a8c0 <plug_holes+0x12c>)
 800a7de:	f009 ff3b 	bl	8014658 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	881b      	ldrh	r3, [r3, #0]
 800a7e6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a7ea:	d906      	bls.n	800a7fa <plug_holes+0x66>
 800a7ec:	4b32      	ldr	r3, [pc, #200]	@ (800a8b8 <plug_holes+0x124>)
 800a7ee:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800a7f2:	4937      	ldr	r1, [pc, #220]	@ (800a8d0 <plug_holes+0x13c>)
 800a7f4:	4832      	ldr	r0, [pc, #200]	@ (800a8c0 <plug_holes+0x12c>)
 800a7f6:	f009 ff2f 	bl	8014658 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	881b      	ldrh	r3, [r3, #0]
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7ff ffa4 	bl	800a74c <ptr_to_mem>
 800a804:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d024      	beq.n	800a858 <plug_holes+0xc4>
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	791b      	ldrb	r3, [r3, #4]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d120      	bne.n	800a858 <plug_holes+0xc4>
 800a816:	4b2b      	ldr	r3, [pc, #172]	@ (800a8c4 <plug_holes+0x130>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	68fa      	ldr	r2, [r7, #12]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d01b      	beq.n	800a858 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a820:	4b2c      	ldr	r3, [pc, #176]	@ (800a8d4 <plug_holes+0x140>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	68fa      	ldr	r2, [r7, #12]
 800a826:	429a      	cmp	r2, r3
 800a828:	d102      	bne.n	800a830 <plug_holes+0x9c>
      lfree = mem;
 800a82a:	4a2a      	ldr	r2, [pc, #168]	@ (800a8d4 <plug_holes+0x140>)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	881a      	ldrh	r2, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	881b      	ldrh	r3, [r3, #0]
 800a83c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a840:	d00a      	beq.n	800a858 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	881b      	ldrh	r3, [r3, #0]
 800a846:	4618      	mov	r0, r3
 800a848:	f7ff ff80 	bl	800a74c <ptr_to_mem>
 800a84c:	4604      	mov	r4, r0
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f7ff ff8e 	bl	800a770 <mem_to_ptr>
 800a854:	4603      	mov	r3, r0
 800a856:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	885b      	ldrh	r3, [r3, #2]
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7ff ff75 	bl	800a74c <ptr_to_mem>
 800a862:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d01f      	beq.n	800a8ac <plug_holes+0x118>
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	791b      	ldrb	r3, [r3, #4]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d11b      	bne.n	800a8ac <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a874:	4b17      	ldr	r3, [pc, #92]	@ (800a8d4 <plug_holes+0x140>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d102      	bne.n	800a884 <plug_holes+0xf0>
      lfree = pmem;
 800a87e:	4a15      	ldr	r2, [pc, #84]	@ (800a8d4 <plug_holes+0x140>)
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	881a      	ldrh	r2, [r3, #0]
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	881b      	ldrh	r3, [r3, #0]
 800a890:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a894:	d00a      	beq.n	800a8ac <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	881b      	ldrh	r3, [r3, #0]
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7ff ff56 	bl	800a74c <ptr_to_mem>
 800a8a0:	4604      	mov	r4, r0
 800a8a2:	68b8      	ldr	r0, [r7, #8]
 800a8a4:	f7ff ff64 	bl	800a770 <mem_to_ptr>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a8ac:	bf00      	nop
 800a8ae:	3714      	adds	r7, #20
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd90      	pop	{r4, r7, pc}
 800a8b4:	2000a2c0 	.word	0x2000a2c0
 800a8b8:	080156a8 	.word	0x080156a8
 800a8bc:	080156d8 	.word	0x080156d8
 800a8c0:	080156f0 	.word	0x080156f0
 800a8c4:	2000a2c4 	.word	0x2000a2c4
 800a8c8:	08015718 	.word	0x08015718
 800a8cc:	08015734 	.word	0x08015734
 800a8d0:	08015750 	.word	0x08015750
 800a8d4:	2000a2cc 	.word	0x2000a2cc

0800a8d8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a8de:	4b1d      	ldr	r3, [pc, #116]	@ (800a954 <mem_init+0x7c>)
 800a8e0:	4a1d      	ldr	r2, [pc, #116]	@ (800a958 <mem_init+0x80>)
 800a8e2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a8e4:	4b1b      	ldr	r3, [pc, #108]	@ (800a954 <mem_init+0x7c>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a8f0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a8fe:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800a902:	f7ff ff23 	bl	800a74c <ptr_to_mem>
 800a906:	4603      	mov	r3, r0
 800a908:	4a14      	ldr	r2, [pc, #80]	@ (800a95c <mem_init+0x84>)
 800a90a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a90c:	4b13      	ldr	r3, [pc, #76]	@ (800a95c <mem_init+0x84>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	2201      	movs	r2, #1
 800a912:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a914:	4b11      	ldr	r3, [pc, #68]	@ (800a95c <mem_init+0x84>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a91c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a91e:	4b0f      	ldr	r3, [pc, #60]	@ (800a95c <mem_init+0x84>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a926:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a928:	4b0a      	ldr	r3, [pc, #40]	@ (800a954 <mem_init+0x7c>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a0c      	ldr	r2, [pc, #48]	@ (800a960 <mem_init+0x88>)
 800a92e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a930:	480c      	ldr	r0, [pc, #48]	@ (800a964 <mem_init+0x8c>)
 800a932:	f009 fd21 	bl	8014378 <sys_mutex_new>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d006      	beq.n	800a94a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a93c:	4b0a      	ldr	r3, [pc, #40]	@ (800a968 <mem_init+0x90>)
 800a93e:	f240 221f 	movw	r2, #543	@ 0x21f
 800a942:	490a      	ldr	r1, [pc, #40]	@ (800a96c <mem_init+0x94>)
 800a944:	480a      	ldr	r0, [pc, #40]	@ (800a970 <mem_init+0x98>)
 800a946:	f009 fe87 	bl	8014658 <iprintf>
  }
}
 800a94a:	bf00      	nop
 800a94c:	3708      	adds	r7, #8
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	2000a2c0 	.word	0x2000a2c0
 800a958:	30004000 	.word	0x30004000
 800a95c:	2000a2c4 	.word	0x2000a2c4
 800a960:	2000a2cc 	.word	0x2000a2cc
 800a964:	2000a2c8 	.word	0x2000a2c8
 800a968:	080156a8 	.word	0x080156a8
 800a96c:	0801577c 	.word	0x0801577c
 800a970:	080156f0 	.word	0x080156f0

0800a974 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b086      	sub	sp, #24
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f7ff fef7 	bl	800a770 <mem_to_ptr>
 800a982:	4603      	mov	r3, r0
 800a984:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	881b      	ldrh	r3, [r3, #0]
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7ff fede 	bl	800a74c <ptr_to_mem>
 800a990:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	885b      	ldrh	r3, [r3, #2]
 800a996:	4618      	mov	r0, r3
 800a998:	f7ff fed8 	bl	800a74c <ptr_to_mem>
 800a99c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	881b      	ldrh	r3, [r3, #0]
 800a9a2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a9a6:	d818      	bhi.n	800a9da <mem_link_valid+0x66>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	885b      	ldrh	r3, [r3, #2]
 800a9ac:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a9b0:	d813      	bhi.n	800a9da <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a9b6:	8afa      	ldrh	r2, [r7, #22]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d004      	beq.n	800a9c6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	881b      	ldrh	r3, [r3, #0]
 800a9c0:	8afa      	ldrh	r2, [r7, #22]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d109      	bne.n	800a9da <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a9c6:	4b08      	ldr	r3, [pc, #32]	@ (800a9e8 <mem_link_valid+0x74>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a9ca:	693a      	ldr	r2, [r7, #16]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d006      	beq.n	800a9de <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	885b      	ldrh	r3, [r3, #2]
 800a9d4:	8afa      	ldrh	r2, [r7, #22]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d001      	beq.n	800a9de <mem_link_valid+0x6a>
    return 0;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	e000      	b.n	800a9e0 <mem_link_valid+0x6c>
  }
  return 1;
 800a9de:	2301      	movs	r3, #1
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3718      	adds	r7, #24
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	2000a2c4 	.word	0x2000a2c4

0800a9ec <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b088      	sub	sp, #32
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d070      	beq.n	800aadc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f003 0303 	and.w	r3, r3, #3
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d00d      	beq.n	800aa20 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800aa04:	4b37      	ldr	r3, [pc, #220]	@ (800aae4 <mem_free+0xf8>)
 800aa06:	f240 2273 	movw	r2, #627	@ 0x273
 800aa0a:	4937      	ldr	r1, [pc, #220]	@ (800aae8 <mem_free+0xfc>)
 800aa0c:	4837      	ldr	r0, [pc, #220]	@ (800aaec <mem_free+0x100>)
 800aa0e:	f009 fe23 	bl	8014658 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800aa12:	f009 fd03 	bl	801441c <sys_arch_protect>
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	f009 fd0d 	bl	8014438 <sys_arch_unprotect>
    return;
 800aa1e:	e05e      	b.n	800aade <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	3b08      	subs	r3, #8
 800aa24:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800aa26:	4b32      	ldr	r3, [pc, #200]	@ (800aaf0 <mem_free+0x104>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	69fa      	ldr	r2, [r7, #28]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d306      	bcc.n	800aa3e <mem_free+0x52>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f103 020c 	add.w	r2, r3, #12
 800aa36:	4b2f      	ldr	r3, [pc, #188]	@ (800aaf4 <mem_free+0x108>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d90d      	bls.n	800aa5a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800aa3e:	4b29      	ldr	r3, [pc, #164]	@ (800aae4 <mem_free+0xf8>)
 800aa40:	f240 227f 	movw	r2, #639	@ 0x27f
 800aa44:	492c      	ldr	r1, [pc, #176]	@ (800aaf8 <mem_free+0x10c>)
 800aa46:	4829      	ldr	r0, [pc, #164]	@ (800aaec <mem_free+0x100>)
 800aa48:	f009 fe06 	bl	8014658 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800aa4c:	f009 fce6 	bl	801441c <sys_arch_protect>
 800aa50:	6138      	str	r0, [r7, #16]
 800aa52:	6938      	ldr	r0, [r7, #16]
 800aa54:	f009 fcf0 	bl	8014438 <sys_arch_unprotect>
    return;
 800aa58:	e041      	b.n	800aade <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800aa5a:	4828      	ldr	r0, [pc, #160]	@ (800aafc <mem_free+0x110>)
 800aa5c:	f009 fca2 	bl	80143a4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800aa60:	69fb      	ldr	r3, [r7, #28]
 800aa62:	791b      	ldrb	r3, [r3, #4]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d110      	bne.n	800aa8a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800aa68:	4b1e      	ldr	r3, [pc, #120]	@ (800aae4 <mem_free+0xf8>)
 800aa6a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800aa6e:	4924      	ldr	r1, [pc, #144]	@ (800ab00 <mem_free+0x114>)
 800aa70:	481e      	ldr	r0, [pc, #120]	@ (800aaec <mem_free+0x100>)
 800aa72:	f009 fdf1 	bl	8014658 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800aa76:	4821      	ldr	r0, [pc, #132]	@ (800aafc <mem_free+0x110>)
 800aa78:	f009 fca3 	bl	80143c2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800aa7c:	f009 fcce 	bl	801441c <sys_arch_protect>
 800aa80:	6178      	str	r0, [r7, #20]
 800aa82:	6978      	ldr	r0, [r7, #20]
 800aa84:	f009 fcd8 	bl	8014438 <sys_arch_unprotect>
    return;
 800aa88:	e029      	b.n	800aade <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800aa8a:	69f8      	ldr	r0, [r7, #28]
 800aa8c:	f7ff ff72 	bl	800a974 <mem_link_valid>
 800aa90:	4603      	mov	r3, r0
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d110      	bne.n	800aab8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800aa96:	4b13      	ldr	r3, [pc, #76]	@ (800aae4 <mem_free+0xf8>)
 800aa98:	f240 2295 	movw	r2, #661	@ 0x295
 800aa9c:	4919      	ldr	r1, [pc, #100]	@ (800ab04 <mem_free+0x118>)
 800aa9e:	4813      	ldr	r0, [pc, #76]	@ (800aaec <mem_free+0x100>)
 800aaa0:	f009 fdda 	bl	8014658 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800aaa4:	4815      	ldr	r0, [pc, #84]	@ (800aafc <mem_free+0x110>)
 800aaa6:	f009 fc8c 	bl	80143c2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800aaaa:	f009 fcb7 	bl	801441c <sys_arch_protect>
 800aaae:	61b8      	str	r0, [r7, #24]
 800aab0:	69b8      	ldr	r0, [r7, #24]
 800aab2:	f009 fcc1 	bl	8014438 <sys_arch_unprotect>
    return;
 800aab6:	e012      	b.n	800aade <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	2200      	movs	r2, #0
 800aabc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800aabe:	4b12      	ldr	r3, [pc, #72]	@ (800ab08 <mem_free+0x11c>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	69fa      	ldr	r2, [r7, #28]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d202      	bcs.n	800aace <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800aac8:	4a0f      	ldr	r2, [pc, #60]	@ (800ab08 <mem_free+0x11c>)
 800aaca:	69fb      	ldr	r3, [r7, #28]
 800aacc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800aace:	69f8      	ldr	r0, [r7, #28]
 800aad0:	f7ff fe60 	bl	800a794 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800aad4:	4809      	ldr	r0, [pc, #36]	@ (800aafc <mem_free+0x110>)
 800aad6:	f009 fc74 	bl	80143c2 <sys_mutex_unlock>
 800aada:	e000      	b.n	800aade <mem_free+0xf2>
    return;
 800aadc:	bf00      	nop
}
 800aade:	3720      	adds	r7, #32
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}
 800aae4:	080156a8 	.word	0x080156a8
 800aae8:	08015798 	.word	0x08015798
 800aaec:	080156f0 	.word	0x080156f0
 800aaf0:	2000a2c0 	.word	0x2000a2c0
 800aaf4:	2000a2c4 	.word	0x2000a2c4
 800aaf8:	080157bc 	.word	0x080157bc
 800aafc:	2000a2c8 	.word	0x2000a2c8
 800ab00:	080157d8 	.word	0x080157d8
 800ab04:	08015800 	.word	0x08015800
 800ab08:	2000a2cc 	.word	0x2000a2cc

0800ab0c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b088      	sub	sp, #32
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	460b      	mov	r3, r1
 800ab16:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ab18:	887b      	ldrh	r3, [r7, #2]
 800ab1a:	3303      	adds	r3, #3
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	f023 0303 	bic.w	r3, r3, #3
 800ab22:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ab24:	8bfb      	ldrh	r3, [r7, #30]
 800ab26:	2b0b      	cmp	r3, #11
 800ab28:	d801      	bhi.n	800ab2e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ab2a:	230c      	movs	r3, #12
 800ab2c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ab2e:	8bfb      	ldrh	r3, [r7, #30]
 800ab30:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ab34:	d803      	bhi.n	800ab3e <mem_trim+0x32>
 800ab36:	8bfa      	ldrh	r2, [r7, #30]
 800ab38:	887b      	ldrh	r3, [r7, #2]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d201      	bcs.n	800ab42 <mem_trim+0x36>
    return NULL;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	e0d8      	b.n	800acf4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ab42:	4b6e      	ldr	r3, [pc, #440]	@ (800acfc <mem_trim+0x1f0>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d304      	bcc.n	800ab56 <mem_trim+0x4a>
 800ab4c:	4b6c      	ldr	r3, [pc, #432]	@ (800ad00 <mem_trim+0x1f4>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d306      	bcc.n	800ab64 <mem_trim+0x58>
 800ab56:	4b6b      	ldr	r3, [pc, #428]	@ (800ad04 <mem_trim+0x1f8>)
 800ab58:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800ab5c:	496a      	ldr	r1, [pc, #424]	@ (800ad08 <mem_trim+0x1fc>)
 800ab5e:	486b      	ldr	r0, [pc, #428]	@ (800ad0c <mem_trim+0x200>)
 800ab60:	f009 fd7a 	bl	8014658 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ab64:	4b65      	ldr	r3, [pc, #404]	@ (800acfc <mem_trim+0x1f0>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d304      	bcc.n	800ab78 <mem_trim+0x6c>
 800ab6e:	4b64      	ldr	r3, [pc, #400]	@ (800ad00 <mem_trim+0x1f4>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d307      	bcc.n	800ab88 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ab78:	f009 fc50 	bl	801441c <sys_arch_protect>
 800ab7c:	60b8      	str	r0, [r7, #8]
 800ab7e:	68b8      	ldr	r0, [r7, #8]
 800ab80:	f009 fc5a 	bl	8014438 <sys_arch_unprotect>
    return rmem;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	e0b5      	b.n	800acf4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	3b08      	subs	r3, #8
 800ab8c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ab8e:	69b8      	ldr	r0, [r7, #24]
 800ab90:	f7ff fdee 	bl	800a770 <mem_to_ptr>
 800ab94:	4603      	mov	r3, r0
 800ab96:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	881a      	ldrh	r2, [r3, #0]
 800ab9c:	8afb      	ldrh	r3, [r7, #22]
 800ab9e:	1ad3      	subs	r3, r2, r3
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	3b08      	subs	r3, #8
 800aba4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800aba6:	8bfa      	ldrh	r2, [r7, #30]
 800aba8:	8abb      	ldrh	r3, [r7, #20]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d906      	bls.n	800abbc <mem_trim+0xb0>
 800abae:	4b55      	ldr	r3, [pc, #340]	@ (800ad04 <mem_trim+0x1f8>)
 800abb0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800abb4:	4956      	ldr	r1, [pc, #344]	@ (800ad10 <mem_trim+0x204>)
 800abb6:	4855      	ldr	r0, [pc, #340]	@ (800ad0c <mem_trim+0x200>)
 800abb8:	f009 fd4e 	bl	8014658 <iprintf>
  if (newsize > size) {
 800abbc:	8bfa      	ldrh	r2, [r7, #30]
 800abbe:	8abb      	ldrh	r3, [r7, #20]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d901      	bls.n	800abc8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800abc4:	2300      	movs	r3, #0
 800abc6:	e095      	b.n	800acf4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800abc8:	8bfa      	ldrh	r2, [r7, #30]
 800abca:	8abb      	ldrh	r3, [r7, #20]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d101      	bne.n	800abd4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	e08f      	b.n	800acf4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800abd4:	484f      	ldr	r0, [pc, #316]	@ (800ad14 <mem_trim+0x208>)
 800abd6:	f009 fbe5 	bl	80143a4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	881b      	ldrh	r3, [r3, #0]
 800abde:	4618      	mov	r0, r3
 800abe0:	f7ff fdb4 	bl	800a74c <ptr_to_mem>
 800abe4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	791b      	ldrb	r3, [r3, #4]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d13f      	bne.n	800ac6e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	881b      	ldrh	r3, [r3, #0]
 800abf2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800abf6:	d106      	bne.n	800ac06 <mem_trim+0xfa>
 800abf8:	4b42      	ldr	r3, [pc, #264]	@ (800ad04 <mem_trim+0x1f8>)
 800abfa:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800abfe:	4946      	ldr	r1, [pc, #280]	@ (800ad18 <mem_trim+0x20c>)
 800ac00:	4842      	ldr	r0, [pc, #264]	@ (800ad0c <mem_trim+0x200>)
 800ac02:	f009 fd29 	bl	8014658 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	881b      	ldrh	r3, [r3, #0]
 800ac0a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ac0c:	8afa      	ldrh	r2, [r7, #22]
 800ac0e:	8bfb      	ldrh	r3, [r7, #30]
 800ac10:	4413      	add	r3, r2
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	3308      	adds	r3, #8
 800ac16:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ac18:	4b40      	ldr	r3, [pc, #256]	@ (800ad1c <mem_trim+0x210>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	693a      	ldr	r2, [r7, #16]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d106      	bne.n	800ac30 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800ac22:	89fb      	ldrh	r3, [r7, #14]
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7ff fd91 	bl	800a74c <ptr_to_mem>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	4a3b      	ldr	r2, [pc, #236]	@ (800ad1c <mem_trim+0x210>)
 800ac2e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ac30:	89fb      	ldrh	r3, [r7, #14]
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7ff fd8a 	bl	800a74c <ptr_to_mem>
 800ac38:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	89ba      	ldrh	r2, [r7, #12]
 800ac44:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	8afa      	ldrh	r2, [r7, #22]
 800ac4a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	89fa      	ldrh	r2, [r7, #14]
 800ac50:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	881b      	ldrh	r3, [r3, #0]
 800ac56:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ac5a:	d047      	beq.n	800acec <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	881b      	ldrh	r3, [r3, #0]
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7ff fd73 	bl	800a74c <ptr_to_mem>
 800ac66:	4602      	mov	r2, r0
 800ac68:	89fb      	ldrh	r3, [r7, #14]
 800ac6a:	8053      	strh	r3, [r2, #2]
 800ac6c:	e03e      	b.n	800acec <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ac6e:	8bfb      	ldrh	r3, [r7, #30]
 800ac70:	f103 0214 	add.w	r2, r3, #20
 800ac74:	8abb      	ldrh	r3, [r7, #20]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d838      	bhi.n	800acec <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ac7a:	8afa      	ldrh	r2, [r7, #22]
 800ac7c:	8bfb      	ldrh	r3, [r7, #30]
 800ac7e:	4413      	add	r3, r2
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	3308      	adds	r3, #8
 800ac84:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	881b      	ldrh	r3, [r3, #0]
 800ac8a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ac8e:	d106      	bne.n	800ac9e <mem_trim+0x192>
 800ac90:	4b1c      	ldr	r3, [pc, #112]	@ (800ad04 <mem_trim+0x1f8>)
 800ac92:	f240 3216 	movw	r2, #790	@ 0x316
 800ac96:	4920      	ldr	r1, [pc, #128]	@ (800ad18 <mem_trim+0x20c>)
 800ac98:	481c      	ldr	r0, [pc, #112]	@ (800ad0c <mem_trim+0x200>)
 800ac9a:	f009 fcdd 	bl	8014658 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ac9e:	89fb      	ldrh	r3, [r7, #14]
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7ff fd53 	bl	800a74c <ptr_to_mem>
 800aca6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800aca8:	4b1c      	ldr	r3, [pc, #112]	@ (800ad1c <mem_trim+0x210>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	693a      	ldr	r2, [r7, #16]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d202      	bcs.n	800acb8 <mem_trim+0x1ac>
      lfree = mem2;
 800acb2:	4a1a      	ldr	r2, [pc, #104]	@ (800ad1c <mem_trim+0x210>)
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	2200      	movs	r2, #0
 800acbc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	881a      	ldrh	r2, [r3, #0]
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	8afa      	ldrh	r2, [r7, #22]
 800acca:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	89fa      	ldrh	r2, [r7, #14]
 800acd0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	881b      	ldrh	r3, [r3, #0]
 800acd6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800acda:	d007      	beq.n	800acec <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	881b      	ldrh	r3, [r3, #0]
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7ff fd33 	bl	800a74c <ptr_to_mem>
 800ace6:	4602      	mov	r2, r0
 800ace8:	89fb      	ldrh	r3, [r7, #14]
 800acea:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800acec:	4809      	ldr	r0, [pc, #36]	@ (800ad14 <mem_trim+0x208>)
 800acee:	f009 fb68 	bl	80143c2 <sys_mutex_unlock>
  return rmem;
 800acf2:	687b      	ldr	r3, [r7, #4]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3720      	adds	r7, #32
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	2000a2c0 	.word	0x2000a2c0
 800ad00:	2000a2c4 	.word	0x2000a2c4
 800ad04:	080156a8 	.word	0x080156a8
 800ad08:	08015834 	.word	0x08015834
 800ad0c:	080156f0 	.word	0x080156f0
 800ad10:	0801584c 	.word	0x0801584c
 800ad14:	2000a2c8 	.word	0x2000a2c8
 800ad18:	0801586c 	.word	0x0801586c
 800ad1c:	2000a2cc 	.word	0x2000a2cc

0800ad20 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b088      	sub	sp, #32
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	4603      	mov	r3, r0
 800ad28:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ad2a:	88fb      	ldrh	r3, [r7, #6]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d101      	bne.n	800ad34 <mem_malloc+0x14>
    return NULL;
 800ad30:	2300      	movs	r3, #0
 800ad32:	e0e2      	b.n	800aefa <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ad34:	88fb      	ldrh	r3, [r7, #6]
 800ad36:	3303      	adds	r3, #3
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	f023 0303 	bic.w	r3, r3, #3
 800ad3e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800ad40:	8bbb      	ldrh	r3, [r7, #28]
 800ad42:	2b0b      	cmp	r3, #11
 800ad44:	d801      	bhi.n	800ad4a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ad46:	230c      	movs	r3, #12
 800ad48:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ad4a:	8bbb      	ldrh	r3, [r7, #28]
 800ad4c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ad50:	d803      	bhi.n	800ad5a <mem_malloc+0x3a>
 800ad52:	8bba      	ldrh	r2, [r7, #28]
 800ad54:	88fb      	ldrh	r3, [r7, #6]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d201      	bcs.n	800ad5e <mem_malloc+0x3e>
    return NULL;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	e0cd      	b.n	800aefa <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ad5e:	4869      	ldr	r0, [pc, #420]	@ (800af04 <mem_malloc+0x1e4>)
 800ad60:	f009 fb20 	bl	80143a4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ad64:	4b68      	ldr	r3, [pc, #416]	@ (800af08 <mem_malloc+0x1e8>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7ff fd01 	bl	800a770 <mem_to_ptr>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	83fb      	strh	r3, [r7, #30]
 800ad72:	e0b7      	b.n	800aee4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ad74:	8bfb      	ldrh	r3, [r7, #30]
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7ff fce8 	bl	800a74c <ptr_to_mem>
 800ad7c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	791b      	ldrb	r3, [r3, #4]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	f040 80a7 	bne.w	800aed6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	881b      	ldrh	r3, [r3, #0]
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	8bfb      	ldrh	r3, [r7, #30]
 800ad90:	1ad3      	subs	r3, r2, r3
 800ad92:	f1a3 0208 	sub.w	r2, r3, #8
 800ad96:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	f0c0 809c 	bcc.w	800aed6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	881b      	ldrh	r3, [r3, #0]
 800ada2:	461a      	mov	r2, r3
 800ada4:	8bfb      	ldrh	r3, [r7, #30]
 800ada6:	1ad3      	subs	r3, r2, r3
 800ada8:	f1a3 0208 	sub.w	r2, r3, #8
 800adac:	8bbb      	ldrh	r3, [r7, #28]
 800adae:	3314      	adds	r3, #20
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d333      	bcc.n	800ae1c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800adb4:	8bfa      	ldrh	r2, [r7, #30]
 800adb6:	8bbb      	ldrh	r3, [r7, #28]
 800adb8:	4413      	add	r3, r2
 800adba:	b29b      	uxth	r3, r3
 800adbc:	3308      	adds	r3, #8
 800adbe:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800adc0:	8a7b      	ldrh	r3, [r7, #18]
 800adc2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800adc6:	d106      	bne.n	800add6 <mem_malloc+0xb6>
 800adc8:	4b50      	ldr	r3, [pc, #320]	@ (800af0c <mem_malloc+0x1ec>)
 800adca:	f240 3287 	movw	r2, #903	@ 0x387
 800adce:	4950      	ldr	r1, [pc, #320]	@ (800af10 <mem_malloc+0x1f0>)
 800add0:	4850      	ldr	r0, [pc, #320]	@ (800af14 <mem_malloc+0x1f4>)
 800add2:	f009 fc41 	bl	8014658 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800add6:	8a7b      	ldrh	r3, [r7, #18]
 800add8:	4618      	mov	r0, r3
 800adda:	f7ff fcb7 	bl	800a74c <ptr_to_mem>
 800adde:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2200      	movs	r2, #0
 800ade4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	881a      	ldrh	r2, [r3, #0]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	8bfa      	ldrh	r2, [r7, #30]
 800adf2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	8a7a      	ldrh	r2, [r7, #18]
 800adf8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	2201      	movs	r2, #1
 800adfe:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	881b      	ldrh	r3, [r3, #0]
 800ae04:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ae08:	d00b      	beq.n	800ae22 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	881b      	ldrh	r3, [r3, #0]
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7ff fc9c 	bl	800a74c <ptr_to_mem>
 800ae14:	4602      	mov	r2, r0
 800ae16:	8a7b      	ldrh	r3, [r7, #18]
 800ae18:	8053      	strh	r3, [r2, #2]
 800ae1a:	e002      	b.n	800ae22 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ae22:	4b39      	ldr	r3, [pc, #228]	@ (800af08 <mem_malloc+0x1e8>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	697a      	ldr	r2, [r7, #20]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d127      	bne.n	800ae7c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800ae2c:	4b36      	ldr	r3, [pc, #216]	@ (800af08 <mem_malloc+0x1e8>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ae32:	e005      	b.n	800ae40 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	881b      	ldrh	r3, [r3, #0]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f7ff fc87 	bl	800a74c <ptr_to_mem>
 800ae3e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	791b      	ldrb	r3, [r3, #4]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d004      	beq.n	800ae52 <mem_malloc+0x132>
 800ae48:	4b33      	ldr	r3, [pc, #204]	@ (800af18 <mem_malloc+0x1f8>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	69ba      	ldr	r2, [r7, #24]
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d1f0      	bne.n	800ae34 <mem_malloc+0x114>
          }
          lfree = cur;
 800ae52:	4a2d      	ldr	r2, [pc, #180]	@ (800af08 <mem_malloc+0x1e8>)
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ae58:	4b2b      	ldr	r3, [pc, #172]	@ (800af08 <mem_malloc+0x1e8>)
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	4b2e      	ldr	r3, [pc, #184]	@ (800af18 <mem_malloc+0x1f8>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d00b      	beq.n	800ae7c <mem_malloc+0x15c>
 800ae64:	4b28      	ldr	r3, [pc, #160]	@ (800af08 <mem_malloc+0x1e8>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	791b      	ldrb	r3, [r3, #4]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d006      	beq.n	800ae7c <mem_malloc+0x15c>
 800ae6e:	4b27      	ldr	r3, [pc, #156]	@ (800af0c <mem_malloc+0x1ec>)
 800ae70:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800ae74:	4929      	ldr	r1, [pc, #164]	@ (800af1c <mem_malloc+0x1fc>)
 800ae76:	4827      	ldr	r0, [pc, #156]	@ (800af14 <mem_malloc+0x1f4>)
 800ae78:	f009 fbee 	bl	8014658 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ae7c:	4821      	ldr	r0, [pc, #132]	@ (800af04 <mem_malloc+0x1e4>)
 800ae7e:	f009 faa0 	bl	80143c2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ae82:	8bba      	ldrh	r2, [r7, #28]
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	4413      	add	r3, r2
 800ae88:	3308      	adds	r3, #8
 800ae8a:	4a23      	ldr	r2, [pc, #140]	@ (800af18 <mem_malloc+0x1f8>)
 800ae8c:	6812      	ldr	r2, [r2, #0]
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d906      	bls.n	800aea0 <mem_malloc+0x180>
 800ae92:	4b1e      	ldr	r3, [pc, #120]	@ (800af0c <mem_malloc+0x1ec>)
 800ae94:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800ae98:	4921      	ldr	r1, [pc, #132]	@ (800af20 <mem_malloc+0x200>)
 800ae9a:	481e      	ldr	r0, [pc, #120]	@ (800af14 <mem_malloc+0x1f4>)
 800ae9c:	f009 fbdc 	bl	8014658 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	f003 0303 	and.w	r3, r3, #3
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d006      	beq.n	800aeb8 <mem_malloc+0x198>
 800aeaa:	4b18      	ldr	r3, [pc, #96]	@ (800af0c <mem_malloc+0x1ec>)
 800aeac:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800aeb0:	491c      	ldr	r1, [pc, #112]	@ (800af24 <mem_malloc+0x204>)
 800aeb2:	4818      	ldr	r0, [pc, #96]	@ (800af14 <mem_malloc+0x1f4>)
 800aeb4:	f009 fbd0 	bl	8014658 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	f003 0303 	and.w	r3, r3, #3
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d006      	beq.n	800aed0 <mem_malloc+0x1b0>
 800aec2:	4b12      	ldr	r3, [pc, #72]	@ (800af0c <mem_malloc+0x1ec>)
 800aec4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800aec8:	4917      	ldr	r1, [pc, #92]	@ (800af28 <mem_malloc+0x208>)
 800aeca:	4812      	ldr	r0, [pc, #72]	@ (800af14 <mem_malloc+0x1f4>)
 800aecc:	f009 fbc4 	bl	8014658 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	3308      	adds	r3, #8
 800aed4:	e011      	b.n	800aefa <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800aed6:	8bfb      	ldrh	r3, [r7, #30]
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7ff fc37 	bl	800a74c <ptr_to_mem>
 800aede:	4603      	mov	r3, r0
 800aee0:	881b      	ldrh	r3, [r3, #0]
 800aee2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800aee4:	8bfa      	ldrh	r2, [r7, #30]
 800aee6:	8bbb      	ldrh	r3, [r7, #28]
 800aee8:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800aeec:	429a      	cmp	r2, r3
 800aeee:	f4ff af41 	bcc.w	800ad74 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800aef2:	4804      	ldr	r0, [pc, #16]	@ (800af04 <mem_malloc+0x1e4>)
 800aef4:	f009 fa65 	bl	80143c2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800aef8:	2300      	movs	r3, #0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3720      	adds	r7, #32
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	2000a2c8 	.word	0x2000a2c8
 800af08:	2000a2cc 	.word	0x2000a2cc
 800af0c:	080156a8 	.word	0x080156a8
 800af10:	0801586c 	.word	0x0801586c
 800af14:	080156f0 	.word	0x080156f0
 800af18:	2000a2c4 	.word	0x2000a2c4
 800af1c:	08015880 	.word	0x08015880
 800af20:	0801589c 	.word	0x0801589c
 800af24:	080158cc 	.word	0x080158cc
 800af28:	080158fc 	.word	0x080158fc

0800af2c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b085      	sub	sp, #20
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	2200      	movs	r2, #0
 800af3a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	3303      	adds	r3, #3
 800af42:	f023 0303 	bic.w	r3, r3, #3
 800af46:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800af48:	2300      	movs	r3, #0
 800af4a:	60fb      	str	r3, [r7, #12]
 800af4c:	e011      	b.n	800af72 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	881b      	ldrh	r3, [r3, #0]
 800af64:	461a      	mov	r2, r3
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	4413      	add	r3, r2
 800af6a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	3301      	adds	r3, #1
 800af70:	60fb      	str	r3, [r7, #12]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	885b      	ldrh	r3, [r3, #2]
 800af76:	461a      	mov	r2, r3
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	4293      	cmp	r3, r2
 800af7c:	dbe7      	blt.n	800af4e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800af7e:	bf00      	nop
 800af80:	bf00      	nop
 800af82:	3714      	adds	r7, #20
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800af92:	2300      	movs	r3, #0
 800af94:	80fb      	strh	r3, [r7, #6]
 800af96:	e009      	b.n	800afac <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800af98:	88fb      	ldrh	r3, [r7, #6]
 800af9a:	4a08      	ldr	r2, [pc, #32]	@ (800afbc <memp_init+0x30>)
 800af9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7ff ffc3 	bl	800af2c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800afa6:	88fb      	ldrh	r3, [r7, #6]
 800afa8:	3301      	adds	r3, #1
 800afaa:	80fb      	strh	r3, [r7, #6]
 800afac:	88fb      	ldrh	r3, [r7, #6]
 800afae:	2b0c      	cmp	r3, #12
 800afb0:	d9f2      	bls.n	800af98 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800afb2:	bf00      	nop
 800afb4:	bf00      	nop
 800afb6:	3708      	adds	r7, #8
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	08018158 	.word	0x08018158

0800afc0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800afc8:	f009 fa28 	bl	801441c <sys_arch_protect>
 800afcc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	689b      	ldr	r3, [r3, #8]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d015      	beq.n	800b008 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	68ba      	ldr	r2, [r7, #8]
 800afe2:	6812      	ldr	r2, [r2, #0]
 800afe4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	f003 0303 	and.w	r3, r3, #3
 800afec:	2b00      	cmp	r3, #0
 800afee:	d006      	beq.n	800affe <do_memp_malloc_pool+0x3e>
 800aff0:	4b09      	ldr	r3, [pc, #36]	@ (800b018 <do_memp_malloc_pool+0x58>)
 800aff2:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800aff6:	4909      	ldr	r1, [pc, #36]	@ (800b01c <do_memp_malloc_pool+0x5c>)
 800aff8:	4809      	ldr	r0, [pc, #36]	@ (800b020 <do_memp_malloc_pool+0x60>)
 800affa:	f009 fb2d 	bl	8014658 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	f009 fa1a 	bl	8014438 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	e003      	b.n	800b010 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b008:	68f8      	ldr	r0, [r7, #12]
 800b00a:	f009 fa15 	bl	8014438 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b00e:	2300      	movs	r3, #0
}
 800b010:	4618      	mov	r0, r3
 800b012:	3710      	adds	r7, #16
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}
 800b018:	08015920 	.word	0x08015920
 800b01c:	08015950 	.word	0x08015950
 800b020:	08015974 	.word	0x08015974

0800b024 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d106      	bne.n	800b040 <memp_malloc_pool+0x1c>
 800b032:	4b0a      	ldr	r3, [pc, #40]	@ (800b05c <memp_malloc_pool+0x38>)
 800b034:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800b038:	4909      	ldr	r1, [pc, #36]	@ (800b060 <memp_malloc_pool+0x3c>)
 800b03a:	480a      	ldr	r0, [pc, #40]	@ (800b064 <memp_malloc_pool+0x40>)
 800b03c:	f009 fb0c 	bl	8014658 <iprintf>
  if (desc == NULL) {
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d101      	bne.n	800b04a <memp_malloc_pool+0x26>
    return NULL;
 800b046:	2300      	movs	r3, #0
 800b048:	e003      	b.n	800b052 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f7ff ffb8 	bl	800afc0 <do_memp_malloc_pool>
 800b050:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b052:	4618      	mov	r0, r3
 800b054:	3708      	adds	r7, #8
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	08015920 	.word	0x08015920
 800b060:	0801599c 	.word	0x0801599c
 800b064:	08015974 	.word	0x08015974

0800b068 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	4603      	mov	r3, r0
 800b070:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b072:	79fb      	ldrb	r3, [r7, #7]
 800b074:	2b0c      	cmp	r3, #12
 800b076:	d908      	bls.n	800b08a <memp_malloc+0x22>
 800b078:	4b0a      	ldr	r3, [pc, #40]	@ (800b0a4 <memp_malloc+0x3c>)
 800b07a:	f240 1257 	movw	r2, #343	@ 0x157
 800b07e:	490a      	ldr	r1, [pc, #40]	@ (800b0a8 <memp_malloc+0x40>)
 800b080:	480a      	ldr	r0, [pc, #40]	@ (800b0ac <memp_malloc+0x44>)
 800b082:	f009 fae9 	bl	8014658 <iprintf>
 800b086:	2300      	movs	r3, #0
 800b088:	e008      	b.n	800b09c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b08a:	79fb      	ldrb	r3, [r7, #7]
 800b08c:	4a08      	ldr	r2, [pc, #32]	@ (800b0b0 <memp_malloc+0x48>)
 800b08e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b092:	4618      	mov	r0, r3
 800b094:	f7ff ff94 	bl	800afc0 <do_memp_malloc_pool>
 800b098:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b09a:	68fb      	ldr	r3, [r7, #12]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3710      	adds	r7, #16
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	08015920 	.word	0x08015920
 800b0a8:	080159b0 	.word	0x080159b0
 800b0ac:	08015974 	.word	0x08015974
 800b0b0:	08018158 	.word	0x08018158

0800b0b4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	f003 0303 	and.w	r3, r3, #3
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d006      	beq.n	800b0d6 <do_memp_free_pool+0x22>
 800b0c8:	4b0d      	ldr	r3, [pc, #52]	@ (800b100 <do_memp_free_pool+0x4c>)
 800b0ca:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800b0ce:	490d      	ldr	r1, [pc, #52]	@ (800b104 <do_memp_free_pool+0x50>)
 800b0d0:	480d      	ldr	r0, [pc, #52]	@ (800b108 <do_memp_free_pool+0x54>)
 800b0d2:	f009 fac1 	bl	8014658 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b0da:	f009 f99f 	bl	801441c <sys_arch_protect>
 800b0de:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	681a      	ldr	r2, [r3, #0]
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	689b      	ldr	r3, [r3, #8]
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b0f2:	68b8      	ldr	r0, [r7, #8]
 800b0f4:	f009 f9a0 	bl	8014438 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b0f8:	bf00      	nop
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	08015920 	.word	0x08015920
 800b104:	080159d0 	.word	0x080159d0
 800b108:	08015974 	.word	0x08015974

0800b10c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d106      	bne.n	800b12a <memp_free_pool+0x1e>
 800b11c:	4b0a      	ldr	r3, [pc, #40]	@ (800b148 <memp_free_pool+0x3c>)
 800b11e:	f240 1295 	movw	r2, #405	@ 0x195
 800b122:	490a      	ldr	r1, [pc, #40]	@ (800b14c <memp_free_pool+0x40>)
 800b124:	480a      	ldr	r0, [pc, #40]	@ (800b150 <memp_free_pool+0x44>)
 800b126:	f009 fa97 	bl	8014658 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d007      	beq.n	800b140 <memp_free_pool+0x34>
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d004      	beq.n	800b140 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b136:	6839      	ldr	r1, [r7, #0]
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f7ff ffbb 	bl	800b0b4 <do_memp_free_pool>
 800b13e:	e000      	b.n	800b142 <memp_free_pool+0x36>
    return;
 800b140:	bf00      	nop
}
 800b142:	3708      	adds	r7, #8
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	08015920 	.word	0x08015920
 800b14c:	0801599c 	.word	0x0801599c
 800b150:	08015974 	.word	0x08015974

0800b154 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	4603      	mov	r3, r0
 800b15c:	6039      	str	r1, [r7, #0]
 800b15e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b160:	79fb      	ldrb	r3, [r7, #7]
 800b162:	2b0c      	cmp	r3, #12
 800b164:	d907      	bls.n	800b176 <memp_free+0x22>
 800b166:	4b0c      	ldr	r3, [pc, #48]	@ (800b198 <memp_free+0x44>)
 800b168:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800b16c:	490b      	ldr	r1, [pc, #44]	@ (800b19c <memp_free+0x48>)
 800b16e:	480c      	ldr	r0, [pc, #48]	@ (800b1a0 <memp_free+0x4c>)
 800b170:	f009 fa72 	bl	8014658 <iprintf>
 800b174:	e00c      	b.n	800b190 <memp_free+0x3c>

  if (mem == NULL) {
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d008      	beq.n	800b18e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b17c:	79fb      	ldrb	r3, [r7, #7]
 800b17e:	4a09      	ldr	r2, [pc, #36]	@ (800b1a4 <memp_free+0x50>)
 800b180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b184:	6839      	ldr	r1, [r7, #0]
 800b186:	4618      	mov	r0, r3
 800b188:	f7ff ff94 	bl	800b0b4 <do_memp_free_pool>
 800b18c:	e000      	b.n	800b190 <memp_free+0x3c>
    return;
 800b18e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b190:	3708      	adds	r7, #8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	08015920 	.word	0x08015920
 800b19c:	080159f0 	.word	0x080159f0
 800b1a0:	08015974 	.word	0x08015974
 800b1a4:	08018158 	.word	0x08018158

0800b1a8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b1ac:	bf00      	nop
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr
	...

0800b1b8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b086      	sub	sp, #24
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	607a      	str	r2, [r7, #4]
 800b1c4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d108      	bne.n	800b1de <netif_add+0x26>
 800b1cc:	4b57      	ldr	r3, [pc, #348]	@ (800b32c <netif_add+0x174>)
 800b1ce:	f240 1227 	movw	r2, #295	@ 0x127
 800b1d2:	4957      	ldr	r1, [pc, #348]	@ (800b330 <netif_add+0x178>)
 800b1d4:	4857      	ldr	r0, [pc, #348]	@ (800b334 <netif_add+0x17c>)
 800b1d6:	f009 fa3f 	bl	8014658 <iprintf>
 800b1da:	2300      	movs	r3, #0
 800b1dc:	e0a2      	b.n	800b324 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d108      	bne.n	800b1f6 <netif_add+0x3e>
 800b1e4:	4b51      	ldr	r3, [pc, #324]	@ (800b32c <netif_add+0x174>)
 800b1e6:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800b1ea:	4953      	ldr	r1, [pc, #332]	@ (800b338 <netif_add+0x180>)
 800b1ec:	4851      	ldr	r0, [pc, #324]	@ (800b334 <netif_add+0x17c>)
 800b1ee:	f009 fa33 	bl	8014658 <iprintf>
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	e096      	b.n	800b324 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d101      	bne.n	800b200 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b1fc:	4b4f      	ldr	r3, [pc, #316]	@ (800b33c <netif_add+0x184>)
 800b1fe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d101      	bne.n	800b20a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b206:	4b4d      	ldr	r3, [pc, #308]	@ (800b33c <netif_add+0x184>)
 800b208:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d101      	bne.n	800b214 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b210:	4b4a      	ldr	r3, [pc, #296]	@ (800b33c <netif_add+0x184>)
 800b212:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2200      	movs	r2, #0
 800b218:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2200      	movs	r2, #0
 800b21e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2200      	movs	r2, #0
 800b224:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	4a45      	ldr	r2, [pc, #276]	@ (800b340 <netif_add+0x188>)
 800b22a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2200      	movs	r2, #0
 800b230:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2200      	movs	r2, #0
 800b236:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2200      	movs	r2, #0
 800b23e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	6a3a      	ldr	r2, [r7, #32]
 800b244:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b246:	4b3f      	ldr	r3, [pc, #252]	@ (800b344 <netif_add+0x18c>)
 800b248:	781a      	ldrb	r2, [r3, #0]
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b254:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	687a      	ldr	r2, [r7, #4]
 800b25a:	68b9      	ldr	r1, [r7, #8]
 800b25c:	68f8      	ldr	r0, [r7, #12]
 800b25e:	f000 f913 	bl	800b488 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	4798      	blx	r3
 800b268:	4603      	mov	r3, r0
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d001      	beq.n	800b272 <netif_add+0xba>
    return NULL;
 800b26e:	2300      	movs	r3, #0
 800b270:	e058      	b.n	800b324 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b278:	2bff      	cmp	r3, #255	@ 0xff
 800b27a:	d103      	bne.n	800b284 <netif_add+0xcc>
        netif->num = 0;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2200      	movs	r2, #0
 800b280:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800b284:	2300      	movs	r3, #0
 800b286:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b288:	4b2f      	ldr	r3, [pc, #188]	@ (800b348 <netif_add+0x190>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	617b      	str	r3, [r7, #20]
 800b28e:	e02b      	b.n	800b2e8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b290:	697a      	ldr	r2, [r7, #20]
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	429a      	cmp	r2, r3
 800b296:	d106      	bne.n	800b2a6 <netif_add+0xee>
 800b298:	4b24      	ldr	r3, [pc, #144]	@ (800b32c <netif_add+0x174>)
 800b29a:	f240 128b 	movw	r2, #395	@ 0x18b
 800b29e:	492b      	ldr	r1, [pc, #172]	@ (800b34c <netif_add+0x194>)
 800b2a0:	4824      	ldr	r0, [pc, #144]	@ (800b334 <netif_add+0x17c>)
 800b2a2:	f009 f9d9 	bl	8014658 <iprintf>
        num_netifs++;
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	2bff      	cmp	r3, #255	@ 0xff
 800b2b0:	dd06      	ble.n	800b2c0 <netif_add+0x108>
 800b2b2:	4b1e      	ldr	r3, [pc, #120]	@ (800b32c <netif_add+0x174>)
 800b2b4:	f240 128d 	movw	r2, #397	@ 0x18d
 800b2b8:	4925      	ldr	r1, [pc, #148]	@ (800b350 <netif_add+0x198>)
 800b2ba:	481e      	ldr	r0, [pc, #120]	@ (800b334 <netif_add+0x17c>)
 800b2bc:	f009 f9cc 	bl	8014658 <iprintf>
        if (netif2->num == netif->num) {
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d108      	bne.n	800b2e2 <netif_add+0x12a>
          netif->num++;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	b2da      	uxtb	r2, r3
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800b2e0:	e005      	b.n	800b2ee <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	617b      	str	r3, [r7, #20]
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d1d0      	bne.n	800b290 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d1be      	bne.n	800b272 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b2fa:	2bfe      	cmp	r3, #254	@ 0xfe
 800b2fc:	d103      	bne.n	800b306 <netif_add+0x14e>
    netif_num = 0;
 800b2fe:	4b11      	ldr	r3, [pc, #68]	@ (800b344 <netif_add+0x18c>)
 800b300:	2200      	movs	r2, #0
 800b302:	701a      	strb	r2, [r3, #0]
 800b304:	e006      	b.n	800b314 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b30c:	3301      	adds	r3, #1
 800b30e:	b2da      	uxtb	r2, r3
 800b310:	4b0c      	ldr	r3, [pc, #48]	@ (800b344 <netif_add+0x18c>)
 800b312:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b314:	4b0c      	ldr	r3, [pc, #48]	@ (800b348 <netif_add+0x190>)
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b31c:	4a0a      	ldr	r2, [pc, #40]	@ (800b348 <netif_add+0x190>)
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b322:	68fb      	ldr	r3, [r7, #12]
}
 800b324:	4618      	mov	r0, r3
 800b326:	3718      	adds	r7, #24
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}
 800b32c:	08015a0c 	.word	0x08015a0c
 800b330:	08015aa0 	.word	0x08015aa0
 800b334:	08015a5c 	.word	0x08015a5c
 800b338:	08015abc 	.word	0x08015abc
 800b33c:	080181cc 	.word	0x080181cc
 800b340:	0800b763 	.word	0x0800b763
 800b344:	2000d3a4 	.word	0x2000d3a4
 800b348:	2000d39c 	.word	0x2000d39c
 800b34c:	08015ae0 	.word	0x08015ae0
 800b350:	08015af4 	.word	0x08015af4

0800b354 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b35e:	6839      	ldr	r1, [r7, #0]
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f002 fb7f 	bl	800da64 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b366:	6839      	ldr	r1, [r7, #0]
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f006 fc8d 	bl	8011c88 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b36e:	bf00      	nop
 800b370:	3708      	adds	r7, #8
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
	...

0800b378 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b086      	sub	sp, #24
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d106      	bne.n	800b398 <netif_do_set_ipaddr+0x20>
 800b38a:	4b1d      	ldr	r3, [pc, #116]	@ (800b400 <netif_do_set_ipaddr+0x88>)
 800b38c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800b390:	491c      	ldr	r1, [pc, #112]	@ (800b404 <netif_do_set_ipaddr+0x8c>)
 800b392:	481d      	ldr	r0, [pc, #116]	@ (800b408 <netif_do_set_ipaddr+0x90>)
 800b394:	f009 f960 	bl	8014658 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d106      	bne.n	800b3ac <netif_do_set_ipaddr+0x34>
 800b39e:	4b18      	ldr	r3, [pc, #96]	@ (800b400 <netif_do_set_ipaddr+0x88>)
 800b3a0:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800b3a4:	4917      	ldr	r1, [pc, #92]	@ (800b404 <netif_do_set_ipaddr+0x8c>)
 800b3a6:	4818      	ldr	r0, [pc, #96]	@ (800b408 <netif_do_set_ipaddr+0x90>)
 800b3a8:	f009 f956 	bl	8014658 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	3304      	adds	r3, #4
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d01c      	beq.n	800b3f4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	3304      	adds	r3, #4
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b3ca:	f107 0314 	add.w	r3, r7, #20
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f7ff ffbf 	bl	800b354 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d002      	beq.n	800b3e2 <netif_do_set_ipaddr+0x6a>
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	e000      	b.n	800b3e4 <netif_do_set_ipaddr+0x6c>
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b3e8:	2101      	movs	r1, #1
 800b3ea:	68f8      	ldr	r0, [r7, #12]
 800b3ec:	f000 f8d2 	bl	800b594 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	e000      	b.n	800b3f6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3718      	adds	r7, #24
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	08015a0c 	.word	0x08015a0c
 800b404:	08015b24 	.word	0x08015b24
 800b408:	08015a5c 	.word	0x08015a5c

0800b40c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	60b9      	str	r1, [r7, #8]
 800b416:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	3308      	adds	r3, #8
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	429a      	cmp	r2, r3
 800b424:	d00a      	beq.n	800b43c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d002      	beq.n	800b432 <netif_do_set_netmask+0x26>
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	e000      	b.n	800b434 <netif_do_set_netmask+0x28>
 800b432:	2300      	movs	r3, #0
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b438:	2301      	movs	r3, #1
 800b43a:	e000      	b.n	800b43e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b43c:	2300      	movs	r3, #0
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3714      	adds	r7, #20
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr

0800b44a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b44a:	b480      	push	{r7}
 800b44c:	b085      	sub	sp, #20
 800b44e:	af00      	add	r7, sp, #0
 800b450:	60f8      	str	r0, [r7, #12]
 800b452:	60b9      	str	r1, [r7, #8]
 800b454:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	330c      	adds	r3, #12
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	429a      	cmp	r2, r3
 800b462:	d00a      	beq.n	800b47a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d002      	beq.n	800b470 <netif_do_set_gw+0x26>
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	e000      	b.n	800b472 <netif_do_set_gw+0x28>
 800b470:	2300      	movs	r3, #0
 800b472:	68fa      	ldr	r2, [r7, #12]
 800b474:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b476:	2301      	movs	r3, #1
 800b478:	e000      	b.n	800b47c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b47a:	2300      	movs	r3, #0
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3714      	adds	r7, #20
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr

0800b488 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b088      	sub	sp, #32
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	607a      	str	r2, [r7, #4]
 800b494:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b496:	2300      	movs	r3, #0
 800b498:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b49a:	2300      	movs	r3, #0
 800b49c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d101      	bne.n	800b4a8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b4a4:	4b1c      	ldr	r3, [pc, #112]	@ (800b518 <netif_set_addr+0x90>)
 800b4a6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d101      	bne.n	800b4b2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b4ae:	4b1a      	ldr	r3, [pc, #104]	@ (800b518 <netif_set_addr+0x90>)
 800b4b0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d101      	bne.n	800b4bc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b4b8:	4b17      	ldr	r3, [pc, #92]	@ (800b518 <netif_set_addr+0x90>)
 800b4ba:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d003      	beq.n	800b4ca <netif_set_addr+0x42>
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d101      	bne.n	800b4ce <netif_set_addr+0x46>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e000      	b.n	800b4d0 <netif_set_addr+0x48>
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d006      	beq.n	800b4e6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b4d8:	f107 0310 	add.w	r3, r7, #16
 800b4dc:	461a      	mov	r2, r3
 800b4de:	68b9      	ldr	r1, [r7, #8]
 800b4e0:	68f8      	ldr	r0, [r7, #12]
 800b4e2:	f7ff ff49 	bl	800b378 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b4e6:	69fa      	ldr	r2, [r7, #28]
 800b4e8:	6879      	ldr	r1, [r7, #4]
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	f7ff ff8e 	bl	800b40c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b4f0:	69ba      	ldr	r2, [r7, #24]
 800b4f2:	6839      	ldr	r1, [r7, #0]
 800b4f4:	68f8      	ldr	r0, [r7, #12]
 800b4f6:	f7ff ffa8 	bl	800b44a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d106      	bne.n	800b50e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b500:	f107 0310 	add.w	r3, r7, #16
 800b504:	461a      	mov	r2, r3
 800b506:	68b9      	ldr	r1, [r7, #8]
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	f7ff ff35 	bl	800b378 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b50e:	bf00      	nop
 800b510:	3720      	adds	r7, #32
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	080181cc 	.word	0x080181cc

0800b51c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b524:	4a04      	ldr	r2, [pc, #16]	@ (800b538 <netif_set_default+0x1c>)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b52a:	bf00      	nop
 800b52c:	370c      	adds	r7, #12
 800b52e:	46bd      	mov	sp, r7
 800b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b534:	4770      	bx	lr
 800b536:	bf00      	nop
 800b538:	2000d3a0 	.word	0x2000d3a0

0800b53c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b082      	sub	sp, #8
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d107      	bne.n	800b55a <netif_set_up+0x1e>
 800b54a:	4b0f      	ldr	r3, [pc, #60]	@ (800b588 <netif_set_up+0x4c>)
 800b54c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800b550:	490e      	ldr	r1, [pc, #56]	@ (800b58c <netif_set_up+0x50>)
 800b552:	480f      	ldr	r0, [pc, #60]	@ (800b590 <netif_set_up+0x54>)
 800b554:	f009 f880 	bl	8014658 <iprintf>
 800b558:	e013      	b.n	800b582 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b560:	f003 0301 	and.w	r3, r3, #1
 800b564:	2b00      	cmp	r3, #0
 800b566:	d10c      	bne.n	800b582 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b56e:	f043 0301 	orr.w	r3, r3, #1
 800b572:	b2da      	uxtb	r2, r3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b57a:	2103      	movs	r1, #3
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 f809 	bl	800b594 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b582:	3708      	adds	r7, #8
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}
 800b588:	08015a0c 	.word	0x08015a0c
 800b58c:	08015b94 	.word	0x08015b94
 800b590:	08015a5c 	.word	0x08015a5c

0800b594 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	460b      	mov	r3, r1
 800b59e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d106      	bne.n	800b5b4 <netif_issue_reports+0x20>
 800b5a6:	4b18      	ldr	r3, [pc, #96]	@ (800b608 <netif_issue_reports+0x74>)
 800b5a8:	f240 326d 	movw	r2, #877	@ 0x36d
 800b5ac:	4917      	ldr	r1, [pc, #92]	@ (800b60c <netif_issue_reports+0x78>)
 800b5ae:	4818      	ldr	r0, [pc, #96]	@ (800b610 <netif_issue_reports+0x7c>)
 800b5b0:	f009 f852 	bl	8014658 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b5ba:	f003 0304 	and.w	r3, r3, #4
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d01e      	beq.n	800b600 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b5c8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d017      	beq.n	800b600 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b5d0:	78fb      	ldrb	r3, [r7, #3]
 800b5d2:	f003 0301 	and.w	r3, r3, #1
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d013      	beq.n	800b602 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	3304      	adds	r3, #4
 800b5de:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d00e      	beq.n	800b602 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b5ea:	f003 0308 	and.w	r3, r3, #8
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d007      	beq.n	800b602 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	3304      	adds	r3, #4
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f007 faaf 	bl	8012b5c <etharp_request>
 800b5fe:	e000      	b.n	800b602 <netif_issue_reports+0x6e>
    return;
 800b600:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b602:	3708      	adds	r7, #8
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}
 800b608:	08015a0c 	.word	0x08015a0c
 800b60c:	08015bb0 	.word	0x08015bb0
 800b610:	08015a5c 	.word	0x08015a5c

0800b614 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d107      	bne.n	800b632 <netif_set_down+0x1e>
 800b622:	4b12      	ldr	r3, [pc, #72]	@ (800b66c <netif_set_down+0x58>)
 800b624:	f240 329b 	movw	r2, #923	@ 0x39b
 800b628:	4911      	ldr	r1, [pc, #68]	@ (800b670 <netif_set_down+0x5c>)
 800b62a:	4812      	ldr	r0, [pc, #72]	@ (800b674 <netif_set_down+0x60>)
 800b62c:	f009 f814 	bl	8014658 <iprintf>
 800b630:	e019      	b.n	800b666 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b638:	f003 0301 	and.w	r3, r3, #1
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d012      	beq.n	800b666 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b646:	f023 0301 	bic.w	r3, r3, #1
 800b64a:	b2da      	uxtb	r2, r3
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b658:	f003 0308 	and.w	r3, r3, #8
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d002      	beq.n	800b666 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f006 fe39 	bl	80122d8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b666:	3708      	adds	r7, #8
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}
 800b66c:	08015a0c 	.word	0x08015a0c
 800b670:	08015bd4 	.word	0x08015bd4
 800b674:	08015a5c 	.word	0x08015a5c

0800b678 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b082      	sub	sp, #8
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d107      	bne.n	800b696 <netif_set_link_up+0x1e>
 800b686:	4b13      	ldr	r3, [pc, #76]	@ (800b6d4 <netif_set_link_up+0x5c>)
 800b688:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800b68c:	4912      	ldr	r1, [pc, #72]	@ (800b6d8 <netif_set_link_up+0x60>)
 800b68e:	4813      	ldr	r0, [pc, #76]	@ (800b6dc <netif_set_link_up+0x64>)
 800b690:	f008 ffe2 	bl	8014658 <iprintf>
 800b694:	e01b      	b.n	800b6ce <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b69c:	f003 0304 	and.w	r3, r3, #4
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d114      	bne.n	800b6ce <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b6aa:	f043 0304 	orr.w	r3, r3, #4
 800b6ae:	b2da      	uxtb	r2, r3
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b6b6:	2103      	movs	r1, #3
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f7ff ff6b 	bl	800b594 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	69db      	ldr	r3, [r3, #28]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d003      	beq.n	800b6ce <netif_set_link_up+0x56>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	69db      	ldr	r3, [r3, #28]
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b6ce:	3708      	adds	r7, #8
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	08015a0c 	.word	0x08015a0c
 800b6d8:	08015bf4 	.word	0x08015bf4
 800b6dc:	08015a5c 	.word	0x08015a5c

0800b6e0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d107      	bne.n	800b6fe <netif_set_link_down+0x1e>
 800b6ee:	4b11      	ldr	r3, [pc, #68]	@ (800b734 <netif_set_link_down+0x54>)
 800b6f0:	f240 4206 	movw	r2, #1030	@ 0x406
 800b6f4:	4910      	ldr	r1, [pc, #64]	@ (800b738 <netif_set_link_down+0x58>)
 800b6f6:	4811      	ldr	r0, [pc, #68]	@ (800b73c <netif_set_link_down+0x5c>)
 800b6f8:	f008 ffae 	bl	8014658 <iprintf>
 800b6fc:	e017      	b.n	800b72e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b704:	f003 0304 	and.w	r3, r3, #4
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d010      	beq.n	800b72e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b712:	f023 0304 	bic.w	r3, r3, #4
 800b716:	b2da      	uxtb	r2, r3
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	69db      	ldr	r3, [r3, #28]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d003      	beq.n	800b72e <netif_set_link_down+0x4e>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	69db      	ldr	r3, [r3, #28]
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b72e:	3708      	adds	r7, #8
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	08015a0c 	.word	0x08015a0c
 800b738:	08015c18 	.word	0x08015c18
 800b73c:	08015a5c 	.word	0x08015a5c

0800b740 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d002      	beq.n	800b756 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	683a      	ldr	r2, [r7, #0]
 800b754:	61da      	str	r2, [r3, #28]
  }
}
 800b756:	bf00      	nop
 800b758:	370c      	adds	r7, #12
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr

0800b762 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b762:	b480      	push	{r7}
 800b764:	b085      	sub	sp, #20
 800b766:	af00      	add	r7, sp, #0
 800b768:	60f8      	str	r0, [r7, #12]
 800b76a:	60b9      	str	r1, [r7, #8]
 800b76c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b76e:	f06f 030b 	mvn.w	r3, #11
}
 800b772:	4618      	mov	r0, r3
 800b774:	3714      	adds	r7, #20
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr
	...

0800b780 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b780:	b480      	push	{r7}
 800b782:	b085      	sub	sp, #20
 800b784:	af00      	add	r7, sp, #0
 800b786:	4603      	mov	r3, r0
 800b788:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b78a:	79fb      	ldrb	r3, [r7, #7]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d013      	beq.n	800b7b8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b790:	4b0d      	ldr	r3, [pc, #52]	@ (800b7c8 <netif_get_by_index+0x48>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	60fb      	str	r3, [r7, #12]
 800b796:	e00c      	b.n	800b7b2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b79e:	3301      	adds	r3, #1
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	79fa      	ldrb	r2, [r7, #7]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d101      	bne.n	800b7ac <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	e006      	b.n	800b7ba <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	60fb      	str	r3, [r7, #12]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1ef      	bne.n	800b798 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3714      	adds	r7, #20
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr
 800b7c6:	bf00      	nop
 800b7c8:	2000d39c 	.word	0x2000d39c

0800b7cc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b7d2:	f008 fe23 	bl	801441c <sys_arch_protect>
 800b7d6:	6038      	str	r0, [r7, #0]
 800b7d8:	4b0d      	ldr	r3, [pc, #52]	@ (800b810 <pbuf_free_ooseq+0x44>)
 800b7da:	2200      	movs	r2, #0
 800b7dc:	701a      	strb	r2, [r3, #0]
 800b7de:	6838      	ldr	r0, [r7, #0]
 800b7e0:	f008 fe2a 	bl	8014438 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b7e4:	4b0b      	ldr	r3, [pc, #44]	@ (800b814 <pbuf_free_ooseq+0x48>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	607b      	str	r3, [r7, #4]
 800b7ea:	e00a      	b.n	800b802 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d003      	beq.n	800b7fc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f002 f973 	bl	800dae0 <tcp_free_ooseq>
      return;
 800b7fa:	e005      	b.n	800b808 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	607b      	str	r3, [r7, #4]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1f1      	bne.n	800b7ec <pbuf_free_ooseq+0x20>
    }
  }
}
 800b808:	3708      	adds	r7, #8
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop
 800b810:	2000d3a5 	.word	0x2000d3a5
 800b814:	2000d3b4 	.word	0x2000d3b4

0800b818 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b820:	f7ff ffd4 	bl	800b7cc <pbuf_free_ooseq>
}
 800b824:	bf00      	nop
 800b826:	3708      	adds	r7, #8
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b832:	f008 fdf3 	bl	801441c <sys_arch_protect>
 800b836:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b838:	4b0f      	ldr	r3, [pc, #60]	@ (800b878 <pbuf_pool_is_empty+0x4c>)
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b83e:	4b0e      	ldr	r3, [pc, #56]	@ (800b878 <pbuf_pool_is_empty+0x4c>)
 800b840:	2201      	movs	r2, #1
 800b842:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f008 fdf7 	bl	8014438 <sys_arch_unprotect>

  if (!queued) {
 800b84a:	78fb      	ldrb	r3, [r7, #3]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10f      	bne.n	800b870 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b850:	2100      	movs	r1, #0
 800b852:	480a      	ldr	r0, [pc, #40]	@ (800b87c <pbuf_pool_is_empty+0x50>)
 800b854:	f7fe feaa 	bl	800a5ac <tcpip_try_callback>
 800b858:	4603      	mov	r3, r0
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d008      	beq.n	800b870 <pbuf_pool_is_empty+0x44>
 800b85e:	f008 fddd 	bl	801441c <sys_arch_protect>
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	4b04      	ldr	r3, [pc, #16]	@ (800b878 <pbuf_pool_is_empty+0x4c>)
 800b866:	2200      	movs	r2, #0
 800b868:	701a      	strb	r2, [r3, #0]
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f008 fde4 	bl	8014438 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b870:	bf00      	nop
 800b872:	3708      	adds	r7, #8
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}
 800b878:	2000d3a5 	.word	0x2000d3a5
 800b87c:	0800b819 	.word	0x0800b819

0800b880 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b880:	b480      	push	{r7}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	4611      	mov	r1, r2
 800b88c:	461a      	mov	r2, r3
 800b88e:	460b      	mov	r3, r1
 800b890:	80fb      	strh	r3, [r7, #6]
 800b892:	4613      	mov	r3, r2
 800b894:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2200      	movs	r2, #0
 800b89a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	68ba      	ldr	r2, [r7, #8]
 800b8a0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	88fa      	ldrh	r2, [r7, #6]
 800b8a6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	88ba      	ldrh	r2, [r7, #4]
 800b8ac:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b8ae:	8b3b      	ldrh	r3, [r7, #24]
 800b8b0:	b2da      	uxtb	r2, r3
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	7f3a      	ldrb	r2, [r7, #28]
 800b8ba:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	73da      	strb	r2, [r3, #15]
}
 800b8c8:	bf00      	nop
 800b8ca:	3714      	adds	r7, #20
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b08c      	sub	sp, #48	@ 0x30
 800b8d8:	af02      	add	r7, sp, #8
 800b8da:	4603      	mov	r3, r0
 800b8dc:	71fb      	strb	r3, [r7, #7]
 800b8de:	460b      	mov	r3, r1
 800b8e0:	80bb      	strh	r3, [r7, #4]
 800b8e2:	4613      	mov	r3, r2
 800b8e4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b8e6:	79fb      	ldrb	r3, [r7, #7]
 800b8e8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b8ea:	887b      	ldrh	r3, [r7, #2]
 800b8ec:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b8f0:	d07f      	beq.n	800b9f2 <pbuf_alloc+0x11e>
 800b8f2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b8f6:	f300 80c8 	bgt.w	800ba8a <pbuf_alloc+0x1b6>
 800b8fa:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b8fe:	d010      	beq.n	800b922 <pbuf_alloc+0x4e>
 800b900:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b904:	f300 80c1 	bgt.w	800ba8a <pbuf_alloc+0x1b6>
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d002      	beq.n	800b912 <pbuf_alloc+0x3e>
 800b90c:	2b41      	cmp	r3, #65	@ 0x41
 800b90e:	f040 80bc 	bne.w	800ba8a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b912:	887a      	ldrh	r2, [r7, #2]
 800b914:	88bb      	ldrh	r3, [r7, #4]
 800b916:	4619      	mov	r1, r3
 800b918:	2000      	movs	r0, #0
 800b91a:	f000 f8d1 	bl	800bac0 <pbuf_alloc_reference>
 800b91e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800b920:	e0bd      	b.n	800ba9e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b922:	2300      	movs	r3, #0
 800b924:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800b926:	2300      	movs	r3, #0
 800b928:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b92a:	88bb      	ldrh	r3, [r7, #4]
 800b92c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b92e:	200c      	movs	r0, #12
 800b930:	f7ff fb9a 	bl	800b068 <memp_malloc>
 800b934:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d109      	bne.n	800b950 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b93c:	f7ff ff76 	bl	800b82c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b942:	2b00      	cmp	r3, #0
 800b944:	d002      	beq.n	800b94c <pbuf_alloc+0x78>
            pbuf_free(p);
 800b946:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b948:	f000 faa8 	bl	800be9c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b94c:	2300      	movs	r3, #0
 800b94e:	e0a7      	b.n	800baa0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b950:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b952:	3303      	adds	r3, #3
 800b954:	b29b      	uxth	r3, r3
 800b956:	f023 0303 	bic.w	r3, r3, #3
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800b960:	b29b      	uxth	r3, r3
 800b962:	8b7a      	ldrh	r2, [r7, #26]
 800b964:	4293      	cmp	r3, r2
 800b966:	bf28      	it	cs
 800b968:	4613      	movcs	r3, r2
 800b96a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b96c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b96e:	3310      	adds	r3, #16
 800b970:	693a      	ldr	r2, [r7, #16]
 800b972:	4413      	add	r3, r2
 800b974:	3303      	adds	r3, #3
 800b976:	f023 0303 	bic.w	r3, r3, #3
 800b97a:	4618      	mov	r0, r3
 800b97c:	89f9      	ldrh	r1, [r7, #14]
 800b97e:	8b7a      	ldrh	r2, [r7, #26]
 800b980:	2300      	movs	r3, #0
 800b982:	9301      	str	r3, [sp, #4]
 800b984:	887b      	ldrh	r3, [r7, #2]
 800b986:	9300      	str	r3, [sp, #0]
 800b988:	460b      	mov	r3, r1
 800b98a:	4601      	mov	r1, r0
 800b98c:	6938      	ldr	r0, [r7, #16]
 800b98e:	f7ff ff77 	bl	800b880 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	f003 0303 	and.w	r3, r3, #3
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d006      	beq.n	800b9ac <pbuf_alloc+0xd8>
 800b99e:	4b42      	ldr	r3, [pc, #264]	@ (800baa8 <pbuf_alloc+0x1d4>)
 800b9a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b9a4:	4941      	ldr	r1, [pc, #260]	@ (800baac <pbuf_alloc+0x1d8>)
 800b9a6:	4842      	ldr	r0, [pc, #264]	@ (800bab0 <pbuf_alloc+0x1dc>)
 800b9a8:	f008 fe56 	bl	8014658 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b9ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b9ae:	3303      	adds	r3, #3
 800b9b0:	f023 0303 	bic.w	r3, r3, #3
 800b9b4:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800b9b8:	d106      	bne.n	800b9c8 <pbuf_alloc+0xf4>
 800b9ba:	4b3b      	ldr	r3, [pc, #236]	@ (800baa8 <pbuf_alloc+0x1d4>)
 800b9bc:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800b9c0:	493c      	ldr	r1, [pc, #240]	@ (800bab4 <pbuf_alloc+0x1e0>)
 800b9c2:	483b      	ldr	r0, [pc, #236]	@ (800bab0 <pbuf_alloc+0x1dc>)
 800b9c4:	f008 fe48 	bl	8014658 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d102      	bne.n	800b9d4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9d2:	e002      	b.n	800b9da <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	693a      	ldr	r2, [r7, #16]
 800b9d8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b9de:	8b7a      	ldrh	r2, [r7, #26]
 800b9e0:	89fb      	ldrh	r3, [r7, #14]
 800b9e2:	1ad3      	subs	r3, r2, r3
 800b9e4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800b9ea:	8b7b      	ldrh	r3, [r7, #26]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d19e      	bne.n	800b92e <pbuf_alloc+0x5a>
      break;
 800b9f0:	e055      	b.n	800ba9e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b9f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b9f4:	3303      	adds	r3, #3
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	f023 0303 	bic.w	r3, r3, #3
 800b9fc:	b29a      	uxth	r2, r3
 800b9fe:	88bb      	ldrh	r3, [r7, #4]
 800ba00:	3303      	adds	r3, #3
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	f023 0303 	bic.w	r3, r3, #3
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	4413      	add	r3, r2
 800ba0c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ba0e:	8b3b      	ldrh	r3, [r7, #24]
 800ba10:	3310      	adds	r3, #16
 800ba12:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ba14:	8b3a      	ldrh	r2, [r7, #24]
 800ba16:	88bb      	ldrh	r3, [r7, #4]
 800ba18:	3303      	adds	r3, #3
 800ba1a:	f023 0303 	bic.w	r3, r3, #3
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d306      	bcc.n	800ba30 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ba22:	8afa      	ldrh	r2, [r7, #22]
 800ba24:	88bb      	ldrh	r3, [r7, #4]
 800ba26:	3303      	adds	r3, #3
 800ba28:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d201      	bcs.n	800ba34 <pbuf_alloc+0x160>
        return NULL;
 800ba30:	2300      	movs	r3, #0
 800ba32:	e035      	b.n	800baa0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ba34:	8afb      	ldrh	r3, [r7, #22]
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7ff f972 	bl	800ad20 <mem_malloc>
 800ba3c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800ba3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d101      	bne.n	800ba48 <pbuf_alloc+0x174>
        return NULL;
 800ba44:	2300      	movs	r3, #0
 800ba46:	e02b      	b.n	800baa0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ba48:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ba4a:	3310      	adds	r3, #16
 800ba4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba4e:	4413      	add	r3, r2
 800ba50:	3303      	adds	r3, #3
 800ba52:	f023 0303 	bic.w	r3, r3, #3
 800ba56:	4618      	mov	r0, r3
 800ba58:	88b9      	ldrh	r1, [r7, #4]
 800ba5a:	88ba      	ldrh	r2, [r7, #4]
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	9301      	str	r3, [sp, #4]
 800ba60:	887b      	ldrh	r3, [r7, #2]
 800ba62:	9300      	str	r3, [sp, #0]
 800ba64:	460b      	mov	r3, r1
 800ba66:	4601      	mov	r1, r0
 800ba68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ba6a:	f7ff ff09 	bl	800b880 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ba6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	f003 0303 	and.w	r3, r3, #3
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d010      	beq.n	800ba9c <pbuf_alloc+0x1c8>
 800ba7a:	4b0b      	ldr	r3, [pc, #44]	@ (800baa8 <pbuf_alloc+0x1d4>)
 800ba7c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800ba80:	490d      	ldr	r1, [pc, #52]	@ (800bab8 <pbuf_alloc+0x1e4>)
 800ba82:	480b      	ldr	r0, [pc, #44]	@ (800bab0 <pbuf_alloc+0x1dc>)
 800ba84:	f008 fde8 	bl	8014658 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ba88:	e008      	b.n	800ba9c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ba8a:	4b07      	ldr	r3, [pc, #28]	@ (800baa8 <pbuf_alloc+0x1d4>)
 800ba8c:	f240 1227 	movw	r2, #295	@ 0x127
 800ba90:	490a      	ldr	r1, [pc, #40]	@ (800babc <pbuf_alloc+0x1e8>)
 800ba92:	4807      	ldr	r0, [pc, #28]	@ (800bab0 <pbuf_alloc+0x1dc>)
 800ba94:	f008 fde0 	bl	8014658 <iprintf>
      return NULL;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	e001      	b.n	800baa0 <pbuf_alloc+0x1cc>
      break;
 800ba9c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ba9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3728      	adds	r7, #40	@ 0x28
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	08015c3c 	.word	0x08015c3c
 800baac:	08015c6c 	.word	0x08015c6c
 800bab0:	08015c9c 	.word	0x08015c9c
 800bab4:	08015cc4 	.word	0x08015cc4
 800bab8:	08015cf8 	.word	0x08015cf8
 800babc:	08015d24 	.word	0x08015d24

0800bac0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af02      	add	r7, sp, #8
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	460b      	mov	r3, r1
 800baca:	807b      	strh	r3, [r7, #2]
 800bacc:	4613      	mov	r3, r2
 800bace:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bad0:	883b      	ldrh	r3, [r7, #0]
 800bad2:	2b41      	cmp	r3, #65	@ 0x41
 800bad4:	d009      	beq.n	800baea <pbuf_alloc_reference+0x2a>
 800bad6:	883b      	ldrh	r3, [r7, #0]
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d006      	beq.n	800baea <pbuf_alloc_reference+0x2a>
 800badc:	4b0f      	ldr	r3, [pc, #60]	@ (800bb1c <pbuf_alloc_reference+0x5c>)
 800bade:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800bae2:	490f      	ldr	r1, [pc, #60]	@ (800bb20 <pbuf_alloc_reference+0x60>)
 800bae4:	480f      	ldr	r0, [pc, #60]	@ (800bb24 <pbuf_alloc_reference+0x64>)
 800bae6:	f008 fdb7 	bl	8014658 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800baea:	200b      	movs	r0, #11
 800baec:	f7ff fabc 	bl	800b068 <memp_malloc>
 800baf0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d101      	bne.n	800bafc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800baf8:	2300      	movs	r3, #0
 800bafa:	e00b      	b.n	800bb14 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800bafc:	8879      	ldrh	r1, [r7, #2]
 800bafe:	887a      	ldrh	r2, [r7, #2]
 800bb00:	2300      	movs	r3, #0
 800bb02:	9301      	str	r3, [sp, #4]
 800bb04:	883b      	ldrh	r3, [r7, #0]
 800bb06:	9300      	str	r3, [sp, #0]
 800bb08:	460b      	mov	r3, r1
 800bb0a:	6879      	ldr	r1, [r7, #4]
 800bb0c:	68f8      	ldr	r0, [r7, #12]
 800bb0e:	f7ff feb7 	bl	800b880 <pbuf_init_alloced_pbuf>
  return p;
 800bb12:	68fb      	ldr	r3, [r7, #12]
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3710      	adds	r7, #16
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	08015c3c 	.word	0x08015c3c
 800bb20:	08015d40 	.word	0x08015d40
 800bb24:	08015c9c 	.word	0x08015c9c

0800bb28 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b088      	sub	sp, #32
 800bb2c:	af02      	add	r7, sp, #8
 800bb2e:	607b      	str	r3, [r7, #4]
 800bb30:	4603      	mov	r3, r0
 800bb32:	73fb      	strb	r3, [r7, #15]
 800bb34:	460b      	mov	r3, r1
 800bb36:	81bb      	strh	r3, [r7, #12]
 800bb38:	4613      	mov	r3, r2
 800bb3a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800bb3c:	7bfb      	ldrb	r3, [r7, #15]
 800bb3e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bb40:	8a7b      	ldrh	r3, [r7, #18]
 800bb42:	3303      	adds	r3, #3
 800bb44:	f023 0203 	bic.w	r2, r3, #3
 800bb48:	89bb      	ldrh	r3, [r7, #12]
 800bb4a:	441a      	add	r2, r3
 800bb4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d901      	bls.n	800bb56 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bb52:	2300      	movs	r3, #0
 800bb54:	e018      	b.n	800bb88 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800bb56:	6a3b      	ldr	r3, [r7, #32]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d007      	beq.n	800bb6c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bb5c:	8a7b      	ldrh	r3, [r7, #18]
 800bb5e:	3303      	adds	r3, #3
 800bb60:	f023 0303 	bic.w	r3, r3, #3
 800bb64:	6a3a      	ldr	r2, [r7, #32]
 800bb66:	4413      	add	r3, r2
 800bb68:	617b      	str	r3, [r7, #20]
 800bb6a:	e001      	b.n	800bb70 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	89b9      	ldrh	r1, [r7, #12]
 800bb74:	89ba      	ldrh	r2, [r7, #12]
 800bb76:	2302      	movs	r3, #2
 800bb78:	9301      	str	r3, [sp, #4]
 800bb7a:	897b      	ldrh	r3, [r7, #10]
 800bb7c:	9300      	str	r3, [sp, #0]
 800bb7e:	460b      	mov	r3, r1
 800bb80:	6979      	ldr	r1, [r7, #20]
 800bb82:	f7ff fe7d 	bl	800b880 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800bb86:	687b      	ldr	r3, [r7, #4]
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3718      	adds	r7, #24
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	460b      	mov	r3, r1
 800bb9a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d106      	bne.n	800bbb0 <pbuf_realloc+0x20>
 800bba2:	4b3a      	ldr	r3, [pc, #232]	@ (800bc8c <pbuf_realloc+0xfc>)
 800bba4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800bba8:	4939      	ldr	r1, [pc, #228]	@ (800bc90 <pbuf_realloc+0x100>)
 800bbaa:	483a      	ldr	r0, [pc, #232]	@ (800bc94 <pbuf_realloc+0x104>)
 800bbac:	f008 fd54 	bl	8014658 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	891b      	ldrh	r3, [r3, #8]
 800bbb4:	887a      	ldrh	r2, [r7, #2]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d263      	bcs.n	800bc82 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	891a      	ldrh	r2, [r3, #8]
 800bbbe:	887b      	ldrh	r3, [r7, #2]
 800bbc0:	1ad3      	subs	r3, r2, r3
 800bbc2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bbc4:	887b      	ldrh	r3, [r7, #2]
 800bbc6:	817b      	strh	r3, [r7, #10]
  q = p;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bbcc:	e018      	b.n	800bc00 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	895b      	ldrh	r3, [r3, #10]
 800bbd2:	897a      	ldrh	r2, [r7, #10]
 800bbd4:	1ad3      	subs	r3, r2, r3
 800bbd6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	891a      	ldrh	r2, [r3, #8]
 800bbdc:	893b      	ldrh	r3, [r7, #8]
 800bbde:	1ad3      	subs	r3, r2, r3
 800bbe0:	b29a      	uxth	r2, r3
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d106      	bne.n	800bc00 <pbuf_realloc+0x70>
 800bbf2:	4b26      	ldr	r3, [pc, #152]	@ (800bc8c <pbuf_realloc+0xfc>)
 800bbf4:	f240 12af 	movw	r2, #431	@ 0x1af
 800bbf8:	4927      	ldr	r1, [pc, #156]	@ (800bc98 <pbuf_realloc+0x108>)
 800bbfa:	4826      	ldr	r0, [pc, #152]	@ (800bc94 <pbuf_realloc+0x104>)
 800bbfc:	f008 fd2c 	bl	8014658 <iprintf>
  while (rem_len > q->len) {
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	895b      	ldrh	r3, [r3, #10]
 800bc04:	897a      	ldrh	r2, [r7, #10]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d8e1      	bhi.n	800bbce <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	7b1b      	ldrb	r3, [r3, #12]
 800bc0e:	f003 030f 	and.w	r3, r3, #15
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d121      	bne.n	800bc5a <pbuf_realloc+0xca>
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	895b      	ldrh	r3, [r3, #10]
 800bc1a:	897a      	ldrh	r2, [r7, #10]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d01c      	beq.n	800bc5a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	7b5b      	ldrb	r3, [r3, #13]
 800bc24:	f003 0302 	and.w	r3, r3, #2
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d116      	bne.n	800bc5a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	685a      	ldr	r2, [r3, #4]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	1ad3      	subs	r3, r2, r3
 800bc34:	b29a      	uxth	r2, r3
 800bc36:	897b      	ldrh	r3, [r7, #10]
 800bc38:	4413      	add	r3, r2
 800bc3a:	b29b      	uxth	r3, r3
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	68f8      	ldr	r0, [r7, #12]
 800bc40:	f7fe ff64 	bl	800ab0c <mem_trim>
 800bc44:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d106      	bne.n	800bc5a <pbuf_realloc+0xca>
 800bc4c:	4b0f      	ldr	r3, [pc, #60]	@ (800bc8c <pbuf_realloc+0xfc>)
 800bc4e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800bc52:	4912      	ldr	r1, [pc, #72]	@ (800bc9c <pbuf_realloc+0x10c>)
 800bc54:	480f      	ldr	r0, [pc, #60]	@ (800bc94 <pbuf_realloc+0x104>)
 800bc56:	f008 fcff 	bl	8014658 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	897a      	ldrh	r2, [r7, #10]
 800bc5e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	895a      	ldrh	r2, [r3, #10]
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d004      	beq.n	800bc7a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4618      	mov	r0, r3
 800bc76:	f000 f911 	bl	800be9c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	601a      	str	r2, [r3, #0]
 800bc80:	e000      	b.n	800bc84 <pbuf_realloc+0xf4>
    return;
 800bc82:	bf00      	nop

}
 800bc84:	3710      	adds	r7, #16
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	08015c3c 	.word	0x08015c3c
 800bc90:	08015d54 	.word	0x08015d54
 800bc94:	08015c9c 	.word	0x08015c9c
 800bc98:	08015d6c 	.word	0x08015d6c
 800bc9c:	08015d84 	.word	0x08015d84

0800bca0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b086      	sub	sp, #24
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	4613      	mov	r3, r2
 800bcac:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d106      	bne.n	800bcc2 <pbuf_add_header_impl+0x22>
 800bcb4:	4b2b      	ldr	r3, [pc, #172]	@ (800bd64 <pbuf_add_header_impl+0xc4>)
 800bcb6:	f240 12df 	movw	r2, #479	@ 0x1df
 800bcba:	492b      	ldr	r1, [pc, #172]	@ (800bd68 <pbuf_add_header_impl+0xc8>)
 800bcbc:	482b      	ldr	r0, [pc, #172]	@ (800bd6c <pbuf_add_header_impl+0xcc>)
 800bcbe:	f008 fccb 	bl	8014658 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d003      	beq.n	800bcd0 <pbuf_add_header_impl+0x30>
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bcce:	d301      	bcc.n	800bcd4 <pbuf_add_header_impl+0x34>
    return 1;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	e043      	b.n	800bd5c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d101      	bne.n	800bcde <pbuf_add_header_impl+0x3e>
    return 0;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	e03e      	b.n	800bd5c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	891a      	ldrh	r2, [r3, #8]
 800bce6:	8a7b      	ldrh	r3, [r7, #18]
 800bce8:	4413      	add	r3, r2
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	8a7a      	ldrh	r2, [r7, #18]
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d901      	bls.n	800bcf6 <pbuf_add_header_impl+0x56>
    return 1;
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e032      	b.n	800bd5c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	7b1b      	ldrb	r3, [r3, #12]
 800bcfa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800bcfc:	8a3b      	ldrh	r3, [r7, #16]
 800bcfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00c      	beq.n	800bd20 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	685a      	ldr	r2, [r3, #4]
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	425b      	negs	r3, r3
 800bd0e:	4413      	add	r3, r2
 800bd10:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	3310      	adds	r3, #16
 800bd16:	697a      	ldr	r2, [r7, #20]
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d20d      	bcs.n	800bd38 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	e01d      	b.n	800bd5c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800bd20:	79fb      	ldrb	r3, [r7, #7]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d006      	beq.n	800bd34 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	685a      	ldr	r2, [r3, #4]
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	425b      	negs	r3, r3
 800bd2e:	4413      	add	r3, r2
 800bd30:	617b      	str	r3, [r7, #20]
 800bd32:	e001      	b.n	800bd38 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800bd34:	2301      	movs	r3, #1
 800bd36:	e011      	b.n	800bd5c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	697a      	ldr	r2, [r7, #20]
 800bd3c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	895a      	ldrh	r2, [r3, #10]
 800bd42:	8a7b      	ldrh	r3, [r7, #18]
 800bd44:	4413      	add	r3, r2
 800bd46:	b29a      	uxth	r2, r3
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	891a      	ldrh	r2, [r3, #8]
 800bd50:	8a7b      	ldrh	r3, [r7, #18]
 800bd52:	4413      	add	r3, r2
 800bd54:	b29a      	uxth	r2, r3
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	811a      	strh	r2, [r3, #8]


  return 0;
 800bd5a:	2300      	movs	r3, #0
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3718      	adds	r7, #24
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	08015c3c 	.word	0x08015c3c
 800bd68:	08015da0 	.word	0x08015da0
 800bd6c:	08015c9c 	.word	0x08015c9c

0800bd70 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	6839      	ldr	r1, [r7, #0]
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f7ff ff8e 	bl	800bca0 <pbuf_add_header_impl>
 800bd84:	4603      	mov	r3, r0
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3708      	adds	r7, #8
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
	...

0800bd90 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d106      	bne.n	800bdae <pbuf_remove_header+0x1e>
 800bda0:	4b20      	ldr	r3, [pc, #128]	@ (800be24 <pbuf_remove_header+0x94>)
 800bda2:	f240 224b 	movw	r2, #587	@ 0x24b
 800bda6:	4920      	ldr	r1, [pc, #128]	@ (800be28 <pbuf_remove_header+0x98>)
 800bda8:	4820      	ldr	r0, [pc, #128]	@ (800be2c <pbuf_remove_header+0x9c>)
 800bdaa:	f008 fc55 	bl	8014658 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d003      	beq.n	800bdbc <pbuf_remove_header+0x2c>
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdba:	d301      	bcc.n	800bdc0 <pbuf_remove_header+0x30>
    return 1;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	e02c      	b.n	800be1a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d101      	bne.n	800bdca <pbuf_remove_header+0x3a>
    return 0;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	e027      	b.n	800be1a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	895b      	ldrh	r3, [r3, #10]
 800bdd2:	89fa      	ldrh	r2, [r7, #14]
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d908      	bls.n	800bdea <pbuf_remove_header+0x5a>
 800bdd8:	4b12      	ldr	r3, [pc, #72]	@ (800be24 <pbuf_remove_header+0x94>)
 800bdda:	f240 2255 	movw	r2, #597	@ 0x255
 800bdde:	4914      	ldr	r1, [pc, #80]	@ (800be30 <pbuf_remove_header+0xa0>)
 800bde0:	4812      	ldr	r0, [pc, #72]	@ (800be2c <pbuf_remove_header+0x9c>)
 800bde2:	f008 fc39 	bl	8014658 <iprintf>
 800bde6:	2301      	movs	r3, #1
 800bde8:	e017      	b.n	800be1a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	685a      	ldr	r2, [r3, #4]
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	441a      	add	r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	895a      	ldrh	r2, [r3, #10]
 800be00:	89fb      	ldrh	r3, [r7, #14]
 800be02:	1ad3      	subs	r3, r2, r3
 800be04:	b29a      	uxth	r2, r3
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	891a      	ldrh	r2, [r3, #8]
 800be0e:	89fb      	ldrh	r3, [r7, #14]
 800be10:	1ad3      	subs	r3, r2, r3
 800be12:	b29a      	uxth	r2, r3
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800be18:	2300      	movs	r3, #0
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3710      	adds	r7, #16
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	08015c3c 	.word	0x08015c3c
 800be28:	08015da0 	.word	0x08015da0
 800be2c:	08015c9c 	.word	0x08015c9c
 800be30:	08015dac 	.word	0x08015dac

0800be34 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	460b      	mov	r3, r1
 800be3e:	807b      	strh	r3, [r7, #2]
 800be40:	4613      	mov	r3, r2
 800be42:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800be44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	da08      	bge.n	800be5e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800be4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800be50:	425b      	negs	r3, r3
 800be52:	4619      	mov	r1, r3
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f7ff ff9b 	bl	800bd90 <pbuf_remove_header>
 800be5a:	4603      	mov	r3, r0
 800be5c:	e007      	b.n	800be6e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800be5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800be62:	787a      	ldrb	r2, [r7, #1]
 800be64:	4619      	mov	r1, r3
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f7ff ff1a 	bl	800bca0 <pbuf_add_header_impl>
 800be6c:	4603      	mov	r3, r0
  }
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3708      	adds	r7, #8
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}

0800be76 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800be76:	b580      	push	{r7, lr}
 800be78:	b082      	sub	sp, #8
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
 800be7e:	460b      	mov	r3, r1
 800be80:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800be82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800be86:	2201      	movs	r2, #1
 800be88:	4619      	mov	r1, r3
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f7ff ffd2 	bl	800be34 <pbuf_header_impl>
 800be90:	4603      	mov	r3, r0
}
 800be92:	4618      	mov	r0, r3
 800be94:	3708      	adds	r7, #8
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
	...

0800be9c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b088      	sub	sp, #32
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d10b      	bne.n	800bec2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d106      	bne.n	800bebe <pbuf_free+0x22>
 800beb0:	4b3b      	ldr	r3, [pc, #236]	@ (800bfa0 <pbuf_free+0x104>)
 800beb2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800beb6:	493b      	ldr	r1, [pc, #236]	@ (800bfa4 <pbuf_free+0x108>)
 800beb8:	483b      	ldr	r0, [pc, #236]	@ (800bfa8 <pbuf_free+0x10c>)
 800beba:	f008 fbcd 	bl	8014658 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bebe:	2300      	movs	r3, #0
 800bec0:	e069      	b.n	800bf96 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800bec2:	2300      	movs	r3, #0
 800bec4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800bec6:	e062      	b.n	800bf8e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800bec8:	f008 faa8 	bl	801441c <sys_arch_protect>
 800becc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	7b9b      	ldrb	r3, [r3, #14]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d106      	bne.n	800bee4 <pbuf_free+0x48>
 800bed6:	4b32      	ldr	r3, [pc, #200]	@ (800bfa0 <pbuf_free+0x104>)
 800bed8:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800bedc:	4933      	ldr	r1, [pc, #204]	@ (800bfac <pbuf_free+0x110>)
 800bede:	4832      	ldr	r0, [pc, #200]	@ (800bfa8 <pbuf_free+0x10c>)
 800bee0:	f008 fbba 	bl	8014658 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	7b9b      	ldrb	r3, [r3, #14]
 800bee8:	3b01      	subs	r3, #1
 800beea:	b2da      	uxtb	r2, r3
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	739a      	strb	r2, [r3, #14]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	7b9b      	ldrb	r3, [r3, #14]
 800bef4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800bef6:	69b8      	ldr	r0, [r7, #24]
 800bef8:	f008 fa9e 	bl	8014438 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800befc:	7dfb      	ldrb	r3, [r7, #23]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d143      	bne.n	800bf8a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	7b1b      	ldrb	r3, [r3, #12]
 800bf0c:	f003 030f 	and.w	r3, r3, #15
 800bf10:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	7b5b      	ldrb	r3, [r3, #13]
 800bf16:	f003 0302 	and.w	r3, r3, #2
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d011      	beq.n	800bf42 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	691b      	ldr	r3, [r3, #16]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d106      	bne.n	800bf38 <pbuf_free+0x9c>
 800bf2a:	4b1d      	ldr	r3, [pc, #116]	@ (800bfa0 <pbuf_free+0x104>)
 800bf2c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800bf30:	491f      	ldr	r1, [pc, #124]	@ (800bfb0 <pbuf_free+0x114>)
 800bf32:	481d      	ldr	r0, [pc, #116]	@ (800bfa8 <pbuf_free+0x10c>)
 800bf34:	f008 fb90 	bl	8014658 <iprintf>
        pc->custom_free_function(p);
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	691b      	ldr	r3, [r3, #16]
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	4798      	blx	r3
 800bf40:	e01d      	b.n	800bf7e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bf42:	7bfb      	ldrb	r3, [r7, #15]
 800bf44:	2b02      	cmp	r3, #2
 800bf46:	d104      	bne.n	800bf52 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800bf48:	6879      	ldr	r1, [r7, #4]
 800bf4a:	200c      	movs	r0, #12
 800bf4c:	f7ff f902 	bl	800b154 <memp_free>
 800bf50:	e015      	b.n	800bf7e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bf52:	7bfb      	ldrb	r3, [r7, #15]
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d104      	bne.n	800bf62 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800bf58:	6879      	ldr	r1, [r7, #4]
 800bf5a:	200b      	movs	r0, #11
 800bf5c:	f7ff f8fa 	bl	800b154 <memp_free>
 800bf60:	e00d      	b.n	800bf7e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bf62:	7bfb      	ldrb	r3, [r7, #15]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d103      	bne.n	800bf70 <pbuf_free+0xd4>
          mem_free(p);
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f7fe fd3f 	bl	800a9ec <mem_free>
 800bf6e:	e006      	b.n	800bf7e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bf70:	4b0b      	ldr	r3, [pc, #44]	@ (800bfa0 <pbuf_free+0x104>)
 800bf72:	f240 320f 	movw	r2, #783	@ 0x30f
 800bf76:	490f      	ldr	r1, [pc, #60]	@ (800bfb4 <pbuf_free+0x118>)
 800bf78:	480b      	ldr	r0, [pc, #44]	@ (800bfa8 <pbuf_free+0x10c>)
 800bf7a:	f008 fb6d 	bl	8014658 <iprintf>
        }
      }
      count++;
 800bf7e:	7ffb      	ldrb	r3, [r7, #31]
 800bf80:	3301      	adds	r3, #1
 800bf82:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	607b      	str	r3, [r7, #4]
 800bf88:	e001      	b.n	800bf8e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d199      	bne.n	800bec8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bf94:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3720      	adds	r7, #32
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	08015c3c 	.word	0x08015c3c
 800bfa4:	08015da0 	.word	0x08015da0
 800bfa8:	08015c9c 	.word	0x08015c9c
 800bfac:	08015dcc 	.word	0x08015dcc
 800bfb0:	08015de4 	.word	0x08015de4
 800bfb4:	08015e08 	.word	0x08015e08

0800bfb8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b085      	sub	sp, #20
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bfc4:	e005      	b.n	800bfd2 <pbuf_clen+0x1a>
    ++len;
 800bfc6:	89fb      	ldrh	r3, [r7, #14]
 800bfc8:	3301      	adds	r3, #1
 800bfca:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1f6      	bne.n	800bfc6 <pbuf_clen+0xe>
  }
  return len;
 800bfd8:	89fb      	ldrh	r3, [r7, #14]
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3714      	adds	r7, #20
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe4:	4770      	bx	lr
	...

0800bfe8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b084      	sub	sp, #16
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d016      	beq.n	800c024 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bff6:	f008 fa11 	bl	801441c <sys_arch_protect>
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	7b9b      	ldrb	r3, [r3, #14]
 800c000:	3301      	adds	r3, #1
 800c002:	b2da      	uxtb	r2, r3
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	739a      	strb	r2, [r3, #14]
 800c008:	68f8      	ldr	r0, [r7, #12]
 800c00a:	f008 fa15 	bl	8014438 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	7b9b      	ldrb	r3, [r3, #14]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d106      	bne.n	800c024 <pbuf_ref+0x3c>
 800c016:	4b05      	ldr	r3, [pc, #20]	@ (800c02c <pbuf_ref+0x44>)
 800c018:	f240 3242 	movw	r2, #834	@ 0x342
 800c01c:	4904      	ldr	r1, [pc, #16]	@ (800c030 <pbuf_ref+0x48>)
 800c01e:	4805      	ldr	r0, [pc, #20]	@ (800c034 <pbuf_ref+0x4c>)
 800c020:	f008 fb1a 	bl	8014658 <iprintf>
  }
}
 800c024:	bf00      	nop
 800c026:	3710      	adds	r7, #16
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	08015c3c 	.word	0x08015c3c
 800c030:	08015e1c 	.word	0x08015e1c
 800c034:	08015c9c 	.word	0x08015c9c

0800c038 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d002      	beq.n	800c04e <pbuf_cat+0x16>
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d107      	bne.n	800c05e <pbuf_cat+0x26>
 800c04e:	4b20      	ldr	r3, [pc, #128]	@ (800c0d0 <pbuf_cat+0x98>)
 800c050:	f240 3259 	movw	r2, #857	@ 0x359
 800c054:	491f      	ldr	r1, [pc, #124]	@ (800c0d4 <pbuf_cat+0x9c>)
 800c056:	4820      	ldr	r0, [pc, #128]	@ (800c0d8 <pbuf_cat+0xa0>)
 800c058:	f008 fafe 	bl	8014658 <iprintf>
 800c05c:	e034      	b.n	800c0c8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	60fb      	str	r3, [r7, #12]
 800c062:	e00a      	b.n	800c07a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	891a      	ldrh	r2, [r3, #8]
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	891b      	ldrh	r3, [r3, #8]
 800c06c:	4413      	add	r3, r2
 800c06e:	b29a      	uxth	r2, r3
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	60fb      	str	r3, [r7, #12]
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d1f0      	bne.n	800c064 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	891a      	ldrh	r2, [r3, #8]
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	895b      	ldrh	r3, [r3, #10]
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d006      	beq.n	800c09c <pbuf_cat+0x64>
 800c08e:	4b10      	ldr	r3, [pc, #64]	@ (800c0d0 <pbuf_cat+0x98>)
 800c090:	f240 3262 	movw	r2, #866	@ 0x362
 800c094:	4911      	ldr	r1, [pc, #68]	@ (800c0dc <pbuf_cat+0xa4>)
 800c096:	4810      	ldr	r0, [pc, #64]	@ (800c0d8 <pbuf_cat+0xa0>)
 800c098:	f008 fade 	bl	8014658 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d006      	beq.n	800c0b2 <pbuf_cat+0x7a>
 800c0a4:	4b0a      	ldr	r3, [pc, #40]	@ (800c0d0 <pbuf_cat+0x98>)
 800c0a6:	f240 3263 	movw	r2, #867	@ 0x363
 800c0aa:	490d      	ldr	r1, [pc, #52]	@ (800c0e0 <pbuf_cat+0xa8>)
 800c0ac:	480a      	ldr	r0, [pc, #40]	@ (800c0d8 <pbuf_cat+0xa0>)
 800c0ae:	f008 fad3 	bl	8014658 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	891a      	ldrh	r2, [r3, #8]
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	891b      	ldrh	r3, [r3, #8]
 800c0ba:	4413      	add	r3, r2
 800c0bc:	b29a      	uxth	r2, r3
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	683a      	ldr	r2, [r7, #0]
 800c0c6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c0c8:	3710      	adds	r7, #16
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	08015c3c 	.word	0x08015c3c
 800c0d4:	08015e30 	.word	0x08015e30
 800c0d8:	08015c9c 	.word	0x08015c9c
 800c0dc:	08015e68 	.word	0x08015e68
 800c0e0:	08015e98 	.word	0x08015e98

0800c0e4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b086      	sub	sp, #24
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	617b      	str	r3, [r7, #20]
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d008      	beq.n	800c10e <pbuf_copy+0x2a>
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d005      	beq.n	800c10e <pbuf_copy+0x2a>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	891a      	ldrh	r2, [r3, #8]
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	891b      	ldrh	r3, [r3, #8]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d209      	bcs.n	800c122 <pbuf_copy+0x3e>
 800c10e:	4b57      	ldr	r3, [pc, #348]	@ (800c26c <pbuf_copy+0x188>)
 800c110:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800c114:	4956      	ldr	r1, [pc, #344]	@ (800c270 <pbuf_copy+0x18c>)
 800c116:	4857      	ldr	r0, [pc, #348]	@ (800c274 <pbuf_copy+0x190>)
 800c118:	f008 fa9e 	bl	8014658 <iprintf>
 800c11c:	f06f 030f 	mvn.w	r3, #15
 800c120:	e09f      	b.n	800c262 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	895b      	ldrh	r3, [r3, #10]
 800c126:	461a      	mov	r2, r3
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	1ad2      	subs	r2, r2, r3
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	895b      	ldrh	r3, [r3, #10]
 800c130:	4619      	mov	r1, r3
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	1acb      	subs	r3, r1, r3
 800c136:	429a      	cmp	r2, r3
 800c138:	d306      	bcc.n	800c148 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	895b      	ldrh	r3, [r3, #10]
 800c13e:	461a      	mov	r2, r3
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	1ad3      	subs	r3, r2, r3
 800c144:	60fb      	str	r3, [r7, #12]
 800c146:	e005      	b.n	800c154 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	895b      	ldrh	r3, [r3, #10]
 800c14c:	461a      	mov	r2, r3
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	1ad3      	subs	r3, r2, r3
 800c152:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	685a      	ldr	r2, [r3, #4]
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	18d0      	adds	r0, r2, r3
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	685a      	ldr	r2, [r3, #4]
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	4413      	add	r3, r2
 800c164:	68fa      	ldr	r2, [r7, #12]
 800c166:	4619      	mov	r1, r3
 800c168:	f008 fc3b 	bl	80149e2 <memcpy>
    offset_to += len;
 800c16c:	697a      	ldr	r2, [r7, #20]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	4413      	add	r3, r2
 800c172:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c174:	693a      	ldr	r2, [r7, #16]
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	4413      	add	r3, r2
 800c17a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	895b      	ldrh	r3, [r3, #10]
 800c180:	461a      	mov	r2, r3
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	4293      	cmp	r3, r2
 800c186:	d906      	bls.n	800c196 <pbuf_copy+0xb2>
 800c188:	4b38      	ldr	r3, [pc, #224]	@ (800c26c <pbuf_copy+0x188>)
 800c18a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800c18e:	493a      	ldr	r1, [pc, #232]	@ (800c278 <pbuf_copy+0x194>)
 800c190:	4838      	ldr	r0, [pc, #224]	@ (800c274 <pbuf_copy+0x190>)
 800c192:	f008 fa61 	bl	8014658 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	895b      	ldrh	r3, [r3, #10]
 800c19a:	461a      	mov	r2, r3
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d906      	bls.n	800c1b0 <pbuf_copy+0xcc>
 800c1a2:	4b32      	ldr	r3, [pc, #200]	@ (800c26c <pbuf_copy+0x188>)
 800c1a4:	f240 32da 	movw	r2, #986	@ 0x3da
 800c1a8:	4934      	ldr	r1, [pc, #208]	@ (800c27c <pbuf_copy+0x198>)
 800c1aa:	4832      	ldr	r0, [pc, #200]	@ (800c274 <pbuf_copy+0x190>)
 800c1ac:	f008 fa54 	bl	8014658 <iprintf>
    if (offset_from >= p_from->len) {
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	895b      	ldrh	r3, [r3, #10]
 800c1b4:	461a      	mov	r2, r3
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d304      	bcc.n	800c1c6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	895b      	ldrh	r3, [r3, #10]
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d114      	bne.n	800c1fc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d10c      	bne.n	800c1fc <pbuf_copy+0x118>
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d009      	beq.n	800c1fc <pbuf_copy+0x118>
 800c1e8:	4b20      	ldr	r3, [pc, #128]	@ (800c26c <pbuf_copy+0x188>)
 800c1ea:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800c1ee:	4924      	ldr	r1, [pc, #144]	@ (800c280 <pbuf_copy+0x19c>)
 800c1f0:	4820      	ldr	r0, [pc, #128]	@ (800c274 <pbuf_copy+0x190>)
 800c1f2:	f008 fa31 	bl	8014658 <iprintf>
 800c1f6:	f06f 030f 	mvn.w	r3, #15
 800c1fa:	e032      	b.n	800c262 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d013      	beq.n	800c22a <pbuf_copy+0x146>
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	895a      	ldrh	r2, [r3, #10]
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	891b      	ldrh	r3, [r3, #8]
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d10d      	bne.n	800c22a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d009      	beq.n	800c22a <pbuf_copy+0x146>
 800c216:	4b15      	ldr	r3, [pc, #84]	@ (800c26c <pbuf_copy+0x188>)
 800c218:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800c21c:	4919      	ldr	r1, [pc, #100]	@ (800c284 <pbuf_copy+0x1a0>)
 800c21e:	4815      	ldr	r0, [pc, #84]	@ (800c274 <pbuf_copy+0x190>)
 800c220:	f008 fa1a 	bl	8014658 <iprintf>
 800c224:	f06f 0305 	mvn.w	r3, #5
 800c228:	e01b      	b.n	800c262 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d013      	beq.n	800c258 <pbuf_copy+0x174>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	895a      	ldrh	r2, [r3, #10]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	891b      	ldrh	r3, [r3, #8]
 800c238:	429a      	cmp	r2, r3
 800c23a:	d10d      	bne.n	800c258 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d009      	beq.n	800c258 <pbuf_copy+0x174>
 800c244:	4b09      	ldr	r3, [pc, #36]	@ (800c26c <pbuf_copy+0x188>)
 800c246:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800c24a:	490e      	ldr	r1, [pc, #56]	@ (800c284 <pbuf_copy+0x1a0>)
 800c24c:	4809      	ldr	r0, [pc, #36]	@ (800c274 <pbuf_copy+0x190>)
 800c24e:	f008 fa03 	bl	8014658 <iprintf>
 800c252:	f06f 0305 	mvn.w	r3, #5
 800c256:	e004      	b.n	800c262 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	f47f af61 	bne.w	800c122 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c260:	2300      	movs	r3, #0
}
 800c262:	4618      	mov	r0, r3
 800c264:	3718      	adds	r7, #24
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
 800c26a:	bf00      	nop
 800c26c:	08015c3c 	.word	0x08015c3c
 800c270:	08015ee4 	.word	0x08015ee4
 800c274:	08015c9c 	.word	0x08015c9c
 800c278:	08015f14 	.word	0x08015f14
 800c27c:	08015f2c 	.word	0x08015f2c
 800c280:	08015f48 	.word	0x08015f48
 800c284:	08015f58 	.word	0x08015f58

0800c288 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b088      	sub	sp, #32
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	4611      	mov	r1, r2
 800c294:	461a      	mov	r2, r3
 800c296:	460b      	mov	r3, r1
 800c298:	80fb      	strh	r3, [r7, #6]
 800c29a:	4613      	mov	r3, r2
 800c29c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d108      	bne.n	800c2be <pbuf_copy_partial+0x36>
 800c2ac:	4b2b      	ldr	r3, [pc, #172]	@ (800c35c <pbuf_copy_partial+0xd4>)
 800c2ae:	f240 420a 	movw	r2, #1034	@ 0x40a
 800c2b2:	492b      	ldr	r1, [pc, #172]	@ (800c360 <pbuf_copy_partial+0xd8>)
 800c2b4:	482b      	ldr	r0, [pc, #172]	@ (800c364 <pbuf_copy_partial+0xdc>)
 800c2b6:	f008 f9cf 	bl	8014658 <iprintf>
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	e04a      	b.n	800c354 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d108      	bne.n	800c2d6 <pbuf_copy_partial+0x4e>
 800c2c4:	4b25      	ldr	r3, [pc, #148]	@ (800c35c <pbuf_copy_partial+0xd4>)
 800c2c6:	f240 420b 	movw	r2, #1035	@ 0x40b
 800c2ca:	4927      	ldr	r1, [pc, #156]	@ (800c368 <pbuf_copy_partial+0xe0>)
 800c2cc:	4825      	ldr	r0, [pc, #148]	@ (800c364 <pbuf_copy_partial+0xdc>)
 800c2ce:	f008 f9c3 	bl	8014658 <iprintf>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	e03e      	b.n	800c354 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	61fb      	str	r3, [r7, #28]
 800c2da:	e034      	b.n	800c346 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c2dc:	88bb      	ldrh	r3, [r7, #4]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d00a      	beq.n	800c2f8 <pbuf_copy_partial+0x70>
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	895b      	ldrh	r3, [r3, #10]
 800c2e6:	88ba      	ldrh	r2, [r7, #4]
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d305      	bcc.n	800c2f8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	895b      	ldrh	r3, [r3, #10]
 800c2f0:	88ba      	ldrh	r2, [r7, #4]
 800c2f2:	1ad3      	subs	r3, r2, r3
 800c2f4:	80bb      	strh	r3, [r7, #4]
 800c2f6:	e023      	b.n	800c340 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c2f8:	69fb      	ldr	r3, [r7, #28]
 800c2fa:	895a      	ldrh	r2, [r3, #10]
 800c2fc:	88bb      	ldrh	r3, [r7, #4]
 800c2fe:	1ad3      	subs	r3, r2, r3
 800c300:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c302:	8b3a      	ldrh	r2, [r7, #24]
 800c304:	88fb      	ldrh	r3, [r7, #6]
 800c306:	429a      	cmp	r2, r3
 800c308:	d901      	bls.n	800c30e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c30a:	88fb      	ldrh	r3, [r7, #6]
 800c30c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c30e:	8b7b      	ldrh	r3, [r7, #26]
 800c310:	68ba      	ldr	r2, [r7, #8]
 800c312:	18d0      	adds	r0, r2, r3
 800c314:	69fb      	ldr	r3, [r7, #28]
 800c316:	685a      	ldr	r2, [r3, #4]
 800c318:	88bb      	ldrh	r3, [r7, #4]
 800c31a:	4413      	add	r3, r2
 800c31c:	8b3a      	ldrh	r2, [r7, #24]
 800c31e:	4619      	mov	r1, r3
 800c320:	f008 fb5f 	bl	80149e2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c324:	8afa      	ldrh	r2, [r7, #22]
 800c326:	8b3b      	ldrh	r3, [r7, #24]
 800c328:	4413      	add	r3, r2
 800c32a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c32c:	8b7a      	ldrh	r2, [r7, #26]
 800c32e:	8b3b      	ldrh	r3, [r7, #24]
 800c330:	4413      	add	r3, r2
 800c332:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c334:	88fa      	ldrh	r2, [r7, #6]
 800c336:	8b3b      	ldrh	r3, [r7, #24]
 800c338:	1ad3      	subs	r3, r2, r3
 800c33a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c33c:	2300      	movs	r3, #0
 800c33e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c340:	69fb      	ldr	r3, [r7, #28]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	61fb      	str	r3, [r7, #28]
 800c346:	88fb      	ldrh	r3, [r7, #6]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d002      	beq.n	800c352 <pbuf_copy_partial+0xca>
 800c34c:	69fb      	ldr	r3, [r7, #28]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1c4      	bne.n	800c2dc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c352:	8afb      	ldrh	r3, [r7, #22]
}
 800c354:	4618      	mov	r0, r3
 800c356:	3720      	adds	r7, #32
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}
 800c35c:	08015c3c 	.word	0x08015c3c
 800c360:	08015f84 	.word	0x08015f84
 800c364:	08015c9c 	.word	0x08015c9c
 800c368:	08015fa4 	.word	0x08015fa4

0800c36c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	4603      	mov	r3, r0
 800c374:	603a      	str	r2, [r7, #0]
 800c376:	71fb      	strb	r3, [r7, #7]
 800c378:	460b      	mov	r3, r1
 800c37a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	8919      	ldrh	r1, [r3, #8]
 800c380:	88ba      	ldrh	r2, [r7, #4]
 800c382:	79fb      	ldrb	r3, [r7, #7]
 800c384:	4618      	mov	r0, r3
 800c386:	f7ff faa5 	bl	800b8d4 <pbuf_alloc>
 800c38a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d101      	bne.n	800c396 <pbuf_clone+0x2a>
    return NULL;
 800c392:	2300      	movs	r3, #0
 800c394:	e011      	b.n	800c3ba <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c396:	6839      	ldr	r1, [r7, #0]
 800c398:	68f8      	ldr	r0, [r7, #12]
 800c39a:	f7ff fea3 	bl	800c0e4 <pbuf_copy>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c3a2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d006      	beq.n	800c3b8 <pbuf_clone+0x4c>
 800c3aa:	4b06      	ldr	r3, [pc, #24]	@ (800c3c4 <pbuf_clone+0x58>)
 800c3ac:	f240 5224 	movw	r2, #1316	@ 0x524
 800c3b0:	4905      	ldr	r1, [pc, #20]	@ (800c3c8 <pbuf_clone+0x5c>)
 800c3b2:	4806      	ldr	r0, [pc, #24]	@ (800c3cc <pbuf_clone+0x60>)
 800c3b4:	f008 f950 	bl	8014658 <iprintf>
  return q;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3710      	adds	r7, #16
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	bf00      	nop
 800c3c4:	08015c3c 	.word	0x08015c3c
 800c3c8:	080160b0 	.word	0x080160b0
 800c3cc:	08015c9c 	.word	0x08015c9c

0800c3d0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c3d4:	f008 f840 	bl	8014458 <rand>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	b29b      	uxth	r3, r3
 800c3dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c3e6:	b29a      	uxth	r2, r3
 800c3e8:	4b01      	ldr	r3, [pc, #4]	@ (800c3f0 <tcp_init+0x20>)
 800c3ea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c3ec:	bf00      	nop
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	20000024 	.word	0x20000024

0800c3f4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b082      	sub	sp, #8
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	7d1b      	ldrb	r3, [r3, #20]
 800c400:	2b01      	cmp	r3, #1
 800c402:	d105      	bne.n	800c410 <tcp_free+0x1c>
 800c404:	4b06      	ldr	r3, [pc, #24]	@ (800c420 <tcp_free+0x2c>)
 800c406:	22d4      	movs	r2, #212	@ 0xd4
 800c408:	4906      	ldr	r1, [pc, #24]	@ (800c424 <tcp_free+0x30>)
 800c40a:	4807      	ldr	r0, [pc, #28]	@ (800c428 <tcp_free+0x34>)
 800c40c:	f008 f924 	bl	8014658 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c410:	6879      	ldr	r1, [r7, #4]
 800c412:	2001      	movs	r0, #1
 800c414:	f7fe fe9e 	bl	800b154 <memp_free>
}
 800c418:	bf00      	nop
 800c41a:	3708      	adds	r7, #8
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	0801613c 	.word	0x0801613c
 800c424:	0801616c 	.word	0x0801616c
 800c428:	08016180 	.word	0x08016180

0800c42c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	7d1b      	ldrb	r3, [r3, #20]
 800c438:	2b01      	cmp	r3, #1
 800c43a:	d105      	bne.n	800c448 <tcp_free_listen+0x1c>
 800c43c:	4b06      	ldr	r3, [pc, #24]	@ (800c458 <tcp_free_listen+0x2c>)
 800c43e:	22df      	movs	r2, #223	@ 0xdf
 800c440:	4906      	ldr	r1, [pc, #24]	@ (800c45c <tcp_free_listen+0x30>)
 800c442:	4807      	ldr	r0, [pc, #28]	@ (800c460 <tcp_free_listen+0x34>)
 800c444:	f008 f908 	bl	8014658 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c448:	6879      	ldr	r1, [r7, #4]
 800c44a:	2002      	movs	r0, #2
 800c44c:	f7fe fe82 	bl	800b154 <memp_free>
}
 800c450:	bf00      	nop
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	0801613c 	.word	0x0801613c
 800c45c:	080161a8 	.word	0x080161a8
 800c460:	08016180 	.word	0x08016180

0800c464 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c468:	f000 fea4 	bl	800d1b4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c46c:	4b07      	ldr	r3, [pc, #28]	@ (800c48c <tcp_tmr+0x28>)
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	3301      	adds	r3, #1
 800c472:	b2da      	uxtb	r2, r3
 800c474:	4b05      	ldr	r3, [pc, #20]	@ (800c48c <tcp_tmr+0x28>)
 800c476:	701a      	strb	r2, [r3, #0]
 800c478:	4b04      	ldr	r3, [pc, #16]	@ (800c48c <tcp_tmr+0x28>)
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	f003 0301 	and.w	r3, r3, #1
 800c480:	2b00      	cmp	r3, #0
 800c482:	d001      	beq.n	800c488 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c484:	f000 fb54 	bl	800cb30 <tcp_slowtmr>
  }
}
 800c488:	bf00      	nop
 800c48a:	bd80      	pop	{r7, pc}
 800c48c:	2000d3bd 	.word	0x2000d3bd

0800c490 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b084      	sub	sp, #16
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d105      	bne.n	800c4ac <tcp_remove_listener+0x1c>
 800c4a0:	4b0d      	ldr	r3, [pc, #52]	@ (800c4d8 <tcp_remove_listener+0x48>)
 800c4a2:	22ff      	movs	r2, #255	@ 0xff
 800c4a4:	490d      	ldr	r1, [pc, #52]	@ (800c4dc <tcp_remove_listener+0x4c>)
 800c4a6:	480e      	ldr	r0, [pc, #56]	@ (800c4e0 <tcp_remove_listener+0x50>)
 800c4a8:	f008 f8d6 	bl	8014658 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	60fb      	str	r3, [r7, #12]
 800c4b0:	e00a      	b.n	800c4c8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c4b6:	683a      	ldr	r2, [r7, #0]
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d102      	bne.n	800c4c2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	68db      	ldr	r3, [r3, #12]
 800c4c6:	60fb      	str	r3, [r7, #12]
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d1f1      	bne.n	800c4b2 <tcp_remove_listener+0x22>
    }
  }
}
 800c4ce:	bf00      	nop
 800c4d0:	bf00      	nop
 800c4d2:	3710      	adds	r7, #16
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	0801613c 	.word	0x0801613c
 800c4dc:	080161c4 	.word	0x080161c4
 800c4e0:	08016180 	.word	0x08016180

0800c4e4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b084      	sub	sp, #16
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d106      	bne.n	800c500 <tcp_listen_closed+0x1c>
 800c4f2:	4b14      	ldr	r3, [pc, #80]	@ (800c544 <tcp_listen_closed+0x60>)
 800c4f4:	f240 1211 	movw	r2, #273	@ 0x111
 800c4f8:	4913      	ldr	r1, [pc, #76]	@ (800c548 <tcp_listen_closed+0x64>)
 800c4fa:	4814      	ldr	r0, [pc, #80]	@ (800c54c <tcp_listen_closed+0x68>)
 800c4fc:	f008 f8ac 	bl	8014658 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	7d1b      	ldrb	r3, [r3, #20]
 800c504:	2b01      	cmp	r3, #1
 800c506:	d006      	beq.n	800c516 <tcp_listen_closed+0x32>
 800c508:	4b0e      	ldr	r3, [pc, #56]	@ (800c544 <tcp_listen_closed+0x60>)
 800c50a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800c50e:	4910      	ldr	r1, [pc, #64]	@ (800c550 <tcp_listen_closed+0x6c>)
 800c510:	480e      	ldr	r0, [pc, #56]	@ (800c54c <tcp_listen_closed+0x68>)
 800c512:	f008 f8a1 	bl	8014658 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c516:	2301      	movs	r3, #1
 800c518:	60fb      	str	r3, [r7, #12]
 800c51a:	e00b      	b.n	800c534 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c51c:	4a0d      	ldr	r2, [pc, #52]	@ (800c554 <tcp_listen_closed+0x70>)
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	6879      	ldr	r1, [r7, #4]
 800c528:	4618      	mov	r0, r3
 800c52a:	f7ff ffb1 	bl	800c490 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	3301      	adds	r3, #1
 800c532:	60fb      	str	r3, [r7, #12]
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2b03      	cmp	r3, #3
 800c538:	d9f0      	bls.n	800c51c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c53a:	bf00      	nop
 800c53c:	bf00      	nop
 800c53e:	3710      	adds	r7, #16
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}
 800c544:	0801613c 	.word	0x0801613c
 800c548:	080161ec 	.word	0x080161ec
 800c54c:	08016180 	.word	0x08016180
 800c550:	080161f8 	.word	0x080161f8
 800c554:	080181a4 	.word	0x080181a4

0800c558 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c558:	b5b0      	push	{r4, r5, r7, lr}
 800c55a:	b088      	sub	sp, #32
 800c55c:	af04      	add	r7, sp, #16
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	460b      	mov	r3, r1
 800c562:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d106      	bne.n	800c578 <tcp_close_shutdown+0x20>
 800c56a:	4b63      	ldr	r3, [pc, #396]	@ (800c6f8 <tcp_close_shutdown+0x1a0>)
 800c56c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800c570:	4962      	ldr	r1, [pc, #392]	@ (800c6fc <tcp_close_shutdown+0x1a4>)
 800c572:	4863      	ldr	r0, [pc, #396]	@ (800c700 <tcp_close_shutdown+0x1a8>)
 800c574:	f008 f870 	bl	8014658 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c578:	78fb      	ldrb	r3, [r7, #3]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d066      	beq.n	800c64c <tcp_close_shutdown+0xf4>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	7d1b      	ldrb	r3, [r3, #20]
 800c582:	2b04      	cmp	r3, #4
 800c584:	d003      	beq.n	800c58e <tcp_close_shutdown+0x36>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	7d1b      	ldrb	r3, [r3, #20]
 800c58a:	2b07      	cmp	r3, #7
 800c58c:	d15e      	bne.n	800c64c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c592:	2b00      	cmp	r3, #0
 800c594:	d104      	bne.n	800c5a0 <tcp_close_shutdown+0x48>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c59a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c59e:	d055      	beq.n	800c64c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	8b5b      	ldrh	r3, [r3, #26]
 800c5a4:	f003 0310 	and.w	r3, r3, #16
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d106      	bne.n	800c5ba <tcp_close_shutdown+0x62>
 800c5ac:	4b52      	ldr	r3, [pc, #328]	@ (800c6f8 <tcp_close_shutdown+0x1a0>)
 800c5ae:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800c5b2:	4954      	ldr	r1, [pc, #336]	@ (800c704 <tcp_close_shutdown+0x1ac>)
 800c5b4:	4852      	ldr	r0, [pc, #328]	@ (800c700 <tcp_close_shutdown+0x1a8>)
 800c5b6:	f008 f84f 	bl	8014658 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c5c2:	687d      	ldr	r5, [r7, #4]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	3304      	adds	r3, #4
 800c5c8:	687a      	ldr	r2, [r7, #4]
 800c5ca:	8ad2      	ldrh	r2, [r2, #22]
 800c5cc:	6879      	ldr	r1, [r7, #4]
 800c5ce:	8b09      	ldrh	r1, [r1, #24]
 800c5d0:	9102      	str	r1, [sp, #8]
 800c5d2:	9201      	str	r2, [sp, #4]
 800c5d4:	9300      	str	r3, [sp, #0]
 800c5d6:	462b      	mov	r3, r5
 800c5d8:	4622      	mov	r2, r4
 800c5da:	4601      	mov	r1, r0
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f004 fe8d 	bl	80112fc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f001 f8c8 	bl	800d778 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c5e8:	4b47      	ldr	r3, [pc, #284]	@ (800c708 <tcp_close_shutdown+0x1b0>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	687a      	ldr	r2, [r7, #4]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d105      	bne.n	800c5fe <tcp_close_shutdown+0xa6>
 800c5f2:	4b45      	ldr	r3, [pc, #276]	@ (800c708 <tcp_close_shutdown+0x1b0>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	68db      	ldr	r3, [r3, #12]
 800c5f8:	4a43      	ldr	r2, [pc, #268]	@ (800c708 <tcp_close_shutdown+0x1b0>)
 800c5fa:	6013      	str	r3, [r2, #0]
 800c5fc:	e013      	b.n	800c626 <tcp_close_shutdown+0xce>
 800c5fe:	4b42      	ldr	r3, [pc, #264]	@ (800c708 <tcp_close_shutdown+0x1b0>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	60fb      	str	r3, [r7, #12]
 800c604:	e00c      	b.n	800c620 <tcp_close_shutdown+0xc8>
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	68db      	ldr	r3, [r3, #12]
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d104      	bne.n	800c61a <tcp_close_shutdown+0xc2>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	68da      	ldr	r2, [r3, #12]
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	60da      	str	r2, [r3, #12]
 800c618:	e005      	b.n	800c626 <tcp_close_shutdown+0xce>
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	60fb      	str	r3, [r7, #12]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d1ef      	bne.n	800c606 <tcp_close_shutdown+0xae>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2200      	movs	r2, #0
 800c62a:	60da      	str	r2, [r3, #12]
 800c62c:	4b37      	ldr	r3, [pc, #220]	@ (800c70c <tcp_close_shutdown+0x1b4>)
 800c62e:	2201      	movs	r2, #1
 800c630:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c632:	4b37      	ldr	r3, [pc, #220]	@ (800c710 <tcp_close_shutdown+0x1b8>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	687a      	ldr	r2, [r7, #4]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d102      	bne.n	800c642 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c63c:	f003 fd5c 	bl	80100f8 <tcp_trigger_input_pcb_close>
 800c640:	e002      	b.n	800c648 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f7ff fed6 	bl	800c3f4 <tcp_free>
      }
      return ERR_OK;
 800c648:	2300      	movs	r3, #0
 800c64a:	e050      	b.n	800c6ee <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	7d1b      	ldrb	r3, [r3, #20]
 800c650:	2b02      	cmp	r3, #2
 800c652:	d03b      	beq.n	800c6cc <tcp_close_shutdown+0x174>
 800c654:	2b02      	cmp	r3, #2
 800c656:	dc44      	bgt.n	800c6e2 <tcp_close_shutdown+0x18a>
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d002      	beq.n	800c662 <tcp_close_shutdown+0x10a>
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d02a      	beq.n	800c6b6 <tcp_close_shutdown+0x15e>
 800c660:	e03f      	b.n	800c6e2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	8adb      	ldrh	r3, [r3, #22]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d021      	beq.n	800c6ae <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c66a:	4b2a      	ldr	r3, [pc, #168]	@ (800c714 <tcp_close_shutdown+0x1bc>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	429a      	cmp	r2, r3
 800c672:	d105      	bne.n	800c680 <tcp_close_shutdown+0x128>
 800c674:	4b27      	ldr	r3, [pc, #156]	@ (800c714 <tcp_close_shutdown+0x1bc>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	68db      	ldr	r3, [r3, #12]
 800c67a:	4a26      	ldr	r2, [pc, #152]	@ (800c714 <tcp_close_shutdown+0x1bc>)
 800c67c:	6013      	str	r3, [r2, #0]
 800c67e:	e013      	b.n	800c6a8 <tcp_close_shutdown+0x150>
 800c680:	4b24      	ldr	r3, [pc, #144]	@ (800c714 <tcp_close_shutdown+0x1bc>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	60bb      	str	r3, [r7, #8]
 800c686:	e00c      	b.n	800c6a2 <tcp_close_shutdown+0x14a>
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	68db      	ldr	r3, [r3, #12]
 800c68c:	687a      	ldr	r2, [r7, #4]
 800c68e:	429a      	cmp	r2, r3
 800c690:	d104      	bne.n	800c69c <tcp_close_shutdown+0x144>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	68da      	ldr	r2, [r3, #12]
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	60da      	str	r2, [r3, #12]
 800c69a:	e005      	b.n	800c6a8 <tcp_close_shutdown+0x150>
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	68db      	ldr	r3, [r3, #12]
 800c6a0:	60bb      	str	r3, [r7, #8]
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d1ef      	bne.n	800c688 <tcp_close_shutdown+0x130>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f7ff fea0 	bl	800c3f4 <tcp_free>
      break;
 800c6b4:	e01a      	b.n	800c6ec <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f7ff ff14 	bl	800c4e4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c6bc:	6879      	ldr	r1, [r7, #4]
 800c6be:	4816      	ldr	r0, [pc, #88]	@ (800c718 <tcp_close_shutdown+0x1c0>)
 800c6c0:	f001 f8aa 	bl	800d818 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f7ff feb1 	bl	800c42c <tcp_free_listen>
      break;
 800c6ca:	e00f      	b.n	800c6ec <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c6cc:	6879      	ldr	r1, [r7, #4]
 800c6ce:	480e      	ldr	r0, [pc, #56]	@ (800c708 <tcp_close_shutdown+0x1b0>)
 800c6d0:	f001 f8a2 	bl	800d818 <tcp_pcb_remove>
 800c6d4:	4b0d      	ldr	r3, [pc, #52]	@ (800c70c <tcp_close_shutdown+0x1b4>)
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f7ff fe8a 	bl	800c3f4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c6e0:	e004      	b.n	800c6ec <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 f81a 	bl	800c71c <tcp_close_shutdown_fin>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	e000      	b.n	800c6ee <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c6ec:	2300      	movs	r3, #0
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3710      	adds	r7, #16
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bdb0      	pop	{r4, r5, r7, pc}
 800c6f6:	bf00      	nop
 800c6f8:	0801613c 	.word	0x0801613c
 800c6fc:	08016210 	.word	0x08016210
 800c700:	08016180 	.word	0x08016180
 800c704:	08016230 	.word	0x08016230
 800c708:	2000d3b4 	.word	0x2000d3b4
 800c70c:	2000d3bc 	.word	0x2000d3bc
 800c710:	2000d3f4 	.word	0x2000d3f4
 800c714:	2000d3ac 	.word	0x2000d3ac
 800c718:	2000d3b0 	.word	0x2000d3b0

0800c71c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d106      	bne.n	800c738 <tcp_close_shutdown_fin+0x1c>
 800c72a:	4b2e      	ldr	r3, [pc, #184]	@ (800c7e4 <tcp_close_shutdown_fin+0xc8>)
 800c72c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800c730:	492d      	ldr	r1, [pc, #180]	@ (800c7e8 <tcp_close_shutdown_fin+0xcc>)
 800c732:	482e      	ldr	r0, [pc, #184]	@ (800c7ec <tcp_close_shutdown_fin+0xd0>)
 800c734:	f007 ff90 	bl	8014658 <iprintf>

  switch (pcb->state) {
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	7d1b      	ldrb	r3, [r3, #20]
 800c73c:	2b07      	cmp	r3, #7
 800c73e:	d020      	beq.n	800c782 <tcp_close_shutdown_fin+0x66>
 800c740:	2b07      	cmp	r3, #7
 800c742:	dc2b      	bgt.n	800c79c <tcp_close_shutdown_fin+0x80>
 800c744:	2b03      	cmp	r3, #3
 800c746:	d002      	beq.n	800c74e <tcp_close_shutdown_fin+0x32>
 800c748:	2b04      	cmp	r3, #4
 800c74a:	d00d      	beq.n	800c768 <tcp_close_shutdown_fin+0x4c>
 800c74c:	e026      	b.n	800c79c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f003 fee2 	bl	8010518 <tcp_send_fin>
 800c754:	4603      	mov	r3, r0
 800c756:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d11f      	bne.n	800c7a0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2205      	movs	r2, #5
 800c764:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c766:	e01b      	b.n	800c7a0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f003 fed5 	bl	8010518 <tcp_send_fin>
 800c76e:	4603      	mov	r3, r0
 800c770:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d114      	bne.n	800c7a4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2205      	movs	r2, #5
 800c77e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c780:	e010      	b.n	800c7a4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f003 fec8 	bl	8010518 <tcp_send_fin>
 800c788:	4603      	mov	r3, r0
 800c78a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c78c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d109      	bne.n	800c7a8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2209      	movs	r2, #9
 800c798:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c79a:	e005      	b.n	800c7a8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c79c:	2300      	movs	r3, #0
 800c79e:	e01c      	b.n	800c7da <tcp_close_shutdown_fin+0xbe>
      break;
 800c7a0:	bf00      	nop
 800c7a2:	e002      	b.n	800c7aa <tcp_close_shutdown_fin+0x8e>
      break;
 800c7a4:	bf00      	nop
 800c7a6:	e000      	b.n	800c7aa <tcp_close_shutdown_fin+0x8e>
      break;
 800c7a8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c7aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d103      	bne.n	800c7ba <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f003 ffee 	bl	8010794 <tcp_output>
 800c7b8:	e00d      	b.n	800c7d6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c7ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7c2:	d108      	bne.n	800c7d6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	8b5b      	ldrh	r3, [r3, #26]
 800c7c8:	f043 0308 	orr.w	r3, r3, #8
 800c7cc:	b29a      	uxth	r2, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	e001      	b.n	800c7da <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c7d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3710      	adds	r7, #16
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop
 800c7e4:	0801613c 	.word	0x0801613c
 800c7e8:	080161ec 	.word	0x080161ec
 800c7ec:	08016180 	.word	0x08016180

0800c7f0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d109      	bne.n	800c812 <tcp_close+0x22>
 800c7fe:	4b0f      	ldr	r3, [pc, #60]	@ (800c83c <tcp_close+0x4c>)
 800c800:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800c804:	490e      	ldr	r1, [pc, #56]	@ (800c840 <tcp_close+0x50>)
 800c806:	480f      	ldr	r0, [pc, #60]	@ (800c844 <tcp_close+0x54>)
 800c808:	f007 ff26 	bl	8014658 <iprintf>
 800c80c:	f06f 030f 	mvn.w	r3, #15
 800c810:	e00f      	b.n	800c832 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	7d1b      	ldrb	r3, [r3, #20]
 800c816:	2b01      	cmp	r3, #1
 800c818:	d006      	beq.n	800c828 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	8b5b      	ldrh	r3, [r3, #26]
 800c81e:	f043 0310 	orr.w	r3, r3, #16
 800c822:	b29a      	uxth	r2, r3
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c828:	2101      	movs	r1, #1
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f7ff fe94 	bl	800c558 <tcp_close_shutdown>
 800c830:	4603      	mov	r3, r0
}
 800c832:	4618      	mov	r0, r3
 800c834:	3708      	adds	r7, #8
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	0801613c 	.word	0x0801613c
 800c840:	0801624c 	.word	0x0801624c
 800c844:	08016180 	.word	0x08016180

0800c848 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b08e      	sub	sp, #56	@ 0x38
 800c84c:	af04      	add	r7, sp, #16
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d107      	bne.n	800c868 <tcp_abandon+0x20>
 800c858:	4b52      	ldr	r3, [pc, #328]	@ (800c9a4 <tcp_abandon+0x15c>)
 800c85a:	f240 223d 	movw	r2, #573	@ 0x23d
 800c85e:	4952      	ldr	r1, [pc, #328]	@ (800c9a8 <tcp_abandon+0x160>)
 800c860:	4852      	ldr	r0, [pc, #328]	@ (800c9ac <tcp_abandon+0x164>)
 800c862:	f007 fef9 	bl	8014658 <iprintf>
 800c866:	e099      	b.n	800c99c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	7d1b      	ldrb	r3, [r3, #20]
 800c86c:	2b01      	cmp	r3, #1
 800c86e:	d106      	bne.n	800c87e <tcp_abandon+0x36>
 800c870:	4b4c      	ldr	r3, [pc, #304]	@ (800c9a4 <tcp_abandon+0x15c>)
 800c872:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800c876:	494e      	ldr	r1, [pc, #312]	@ (800c9b0 <tcp_abandon+0x168>)
 800c878:	484c      	ldr	r0, [pc, #304]	@ (800c9ac <tcp_abandon+0x164>)
 800c87a:	f007 feed 	bl	8014658 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	7d1b      	ldrb	r3, [r3, #20]
 800c882:	2b0a      	cmp	r3, #10
 800c884:	d107      	bne.n	800c896 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c886:	6879      	ldr	r1, [r7, #4]
 800c888:	484a      	ldr	r0, [pc, #296]	@ (800c9b4 <tcp_abandon+0x16c>)
 800c88a:	f000 ffc5 	bl	800d818 <tcp_pcb_remove>
    tcp_free(pcb);
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f7ff fdb0 	bl	800c3f4 <tcp_free>
 800c894:	e082      	b.n	800c99c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c896:	2300      	movs	r3, #0
 800c898:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800c89a:	2300      	movs	r3, #0
 800c89c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8a2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8a8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8b0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	691b      	ldr	r3, [r3, #16]
 800c8b6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	7d1b      	ldrb	r3, [r3, #20]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d126      	bne.n	800c90e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	8adb      	ldrh	r3, [r3, #22]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d02e      	beq.n	800c926 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c8c8:	4b3b      	ldr	r3, [pc, #236]	@ (800c9b8 <tcp_abandon+0x170>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	687a      	ldr	r2, [r7, #4]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d105      	bne.n	800c8de <tcp_abandon+0x96>
 800c8d2:	4b39      	ldr	r3, [pc, #228]	@ (800c9b8 <tcp_abandon+0x170>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	68db      	ldr	r3, [r3, #12]
 800c8d8:	4a37      	ldr	r2, [pc, #220]	@ (800c9b8 <tcp_abandon+0x170>)
 800c8da:	6013      	str	r3, [r2, #0]
 800c8dc:	e013      	b.n	800c906 <tcp_abandon+0xbe>
 800c8de:	4b36      	ldr	r3, [pc, #216]	@ (800c9b8 <tcp_abandon+0x170>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	61fb      	str	r3, [r7, #28]
 800c8e4:	e00c      	b.n	800c900 <tcp_abandon+0xb8>
 800c8e6:	69fb      	ldr	r3, [r7, #28]
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d104      	bne.n	800c8fa <tcp_abandon+0xb2>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	68da      	ldr	r2, [r3, #12]
 800c8f4:	69fb      	ldr	r3, [r7, #28]
 800c8f6:	60da      	str	r2, [r3, #12]
 800c8f8:	e005      	b.n	800c906 <tcp_abandon+0xbe>
 800c8fa:	69fb      	ldr	r3, [r7, #28]
 800c8fc:	68db      	ldr	r3, [r3, #12]
 800c8fe:	61fb      	str	r3, [r7, #28]
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d1ef      	bne.n	800c8e6 <tcp_abandon+0x9e>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2200      	movs	r2, #0
 800c90a:	60da      	str	r2, [r3, #12]
 800c90c:	e00b      	b.n	800c926 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	8adb      	ldrh	r3, [r3, #22]
 800c916:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c918:	6879      	ldr	r1, [r7, #4]
 800c91a:	4828      	ldr	r0, [pc, #160]	@ (800c9bc <tcp_abandon+0x174>)
 800c91c:	f000 ff7c 	bl	800d818 <tcp_pcb_remove>
 800c920:	4b27      	ldr	r3, [pc, #156]	@ (800c9c0 <tcp_abandon+0x178>)
 800c922:	2201      	movs	r2, #1
 800c924:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d004      	beq.n	800c938 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c932:	4618      	mov	r0, r3
 800c934:	f000 fd1e 	bl	800d374 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d004      	beq.n	800c94a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c944:	4618      	mov	r0, r3
 800c946:	f000 fd15 	bl	800d374 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d004      	beq.n	800c95c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c956:	4618      	mov	r0, r3
 800c958:	f000 fd0c 	bl	800d374 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d00e      	beq.n	800c980 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c962:	6879      	ldr	r1, [r7, #4]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	3304      	adds	r3, #4
 800c968:	687a      	ldr	r2, [r7, #4]
 800c96a:	8b12      	ldrh	r2, [r2, #24]
 800c96c:	9202      	str	r2, [sp, #8]
 800c96e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c970:	9201      	str	r2, [sp, #4]
 800c972:	9300      	str	r3, [sp, #0]
 800c974:	460b      	mov	r3, r1
 800c976:	697a      	ldr	r2, [r7, #20]
 800c978:	69b9      	ldr	r1, [r7, #24]
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f004 fcbe 	bl	80112fc <tcp_rst>
    }
    last_state = pcb->state;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	7d1b      	ldrb	r3, [r3, #20]
 800c984:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f7ff fd34 	bl	800c3f4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d004      	beq.n	800c99c <tcp_abandon+0x154>
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	f06f 010c 	mvn.w	r1, #12
 800c998:	68f8      	ldr	r0, [r7, #12]
 800c99a:	4798      	blx	r3
  }
}
 800c99c:	3728      	adds	r7, #40	@ 0x28
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}
 800c9a2:	bf00      	nop
 800c9a4:	0801613c 	.word	0x0801613c
 800c9a8:	08016280 	.word	0x08016280
 800c9ac:	08016180 	.word	0x08016180
 800c9b0:	0801629c 	.word	0x0801629c
 800c9b4:	2000d3b8 	.word	0x2000d3b8
 800c9b8:	2000d3ac 	.word	0x2000d3ac
 800c9bc:	2000d3b4 	.word	0x2000d3b4
 800c9c0:	2000d3bc 	.word	0x2000d3bc

0800c9c4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b082      	sub	sp, #8
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c9cc:	2101      	movs	r1, #1
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f7ff ff3a 	bl	800c848 <tcp_abandon>
}
 800c9d4:	bf00      	nop
 800c9d6:	3708      	adds	r7, #8
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d106      	bne.n	800c9f8 <tcp_update_rcv_ann_wnd+0x1c>
 800c9ea:	4b25      	ldr	r3, [pc, #148]	@ (800ca80 <tcp_update_rcv_ann_wnd+0xa4>)
 800c9ec:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800c9f0:	4924      	ldr	r1, [pc, #144]	@ (800ca84 <tcp_update_rcv_ann_wnd+0xa8>)
 800c9f2:	4825      	ldr	r0, [pc, #148]	@ (800ca88 <tcp_update_rcv_ann_wnd+0xac>)
 800c9f4:	f007 fe30 	bl	8014658 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9fc:	687a      	ldr	r2, [r7, #4]
 800c9fe:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ca00:	4413      	add	r3, r2
 800ca02:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800ca0c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800ca10:	bf28      	it	cs
 800ca12:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800ca16:	b292      	uxth	r2, r2
 800ca18:	4413      	add	r3, r2
 800ca1a:	68fa      	ldr	r2, [r7, #12]
 800ca1c:	1ad3      	subs	r3, r2, r3
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	db08      	blt.n	800ca34 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca2e:	68fa      	ldr	r2, [r7, #12]
 800ca30:	1ad3      	subs	r3, r2, r3
 800ca32:	e020      	b.n	800ca76 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca3c:	1ad3      	subs	r3, r2, r3
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	dd03      	ble.n	800ca4a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2200      	movs	r2, #0
 800ca46:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ca48:	e014      	b.n	800ca74 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca52:	1ad3      	subs	r3, r2, r3
 800ca54:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca5c:	d306      	bcc.n	800ca6c <tcp_update_rcv_ann_wnd+0x90>
 800ca5e:	4b08      	ldr	r3, [pc, #32]	@ (800ca80 <tcp_update_rcv_ann_wnd+0xa4>)
 800ca60:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800ca64:	4909      	ldr	r1, [pc, #36]	@ (800ca8c <tcp_update_rcv_ann_wnd+0xb0>)
 800ca66:	4808      	ldr	r0, [pc, #32]	@ (800ca88 <tcp_update_rcv_ann_wnd+0xac>)
 800ca68:	f007 fdf6 	bl	8014658 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	b29a      	uxth	r2, r3
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800ca74:	2300      	movs	r3, #0
  }
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3710      	adds	r7, #16
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}
 800ca7e:	bf00      	nop
 800ca80:	0801613c 	.word	0x0801613c
 800ca84:	08016398 	.word	0x08016398
 800ca88:	08016180 	.word	0x08016180
 800ca8c:	080163bc 	.word	0x080163bc

0800ca90 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	460b      	mov	r3, r1
 800ca9a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d107      	bne.n	800cab2 <tcp_recved+0x22>
 800caa2:	4b1f      	ldr	r3, [pc, #124]	@ (800cb20 <tcp_recved+0x90>)
 800caa4:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800caa8:	491e      	ldr	r1, [pc, #120]	@ (800cb24 <tcp_recved+0x94>)
 800caaa:	481f      	ldr	r0, [pc, #124]	@ (800cb28 <tcp_recved+0x98>)
 800caac:	f007 fdd4 	bl	8014658 <iprintf>
 800cab0:	e032      	b.n	800cb18 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	7d1b      	ldrb	r3, [r3, #20]
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	d106      	bne.n	800cac8 <tcp_recved+0x38>
 800caba:	4b19      	ldr	r3, [pc, #100]	@ (800cb20 <tcp_recved+0x90>)
 800cabc:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800cac0:	491a      	ldr	r1, [pc, #104]	@ (800cb2c <tcp_recved+0x9c>)
 800cac2:	4819      	ldr	r0, [pc, #100]	@ (800cb28 <tcp_recved+0x98>)
 800cac4:	f007 fdc8 	bl	8014658 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800cacc:	887b      	ldrh	r3, [r7, #2]
 800cace:	4413      	add	r3, r2
 800cad0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800cad2:	89fb      	ldrh	r3, [r7, #14]
 800cad4:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800cad8:	d804      	bhi.n	800cae4 <tcp_recved+0x54>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cade:	89fa      	ldrh	r2, [r7, #14]
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d204      	bcs.n	800caee <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800caea:	851a      	strh	r2, [r3, #40]	@ 0x28
 800caec:	e002      	b.n	800caf4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	89fa      	ldrh	r2, [r7, #14]
 800caf2:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f7ff ff71 	bl	800c9dc <tcp_update_rcv_ann_wnd>
 800cafa:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800cb02:	d309      	bcc.n	800cb18 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	8b5b      	ldrh	r3, [r3, #26]
 800cb08:	f043 0302 	orr.w	r3, r3, #2
 800cb0c:	b29a      	uxth	r2, r3
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f003 fe3e 	bl	8010794 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800cb18:	3710      	adds	r7, #16
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	0801613c 	.word	0x0801613c
 800cb24:	080163d8 	.word	0x080163d8
 800cb28:	08016180 	.word	0x08016180
 800cb2c:	080163f0 	.word	0x080163f0

0800cb30 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800cb30:	b5b0      	push	{r4, r5, r7, lr}
 800cb32:	b090      	sub	sp, #64	@ 0x40
 800cb34:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800cb36:	2300      	movs	r3, #0
 800cb38:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800cb3c:	4b95      	ldr	r3, [pc, #596]	@ (800cd94 <tcp_slowtmr+0x264>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	3301      	adds	r3, #1
 800cb42:	4a94      	ldr	r2, [pc, #592]	@ (800cd94 <tcp_slowtmr+0x264>)
 800cb44:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800cb46:	4b94      	ldr	r3, [pc, #592]	@ (800cd98 <tcp_slowtmr+0x268>)
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	b2da      	uxtb	r2, r3
 800cb4e:	4b92      	ldr	r3, [pc, #584]	@ (800cd98 <tcp_slowtmr+0x268>)
 800cb50:	701a      	strb	r2, [r3, #0]
 800cb52:	e000      	b.n	800cb56 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800cb54:	bf00      	nop
  prev = NULL;
 800cb56:	2300      	movs	r3, #0
 800cb58:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800cb5a:	4b90      	ldr	r3, [pc, #576]	@ (800cd9c <tcp_slowtmr+0x26c>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800cb60:	e29d      	b.n	800d09e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800cb62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb64:	7d1b      	ldrb	r3, [r3, #20]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d106      	bne.n	800cb78 <tcp_slowtmr+0x48>
 800cb6a:	4b8d      	ldr	r3, [pc, #564]	@ (800cda0 <tcp_slowtmr+0x270>)
 800cb6c:	f240 42be 	movw	r2, #1214	@ 0x4be
 800cb70:	498c      	ldr	r1, [pc, #560]	@ (800cda4 <tcp_slowtmr+0x274>)
 800cb72:	488d      	ldr	r0, [pc, #564]	@ (800cda8 <tcp_slowtmr+0x278>)
 800cb74:	f007 fd70 	bl	8014658 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800cb78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb7a:	7d1b      	ldrb	r3, [r3, #20]
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d106      	bne.n	800cb8e <tcp_slowtmr+0x5e>
 800cb80:	4b87      	ldr	r3, [pc, #540]	@ (800cda0 <tcp_slowtmr+0x270>)
 800cb82:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800cb86:	4989      	ldr	r1, [pc, #548]	@ (800cdac <tcp_slowtmr+0x27c>)
 800cb88:	4887      	ldr	r0, [pc, #540]	@ (800cda8 <tcp_slowtmr+0x278>)
 800cb8a:	f007 fd65 	bl	8014658 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800cb8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb90:	7d1b      	ldrb	r3, [r3, #20]
 800cb92:	2b0a      	cmp	r3, #10
 800cb94:	d106      	bne.n	800cba4 <tcp_slowtmr+0x74>
 800cb96:	4b82      	ldr	r3, [pc, #520]	@ (800cda0 <tcp_slowtmr+0x270>)
 800cb98:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800cb9c:	4984      	ldr	r1, [pc, #528]	@ (800cdb0 <tcp_slowtmr+0x280>)
 800cb9e:	4882      	ldr	r0, [pc, #520]	@ (800cda8 <tcp_slowtmr+0x278>)
 800cba0:	f007 fd5a 	bl	8014658 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800cba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cba6:	7f9a      	ldrb	r2, [r3, #30]
 800cba8:	4b7b      	ldr	r3, [pc, #492]	@ (800cd98 <tcp_slowtmr+0x268>)
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d105      	bne.n	800cbbc <tcp_slowtmr+0x8c>
      prev = pcb;
 800cbb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbb2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800cbb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbb6:	68db      	ldr	r3, [r3, #12]
 800cbb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800cbba:	e270      	b.n	800d09e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800cbbc:	4b76      	ldr	r3, [pc, #472]	@ (800cd98 <tcp_slowtmr+0x268>)
 800cbbe:	781a      	ldrb	r2, [r3, #0]
 800cbc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbc2:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800cbd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd2:	7d1b      	ldrb	r3, [r3, #20]
 800cbd4:	2b02      	cmp	r3, #2
 800cbd6:	d10a      	bne.n	800cbee <tcp_slowtmr+0xbe>
 800cbd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cbde:	2b05      	cmp	r3, #5
 800cbe0:	d905      	bls.n	800cbee <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800cbe2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cbec:	e11e      	b.n	800ce2c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800cbee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbf0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cbf4:	2b0b      	cmp	r3, #11
 800cbf6:	d905      	bls.n	800cc04 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800cbf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cc02:	e113      	b.n	800ce2c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800cc04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc06:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d075      	beq.n	800ccfa <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800cc0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d006      	beq.n	800cc24 <tcp_slowtmr+0xf4>
 800cc16:	4b62      	ldr	r3, [pc, #392]	@ (800cda0 <tcp_slowtmr+0x270>)
 800cc18:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800cc1c:	4965      	ldr	r1, [pc, #404]	@ (800cdb4 <tcp_slowtmr+0x284>)
 800cc1e:	4862      	ldr	r0, [pc, #392]	@ (800cda8 <tcp_slowtmr+0x278>)
 800cc20:	f007 fd1a 	bl	8014658 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800cc24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d106      	bne.n	800cc3a <tcp_slowtmr+0x10a>
 800cc2c:	4b5c      	ldr	r3, [pc, #368]	@ (800cda0 <tcp_slowtmr+0x270>)
 800cc2e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800cc32:	4961      	ldr	r1, [pc, #388]	@ (800cdb8 <tcp_slowtmr+0x288>)
 800cc34:	485c      	ldr	r0, [pc, #368]	@ (800cda8 <tcp_slowtmr+0x278>)
 800cc36:	f007 fd0f 	bl	8014658 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800cc3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc3c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800cc40:	2b0b      	cmp	r3, #11
 800cc42:	d905      	bls.n	800cc50 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800cc44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc48:	3301      	adds	r3, #1
 800cc4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cc4e:	e0ed      	b.n	800ce2c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800cc50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc52:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800cc56:	3b01      	subs	r3, #1
 800cc58:	4a58      	ldr	r2, [pc, #352]	@ (800cdbc <tcp_slowtmr+0x28c>)
 800cc5a:	5cd3      	ldrb	r3, [r2, r3]
 800cc5c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800cc5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc60:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800cc64:	7c7a      	ldrb	r2, [r7, #17]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d907      	bls.n	800cc7a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800cc6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc6c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800cc70:	3301      	adds	r3, #1
 800cc72:	b2da      	uxtb	r2, r3
 800cc74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc76:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800cc7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc7c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800cc80:	7c7a      	ldrb	r2, [r7, #17]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	f200 80d2 	bhi.w	800ce2c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800cc88:	2301      	movs	r3, #1
 800cc8a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800cc8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d108      	bne.n	800cca8 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800cc96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc98:	f004 fc24 	bl	80114e4 <tcp_zero_window_probe>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d014      	beq.n	800cccc <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800cca2:	2300      	movs	r3, #0
 800cca4:	623b      	str	r3, [r7, #32]
 800cca6:	e011      	b.n	800cccc <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800cca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ccae:	4619      	mov	r1, r3
 800ccb0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ccb2:	f003 fae9 	bl	8010288 <tcp_split_unsent_seg>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d107      	bne.n	800cccc <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800ccbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ccbe:	f003 fd69 	bl	8010794 <tcp_output>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d101      	bne.n	800cccc <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800cccc:	6a3b      	ldr	r3, [r7, #32]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	f000 80ac 	beq.w	800ce2c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800ccd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ccdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccde:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800cce2:	2b06      	cmp	r3, #6
 800cce4:	f200 80a2 	bhi.w	800ce2c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800cce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccea:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ccee:	3301      	adds	r3, #1
 800ccf0:	b2da      	uxtb	r2, r3
 800ccf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccf4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800ccf8:	e098      	b.n	800ce2c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ccfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccfc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	db0f      	blt.n	800cd24 <tcp_slowtmr+0x1f4>
 800cd04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd06:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800cd0a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d008      	beq.n	800cd24 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800cd12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd14:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	b21a      	sxth	r2, r3
 800cd20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd22:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800cd24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd26:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800cd2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd2c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800cd30:	429a      	cmp	r2, r3
 800cd32:	db7b      	blt.n	800ce2c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800cd34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cd36:	f004 f821 	bl	8010d7c <tcp_rexmit_rto_prepare>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d007      	beq.n	800cd50 <tcp_slowtmr+0x220>
 800cd40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d171      	bne.n	800ce2c <tcp_slowtmr+0x2fc>
 800cd48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d06d      	beq.n	800ce2c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800cd50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd52:	7d1b      	ldrb	r3, [r3, #20]
 800cd54:	2b02      	cmp	r3, #2
 800cd56:	d03a      	beq.n	800cdce <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800cd58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cd5e:	2b0c      	cmp	r3, #12
 800cd60:	bf28      	it	cs
 800cd62:	230c      	movcs	r3, #12
 800cd64:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800cd66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800cd6c:	10db      	asrs	r3, r3, #3
 800cd6e:	b21b      	sxth	r3, r3
 800cd70:	461a      	mov	r2, r3
 800cd72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd74:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800cd78:	4413      	add	r3, r2
 800cd7a:	7efa      	ldrb	r2, [r7, #27]
 800cd7c:	4910      	ldr	r1, [pc, #64]	@ (800cdc0 <tcp_slowtmr+0x290>)
 800cd7e:	5c8a      	ldrb	r2, [r1, r2]
 800cd80:	4093      	lsls	r3, r2
 800cd82:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	dc1a      	bgt.n	800cdc4 <tcp_slowtmr+0x294>
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	b21a      	sxth	r2, r3
 800cd92:	e019      	b.n	800cdc8 <tcp_slowtmr+0x298>
 800cd94:	2000d3a8 	.word	0x2000d3a8
 800cd98:	2000d3be 	.word	0x2000d3be
 800cd9c:	2000d3b4 	.word	0x2000d3b4
 800cda0:	0801613c 	.word	0x0801613c
 800cda4:	08016480 	.word	0x08016480
 800cda8:	08016180 	.word	0x08016180
 800cdac:	080164ac 	.word	0x080164ac
 800cdb0:	080164d8 	.word	0x080164d8
 800cdb4:	08016508 	.word	0x08016508
 800cdb8:	0801653c 	.word	0x0801653c
 800cdbc:	0801819c 	.word	0x0801819c
 800cdc0:	0801818c 	.word	0x0801818c
 800cdc4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800cdc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800cdce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800cdd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdd6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800cdda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cddc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800cde0:	4293      	cmp	r3, r2
 800cde2:	bf28      	it	cs
 800cde4:	4613      	movcs	r3, r2
 800cde6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800cde8:	8a7b      	ldrh	r3, [r7, #18]
 800cdea:	085b      	lsrs	r3, r3, #1
 800cdec:	b29a      	uxth	r2, r3
 800cdee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800cdf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800cdfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdfc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cdfe:	005b      	lsls	r3, r3, #1
 800ce00:	b29b      	uxth	r3, r3
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d206      	bcs.n	800ce14 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ce06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ce0a:	005b      	lsls	r3, r3, #1
 800ce0c:	b29a      	uxth	r2, r3
 800ce0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce10:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800ce14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce16:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800ce18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce1a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800ce1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce20:	2200      	movs	r2, #0
 800ce22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800ce26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ce28:	f004 f818 	bl	8010e5c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800ce2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce2e:	7d1b      	ldrb	r3, [r3, #20]
 800ce30:	2b06      	cmp	r3, #6
 800ce32:	d111      	bne.n	800ce58 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800ce34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce36:	8b5b      	ldrh	r3, [r3, #26]
 800ce38:	f003 0310 	and.w	r3, r3, #16
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d00b      	beq.n	800ce58 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ce40:	4b9c      	ldr	r3, [pc, #624]	@ (800d0b4 <tcp_slowtmr+0x584>)
 800ce42:	681a      	ldr	r2, [r3, #0]
 800ce44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce46:	6a1b      	ldr	r3, [r3, #32]
 800ce48:	1ad3      	subs	r3, r2, r3
 800ce4a:	2b28      	cmp	r3, #40	@ 0x28
 800ce4c:	d904      	bls.n	800ce58 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800ce4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ce52:	3301      	adds	r3, #1
 800ce54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ce58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce5a:	7a5b      	ldrb	r3, [r3, #9]
 800ce5c:	f003 0308 	and.w	r3, r3, #8
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d04a      	beq.n	800cefa <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800ce64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce66:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ce68:	2b04      	cmp	r3, #4
 800ce6a:	d003      	beq.n	800ce74 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800ce6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce6e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ce70:	2b07      	cmp	r3, #7
 800ce72:	d142      	bne.n	800cefa <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ce74:	4b8f      	ldr	r3, [pc, #572]	@ (800d0b4 <tcp_slowtmr+0x584>)
 800ce76:	681a      	ldr	r2, [r3, #0]
 800ce78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce7a:	6a1b      	ldr	r3, [r3, #32]
 800ce7c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ce7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce80:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800ce84:	4b8c      	ldr	r3, [pc, #560]	@ (800d0b8 <tcp_slowtmr+0x588>)
 800ce86:	440b      	add	r3, r1
 800ce88:	498c      	ldr	r1, [pc, #560]	@ (800d0bc <tcp_slowtmr+0x58c>)
 800ce8a:	fba1 1303 	umull	r1, r3, r1, r3
 800ce8e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d90a      	bls.n	800ceaa <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800ce94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ce98:	3301      	adds	r3, #1
 800ce9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800ce9e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cea2:	3301      	adds	r3, #1
 800cea4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cea8:	e027      	b.n	800cefa <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ceaa:	4b82      	ldr	r3, [pc, #520]	@ (800d0b4 <tcp_slowtmr+0x584>)
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceb0:	6a1b      	ldr	r3, [r3, #32]
 800ceb2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ceb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceb6:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800ceba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cebc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800cec0:	4618      	mov	r0, r3
 800cec2:	4b7f      	ldr	r3, [pc, #508]	@ (800d0c0 <tcp_slowtmr+0x590>)
 800cec4:	fb00 f303 	mul.w	r3, r0, r3
 800cec8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ceca:	497c      	ldr	r1, [pc, #496]	@ (800d0bc <tcp_slowtmr+0x58c>)
 800cecc:	fba1 1303 	umull	r1, r3, r1, r3
 800ced0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d911      	bls.n	800cefa <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800ced6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ced8:	f004 fac4 	bl	8011464 <tcp_keepalive>
 800cedc:	4603      	mov	r3, r0
 800cede:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800cee2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d107      	bne.n	800cefa <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800ceea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceec:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800cef0:	3301      	adds	r3, #1
 800cef2:	b2da      	uxtb	r2, r3
 800cef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cef6:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800cefa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cefc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d011      	beq.n	800cf26 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cf02:	4b6c      	ldr	r3, [pc, #432]	@ (800d0b4 <tcp_slowtmr+0x584>)
 800cf04:	681a      	ldr	r2, [r3, #0]
 800cf06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf08:	6a1b      	ldr	r3, [r3, #32]
 800cf0a:	1ad2      	subs	r2, r2, r3
 800cf0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf0e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800cf12:	4619      	mov	r1, r3
 800cf14:	460b      	mov	r3, r1
 800cf16:	005b      	lsls	r3, r3, #1
 800cf18:	440b      	add	r3, r1
 800cf1a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d302      	bcc.n	800cf26 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800cf20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cf22:	f000 fddd 	bl	800dae0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800cf26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf28:	7d1b      	ldrb	r3, [r3, #20]
 800cf2a:	2b03      	cmp	r3, #3
 800cf2c:	d10b      	bne.n	800cf46 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cf2e:	4b61      	ldr	r3, [pc, #388]	@ (800d0b4 <tcp_slowtmr+0x584>)
 800cf30:	681a      	ldr	r2, [r3, #0]
 800cf32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf34:	6a1b      	ldr	r3, [r3, #32]
 800cf36:	1ad3      	subs	r3, r2, r3
 800cf38:	2b28      	cmp	r3, #40	@ 0x28
 800cf3a:	d904      	bls.n	800cf46 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800cf3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cf40:	3301      	adds	r3, #1
 800cf42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800cf46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf48:	7d1b      	ldrb	r3, [r3, #20]
 800cf4a:	2b09      	cmp	r3, #9
 800cf4c:	d10b      	bne.n	800cf66 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cf4e:	4b59      	ldr	r3, [pc, #356]	@ (800d0b4 <tcp_slowtmr+0x584>)
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf54:	6a1b      	ldr	r3, [r3, #32]
 800cf56:	1ad3      	subs	r3, r2, r3
 800cf58:	2bf0      	cmp	r3, #240	@ 0xf0
 800cf5a:	d904      	bls.n	800cf66 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800cf5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cf60:	3301      	adds	r3, #1
 800cf62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800cf66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d060      	beq.n	800d030 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800cf6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf74:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800cf76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cf78:	f000 fbfe 	bl	800d778 <tcp_pcb_purge>
      if (prev != NULL) {
 800cf7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d010      	beq.n	800cfa4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cf82:	4b50      	ldr	r3, [pc, #320]	@ (800d0c4 <tcp_slowtmr+0x594>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d106      	bne.n	800cf9a <tcp_slowtmr+0x46a>
 800cf8c:	4b4e      	ldr	r3, [pc, #312]	@ (800d0c8 <tcp_slowtmr+0x598>)
 800cf8e:	f240 526d 	movw	r2, #1389	@ 0x56d
 800cf92:	494e      	ldr	r1, [pc, #312]	@ (800d0cc <tcp_slowtmr+0x59c>)
 800cf94:	484e      	ldr	r0, [pc, #312]	@ (800d0d0 <tcp_slowtmr+0x5a0>)
 800cf96:	f007 fb5f 	bl	8014658 <iprintf>
        prev->next = pcb->next;
 800cf9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf9c:	68da      	ldr	r2, [r3, #12]
 800cf9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa0:	60da      	str	r2, [r3, #12]
 800cfa2:	e00f      	b.n	800cfc4 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cfa4:	4b47      	ldr	r3, [pc, #284]	@ (800d0c4 <tcp_slowtmr+0x594>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d006      	beq.n	800cfbc <tcp_slowtmr+0x48c>
 800cfae:	4b46      	ldr	r3, [pc, #280]	@ (800d0c8 <tcp_slowtmr+0x598>)
 800cfb0:	f240 5271 	movw	r2, #1393	@ 0x571
 800cfb4:	4947      	ldr	r1, [pc, #284]	@ (800d0d4 <tcp_slowtmr+0x5a4>)
 800cfb6:	4846      	ldr	r0, [pc, #280]	@ (800d0d0 <tcp_slowtmr+0x5a0>)
 800cfb8:	f007 fb4e 	bl	8014658 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cfbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfbe:	68db      	ldr	r3, [r3, #12]
 800cfc0:	4a40      	ldr	r2, [pc, #256]	@ (800d0c4 <tcp_slowtmr+0x594>)
 800cfc2:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800cfc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d013      	beq.n	800cff4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cfcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfce:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800cfd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfd2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800cfd4:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800cfd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfd8:	3304      	adds	r3, #4
 800cfda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cfdc:	8ad2      	ldrh	r2, [r2, #22]
 800cfde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cfe0:	8b09      	ldrh	r1, [r1, #24]
 800cfe2:	9102      	str	r1, [sp, #8]
 800cfe4:	9201      	str	r2, [sp, #4]
 800cfe6:	9300      	str	r3, [sp, #0]
 800cfe8:	462b      	mov	r3, r5
 800cfea:	4622      	mov	r2, r4
 800cfec:	4601      	mov	r1, r0
 800cfee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cff0:	f004 f984 	bl	80112fc <tcp_rst>
      err_arg = pcb->callback_arg;
 800cff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cff6:	691b      	ldr	r3, [r3, #16]
 800cff8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cffc:	7d1b      	ldrb	r3, [r3, #20]
 800cffe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d002:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d006:	68db      	ldr	r3, [r3, #12]
 800d008:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d00a:	6838      	ldr	r0, [r7, #0]
 800d00c:	f7ff f9f2 	bl	800c3f4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800d010:	4b31      	ldr	r3, [pc, #196]	@ (800d0d8 <tcp_slowtmr+0x5a8>)
 800d012:	2200      	movs	r2, #0
 800d014:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d004      	beq.n	800d026 <tcp_slowtmr+0x4f6>
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	f06f 010c 	mvn.w	r1, #12
 800d022:	68b8      	ldr	r0, [r7, #8]
 800d024:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d026:	4b2c      	ldr	r3, [pc, #176]	@ (800d0d8 <tcp_slowtmr+0x5a8>)
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d037      	beq.n	800d09e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d02e:	e592      	b.n	800cb56 <tcp_slowtmr+0x26>
      prev = pcb;
 800d030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d032:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800d03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d03c:	7f1b      	ldrb	r3, [r3, #28]
 800d03e:	3301      	adds	r3, #1
 800d040:	b2da      	uxtb	r2, r3
 800d042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d044:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d048:	7f1a      	ldrb	r2, [r3, #28]
 800d04a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d04c:	7f5b      	ldrb	r3, [r3, #29]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d325      	bcc.n	800d09e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d054:	2200      	movs	r2, #0
 800d056:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800d058:	4b1f      	ldr	r3, [pc, #124]	@ (800d0d8 <tcp_slowtmr+0x5a8>)
 800d05a:	2200      	movs	r2, #0
 800d05c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d05e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d060:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d064:	2b00      	cmp	r3, #0
 800d066:	d00b      	beq.n	800d080 <tcp_slowtmr+0x550>
 800d068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d06a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d06e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d070:	6912      	ldr	r2, [r2, #16]
 800d072:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d074:	4610      	mov	r0, r2
 800d076:	4798      	blx	r3
 800d078:	4603      	mov	r3, r0
 800d07a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800d07e:	e002      	b.n	800d086 <tcp_slowtmr+0x556>
 800d080:	2300      	movs	r3, #0
 800d082:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800d086:	4b14      	ldr	r3, [pc, #80]	@ (800d0d8 <tcp_slowtmr+0x5a8>)
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	f47f ad62 	bne.w	800cb54 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d090:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d094:	2b00      	cmp	r3, #0
 800d096:	d102      	bne.n	800d09e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800d098:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d09a:	f003 fb7b 	bl	8010794 <tcp_output>
  while (pcb != NULL) {
 800d09e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f47f ad5e 	bne.w	800cb62 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800d0aa:	4b0c      	ldr	r3, [pc, #48]	@ (800d0dc <tcp_slowtmr+0x5ac>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d0b0:	e069      	b.n	800d186 <tcp_slowtmr+0x656>
 800d0b2:	bf00      	nop
 800d0b4:	2000d3a8 	.word	0x2000d3a8
 800d0b8:	000a4cb8 	.word	0x000a4cb8
 800d0bc:	10624dd3 	.word	0x10624dd3
 800d0c0:	000124f8 	.word	0x000124f8
 800d0c4:	2000d3b4 	.word	0x2000d3b4
 800d0c8:	0801613c 	.word	0x0801613c
 800d0cc:	08016574 	.word	0x08016574
 800d0d0:	08016180 	.word	0x08016180
 800d0d4:	080165a0 	.word	0x080165a0
 800d0d8:	2000d3bc 	.word	0x2000d3bc
 800d0dc:	2000d3b8 	.word	0x2000d3b8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0e2:	7d1b      	ldrb	r3, [r3, #20]
 800d0e4:	2b0a      	cmp	r3, #10
 800d0e6:	d006      	beq.n	800d0f6 <tcp_slowtmr+0x5c6>
 800d0e8:	4b2b      	ldr	r3, [pc, #172]	@ (800d198 <tcp_slowtmr+0x668>)
 800d0ea:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800d0ee:	492b      	ldr	r1, [pc, #172]	@ (800d19c <tcp_slowtmr+0x66c>)
 800d0f0:	482b      	ldr	r0, [pc, #172]	@ (800d1a0 <tcp_slowtmr+0x670>)
 800d0f2:	f007 fab1 	bl	8014658 <iprintf>
    pcb_remove = 0;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d0fc:	4b29      	ldr	r3, [pc, #164]	@ (800d1a4 <tcp_slowtmr+0x674>)
 800d0fe:	681a      	ldr	r2, [r3, #0]
 800d100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d102:	6a1b      	ldr	r3, [r3, #32]
 800d104:	1ad3      	subs	r3, r2, r3
 800d106:	2bf0      	cmp	r3, #240	@ 0xf0
 800d108:	d904      	bls.n	800d114 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800d10a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d10e:	3301      	adds	r3, #1
 800d110:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d114:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d02f      	beq.n	800d17c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d11c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d11e:	f000 fb2b 	bl	800d778 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d124:	2b00      	cmp	r3, #0
 800d126:	d010      	beq.n	800d14a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d128:	4b1f      	ldr	r3, [pc, #124]	@ (800d1a8 <tcp_slowtmr+0x678>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d12e:	429a      	cmp	r2, r3
 800d130:	d106      	bne.n	800d140 <tcp_slowtmr+0x610>
 800d132:	4b19      	ldr	r3, [pc, #100]	@ (800d198 <tcp_slowtmr+0x668>)
 800d134:	f240 52af 	movw	r2, #1455	@ 0x5af
 800d138:	491c      	ldr	r1, [pc, #112]	@ (800d1ac <tcp_slowtmr+0x67c>)
 800d13a:	4819      	ldr	r0, [pc, #100]	@ (800d1a0 <tcp_slowtmr+0x670>)
 800d13c:	f007 fa8c 	bl	8014658 <iprintf>
        prev->next = pcb->next;
 800d140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d142:	68da      	ldr	r2, [r3, #12]
 800d144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d146:	60da      	str	r2, [r3, #12]
 800d148:	e00f      	b.n	800d16a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d14a:	4b17      	ldr	r3, [pc, #92]	@ (800d1a8 <tcp_slowtmr+0x678>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d150:	429a      	cmp	r2, r3
 800d152:	d006      	beq.n	800d162 <tcp_slowtmr+0x632>
 800d154:	4b10      	ldr	r3, [pc, #64]	@ (800d198 <tcp_slowtmr+0x668>)
 800d156:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800d15a:	4915      	ldr	r1, [pc, #84]	@ (800d1b0 <tcp_slowtmr+0x680>)
 800d15c:	4810      	ldr	r0, [pc, #64]	@ (800d1a0 <tcp_slowtmr+0x670>)
 800d15e:	f007 fa7b 	bl	8014658 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d164:	68db      	ldr	r3, [r3, #12]
 800d166:	4a10      	ldr	r2, [pc, #64]	@ (800d1a8 <tcp_slowtmr+0x678>)
 800d168:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d16c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d16e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d174:	69f8      	ldr	r0, [r7, #28]
 800d176:	f7ff f93d 	bl	800c3f4 <tcp_free>
 800d17a:	e004      	b.n	800d186 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800d17c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d17e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d182:	68db      	ldr	r3, [r3, #12]
 800d184:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d1a9      	bne.n	800d0e0 <tcp_slowtmr+0x5b0>
    }
  }
}
 800d18c:	bf00      	nop
 800d18e:	bf00      	nop
 800d190:	3730      	adds	r7, #48	@ 0x30
 800d192:	46bd      	mov	sp, r7
 800d194:	bdb0      	pop	{r4, r5, r7, pc}
 800d196:	bf00      	nop
 800d198:	0801613c 	.word	0x0801613c
 800d19c:	080165cc 	.word	0x080165cc
 800d1a0:	08016180 	.word	0x08016180
 800d1a4:	2000d3a8 	.word	0x2000d3a8
 800d1a8:	2000d3b8 	.word	0x2000d3b8
 800d1ac:	080165fc 	.word	0x080165fc
 800d1b0:	08016624 	.word	0x08016624

0800d1b4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d1ba:	4b2d      	ldr	r3, [pc, #180]	@ (800d270 <tcp_fasttmr+0xbc>)
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	3301      	adds	r3, #1
 800d1c0:	b2da      	uxtb	r2, r3
 800d1c2:	4b2b      	ldr	r3, [pc, #172]	@ (800d270 <tcp_fasttmr+0xbc>)
 800d1c4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d1c6:	4b2b      	ldr	r3, [pc, #172]	@ (800d274 <tcp_fasttmr+0xc0>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d1cc:	e048      	b.n	800d260 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	7f9a      	ldrb	r2, [r3, #30]
 800d1d2:	4b27      	ldr	r3, [pc, #156]	@ (800d270 <tcp_fasttmr+0xbc>)
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d03f      	beq.n	800d25a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d1da:	4b25      	ldr	r3, [pc, #148]	@ (800d270 <tcp_fasttmr+0xbc>)
 800d1dc:	781a      	ldrb	r2, [r3, #0]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	8b5b      	ldrh	r3, [r3, #26]
 800d1e6:	f003 0301 	and.w	r3, r3, #1
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d010      	beq.n	800d210 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	8b5b      	ldrh	r3, [r3, #26]
 800d1f2:	f043 0302 	orr.w	r3, r3, #2
 800d1f6:	b29a      	uxth	r2, r3
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f003 fac9 	bl	8010794 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	8b5b      	ldrh	r3, [r3, #26]
 800d206:	f023 0303 	bic.w	r3, r3, #3
 800d20a:	b29a      	uxth	r2, r3
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	8b5b      	ldrh	r3, [r3, #26]
 800d214:	f003 0308 	and.w	r3, r3, #8
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d009      	beq.n	800d230 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	8b5b      	ldrh	r3, [r3, #26]
 800d220:	f023 0308 	bic.w	r3, r3, #8
 800d224:	b29a      	uxth	r2, r3
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f7ff fa76 	bl	800c71c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	68db      	ldr	r3, [r3, #12]
 800d234:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d00a      	beq.n	800d254 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d23e:	4b0e      	ldr	r3, [pc, #56]	@ (800d278 <tcp_fasttmr+0xc4>)
 800d240:	2200      	movs	r2, #0
 800d242:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f000 f819 	bl	800d27c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d24a:	4b0b      	ldr	r3, [pc, #44]	@ (800d278 <tcp_fasttmr+0xc4>)
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d000      	beq.n	800d254 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d252:	e7b8      	b.n	800d1c6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	607b      	str	r3, [r7, #4]
 800d258:	e002      	b.n	800d260 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	68db      	ldr	r3, [r3, #12]
 800d25e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d1b3      	bne.n	800d1ce <tcp_fasttmr+0x1a>
    }
  }
}
 800d266:	bf00      	nop
 800d268:	bf00      	nop
 800d26a:	3708      	adds	r7, #8
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}
 800d270:	2000d3be 	.word	0x2000d3be
 800d274:	2000d3b4 	.word	0x2000d3b4
 800d278:	2000d3bc 	.word	0x2000d3bc

0800d27c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d27c:	b590      	push	{r4, r7, lr}
 800d27e:	b085      	sub	sp, #20
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d109      	bne.n	800d29e <tcp_process_refused_data+0x22>
 800d28a:	4b37      	ldr	r3, [pc, #220]	@ (800d368 <tcp_process_refused_data+0xec>)
 800d28c:	f240 6209 	movw	r2, #1545	@ 0x609
 800d290:	4936      	ldr	r1, [pc, #216]	@ (800d36c <tcp_process_refused_data+0xf0>)
 800d292:	4837      	ldr	r0, [pc, #220]	@ (800d370 <tcp_process_refused_data+0xf4>)
 800d294:	f007 f9e0 	bl	8014658 <iprintf>
 800d298:	f06f 030f 	mvn.w	r3, #15
 800d29c:	e060      	b.n	800d360 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d2a2:	7b5b      	ldrb	r3, [r3, #13]
 800d2a4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d2aa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d00b      	beq.n	800d2d4 <tcp_process_refused_data+0x58>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6918      	ldr	r0, [r3, #16]
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	68ba      	ldr	r2, [r7, #8]
 800d2ca:	6879      	ldr	r1, [r7, #4]
 800d2cc:	47a0      	blx	r4
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	73fb      	strb	r3, [r7, #15]
 800d2d2:	e007      	b.n	800d2e4 <tcp_process_refused_data+0x68>
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	68ba      	ldr	r2, [r7, #8]
 800d2d8:	6879      	ldr	r1, [r7, #4]
 800d2da:	2000      	movs	r0, #0
 800d2dc:	f000 f8a4 	bl	800d428 <tcp_recv_null>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d2e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d12a      	bne.n	800d342 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d2ec:	7bbb      	ldrb	r3, [r7, #14]
 800d2ee:	f003 0320 	and.w	r3, r3, #32
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d033      	beq.n	800d35e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d2fa:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d2fe:	d005      	beq.n	800d30c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d304:	3301      	adds	r3, #1
 800d306:	b29a      	uxth	r2, r3
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d312:	2b00      	cmp	r3, #0
 800d314:	d00b      	beq.n	800d32e <tcp_process_refused_data+0xb2>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6918      	ldr	r0, [r3, #16]
 800d320:	2300      	movs	r3, #0
 800d322:	2200      	movs	r2, #0
 800d324:	6879      	ldr	r1, [r7, #4]
 800d326:	47a0      	blx	r4
 800d328:	4603      	mov	r3, r0
 800d32a:	73fb      	strb	r3, [r7, #15]
 800d32c:	e001      	b.n	800d332 <tcp_process_refused_data+0xb6>
 800d32e:	2300      	movs	r3, #0
 800d330:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d336:	f113 0f0d 	cmn.w	r3, #13
 800d33a:	d110      	bne.n	800d35e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d33c:	f06f 030c 	mvn.w	r3, #12
 800d340:	e00e      	b.n	800d360 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d346:	f113 0f0d 	cmn.w	r3, #13
 800d34a:	d102      	bne.n	800d352 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d34c:	f06f 030c 	mvn.w	r3, #12
 800d350:	e006      	b.n	800d360 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	68ba      	ldr	r2, [r7, #8]
 800d356:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800d358:	f06f 0304 	mvn.w	r3, #4
 800d35c:	e000      	b.n	800d360 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d35e:	2300      	movs	r3, #0
}
 800d360:	4618      	mov	r0, r3
 800d362:	3714      	adds	r7, #20
 800d364:	46bd      	mov	sp, r7
 800d366:	bd90      	pop	{r4, r7, pc}
 800d368:	0801613c 	.word	0x0801613c
 800d36c:	0801664c 	.word	0x0801664c
 800d370:	08016180 	.word	0x08016180

0800d374 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d37c:	e007      	b.n	800d38e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f000 f80a 	bl	800d39e <tcp_seg_free>
    seg = next;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d1f4      	bne.n	800d37e <tcp_segs_free+0xa>
  }
}
 800d394:	bf00      	nop
 800d396:	bf00      	nop
 800d398:	3710      	adds	r7, #16
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}

0800d39e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d39e:	b580      	push	{r7, lr}
 800d3a0:	b082      	sub	sp, #8
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d00c      	beq.n	800d3c6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d004      	beq.n	800d3be <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	685b      	ldr	r3, [r3, #4]
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7fe fd6f 	bl	800be9c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d3be:	6879      	ldr	r1, [r7, #4]
 800d3c0:	2003      	movs	r0, #3
 800d3c2:	f7fd fec7 	bl	800b154 <memp_free>
  }
}
 800d3c6:	bf00      	nop
 800d3c8:	3708      	adds	r7, #8
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
	...

0800d3d0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b084      	sub	sp, #16
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d106      	bne.n	800d3ec <tcp_seg_copy+0x1c>
 800d3de:	4b0f      	ldr	r3, [pc, #60]	@ (800d41c <tcp_seg_copy+0x4c>)
 800d3e0:	f240 6282 	movw	r2, #1666	@ 0x682
 800d3e4:	490e      	ldr	r1, [pc, #56]	@ (800d420 <tcp_seg_copy+0x50>)
 800d3e6:	480f      	ldr	r0, [pc, #60]	@ (800d424 <tcp_seg_copy+0x54>)
 800d3e8:	f007 f936 	bl	8014658 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d3ec:	2003      	movs	r0, #3
 800d3ee:	f7fd fe3b 	bl	800b068 <memp_malloc>
 800d3f2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d101      	bne.n	800d3fe <tcp_seg_copy+0x2e>
    return NULL;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	e00a      	b.n	800d414 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d3fe:	2210      	movs	r2, #16
 800d400:	6879      	ldr	r1, [r7, #4]
 800d402:	68f8      	ldr	r0, [r7, #12]
 800d404:	f007 faed 	bl	80149e2 <memcpy>
  pbuf_ref(cseg->p);
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7fe fdeb 	bl	800bfe8 <pbuf_ref>
  return cseg;
 800d412:	68fb      	ldr	r3, [r7, #12]
}
 800d414:	4618      	mov	r0, r3
 800d416:	3710      	adds	r7, #16
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}
 800d41c:	0801613c 	.word	0x0801613c
 800d420:	08016690 	.word	0x08016690
 800d424:	08016180 	.word	0x08016180

0800d428 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	60f8      	str	r0, [r7, #12]
 800d430:	60b9      	str	r1, [r7, #8]
 800d432:	607a      	str	r2, [r7, #4]
 800d434:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d109      	bne.n	800d450 <tcp_recv_null+0x28>
 800d43c:	4b12      	ldr	r3, [pc, #72]	@ (800d488 <tcp_recv_null+0x60>)
 800d43e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d442:	4912      	ldr	r1, [pc, #72]	@ (800d48c <tcp_recv_null+0x64>)
 800d444:	4812      	ldr	r0, [pc, #72]	@ (800d490 <tcp_recv_null+0x68>)
 800d446:	f007 f907 	bl	8014658 <iprintf>
 800d44a:	f06f 030f 	mvn.w	r3, #15
 800d44e:	e016      	b.n	800d47e <tcp_recv_null+0x56>

  if (p != NULL) {
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d009      	beq.n	800d46a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	891b      	ldrh	r3, [r3, #8]
 800d45a:	4619      	mov	r1, r3
 800d45c:	68b8      	ldr	r0, [r7, #8]
 800d45e:	f7ff fb17 	bl	800ca90 <tcp_recved>
    pbuf_free(p);
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f7fe fd1a 	bl	800be9c <pbuf_free>
 800d468:	e008      	b.n	800d47c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d46a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d104      	bne.n	800d47c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d472:	68b8      	ldr	r0, [r7, #8]
 800d474:	f7ff f9bc 	bl	800c7f0 <tcp_close>
 800d478:	4603      	mov	r3, r0
 800d47a:	e000      	b.n	800d47e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d47c:	2300      	movs	r3, #0
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3710      	adds	r7, #16
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
 800d486:	bf00      	nop
 800d488:	0801613c 	.word	0x0801613c
 800d48c:	080166ac 	.word	0x080166ac
 800d490:	08016180 	.word	0x08016180

0800d494 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b086      	sub	sp, #24
 800d498:	af00      	add	r7, sp, #0
 800d49a:	4603      	mov	r3, r0
 800d49c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d49e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	db01      	blt.n	800d4aa <tcp_kill_prio+0x16>
 800d4a6:	79fb      	ldrb	r3, [r7, #7]
 800d4a8:	e000      	b.n	800d4ac <tcp_kill_prio+0x18>
 800d4aa:	237f      	movs	r3, #127	@ 0x7f
 800d4ac:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d4ae:	7afb      	ldrb	r3, [r7, #11]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d034      	beq.n	800d51e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d4b4:	7afb      	ldrb	r3, [r7, #11]
 800d4b6:	3b01      	subs	r3, #1
 800d4b8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d4c2:	4b19      	ldr	r3, [pc, #100]	@ (800d528 <tcp_kill_prio+0x94>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	617b      	str	r3, [r7, #20]
 800d4c8:	e01f      	b.n	800d50a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	7d5b      	ldrb	r3, [r3, #21]
 800d4ce:	7afa      	ldrb	r2, [r7, #11]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d80c      	bhi.n	800d4ee <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d4d8:	7afa      	ldrb	r2, [r7, #11]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d112      	bne.n	800d504 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d4de:	4b13      	ldr	r3, [pc, #76]	@ (800d52c <tcp_kill_prio+0x98>)
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	6a1b      	ldr	r3, [r3, #32]
 800d4e6:	1ad3      	subs	r3, r2, r3
 800d4e8:	68fa      	ldr	r2, [r7, #12]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d80a      	bhi.n	800d504 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d4ee:	4b0f      	ldr	r3, [pc, #60]	@ (800d52c <tcp_kill_prio+0x98>)
 800d4f0:	681a      	ldr	r2, [r3, #0]
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	6a1b      	ldr	r3, [r3, #32]
 800d4f6:	1ad3      	subs	r3, r2, r3
 800d4f8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	7d5b      	ldrb	r3, [r3, #21]
 800d502:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	68db      	ldr	r3, [r3, #12]
 800d508:	617b      	str	r3, [r7, #20]
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d1dc      	bne.n	800d4ca <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d004      	beq.n	800d520 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d516:	6938      	ldr	r0, [r7, #16]
 800d518:	f7ff fa54 	bl	800c9c4 <tcp_abort>
 800d51c:	e000      	b.n	800d520 <tcp_kill_prio+0x8c>
    return;
 800d51e:	bf00      	nop
  }
}
 800d520:	3718      	adds	r7, #24
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
 800d526:	bf00      	nop
 800d528:	2000d3b4 	.word	0x2000d3b4
 800d52c:	2000d3a8 	.word	0x2000d3a8

0800d530 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b086      	sub	sp, #24
 800d534:	af00      	add	r7, sp, #0
 800d536:	4603      	mov	r3, r0
 800d538:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d53a:	79fb      	ldrb	r3, [r7, #7]
 800d53c:	2b08      	cmp	r3, #8
 800d53e:	d009      	beq.n	800d554 <tcp_kill_state+0x24>
 800d540:	79fb      	ldrb	r3, [r7, #7]
 800d542:	2b09      	cmp	r3, #9
 800d544:	d006      	beq.n	800d554 <tcp_kill_state+0x24>
 800d546:	4b1a      	ldr	r3, [pc, #104]	@ (800d5b0 <tcp_kill_state+0x80>)
 800d548:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800d54c:	4919      	ldr	r1, [pc, #100]	@ (800d5b4 <tcp_kill_state+0x84>)
 800d54e:	481a      	ldr	r0, [pc, #104]	@ (800d5b8 <tcp_kill_state+0x88>)
 800d550:	f007 f882 	bl	8014658 <iprintf>

  inactivity = 0;
 800d554:	2300      	movs	r3, #0
 800d556:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d558:	2300      	movs	r3, #0
 800d55a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d55c:	4b17      	ldr	r3, [pc, #92]	@ (800d5bc <tcp_kill_state+0x8c>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	617b      	str	r3, [r7, #20]
 800d562:	e017      	b.n	800d594 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	7d1b      	ldrb	r3, [r3, #20]
 800d568:	79fa      	ldrb	r2, [r7, #7]
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d10f      	bne.n	800d58e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d56e:	4b14      	ldr	r3, [pc, #80]	@ (800d5c0 <tcp_kill_state+0x90>)
 800d570:	681a      	ldr	r2, [r3, #0]
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	6a1b      	ldr	r3, [r3, #32]
 800d576:	1ad3      	subs	r3, r2, r3
 800d578:	68fa      	ldr	r2, [r7, #12]
 800d57a:	429a      	cmp	r2, r3
 800d57c:	d807      	bhi.n	800d58e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d57e:	4b10      	ldr	r3, [pc, #64]	@ (800d5c0 <tcp_kill_state+0x90>)
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	6a1b      	ldr	r3, [r3, #32]
 800d586:	1ad3      	subs	r3, r2, r3
 800d588:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	68db      	ldr	r3, [r3, #12]
 800d592:	617b      	str	r3, [r7, #20]
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d1e4      	bne.n	800d564 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d003      	beq.n	800d5a8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d5a0:	2100      	movs	r1, #0
 800d5a2:	6938      	ldr	r0, [r7, #16]
 800d5a4:	f7ff f950 	bl	800c848 <tcp_abandon>
  }
}
 800d5a8:	bf00      	nop
 800d5aa:	3718      	adds	r7, #24
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}
 800d5b0:	0801613c 	.word	0x0801613c
 800d5b4:	080166c8 	.word	0x080166c8
 800d5b8:	08016180 	.word	0x08016180
 800d5bc:	2000d3b4 	.word	0x2000d3b4
 800d5c0:	2000d3a8 	.word	0x2000d3a8

0800d5c4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5d2:	4b12      	ldr	r3, [pc, #72]	@ (800d61c <tcp_kill_timewait+0x58>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	60fb      	str	r3, [r7, #12]
 800d5d8:	e012      	b.n	800d600 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d5da:	4b11      	ldr	r3, [pc, #68]	@ (800d620 <tcp_kill_timewait+0x5c>)
 800d5dc:	681a      	ldr	r2, [r3, #0]
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	6a1b      	ldr	r3, [r3, #32]
 800d5e2:	1ad3      	subs	r3, r2, r3
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d807      	bhi.n	800d5fa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d5ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d620 <tcp_kill_timewait+0x5c>)
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	6a1b      	ldr	r3, [r3, #32]
 800d5f2:	1ad3      	subs	r3, r2, r3
 800d5f4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	60fb      	str	r3, [r7, #12]
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d1e9      	bne.n	800d5da <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d002      	beq.n	800d612 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d60c:	68b8      	ldr	r0, [r7, #8]
 800d60e:	f7ff f9d9 	bl	800c9c4 <tcp_abort>
  }
}
 800d612:	bf00      	nop
 800d614:	3710      	adds	r7, #16
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	2000d3b8 	.word	0x2000d3b8
 800d620:	2000d3a8 	.word	0x2000d3a8

0800d624 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d62a:	4b10      	ldr	r3, [pc, #64]	@ (800d66c <tcp_handle_closepend+0x48>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d630:	e014      	b.n	800d65c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	68db      	ldr	r3, [r3, #12]
 800d636:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	8b5b      	ldrh	r3, [r3, #26]
 800d63c:	f003 0308 	and.w	r3, r3, #8
 800d640:	2b00      	cmp	r3, #0
 800d642:	d009      	beq.n	800d658 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	8b5b      	ldrh	r3, [r3, #26]
 800d648:	f023 0308 	bic.w	r3, r3, #8
 800d64c:	b29a      	uxth	r2, r3
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f7ff f862 	bl	800c71c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d1e7      	bne.n	800d632 <tcp_handle_closepend+0xe>
  }
}
 800d662:	bf00      	nop
 800d664:	bf00      	nop
 800d666:	3708      	adds	r7, #8
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}
 800d66c:	2000d3b4 	.word	0x2000d3b4

0800d670 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b084      	sub	sp, #16
 800d674:	af00      	add	r7, sp, #0
 800d676:	4603      	mov	r3, r0
 800d678:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d67a:	2001      	movs	r0, #1
 800d67c:	f7fd fcf4 	bl	800b068 <memp_malloc>
 800d680:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d126      	bne.n	800d6d6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d688:	f7ff ffcc 	bl	800d624 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d68c:	f7ff ff9a 	bl	800d5c4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d690:	2001      	movs	r0, #1
 800d692:	f7fd fce9 	bl	800b068 <memp_malloc>
 800d696:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d11b      	bne.n	800d6d6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d69e:	2009      	movs	r0, #9
 800d6a0:	f7ff ff46 	bl	800d530 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d6a4:	2001      	movs	r0, #1
 800d6a6:	f7fd fcdf 	bl	800b068 <memp_malloc>
 800d6aa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d111      	bne.n	800d6d6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d6b2:	2008      	movs	r0, #8
 800d6b4:	f7ff ff3c 	bl	800d530 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d6b8:	2001      	movs	r0, #1
 800d6ba:	f7fd fcd5 	bl	800b068 <memp_malloc>
 800d6be:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d107      	bne.n	800d6d6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d6c6:	79fb      	ldrb	r3, [r7, #7]
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7ff fee3 	bl	800d494 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d6ce:	2001      	movs	r0, #1
 800d6d0:	f7fd fcca 	bl	800b068 <memp_malloc>
 800d6d4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d03f      	beq.n	800d75c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d6dc:	229c      	movs	r2, #156	@ 0x9c
 800d6de:	2100      	movs	r1, #0
 800d6e0:	68f8      	ldr	r0, [r7, #12]
 800d6e2:	f007 f8b3 	bl	801484c <memset>
    pcb->prio = prio;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	79fa      	ldrb	r2, [r7, #7]
 800d6ea:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d6f2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800d6fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	22ff      	movs	r2, #255	@ 0xff
 800d70a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800d712:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	2206      	movs	r2, #6
 800d718:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2206      	movs	r2, #6
 800d720:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d728:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2201      	movs	r2, #1
 800d72e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800d732:	4b0d      	ldr	r3, [pc, #52]	@ (800d768 <tcp_alloc+0xf8>)
 800d734:	681a      	ldr	r2, [r3, #0]
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d73a:	4b0c      	ldr	r3, [pc, #48]	@ (800d76c <tcp_alloc+0xfc>)
 800d73c:	781a      	ldrb	r2, [r3, #0]
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d748:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	4a08      	ldr	r2, [pc, #32]	@ (800d770 <tcp_alloc+0x100>)
 800d750:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	4a07      	ldr	r2, [pc, #28]	@ (800d774 <tcp_alloc+0x104>)
 800d758:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d75c:	68fb      	ldr	r3, [r7, #12]
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3710      	adds	r7, #16
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	2000d3a8 	.word	0x2000d3a8
 800d76c:	2000d3be 	.word	0x2000d3be
 800d770:	0800d429 	.word	0x0800d429
 800d774:	006ddd00 	.word	0x006ddd00

0800d778 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b082      	sub	sp, #8
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d107      	bne.n	800d796 <tcp_pcb_purge+0x1e>
 800d786:	4b21      	ldr	r3, [pc, #132]	@ (800d80c <tcp_pcb_purge+0x94>)
 800d788:	f640 0251 	movw	r2, #2129	@ 0x851
 800d78c:	4920      	ldr	r1, [pc, #128]	@ (800d810 <tcp_pcb_purge+0x98>)
 800d78e:	4821      	ldr	r0, [pc, #132]	@ (800d814 <tcp_pcb_purge+0x9c>)
 800d790:	f006 ff62 	bl	8014658 <iprintf>
 800d794:	e037      	b.n	800d806 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	7d1b      	ldrb	r3, [r3, #20]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d033      	beq.n	800d806 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d7a2:	2b0a      	cmp	r3, #10
 800d7a4:	d02f      	beq.n	800d806 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d7aa:	2b01      	cmp	r3, #1
 800d7ac:	d02b      	beq.n	800d806 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d007      	beq.n	800d7c6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7fe fb6e 	bl	800be9c <pbuf_free>
      pcb->refused_data = NULL;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d002      	beq.n	800d7d4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f000 f986 	bl	800dae0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d7da:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f7ff fdc7 	bl	800d374 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7ff fdc2 	bl	800d374 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2200      	movs	r2, #0
 800d802:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d806:	3708      	adds	r7, #8
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}
 800d80c:	0801613c 	.word	0x0801613c
 800d810:	08016788 	.word	0x08016788
 800d814:	08016180 	.word	0x08016180

0800d818 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
 800d820:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d106      	bne.n	800d836 <tcp_pcb_remove+0x1e>
 800d828:	4b3e      	ldr	r3, [pc, #248]	@ (800d924 <tcp_pcb_remove+0x10c>)
 800d82a:	f640 0283 	movw	r2, #2179	@ 0x883
 800d82e:	493e      	ldr	r1, [pc, #248]	@ (800d928 <tcp_pcb_remove+0x110>)
 800d830:	483e      	ldr	r0, [pc, #248]	@ (800d92c <tcp_pcb_remove+0x114>)
 800d832:	f006 ff11 	bl	8014658 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d106      	bne.n	800d84a <tcp_pcb_remove+0x32>
 800d83c:	4b39      	ldr	r3, [pc, #228]	@ (800d924 <tcp_pcb_remove+0x10c>)
 800d83e:	f640 0284 	movw	r2, #2180	@ 0x884
 800d842:	493b      	ldr	r1, [pc, #236]	@ (800d930 <tcp_pcb_remove+0x118>)
 800d844:	4839      	ldr	r0, [pc, #228]	@ (800d92c <tcp_pcb_remove+0x114>)
 800d846:	f006 ff07 	bl	8014658 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	683a      	ldr	r2, [r7, #0]
 800d850:	429a      	cmp	r2, r3
 800d852:	d105      	bne.n	800d860 <tcp_pcb_remove+0x48>
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	68da      	ldr	r2, [r3, #12]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	601a      	str	r2, [r3, #0]
 800d85e:	e013      	b.n	800d888 <tcp_pcb_remove+0x70>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	60fb      	str	r3, [r7, #12]
 800d866:	e00c      	b.n	800d882 <tcp_pcb_remove+0x6a>
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	68db      	ldr	r3, [r3, #12]
 800d86c:	683a      	ldr	r2, [r7, #0]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d104      	bne.n	800d87c <tcp_pcb_remove+0x64>
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	68da      	ldr	r2, [r3, #12]
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	60da      	str	r2, [r3, #12]
 800d87a:	e005      	b.n	800d888 <tcp_pcb_remove+0x70>
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	68db      	ldr	r3, [r3, #12]
 800d880:	60fb      	str	r3, [r7, #12]
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d1ef      	bne.n	800d868 <tcp_pcb_remove+0x50>
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	2200      	movs	r2, #0
 800d88c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d88e:	6838      	ldr	r0, [r7, #0]
 800d890:	f7ff ff72 	bl	800d778 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	7d1b      	ldrb	r3, [r3, #20]
 800d898:	2b0a      	cmp	r3, #10
 800d89a:	d013      	beq.n	800d8c4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d8a0:	2b01      	cmp	r3, #1
 800d8a2:	d00f      	beq.n	800d8c4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	8b5b      	ldrh	r3, [r3, #26]
 800d8a8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d009      	beq.n	800d8c4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	8b5b      	ldrh	r3, [r3, #26]
 800d8b4:	f043 0302 	orr.w	r3, r3, #2
 800d8b8:	b29a      	uxth	r2, r3
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d8be:	6838      	ldr	r0, [r7, #0]
 800d8c0:	f002 ff68 	bl	8010794 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	7d1b      	ldrb	r3, [r3, #20]
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d020      	beq.n	800d90e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d006      	beq.n	800d8e2 <tcp_pcb_remove+0xca>
 800d8d4:	4b13      	ldr	r3, [pc, #76]	@ (800d924 <tcp_pcb_remove+0x10c>)
 800d8d6:	f640 0293 	movw	r2, #2195	@ 0x893
 800d8da:	4916      	ldr	r1, [pc, #88]	@ (800d934 <tcp_pcb_remove+0x11c>)
 800d8dc:	4813      	ldr	r0, [pc, #76]	@ (800d92c <tcp_pcb_remove+0x114>)
 800d8de:	f006 febb 	bl	8014658 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d006      	beq.n	800d8f8 <tcp_pcb_remove+0xe0>
 800d8ea:	4b0e      	ldr	r3, [pc, #56]	@ (800d924 <tcp_pcb_remove+0x10c>)
 800d8ec:	f640 0294 	movw	r2, #2196	@ 0x894
 800d8f0:	4911      	ldr	r1, [pc, #68]	@ (800d938 <tcp_pcb_remove+0x120>)
 800d8f2:	480e      	ldr	r0, [pc, #56]	@ (800d92c <tcp_pcb_remove+0x114>)
 800d8f4:	f006 feb0 	bl	8014658 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d006      	beq.n	800d90e <tcp_pcb_remove+0xf6>
 800d900:	4b08      	ldr	r3, [pc, #32]	@ (800d924 <tcp_pcb_remove+0x10c>)
 800d902:	f640 0296 	movw	r2, #2198	@ 0x896
 800d906:	490d      	ldr	r1, [pc, #52]	@ (800d93c <tcp_pcb_remove+0x124>)
 800d908:	4808      	ldr	r0, [pc, #32]	@ (800d92c <tcp_pcb_remove+0x114>)
 800d90a:	f006 fea5 	bl	8014658 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	2200      	movs	r2, #0
 800d912:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	2200      	movs	r2, #0
 800d918:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d91a:	bf00      	nop
 800d91c:	3710      	adds	r7, #16
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}
 800d922:	bf00      	nop
 800d924:	0801613c 	.word	0x0801613c
 800d928:	080167a4 	.word	0x080167a4
 800d92c:	08016180 	.word	0x08016180
 800d930:	080167c0 	.word	0x080167c0
 800d934:	080167e0 	.word	0x080167e0
 800d938:	080167f8 	.word	0x080167f8
 800d93c:	08016814 	.word	0x08016814

0800d940 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b082      	sub	sp, #8
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d106      	bne.n	800d95c <tcp_next_iss+0x1c>
 800d94e:	4b0a      	ldr	r3, [pc, #40]	@ (800d978 <tcp_next_iss+0x38>)
 800d950:	f640 02af 	movw	r2, #2223	@ 0x8af
 800d954:	4909      	ldr	r1, [pc, #36]	@ (800d97c <tcp_next_iss+0x3c>)
 800d956:	480a      	ldr	r0, [pc, #40]	@ (800d980 <tcp_next_iss+0x40>)
 800d958:	f006 fe7e 	bl	8014658 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d95c:	4b09      	ldr	r3, [pc, #36]	@ (800d984 <tcp_next_iss+0x44>)
 800d95e:	681a      	ldr	r2, [r3, #0]
 800d960:	4b09      	ldr	r3, [pc, #36]	@ (800d988 <tcp_next_iss+0x48>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	4413      	add	r3, r2
 800d966:	4a07      	ldr	r2, [pc, #28]	@ (800d984 <tcp_next_iss+0x44>)
 800d968:	6013      	str	r3, [r2, #0]
  return iss;
 800d96a:	4b06      	ldr	r3, [pc, #24]	@ (800d984 <tcp_next_iss+0x44>)
 800d96c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3708      	adds	r7, #8
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}
 800d976:	bf00      	nop
 800d978:	0801613c 	.word	0x0801613c
 800d97c:	0801682c 	.word	0x0801682c
 800d980:	08016180 	.word	0x08016180
 800d984:	20000028 	.word	0x20000028
 800d988:	2000d3a8 	.word	0x2000d3a8

0800d98c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b086      	sub	sp, #24
 800d990:	af00      	add	r7, sp, #0
 800d992:	4603      	mov	r3, r0
 800d994:	60b9      	str	r1, [r7, #8]
 800d996:	607a      	str	r2, [r7, #4]
 800d998:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d106      	bne.n	800d9ae <tcp_eff_send_mss_netif+0x22>
 800d9a0:	4b14      	ldr	r3, [pc, #80]	@ (800d9f4 <tcp_eff_send_mss_netif+0x68>)
 800d9a2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800d9a6:	4914      	ldr	r1, [pc, #80]	@ (800d9f8 <tcp_eff_send_mss_netif+0x6c>)
 800d9a8:	4814      	ldr	r0, [pc, #80]	@ (800d9fc <tcp_eff_send_mss_netif+0x70>)
 800d9aa:	f006 fe55 	bl	8014658 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d101      	bne.n	800d9b8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d9b4:	89fb      	ldrh	r3, [r7, #14]
 800d9b6:	e019      	b.n	800d9ec <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d9bc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d9be:	8afb      	ldrh	r3, [r7, #22]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d012      	beq.n	800d9ea <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d9c4:	2328      	movs	r3, #40	@ 0x28
 800d9c6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d9c8:	8afa      	ldrh	r2, [r7, #22]
 800d9ca:	8abb      	ldrh	r3, [r7, #20]
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d904      	bls.n	800d9da <tcp_eff_send_mss_netif+0x4e>
 800d9d0:	8afa      	ldrh	r2, [r7, #22]
 800d9d2:	8abb      	ldrh	r3, [r7, #20]
 800d9d4:	1ad3      	subs	r3, r2, r3
 800d9d6:	b29b      	uxth	r3, r3
 800d9d8:	e000      	b.n	800d9dc <tcp_eff_send_mss_netif+0x50>
 800d9da:	2300      	movs	r3, #0
 800d9dc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d9de:	8a7a      	ldrh	r2, [r7, #18]
 800d9e0:	89fb      	ldrh	r3, [r7, #14]
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	bf28      	it	cs
 800d9e6:	4613      	movcs	r3, r2
 800d9e8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d9ea:	89fb      	ldrh	r3, [r7, #14]
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3718      	adds	r7, #24
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}
 800d9f4:	0801613c 	.word	0x0801613c
 800d9f8:	08016848 	.word	0x08016848
 800d9fc:	08016180 	.word	0x08016180

0800da00 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b084      	sub	sp, #16
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d119      	bne.n	800da48 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800da14:	4b10      	ldr	r3, [pc, #64]	@ (800da58 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800da16:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800da1a:	4910      	ldr	r1, [pc, #64]	@ (800da5c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800da1c:	4810      	ldr	r0, [pc, #64]	@ (800da60 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800da1e:	f006 fe1b 	bl	8014658 <iprintf>

  while (pcb != NULL) {
 800da22:	e011      	b.n	800da48 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681a      	ldr	r2, [r3, #0]
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d108      	bne.n	800da42 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	68db      	ldr	r3, [r3, #12]
 800da34:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800da36:	68f8      	ldr	r0, [r7, #12]
 800da38:	f7fe ffc4 	bl	800c9c4 <tcp_abort>
      pcb = next;
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	60fb      	str	r3, [r7, #12]
 800da40:	e002      	b.n	800da48 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	68db      	ldr	r3, [r3, #12]
 800da46:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d1ea      	bne.n	800da24 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800da4e:	bf00      	nop
 800da50:	bf00      	nop
 800da52:	3710      	adds	r7, #16
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}
 800da58:	0801613c 	.word	0x0801613c
 800da5c:	08016870 	.word	0x08016870
 800da60:	08016180 	.word	0x08016180

0800da64 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b084      	sub	sp, #16
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d02a      	beq.n	800daca <tcp_netif_ip_addr_changed+0x66>
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d026      	beq.n	800daca <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800da7c:	4b15      	ldr	r3, [pc, #84]	@ (800dad4 <tcp_netif_ip_addr_changed+0x70>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4619      	mov	r1, r3
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f7ff ffbc 	bl	800da00 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800da88:	4b13      	ldr	r3, [pc, #76]	@ (800dad8 <tcp_netif_ip_addr_changed+0x74>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	4619      	mov	r1, r3
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f7ff ffb6 	bl	800da00 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d017      	beq.n	800daca <tcp_netif_ip_addr_changed+0x66>
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d013      	beq.n	800daca <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800daa2:	4b0e      	ldr	r3, [pc, #56]	@ (800dadc <tcp_netif_ip_addr_changed+0x78>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	60fb      	str	r3, [r7, #12]
 800daa8:	e00c      	b.n	800dac4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681a      	ldr	r2, [r3, #0]
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d103      	bne.n	800dabe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	68db      	ldr	r3, [r3, #12]
 800dac2:	60fb      	str	r3, [r7, #12]
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d1ef      	bne.n	800daaa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800daca:	bf00      	nop
 800dacc:	3710      	adds	r7, #16
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
 800dad2:	bf00      	nop
 800dad4:	2000d3b4 	.word	0x2000d3b4
 800dad8:	2000d3ac 	.word	0x2000d3ac
 800dadc:	2000d3b0 	.word	0x2000d3b0

0800dae0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b082      	sub	sp, #8
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800daec:	2b00      	cmp	r3, #0
 800daee:	d007      	beq.n	800db00 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800daf4:	4618      	mov	r0, r3
 800daf6:	f7ff fc3d 	bl	800d374 <tcp_segs_free>
    pcb->ooseq = NULL;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2200      	movs	r2, #0
 800dafe:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800db00:	bf00      	nop
 800db02:	3708      	adds	r7, #8
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800db08:	b590      	push	{r4, r7, lr}
 800db0a:	b08d      	sub	sp, #52	@ 0x34
 800db0c:	af04      	add	r7, sp, #16
 800db0e:	6078      	str	r0, [r7, #4]
 800db10:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d105      	bne.n	800db24 <tcp_input+0x1c>
 800db18:	4b9b      	ldr	r3, [pc, #620]	@ (800dd88 <tcp_input+0x280>)
 800db1a:	2283      	movs	r2, #131	@ 0x83
 800db1c:	499b      	ldr	r1, [pc, #620]	@ (800dd8c <tcp_input+0x284>)
 800db1e:	489c      	ldr	r0, [pc, #624]	@ (800dd90 <tcp_input+0x288>)
 800db20:	f006 fd9a 	bl	8014658 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	4a9a      	ldr	r2, [pc, #616]	@ (800dd94 <tcp_input+0x28c>)
 800db2a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	895b      	ldrh	r3, [r3, #10]
 800db30:	2b13      	cmp	r3, #19
 800db32:	f240 83d1 	bls.w	800e2d8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800db36:	4b98      	ldr	r3, [pc, #608]	@ (800dd98 <tcp_input+0x290>)
 800db38:	695b      	ldr	r3, [r3, #20]
 800db3a:	4a97      	ldr	r2, [pc, #604]	@ (800dd98 <tcp_input+0x290>)
 800db3c:	6812      	ldr	r2, [r2, #0]
 800db3e:	4611      	mov	r1, r2
 800db40:	4618      	mov	r0, r3
 800db42:	f005 fc41 	bl	80133c8 <ip4_addr_isbroadcast_u32>
 800db46:	4603      	mov	r3, r0
 800db48:	2b00      	cmp	r3, #0
 800db4a:	f040 83c7 	bne.w	800e2dc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800db4e:	4b92      	ldr	r3, [pc, #584]	@ (800dd98 <tcp_input+0x290>)
 800db50:	695b      	ldr	r3, [r3, #20]
 800db52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800db56:	2be0      	cmp	r3, #224	@ 0xe0
 800db58:	f000 83c0 	beq.w	800e2dc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800db5c:	4b8d      	ldr	r3, [pc, #564]	@ (800dd94 <tcp_input+0x28c>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	899b      	ldrh	r3, [r3, #12]
 800db62:	b29b      	uxth	r3, r3
 800db64:	4618      	mov	r0, r3
 800db66:	f7fc fdab 	bl	800a6c0 <lwip_htons>
 800db6a:	4603      	mov	r3, r0
 800db6c:	0b1b      	lsrs	r3, r3, #12
 800db6e:	b29b      	uxth	r3, r3
 800db70:	b2db      	uxtb	r3, r3
 800db72:	009b      	lsls	r3, r3, #2
 800db74:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800db76:	7cbb      	ldrb	r3, [r7, #18]
 800db78:	2b13      	cmp	r3, #19
 800db7a:	f240 83b1 	bls.w	800e2e0 <tcp_input+0x7d8>
 800db7e:	7cbb      	ldrb	r3, [r7, #18]
 800db80:	b29a      	uxth	r2, r3
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	891b      	ldrh	r3, [r3, #8]
 800db86:	429a      	cmp	r2, r3
 800db88:	f200 83aa 	bhi.w	800e2e0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800db8c:	7cbb      	ldrb	r3, [r7, #18]
 800db8e:	b29b      	uxth	r3, r3
 800db90:	3b14      	subs	r3, #20
 800db92:	b29a      	uxth	r2, r3
 800db94:	4b81      	ldr	r3, [pc, #516]	@ (800dd9c <tcp_input+0x294>)
 800db96:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800db98:	4b81      	ldr	r3, [pc, #516]	@ (800dda0 <tcp_input+0x298>)
 800db9a:	2200      	movs	r2, #0
 800db9c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	895a      	ldrh	r2, [r3, #10]
 800dba2:	7cbb      	ldrb	r3, [r7, #18]
 800dba4:	b29b      	uxth	r3, r3
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d309      	bcc.n	800dbbe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800dbaa:	4b7c      	ldr	r3, [pc, #496]	@ (800dd9c <tcp_input+0x294>)
 800dbac:	881a      	ldrh	r2, [r3, #0]
 800dbae:	4b7d      	ldr	r3, [pc, #500]	@ (800dda4 <tcp_input+0x29c>)
 800dbb0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800dbb2:	7cbb      	ldrb	r3, [r7, #18]
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f7fe f8ea 	bl	800bd90 <pbuf_remove_header>
 800dbbc:	e04e      	b.n	800dc5c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d105      	bne.n	800dbd2 <tcp_input+0xca>
 800dbc6:	4b70      	ldr	r3, [pc, #448]	@ (800dd88 <tcp_input+0x280>)
 800dbc8:	22c2      	movs	r2, #194	@ 0xc2
 800dbca:	4977      	ldr	r1, [pc, #476]	@ (800dda8 <tcp_input+0x2a0>)
 800dbcc:	4870      	ldr	r0, [pc, #448]	@ (800dd90 <tcp_input+0x288>)
 800dbce:	f006 fd43 	bl	8014658 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800dbd2:	2114      	movs	r1, #20
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f7fe f8db 	bl	800bd90 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	895a      	ldrh	r2, [r3, #10]
 800dbde:	4b71      	ldr	r3, [pc, #452]	@ (800dda4 <tcp_input+0x29c>)
 800dbe0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800dbe2:	4b6e      	ldr	r3, [pc, #440]	@ (800dd9c <tcp_input+0x294>)
 800dbe4:	881a      	ldrh	r2, [r3, #0]
 800dbe6:	4b6f      	ldr	r3, [pc, #444]	@ (800dda4 <tcp_input+0x29c>)
 800dbe8:	881b      	ldrh	r3, [r3, #0]
 800dbea:	1ad3      	subs	r3, r2, r3
 800dbec:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800dbee:	4b6d      	ldr	r3, [pc, #436]	@ (800dda4 <tcp_input+0x29c>)
 800dbf0:	881b      	ldrh	r3, [r3, #0]
 800dbf2:	4619      	mov	r1, r3
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f7fe f8cb 	bl	800bd90 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	895b      	ldrh	r3, [r3, #10]
 800dc00:	8a3a      	ldrh	r2, [r7, #16]
 800dc02:	429a      	cmp	r2, r3
 800dc04:	f200 836e 	bhi.w	800e2e4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	685b      	ldr	r3, [r3, #4]
 800dc0e:	4a64      	ldr	r2, [pc, #400]	@ (800dda0 <tcp_input+0x298>)
 800dc10:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	8a3a      	ldrh	r2, [r7, #16]
 800dc18:	4611      	mov	r1, r2
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f7fe f8b8 	bl	800bd90 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	891a      	ldrh	r2, [r3, #8]
 800dc24:	8a3b      	ldrh	r3, [r7, #16]
 800dc26:	1ad3      	subs	r3, r2, r3
 800dc28:	b29a      	uxth	r2, r3
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	895b      	ldrh	r3, [r3, #10]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d005      	beq.n	800dc42 <tcp_input+0x13a>
 800dc36:	4b54      	ldr	r3, [pc, #336]	@ (800dd88 <tcp_input+0x280>)
 800dc38:	22df      	movs	r2, #223	@ 0xdf
 800dc3a:	495c      	ldr	r1, [pc, #368]	@ (800ddac <tcp_input+0x2a4>)
 800dc3c:	4854      	ldr	r0, [pc, #336]	@ (800dd90 <tcp_input+0x288>)
 800dc3e:	f006 fd0b 	bl	8014658 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	891a      	ldrh	r2, [r3, #8]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	891b      	ldrh	r3, [r3, #8]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d005      	beq.n	800dc5c <tcp_input+0x154>
 800dc50:	4b4d      	ldr	r3, [pc, #308]	@ (800dd88 <tcp_input+0x280>)
 800dc52:	22e0      	movs	r2, #224	@ 0xe0
 800dc54:	4956      	ldr	r1, [pc, #344]	@ (800ddb0 <tcp_input+0x2a8>)
 800dc56:	484e      	ldr	r0, [pc, #312]	@ (800dd90 <tcp_input+0x288>)
 800dc58:	f006 fcfe 	bl	8014658 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800dc5c:	4b4d      	ldr	r3, [pc, #308]	@ (800dd94 <tcp_input+0x28c>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	881b      	ldrh	r3, [r3, #0]
 800dc62:	b29b      	uxth	r3, r3
 800dc64:	4a4b      	ldr	r2, [pc, #300]	@ (800dd94 <tcp_input+0x28c>)
 800dc66:	6814      	ldr	r4, [r2, #0]
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7fc fd29 	bl	800a6c0 <lwip_htons>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800dc72:	4b48      	ldr	r3, [pc, #288]	@ (800dd94 <tcp_input+0x28c>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	885b      	ldrh	r3, [r3, #2]
 800dc78:	b29b      	uxth	r3, r3
 800dc7a:	4a46      	ldr	r2, [pc, #280]	@ (800dd94 <tcp_input+0x28c>)
 800dc7c:	6814      	ldr	r4, [r2, #0]
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7fc fd1e 	bl	800a6c0 <lwip_htons>
 800dc84:	4603      	mov	r3, r0
 800dc86:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800dc88:	4b42      	ldr	r3, [pc, #264]	@ (800dd94 <tcp_input+0x28c>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	4a41      	ldr	r2, [pc, #260]	@ (800dd94 <tcp_input+0x28c>)
 800dc90:	6814      	ldr	r4, [r2, #0]
 800dc92:	4618      	mov	r0, r3
 800dc94:	f7fc fd29 	bl	800a6ea <lwip_htonl>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	6063      	str	r3, [r4, #4]
 800dc9c:	6863      	ldr	r3, [r4, #4]
 800dc9e:	4a45      	ldr	r2, [pc, #276]	@ (800ddb4 <tcp_input+0x2ac>)
 800dca0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800dca2:	4b3c      	ldr	r3, [pc, #240]	@ (800dd94 <tcp_input+0x28c>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	689b      	ldr	r3, [r3, #8]
 800dca8:	4a3a      	ldr	r2, [pc, #232]	@ (800dd94 <tcp_input+0x28c>)
 800dcaa:	6814      	ldr	r4, [r2, #0]
 800dcac:	4618      	mov	r0, r3
 800dcae:	f7fc fd1c 	bl	800a6ea <lwip_htonl>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	60a3      	str	r3, [r4, #8]
 800dcb6:	68a3      	ldr	r3, [r4, #8]
 800dcb8:	4a3f      	ldr	r2, [pc, #252]	@ (800ddb8 <tcp_input+0x2b0>)
 800dcba:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800dcbc:	4b35      	ldr	r3, [pc, #212]	@ (800dd94 <tcp_input+0x28c>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	89db      	ldrh	r3, [r3, #14]
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	4a33      	ldr	r2, [pc, #204]	@ (800dd94 <tcp_input+0x28c>)
 800dcc6:	6814      	ldr	r4, [r2, #0]
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7fc fcf9 	bl	800a6c0 <lwip_htons>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800dcd2:	4b30      	ldr	r3, [pc, #192]	@ (800dd94 <tcp_input+0x28c>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	899b      	ldrh	r3, [r3, #12]
 800dcd8:	b29b      	uxth	r3, r3
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7fc fcf0 	bl	800a6c0 <lwip_htons>
 800dce0:	4603      	mov	r3, r0
 800dce2:	b2db      	uxtb	r3, r3
 800dce4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dce8:	b2da      	uxtb	r2, r3
 800dcea:	4b34      	ldr	r3, [pc, #208]	@ (800ddbc <tcp_input+0x2b4>)
 800dcec:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	891a      	ldrh	r2, [r3, #8]
 800dcf2:	4b33      	ldr	r3, [pc, #204]	@ (800ddc0 <tcp_input+0x2b8>)
 800dcf4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800dcf6:	4b31      	ldr	r3, [pc, #196]	@ (800ddbc <tcp_input+0x2b4>)
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	f003 0303 	and.w	r3, r3, #3
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d00c      	beq.n	800dd1c <tcp_input+0x214>
    tcplen++;
 800dd02:	4b2f      	ldr	r3, [pc, #188]	@ (800ddc0 <tcp_input+0x2b8>)
 800dd04:	881b      	ldrh	r3, [r3, #0]
 800dd06:	3301      	adds	r3, #1
 800dd08:	b29a      	uxth	r2, r3
 800dd0a:	4b2d      	ldr	r3, [pc, #180]	@ (800ddc0 <tcp_input+0x2b8>)
 800dd0c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	891a      	ldrh	r2, [r3, #8]
 800dd12:	4b2b      	ldr	r3, [pc, #172]	@ (800ddc0 <tcp_input+0x2b8>)
 800dd14:	881b      	ldrh	r3, [r3, #0]
 800dd16:	429a      	cmp	r2, r3
 800dd18:	f200 82e6 	bhi.w	800e2e8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd20:	4b28      	ldr	r3, [pc, #160]	@ (800ddc4 <tcp_input+0x2bc>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	61fb      	str	r3, [r7, #28]
 800dd26:	e09d      	b.n	800de64 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800dd28:	69fb      	ldr	r3, [r7, #28]
 800dd2a:	7d1b      	ldrb	r3, [r3, #20]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d105      	bne.n	800dd3c <tcp_input+0x234>
 800dd30:	4b15      	ldr	r3, [pc, #84]	@ (800dd88 <tcp_input+0x280>)
 800dd32:	22fb      	movs	r2, #251	@ 0xfb
 800dd34:	4924      	ldr	r1, [pc, #144]	@ (800ddc8 <tcp_input+0x2c0>)
 800dd36:	4816      	ldr	r0, [pc, #88]	@ (800dd90 <tcp_input+0x288>)
 800dd38:	f006 fc8e 	bl	8014658 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800dd3c:	69fb      	ldr	r3, [r7, #28]
 800dd3e:	7d1b      	ldrb	r3, [r3, #20]
 800dd40:	2b0a      	cmp	r3, #10
 800dd42:	d105      	bne.n	800dd50 <tcp_input+0x248>
 800dd44:	4b10      	ldr	r3, [pc, #64]	@ (800dd88 <tcp_input+0x280>)
 800dd46:	22fc      	movs	r2, #252	@ 0xfc
 800dd48:	4920      	ldr	r1, [pc, #128]	@ (800ddcc <tcp_input+0x2c4>)
 800dd4a:	4811      	ldr	r0, [pc, #68]	@ (800dd90 <tcp_input+0x288>)
 800dd4c:	f006 fc84 	bl	8014658 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800dd50:	69fb      	ldr	r3, [r7, #28]
 800dd52:	7d1b      	ldrb	r3, [r3, #20]
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	d105      	bne.n	800dd64 <tcp_input+0x25c>
 800dd58:	4b0b      	ldr	r3, [pc, #44]	@ (800dd88 <tcp_input+0x280>)
 800dd5a:	22fd      	movs	r2, #253	@ 0xfd
 800dd5c:	491c      	ldr	r1, [pc, #112]	@ (800ddd0 <tcp_input+0x2c8>)
 800dd5e:	480c      	ldr	r0, [pc, #48]	@ (800dd90 <tcp_input+0x288>)
 800dd60:	f006 fc7a 	bl	8014658 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	7a1b      	ldrb	r3, [r3, #8]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d033      	beq.n	800ddd4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dd6c:	69fb      	ldr	r3, [r7, #28]
 800dd6e:	7a1a      	ldrb	r2, [r3, #8]
 800dd70:	4b09      	ldr	r3, [pc, #36]	@ (800dd98 <tcp_input+0x290>)
 800dd72:	685b      	ldr	r3, [r3, #4]
 800dd74:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dd78:	3301      	adds	r3, #1
 800dd7a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d029      	beq.n	800ddd4 <tcp_input+0x2cc>
      prev = pcb;
 800dd80:	69fb      	ldr	r3, [r7, #28]
 800dd82:	61bb      	str	r3, [r7, #24]
      continue;
 800dd84:	e06b      	b.n	800de5e <tcp_input+0x356>
 800dd86:	bf00      	nop
 800dd88:	080168a4 	.word	0x080168a4
 800dd8c:	080168d8 	.word	0x080168d8
 800dd90:	080168f0 	.word	0x080168f0
 800dd94:	2000d3d0 	.word	0x2000d3d0
 800dd98:	2000a2a8 	.word	0x2000a2a8
 800dd9c:	2000d3d4 	.word	0x2000d3d4
 800dda0:	2000d3d8 	.word	0x2000d3d8
 800dda4:	2000d3d6 	.word	0x2000d3d6
 800dda8:	08016918 	.word	0x08016918
 800ddac:	08016928 	.word	0x08016928
 800ddb0:	08016934 	.word	0x08016934
 800ddb4:	2000d3e0 	.word	0x2000d3e0
 800ddb8:	2000d3e4 	.word	0x2000d3e4
 800ddbc:	2000d3ec 	.word	0x2000d3ec
 800ddc0:	2000d3ea 	.word	0x2000d3ea
 800ddc4:	2000d3b4 	.word	0x2000d3b4
 800ddc8:	08016954 	.word	0x08016954
 800ddcc:	0801697c 	.word	0x0801697c
 800ddd0:	080169a8 	.word	0x080169a8
    }

    if (pcb->remote_port == tcphdr->src &&
 800ddd4:	69fb      	ldr	r3, [r7, #28]
 800ddd6:	8b1a      	ldrh	r2, [r3, #24]
 800ddd8:	4b72      	ldr	r3, [pc, #456]	@ (800dfa4 <tcp_input+0x49c>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	881b      	ldrh	r3, [r3, #0]
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d13a      	bne.n	800de5a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800dde4:	69fb      	ldr	r3, [r7, #28]
 800dde6:	8ada      	ldrh	r2, [r3, #22]
 800dde8:	4b6e      	ldr	r3, [pc, #440]	@ (800dfa4 <tcp_input+0x49c>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	885b      	ldrh	r3, [r3, #2]
 800ddee:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d132      	bne.n	800de5a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ddf4:	69fb      	ldr	r3, [r7, #28]
 800ddf6:	685a      	ldr	r2, [r3, #4]
 800ddf8:	4b6b      	ldr	r3, [pc, #428]	@ (800dfa8 <tcp_input+0x4a0>)
 800ddfa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d12c      	bne.n	800de5a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	4b68      	ldr	r3, [pc, #416]	@ (800dfa8 <tcp_input+0x4a0>)
 800de06:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800de08:	429a      	cmp	r2, r3
 800de0a:	d126      	bne.n	800de5a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800de0c:	69fb      	ldr	r3, [r7, #28]
 800de0e:	68db      	ldr	r3, [r3, #12]
 800de10:	69fa      	ldr	r2, [r7, #28]
 800de12:	429a      	cmp	r2, r3
 800de14:	d106      	bne.n	800de24 <tcp_input+0x31c>
 800de16:	4b65      	ldr	r3, [pc, #404]	@ (800dfac <tcp_input+0x4a4>)
 800de18:	f240 120d 	movw	r2, #269	@ 0x10d
 800de1c:	4964      	ldr	r1, [pc, #400]	@ (800dfb0 <tcp_input+0x4a8>)
 800de1e:	4865      	ldr	r0, [pc, #404]	@ (800dfb4 <tcp_input+0x4ac>)
 800de20:	f006 fc1a 	bl	8014658 <iprintf>
      if (prev != NULL) {
 800de24:	69bb      	ldr	r3, [r7, #24]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d00a      	beq.n	800de40 <tcp_input+0x338>
        prev->next = pcb->next;
 800de2a:	69fb      	ldr	r3, [r7, #28]
 800de2c:	68da      	ldr	r2, [r3, #12]
 800de2e:	69bb      	ldr	r3, [r7, #24]
 800de30:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800de32:	4b61      	ldr	r3, [pc, #388]	@ (800dfb8 <tcp_input+0x4b0>)
 800de34:	681a      	ldr	r2, [r3, #0]
 800de36:	69fb      	ldr	r3, [r7, #28]
 800de38:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800de3a:	4a5f      	ldr	r2, [pc, #380]	@ (800dfb8 <tcp_input+0x4b0>)
 800de3c:	69fb      	ldr	r3, [r7, #28]
 800de3e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800de40:	69fb      	ldr	r3, [r7, #28]
 800de42:	68db      	ldr	r3, [r3, #12]
 800de44:	69fa      	ldr	r2, [r7, #28]
 800de46:	429a      	cmp	r2, r3
 800de48:	d111      	bne.n	800de6e <tcp_input+0x366>
 800de4a:	4b58      	ldr	r3, [pc, #352]	@ (800dfac <tcp_input+0x4a4>)
 800de4c:	f240 1215 	movw	r2, #277	@ 0x115
 800de50:	495a      	ldr	r1, [pc, #360]	@ (800dfbc <tcp_input+0x4b4>)
 800de52:	4858      	ldr	r0, [pc, #352]	@ (800dfb4 <tcp_input+0x4ac>)
 800de54:	f006 fc00 	bl	8014658 <iprintf>
      break;
 800de58:	e009      	b.n	800de6e <tcp_input+0x366>
    }
    prev = pcb;
 800de5a:	69fb      	ldr	r3, [r7, #28]
 800de5c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800de5e:	69fb      	ldr	r3, [r7, #28]
 800de60:	68db      	ldr	r3, [r3, #12]
 800de62:	61fb      	str	r3, [r7, #28]
 800de64:	69fb      	ldr	r3, [r7, #28]
 800de66:	2b00      	cmp	r3, #0
 800de68:	f47f af5e 	bne.w	800dd28 <tcp_input+0x220>
 800de6c:	e000      	b.n	800de70 <tcp_input+0x368>
      break;
 800de6e:	bf00      	nop
  }

  if (pcb == NULL) {
 800de70:	69fb      	ldr	r3, [r7, #28]
 800de72:	2b00      	cmp	r3, #0
 800de74:	f040 80aa 	bne.w	800dfcc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800de78:	4b51      	ldr	r3, [pc, #324]	@ (800dfc0 <tcp_input+0x4b8>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	61fb      	str	r3, [r7, #28]
 800de7e:	e03f      	b.n	800df00 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800de80:	69fb      	ldr	r3, [r7, #28]
 800de82:	7d1b      	ldrb	r3, [r3, #20]
 800de84:	2b0a      	cmp	r3, #10
 800de86:	d006      	beq.n	800de96 <tcp_input+0x38e>
 800de88:	4b48      	ldr	r3, [pc, #288]	@ (800dfac <tcp_input+0x4a4>)
 800de8a:	f240 121f 	movw	r2, #287	@ 0x11f
 800de8e:	494d      	ldr	r1, [pc, #308]	@ (800dfc4 <tcp_input+0x4bc>)
 800de90:	4848      	ldr	r0, [pc, #288]	@ (800dfb4 <tcp_input+0x4ac>)
 800de92:	f006 fbe1 	bl	8014658 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800de96:	69fb      	ldr	r3, [r7, #28]
 800de98:	7a1b      	ldrb	r3, [r3, #8]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d009      	beq.n	800deb2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800de9e:	69fb      	ldr	r3, [r7, #28]
 800dea0:	7a1a      	ldrb	r2, [r3, #8]
 800dea2:	4b41      	ldr	r3, [pc, #260]	@ (800dfa8 <tcp_input+0x4a0>)
 800dea4:	685b      	ldr	r3, [r3, #4]
 800dea6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800deaa:	3301      	adds	r3, #1
 800deac:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800deae:	429a      	cmp	r2, r3
 800deb0:	d122      	bne.n	800def8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800deb2:	69fb      	ldr	r3, [r7, #28]
 800deb4:	8b1a      	ldrh	r2, [r3, #24]
 800deb6:	4b3b      	ldr	r3, [pc, #236]	@ (800dfa4 <tcp_input+0x49c>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	881b      	ldrh	r3, [r3, #0]
 800debc:	b29b      	uxth	r3, r3
 800debe:	429a      	cmp	r2, r3
 800dec0:	d11b      	bne.n	800defa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800dec2:	69fb      	ldr	r3, [r7, #28]
 800dec4:	8ada      	ldrh	r2, [r3, #22]
 800dec6:	4b37      	ldr	r3, [pc, #220]	@ (800dfa4 <tcp_input+0x49c>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	885b      	ldrh	r3, [r3, #2]
 800decc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800dece:	429a      	cmp	r2, r3
 800ded0:	d113      	bne.n	800defa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ded2:	69fb      	ldr	r3, [r7, #28]
 800ded4:	685a      	ldr	r2, [r3, #4]
 800ded6:	4b34      	ldr	r3, [pc, #208]	@ (800dfa8 <tcp_input+0x4a0>)
 800ded8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800deda:	429a      	cmp	r2, r3
 800dedc:	d10d      	bne.n	800defa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dede:	69fb      	ldr	r3, [r7, #28]
 800dee0:	681a      	ldr	r2, [r3, #0]
 800dee2:	4b31      	ldr	r3, [pc, #196]	@ (800dfa8 <tcp_input+0x4a0>)
 800dee4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d107      	bne.n	800defa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800deea:	69f8      	ldr	r0, [r7, #28]
 800deec:	f000 fb56 	bl	800e59c <tcp_timewait_input>
        }
        pbuf_free(p);
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f7fd ffd3 	bl	800be9c <pbuf_free>
        return;
 800def6:	e1fd      	b.n	800e2f4 <tcp_input+0x7ec>
        continue;
 800def8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800defa:	69fb      	ldr	r3, [r7, #28]
 800defc:	68db      	ldr	r3, [r3, #12]
 800defe:	61fb      	str	r3, [r7, #28]
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d1bc      	bne.n	800de80 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800df06:	2300      	movs	r3, #0
 800df08:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800df0a:	4b2f      	ldr	r3, [pc, #188]	@ (800dfc8 <tcp_input+0x4c0>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	617b      	str	r3, [r7, #20]
 800df10:	e02a      	b.n	800df68 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	7a1b      	ldrb	r3, [r3, #8]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d00c      	beq.n	800df34 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	7a1a      	ldrb	r2, [r3, #8]
 800df1e:	4b22      	ldr	r3, [pc, #136]	@ (800dfa8 <tcp_input+0x4a0>)
 800df20:	685b      	ldr	r3, [r3, #4]
 800df22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800df26:	3301      	adds	r3, #1
 800df28:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d002      	beq.n	800df34 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	61bb      	str	r3, [r7, #24]
        continue;
 800df32:	e016      	b.n	800df62 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	8ada      	ldrh	r2, [r3, #22]
 800df38:	4b1a      	ldr	r3, [pc, #104]	@ (800dfa4 <tcp_input+0x49c>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	885b      	ldrh	r3, [r3, #2]
 800df3e:	b29b      	uxth	r3, r3
 800df40:	429a      	cmp	r2, r3
 800df42:	d10c      	bne.n	800df5e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	681a      	ldr	r2, [r3, #0]
 800df48:	4b17      	ldr	r3, [pc, #92]	@ (800dfa8 <tcp_input+0x4a0>)
 800df4a:	695b      	ldr	r3, [r3, #20]
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d00f      	beq.n	800df70 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d00d      	beq.n	800df72 <tcp_input+0x46a>
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d009      	beq.n	800df72 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	68db      	ldr	r3, [r3, #12]
 800df66:	617b      	str	r3, [r7, #20]
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d1d1      	bne.n	800df12 <tcp_input+0x40a>
 800df6e:	e000      	b.n	800df72 <tcp_input+0x46a>
            break;
 800df70:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d029      	beq.n	800dfcc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800df78:	69bb      	ldr	r3, [r7, #24]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d00a      	beq.n	800df94 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	68da      	ldr	r2, [r3, #12]
 800df82:	69bb      	ldr	r3, [r7, #24]
 800df84:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800df86:	4b10      	ldr	r3, [pc, #64]	@ (800dfc8 <tcp_input+0x4c0>)
 800df88:	681a      	ldr	r2, [r3, #0]
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800df8e:	4a0e      	ldr	r2, [pc, #56]	@ (800dfc8 <tcp_input+0x4c0>)
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800df94:	6978      	ldr	r0, [r7, #20]
 800df96:	f000 fa03 	bl	800e3a0 <tcp_listen_input>
      }
      pbuf_free(p);
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f7fd ff7e 	bl	800be9c <pbuf_free>
      return;
 800dfa0:	e1a8      	b.n	800e2f4 <tcp_input+0x7ec>
 800dfa2:	bf00      	nop
 800dfa4:	2000d3d0 	.word	0x2000d3d0
 800dfa8:	2000a2a8 	.word	0x2000a2a8
 800dfac:	080168a4 	.word	0x080168a4
 800dfb0:	080169d0 	.word	0x080169d0
 800dfb4:	080168f0 	.word	0x080168f0
 800dfb8:	2000d3b4 	.word	0x2000d3b4
 800dfbc:	080169fc 	.word	0x080169fc
 800dfc0:	2000d3b8 	.word	0x2000d3b8
 800dfc4:	08016a28 	.word	0x08016a28
 800dfc8:	2000d3b0 	.word	0x2000d3b0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	f000 8158 	beq.w	800e284 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800dfd4:	4b95      	ldr	r3, [pc, #596]	@ (800e22c <tcp_input+0x724>)
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	891a      	ldrh	r2, [r3, #8]
 800dfde:	4b93      	ldr	r3, [pc, #588]	@ (800e22c <tcp_input+0x724>)
 800dfe0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800dfe2:	4a92      	ldr	r2, [pc, #584]	@ (800e22c <tcp_input+0x724>)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800dfe8:	4b91      	ldr	r3, [pc, #580]	@ (800e230 <tcp_input+0x728>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	4a8f      	ldr	r2, [pc, #572]	@ (800e22c <tcp_input+0x724>)
 800dfee:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800dff0:	4b90      	ldr	r3, [pc, #576]	@ (800e234 <tcp_input+0x72c>)
 800dff2:	2200      	movs	r2, #0
 800dff4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800dff6:	4b90      	ldr	r3, [pc, #576]	@ (800e238 <tcp_input+0x730>)
 800dff8:	2200      	movs	r2, #0
 800dffa:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800dffc:	4b8f      	ldr	r3, [pc, #572]	@ (800e23c <tcp_input+0x734>)
 800dffe:	2200      	movs	r2, #0
 800e000:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e002:	4b8f      	ldr	r3, [pc, #572]	@ (800e240 <tcp_input+0x738>)
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	f003 0308 	and.w	r3, r3, #8
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d006      	beq.n	800e01c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	7b5b      	ldrb	r3, [r3, #13]
 800e012:	f043 0301 	orr.w	r3, r3, #1
 800e016:	b2da      	uxtb	r2, r3
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e01c:	69fb      	ldr	r3, [r7, #28]
 800e01e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e020:	2b00      	cmp	r3, #0
 800e022:	d017      	beq.n	800e054 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e024:	69f8      	ldr	r0, [r7, #28]
 800e026:	f7ff f929 	bl	800d27c <tcp_process_refused_data>
 800e02a:	4603      	mov	r3, r0
 800e02c:	f113 0f0d 	cmn.w	r3, #13
 800e030:	d007      	beq.n	800e042 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e032:	69fb      	ldr	r3, [r7, #28]
 800e034:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e036:	2b00      	cmp	r3, #0
 800e038:	d00c      	beq.n	800e054 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e03a:	4b82      	ldr	r3, [pc, #520]	@ (800e244 <tcp_input+0x73c>)
 800e03c:	881b      	ldrh	r3, [r3, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d008      	beq.n	800e054 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e042:	69fb      	ldr	r3, [r7, #28]
 800e044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e046:	2b00      	cmp	r3, #0
 800e048:	f040 80e3 	bne.w	800e212 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e04c:	69f8      	ldr	r0, [r7, #28]
 800e04e:	f003 f9a7 	bl	80113a0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e052:	e0de      	b.n	800e212 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800e054:	4a7c      	ldr	r2, [pc, #496]	@ (800e248 <tcp_input+0x740>)
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e05a:	69f8      	ldr	r0, [r7, #28]
 800e05c:	f000 fb18 	bl	800e690 <tcp_process>
 800e060:	4603      	mov	r3, r0
 800e062:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e064:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e068:	f113 0f0d 	cmn.w	r3, #13
 800e06c:	f000 80d3 	beq.w	800e216 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800e070:	4b71      	ldr	r3, [pc, #452]	@ (800e238 <tcp_input+0x730>)
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	f003 0308 	and.w	r3, r3, #8
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d015      	beq.n	800e0a8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e07c:	69fb      	ldr	r3, [r7, #28]
 800e07e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e082:	2b00      	cmp	r3, #0
 800e084:	d008      	beq.n	800e098 <tcp_input+0x590>
 800e086:	69fb      	ldr	r3, [r7, #28]
 800e088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e08c:	69fa      	ldr	r2, [r7, #28]
 800e08e:	6912      	ldr	r2, [r2, #16]
 800e090:	f06f 010d 	mvn.w	r1, #13
 800e094:	4610      	mov	r0, r2
 800e096:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e098:	69f9      	ldr	r1, [r7, #28]
 800e09a:	486c      	ldr	r0, [pc, #432]	@ (800e24c <tcp_input+0x744>)
 800e09c:	f7ff fbbc 	bl	800d818 <tcp_pcb_remove>
        tcp_free(pcb);
 800e0a0:	69f8      	ldr	r0, [r7, #28]
 800e0a2:	f7fe f9a7 	bl	800c3f4 <tcp_free>
 800e0a6:	e0da      	b.n	800e25e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e0ac:	4b63      	ldr	r3, [pc, #396]	@ (800e23c <tcp_input+0x734>)
 800e0ae:	881b      	ldrh	r3, [r3, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d01d      	beq.n	800e0f0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e0b4:	4b61      	ldr	r3, [pc, #388]	@ (800e23c <tcp_input+0x734>)
 800e0b6:	881b      	ldrh	r3, [r3, #0]
 800e0b8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e0ba:	69fb      	ldr	r3, [r7, #28]
 800e0bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d00a      	beq.n	800e0da <tcp_input+0x5d2>
 800e0c4:	69fb      	ldr	r3, [r7, #28]
 800e0c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e0ca:	69fa      	ldr	r2, [r7, #28]
 800e0cc:	6910      	ldr	r0, [r2, #16]
 800e0ce:	89fa      	ldrh	r2, [r7, #14]
 800e0d0:	69f9      	ldr	r1, [r7, #28]
 800e0d2:	4798      	blx	r3
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	74fb      	strb	r3, [r7, #19]
 800e0d8:	e001      	b.n	800e0de <tcp_input+0x5d6>
 800e0da:	2300      	movs	r3, #0
 800e0dc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e0de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e0e2:	f113 0f0d 	cmn.w	r3, #13
 800e0e6:	f000 8098 	beq.w	800e21a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e0ea:	4b54      	ldr	r3, [pc, #336]	@ (800e23c <tcp_input+0x734>)
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e0f0:	69f8      	ldr	r0, [r7, #28]
 800e0f2:	f000 f915 	bl	800e320 <tcp_input_delayed_close>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	f040 8090 	bne.w	800e21e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e0fe:	4b4d      	ldr	r3, [pc, #308]	@ (800e234 <tcp_input+0x72c>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d041      	beq.n	800e18a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e106:	69fb      	ldr	r3, [r7, #28]
 800e108:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d006      	beq.n	800e11c <tcp_input+0x614>
 800e10e:	4b50      	ldr	r3, [pc, #320]	@ (800e250 <tcp_input+0x748>)
 800e110:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800e114:	494f      	ldr	r1, [pc, #316]	@ (800e254 <tcp_input+0x74c>)
 800e116:	4850      	ldr	r0, [pc, #320]	@ (800e258 <tcp_input+0x750>)
 800e118:	f006 fa9e 	bl	8014658 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e11c:	69fb      	ldr	r3, [r7, #28]
 800e11e:	8b5b      	ldrh	r3, [r3, #26]
 800e120:	f003 0310 	and.w	r3, r3, #16
 800e124:	2b00      	cmp	r3, #0
 800e126:	d008      	beq.n	800e13a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e128:	4b42      	ldr	r3, [pc, #264]	@ (800e234 <tcp_input+0x72c>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7fd feb5 	bl	800be9c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e132:	69f8      	ldr	r0, [r7, #28]
 800e134:	f7fe fc46 	bl	800c9c4 <tcp_abort>
            goto aborted;
 800e138:	e091      	b.n	800e25e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e13a:	69fb      	ldr	r3, [r7, #28]
 800e13c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e140:	2b00      	cmp	r3, #0
 800e142:	d00c      	beq.n	800e15e <tcp_input+0x656>
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e14a:	69fb      	ldr	r3, [r7, #28]
 800e14c:	6918      	ldr	r0, [r3, #16]
 800e14e:	4b39      	ldr	r3, [pc, #228]	@ (800e234 <tcp_input+0x72c>)
 800e150:	681a      	ldr	r2, [r3, #0]
 800e152:	2300      	movs	r3, #0
 800e154:	69f9      	ldr	r1, [r7, #28]
 800e156:	47a0      	blx	r4
 800e158:	4603      	mov	r3, r0
 800e15a:	74fb      	strb	r3, [r7, #19]
 800e15c:	e008      	b.n	800e170 <tcp_input+0x668>
 800e15e:	4b35      	ldr	r3, [pc, #212]	@ (800e234 <tcp_input+0x72c>)
 800e160:	681a      	ldr	r2, [r3, #0]
 800e162:	2300      	movs	r3, #0
 800e164:	69f9      	ldr	r1, [r7, #28]
 800e166:	2000      	movs	r0, #0
 800e168:	f7ff f95e 	bl	800d428 <tcp_recv_null>
 800e16c:	4603      	mov	r3, r0
 800e16e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e170:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e174:	f113 0f0d 	cmn.w	r3, #13
 800e178:	d053      	beq.n	800e222 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e17a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d003      	beq.n	800e18a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e182:	4b2c      	ldr	r3, [pc, #176]	@ (800e234 <tcp_input+0x72c>)
 800e184:	681a      	ldr	r2, [r3, #0]
 800e186:	69fb      	ldr	r3, [r7, #28]
 800e188:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e18a:	4b2b      	ldr	r3, [pc, #172]	@ (800e238 <tcp_input+0x730>)
 800e18c:	781b      	ldrb	r3, [r3, #0]
 800e18e:	f003 0320 	and.w	r3, r3, #32
 800e192:	2b00      	cmp	r3, #0
 800e194:	d030      	beq.n	800e1f8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e196:	69fb      	ldr	r3, [r7, #28]
 800e198:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d009      	beq.n	800e1b2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e19e:	69fb      	ldr	r3, [r7, #28]
 800e1a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e1a2:	7b5a      	ldrb	r2, [r3, #13]
 800e1a4:	69fb      	ldr	r3, [r7, #28]
 800e1a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e1a8:	f042 0220 	orr.w	r2, r2, #32
 800e1ac:	b2d2      	uxtb	r2, r2
 800e1ae:	735a      	strb	r2, [r3, #13]
 800e1b0:	e022      	b.n	800e1f8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e1b2:	69fb      	ldr	r3, [r7, #28]
 800e1b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1b6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e1ba:	d005      	beq.n	800e1c8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	b29a      	uxth	r2, r3
 800e1c4:	69fb      	ldr	r3, [r7, #28]
 800e1c6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d00b      	beq.n	800e1ea <tcp_input+0x6e2>
 800e1d2:	69fb      	ldr	r3, [r7, #28]
 800e1d4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e1d8:	69fb      	ldr	r3, [r7, #28]
 800e1da:	6918      	ldr	r0, [r3, #16]
 800e1dc:	2300      	movs	r3, #0
 800e1de:	2200      	movs	r2, #0
 800e1e0:	69f9      	ldr	r1, [r7, #28]
 800e1e2:	47a0      	blx	r4
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	74fb      	strb	r3, [r7, #19]
 800e1e8:	e001      	b.n	800e1ee <tcp_input+0x6e6>
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e1ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e1f2:	f113 0f0d 	cmn.w	r3, #13
 800e1f6:	d016      	beq.n	800e226 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e1f8:	4b13      	ldr	r3, [pc, #76]	@ (800e248 <tcp_input+0x740>)
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e1fe:	69f8      	ldr	r0, [r7, #28]
 800e200:	f000 f88e 	bl	800e320 <tcp_input_delayed_close>
 800e204:	4603      	mov	r3, r0
 800e206:	2b00      	cmp	r3, #0
 800e208:	d128      	bne.n	800e25c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e20a:	69f8      	ldr	r0, [r7, #28]
 800e20c:	f002 fac2 	bl	8010794 <tcp_output>
 800e210:	e025      	b.n	800e25e <tcp_input+0x756>
        goto aborted;
 800e212:	bf00      	nop
 800e214:	e023      	b.n	800e25e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e216:	bf00      	nop
 800e218:	e021      	b.n	800e25e <tcp_input+0x756>
              goto aborted;
 800e21a:	bf00      	nop
 800e21c:	e01f      	b.n	800e25e <tcp_input+0x756>
          goto aborted;
 800e21e:	bf00      	nop
 800e220:	e01d      	b.n	800e25e <tcp_input+0x756>
            goto aborted;
 800e222:	bf00      	nop
 800e224:	e01b      	b.n	800e25e <tcp_input+0x756>
              goto aborted;
 800e226:	bf00      	nop
 800e228:	e019      	b.n	800e25e <tcp_input+0x756>
 800e22a:	bf00      	nop
 800e22c:	2000d3c0 	.word	0x2000d3c0
 800e230:	2000d3d0 	.word	0x2000d3d0
 800e234:	2000d3f0 	.word	0x2000d3f0
 800e238:	2000d3ed 	.word	0x2000d3ed
 800e23c:	2000d3e8 	.word	0x2000d3e8
 800e240:	2000d3ec 	.word	0x2000d3ec
 800e244:	2000d3ea 	.word	0x2000d3ea
 800e248:	2000d3f4 	.word	0x2000d3f4
 800e24c:	2000d3b4 	.word	0x2000d3b4
 800e250:	080168a4 	.word	0x080168a4
 800e254:	08016a58 	.word	0x08016a58
 800e258:	080168f0 	.word	0x080168f0
          goto aborted;
 800e25c:	bf00      	nop
    tcp_input_pcb = NULL;
 800e25e:	4b27      	ldr	r3, [pc, #156]	@ (800e2fc <tcp_input+0x7f4>)
 800e260:	2200      	movs	r2, #0
 800e262:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e264:	4b26      	ldr	r3, [pc, #152]	@ (800e300 <tcp_input+0x7f8>)
 800e266:	2200      	movs	r2, #0
 800e268:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e26a:	4b26      	ldr	r3, [pc, #152]	@ (800e304 <tcp_input+0x7fc>)
 800e26c:	685b      	ldr	r3, [r3, #4]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d03f      	beq.n	800e2f2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e272:	4b24      	ldr	r3, [pc, #144]	@ (800e304 <tcp_input+0x7fc>)
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	4618      	mov	r0, r3
 800e278:	f7fd fe10 	bl	800be9c <pbuf_free>
      inseg.p = NULL;
 800e27c:	4b21      	ldr	r3, [pc, #132]	@ (800e304 <tcp_input+0x7fc>)
 800e27e:	2200      	movs	r2, #0
 800e280:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e282:	e036      	b.n	800e2f2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e284:	4b20      	ldr	r3, [pc, #128]	@ (800e308 <tcp_input+0x800>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	899b      	ldrh	r3, [r3, #12]
 800e28a:	b29b      	uxth	r3, r3
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7fc fa17 	bl	800a6c0 <lwip_htons>
 800e292:	4603      	mov	r3, r0
 800e294:	b2db      	uxtb	r3, r3
 800e296:	f003 0304 	and.w	r3, r3, #4
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d118      	bne.n	800e2d0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e29e:	4b1b      	ldr	r3, [pc, #108]	@ (800e30c <tcp_input+0x804>)
 800e2a0:	6819      	ldr	r1, [r3, #0]
 800e2a2:	4b1b      	ldr	r3, [pc, #108]	@ (800e310 <tcp_input+0x808>)
 800e2a4:	881b      	ldrh	r3, [r3, #0]
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	4b1a      	ldr	r3, [pc, #104]	@ (800e314 <tcp_input+0x80c>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2ae:	4b16      	ldr	r3, [pc, #88]	@ (800e308 <tcp_input+0x800>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2b2:	885b      	ldrh	r3, [r3, #2]
 800e2b4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2b6:	4a14      	ldr	r2, [pc, #80]	@ (800e308 <tcp_input+0x800>)
 800e2b8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2ba:	8812      	ldrh	r2, [r2, #0]
 800e2bc:	b292      	uxth	r2, r2
 800e2be:	9202      	str	r2, [sp, #8]
 800e2c0:	9301      	str	r3, [sp, #4]
 800e2c2:	4b15      	ldr	r3, [pc, #84]	@ (800e318 <tcp_input+0x810>)
 800e2c4:	9300      	str	r3, [sp, #0]
 800e2c6:	4b15      	ldr	r3, [pc, #84]	@ (800e31c <tcp_input+0x814>)
 800e2c8:	4602      	mov	r2, r0
 800e2ca:	2000      	movs	r0, #0
 800e2cc:	f003 f816 	bl	80112fc <tcp_rst>
    pbuf_free(p);
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f7fd fde3 	bl	800be9c <pbuf_free>
  return;
 800e2d6:	e00c      	b.n	800e2f2 <tcp_input+0x7ea>
    goto dropped;
 800e2d8:	bf00      	nop
 800e2da:	e006      	b.n	800e2ea <tcp_input+0x7e2>
    goto dropped;
 800e2dc:	bf00      	nop
 800e2de:	e004      	b.n	800e2ea <tcp_input+0x7e2>
    goto dropped;
 800e2e0:	bf00      	nop
 800e2e2:	e002      	b.n	800e2ea <tcp_input+0x7e2>
      goto dropped;
 800e2e4:	bf00      	nop
 800e2e6:	e000      	b.n	800e2ea <tcp_input+0x7e2>
      goto dropped;
 800e2e8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f7fd fdd6 	bl	800be9c <pbuf_free>
 800e2f0:	e000      	b.n	800e2f4 <tcp_input+0x7ec>
  return;
 800e2f2:	bf00      	nop
}
 800e2f4:	3724      	adds	r7, #36	@ 0x24
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd90      	pop	{r4, r7, pc}
 800e2fa:	bf00      	nop
 800e2fc:	2000d3f4 	.word	0x2000d3f4
 800e300:	2000d3f0 	.word	0x2000d3f0
 800e304:	2000d3c0 	.word	0x2000d3c0
 800e308:	2000d3d0 	.word	0x2000d3d0
 800e30c:	2000d3e4 	.word	0x2000d3e4
 800e310:	2000d3ea 	.word	0x2000d3ea
 800e314:	2000d3e0 	.word	0x2000d3e0
 800e318:	2000a2b8 	.word	0x2000a2b8
 800e31c:	2000a2bc 	.word	0x2000a2bc

0800e320 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b082      	sub	sp, #8
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d106      	bne.n	800e33c <tcp_input_delayed_close+0x1c>
 800e32e:	4b17      	ldr	r3, [pc, #92]	@ (800e38c <tcp_input_delayed_close+0x6c>)
 800e330:	f240 225a 	movw	r2, #602	@ 0x25a
 800e334:	4916      	ldr	r1, [pc, #88]	@ (800e390 <tcp_input_delayed_close+0x70>)
 800e336:	4817      	ldr	r0, [pc, #92]	@ (800e394 <tcp_input_delayed_close+0x74>)
 800e338:	f006 f98e 	bl	8014658 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e33c:	4b16      	ldr	r3, [pc, #88]	@ (800e398 <tcp_input_delayed_close+0x78>)
 800e33e:	781b      	ldrb	r3, [r3, #0]
 800e340:	f003 0310 	and.w	r3, r3, #16
 800e344:	2b00      	cmp	r3, #0
 800e346:	d01c      	beq.n	800e382 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	8b5b      	ldrh	r3, [r3, #26]
 800e34c:	f003 0310 	and.w	r3, r3, #16
 800e350:	2b00      	cmp	r3, #0
 800e352:	d10d      	bne.n	800e370 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d008      	beq.n	800e370 <tcp_input_delayed_close+0x50>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	6912      	ldr	r2, [r2, #16]
 800e368:	f06f 010e 	mvn.w	r1, #14
 800e36c:	4610      	mov	r0, r2
 800e36e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e370:	6879      	ldr	r1, [r7, #4]
 800e372:	480a      	ldr	r0, [pc, #40]	@ (800e39c <tcp_input_delayed_close+0x7c>)
 800e374:	f7ff fa50 	bl	800d818 <tcp_pcb_remove>
    tcp_free(pcb);
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f7fe f83b 	bl	800c3f4 <tcp_free>
    return 1;
 800e37e:	2301      	movs	r3, #1
 800e380:	e000      	b.n	800e384 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e382:	2300      	movs	r3, #0
}
 800e384:	4618      	mov	r0, r3
 800e386:	3708      	adds	r7, #8
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}
 800e38c:	080168a4 	.word	0x080168a4
 800e390:	08016a74 	.word	0x08016a74
 800e394:	080168f0 	.word	0x080168f0
 800e398:	2000d3ed 	.word	0x2000d3ed
 800e39c:	2000d3b4 	.word	0x2000d3b4

0800e3a0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e3a0:	b590      	push	{r4, r7, lr}
 800e3a2:	b08b      	sub	sp, #44	@ 0x2c
 800e3a4:	af04      	add	r7, sp, #16
 800e3a6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e3a8:	4b6f      	ldr	r3, [pc, #444]	@ (800e568 <tcp_listen_input+0x1c8>)
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	f003 0304 	and.w	r3, r3, #4
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	f040 80d2 	bne.w	800e55a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d106      	bne.n	800e3ca <tcp_listen_input+0x2a>
 800e3bc:	4b6b      	ldr	r3, [pc, #428]	@ (800e56c <tcp_listen_input+0x1cc>)
 800e3be:	f240 2281 	movw	r2, #641	@ 0x281
 800e3c2:	496b      	ldr	r1, [pc, #428]	@ (800e570 <tcp_listen_input+0x1d0>)
 800e3c4:	486b      	ldr	r0, [pc, #428]	@ (800e574 <tcp_listen_input+0x1d4>)
 800e3c6:	f006 f947 	bl	8014658 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e3ca:	4b67      	ldr	r3, [pc, #412]	@ (800e568 <tcp_listen_input+0x1c8>)
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	f003 0310 	and.w	r3, r3, #16
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d019      	beq.n	800e40a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3d6:	4b68      	ldr	r3, [pc, #416]	@ (800e578 <tcp_listen_input+0x1d8>)
 800e3d8:	6819      	ldr	r1, [r3, #0]
 800e3da:	4b68      	ldr	r3, [pc, #416]	@ (800e57c <tcp_listen_input+0x1dc>)
 800e3dc:	881b      	ldrh	r3, [r3, #0]
 800e3de:	461a      	mov	r2, r3
 800e3e0:	4b67      	ldr	r3, [pc, #412]	@ (800e580 <tcp_listen_input+0x1e0>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e3e6:	4b67      	ldr	r3, [pc, #412]	@ (800e584 <tcp_listen_input+0x1e4>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3ea:	885b      	ldrh	r3, [r3, #2]
 800e3ec:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e3ee:	4a65      	ldr	r2, [pc, #404]	@ (800e584 <tcp_listen_input+0x1e4>)
 800e3f0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3f2:	8812      	ldrh	r2, [r2, #0]
 800e3f4:	b292      	uxth	r2, r2
 800e3f6:	9202      	str	r2, [sp, #8]
 800e3f8:	9301      	str	r3, [sp, #4]
 800e3fa:	4b63      	ldr	r3, [pc, #396]	@ (800e588 <tcp_listen_input+0x1e8>)
 800e3fc:	9300      	str	r3, [sp, #0]
 800e3fe:	4b63      	ldr	r3, [pc, #396]	@ (800e58c <tcp_listen_input+0x1ec>)
 800e400:	4602      	mov	r2, r0
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f002 ff7a 	bl	80112fc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e408:	e0a9      	b.n	800e55e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e40a:	4b57      	ldr	r3, [pc, #348]	@ (800e568 <tcp_listen_input+0x1c8>)
 800e40c:	781b      	ldrb	r3, [r3, #0]
 800e40e:	f003 0302 	and.w	r3, r3, #2
 800e412:	2b00      	cmp	r3, #0
 800e414:	f000 80a3 	beq.w	800e55e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	7d5b      	ldrb	r3, [r3, #21]
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7ff f927 	bl	800d670 <tcp_alloc>
 800e422:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e424:	697b      	ldr	r3, [r7, #20]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d111      	bne.n	800e44e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	699b      	ldr	r3, [r3, #24]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d00a      	beq.n	800e448 <tcp_listen_input+0xa8>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	699b      	ldr	r3, [r3, #24]
 800e436:	687a      	ldr	r2, [r7, #4]
 800e438:	6910      	ldr	r0, [r2, #16]
 800e43a:	f04f 32ff 	mov.w	r2, #4294967295
 800e43e:	2100      	movs	r1, #0
 800e440:	4798      	blx	r3
 800e442:	4603      	mov	r3, r0
 800e444:	73bb      	strb	r3, [r7, #14]
      return;
 800e446:	e08b      	b.n	800e560 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e448:	23f0      	movs	r3, #240	@ 0xf0
 800e44a:	73bb      	strb	r3, [r7, #14]
      return;
 800e44c:	e088      	b.n	800e560 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e44e:	4b50      	ldr	r3, [pc, #320]	@ (800e590 <tcp_listen_input+0x1f0>)
 800e450:	695a      	ldr	r2, [r3, #20]
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e456:	4b4e      	ldr	r3, [pc, #312]	@ (800e590 <tcp_listen_input+0x1f0>)
 800e458:	691a      	ldr	r2, [r3, #16]
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	8ada      	ldrh	r2, [r3, #22]
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e466:	4b47      	ldr	r3, [pc, #284]	@ (800e584 <tcp_listen_input+0x1e4>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	881b      	ldrh	r3, [r3, #0]
 800e46c:	b29a      	uxth	r2, r3
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e472:	697b      	ldr	r3, [r7, #20]
 800e474:	2203      	movs	r2, #3
 800e476:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e478:	4b41      	ldr	r3, [pc, #260]	@ (800e580 <tcp_listen_input+0x1e0>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	1c5a      	adds	r2, r3, #1
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800e48a:	6978      	ldr	r0, [r7, #20]
 800e48c:	f7ff fa58 	bl	800d940 <tcp_next_iss>
 800e490:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	693a      	ldr	r2, [r7, #16]
 800e496:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	693a      	ldr	r2, [r7, #16]
 800e49c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800e49e:	697b      	ldr	r3, [r7, #20]
 800e4a0:	693a      	ldr	r2, [r7, #16]
 800e4a2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800e4a4:	697b      	ldr	r3, [r7, #20]
 800e4a6:	693a      	ldr	r2, [r7, #16]
 800e4a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e4aa:	4b35      	ldr	r3, [pc, #212]	@ (800e580 <tcp_listen_input+0x1e0>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	1e5a      	subs	r2, r3, #1
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	691a      	ldr	r2, [r3, #16]
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	687a      	ldr	r2, [r7, #4]
 800e4c0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	7a5b      	ldrb	r3, [r3, #9]
 800e4c6:	f003 030c 	and.w	r3, r3, #12
 800e4ca:	b2da      	uxtb	r2, r3
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	7a1a      	ldrb	r2, [r3, #8]
 800e4d4:	697b      	ldr	r3, [r7, #20]
 800e4d6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e4d8:	4b2e      	ldr	r3, [pc, #184]	@ (800e594 <tcp_listen_input+0x1f4>)
 800e4da:	681a      	ldr	r2, [r3, #0]
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	60da      	str	r2, [r3, #12]
 800e4e0:	4a2c      	ldr	r2, [pc, #176]	@ (800e594 <tcp_listen_input+0x1f4>)
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	6013      	str	r3, [r2, #0]
 800e4e6:	f003 f8cb 	bl	8011680 <tcp_timer_needed>
 800e4ea:	4b2b      	ldr	r3, [pc, #172]	@ (800e598 <tcp_listen_input+0x1f8>)
 800e4ec:	2201      	movs	r2, #1
 800e4ee:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e4f0:	6978      	ldr	r0, [r7, #20]
 800e4f2:	f001 fd8b 	bl	801000c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e4f6:	4b23      	ldr	r3, [pc, #140]	@ (800e584 <tcp_listen_input+0x1e4>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	89db      	ldrh	r3, [r3, #14]
 800e4fc:	b29a      	uxth	r2, r3
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e514:	697b      	ldr	r3, [r7, #20]
 800e516:	3304      	adds	r3, #4
 800e518:	4618      	mov	r0, r3
 800e51a:	f004 fcbf 	bl	8012e9c <ip4_route>
 800e51e:	4601      	mov	r1, r0
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	3304      	adds	r3, #4
 800e524:	461a      	mov	r2, r3
 800e526:	4620      	mov	r0, r4
 800e528:	f7ff fa30 	bl	800d98c <tcp_eff_send_mss_netif>
 800e52c:	4603      	mov	r3, r0
 800e52e:	461a      	mov	r2, r3
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e534:	2112      	movs	r1, #18
 800e536:	6978      	ldr	r0, [r7, #20]
 800e538:	f002 f83e 	bl	80105b8 <tcp_enqueue_flags>
 800e53c:	4603      	mov	r3, r0
 800e53e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d004      	beq.n	800e552 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e548:	2100      	movs	r1, #0
 800e54a:	6978      	ldr	r0, [r7, #20]
 800e54c:	f7fe f97c 	bl	800c848 <tcp_abandon>
      return;
 800e550:	e006      	b.n	800e560 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e552:	6978      	ldr	r0, [r7, #20]
 800e554:	f002 f91e 	bl	8010794 <tcp_output>
  return;
 800e558:	e001      	b.n	800e55e <tcp_listen_input+0x1be>
    return;
 800e55a:	bf00      	nop
 800e55c:	e000      	b.n	800e560 <tcp_listen_input+0x1c0>
  return;
 800e55e:	bf00      	nop
}
 800e560:	371c      	adds	r7, #28
 800e562:	46bd      	mov	sp, r7
 800e564:	bd90      	pop	{r4, r7, pc}
 800e566:	bf00      	nop
 800e568:	2000d3ec 	.word	0x2000d3ec
 800e56c:	080168a4 	.word	0x080168a4
 800e570:	08016a9c 	.word	0x08016a9c
 800e574:	080168f0 	.word	0x080168f0
 800e578:	2000d3e4 	.word	0x2000d3e4
 800e57c:	2000d3ea 	.word	0x2000d3ea
 800e580:	2000d3e0 	.word	0x2000d3e0
 800e584:	2000d3d0 	.word	0x2000d3d0
 800e588:	2000a2b8 	.word	0x2000a2b8
 800e58c:	2000a2bc 	.word	0x2000a2bc
 800e590:	2000a2a8 	.word	0x2000a2a8
 800e594:	2000d3b4 	.word	0x2000d3b4
 800e598:	2000d3bc 	.word	0x2000d3bc

0800e59c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b086      	sub	sp, #24
 800e5a0:	af04      	add	r7, sp, #16
 800e5a2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e5a4:	4b2f      	ldr	r3, [pc, #188]	@ (800e664 <tcp_timewait_input+0xc8>)
 800e5a6:	781b      	ldrb	r3, [r3, #0]
 800e5a8:	f003 0304 	and.w	r3, r3, #4
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d153      	bne.n	800e658 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d106      	bne.n	800e5c4 <tcp_timewait_input+0x28>
 800e5b6:	4b2c      	ldr	r3, [pc, #176]	@ (800e668 <tcp_timewait_input+0xcc>)
 800e5b8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800e5bc:	492b      	ldr	r1, [pc, #172]	@ (800e66c <tcp_timewait_input+0xd0>)
 800e5be:	482c      	ldr	r0, [pc, #176]	@ (800e670 <tcp_timewait_input+0xd4>)
 800e5c0:	f006 f84a 	bl	8014658 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e5c4:	4b27      	ldr	r3, [pc, #156]	@ (800e664 <tcp_timewait_input+0xc8>)
 800e5c6:	781b      	ldrb	r3, [r3, #0]
 800e5c8:	f003 0302 	and.w	r3, r3, #2
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d02a      	beq.n	800e626 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e5d0:	4b28      	ldr	r3, [pc, #160]	@ (800e674 <tcp_timewait_input+0xd8>)
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5d8:	1ad3      	subs	r3, r2, r3
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	db2d      	blt.n	800e63a <tcp_timewait_input+0x9e>
 800e5de:	4b25      	ldr	r3, [pc, #148]	@ (800e674 <tcp_timewait_input+0xd8>)
 800e5e0:	681a      	ldr	r2, [r3, #0]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5e6:	6879      	ldr	r1, [r7, #4]
 800e5e8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e5ea:	440b      	add	r3, r1
 800e5ec:	1ad3      	subs	r3, r2, r3
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	dc23      	bgt.n	800e63a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e5f2:	4b21      	ldr	r3, [pc, #132]	@ (800e678 <tcp_timewait_input+0xdc>)
 800e5f4:	6819      	ldr	r1, [r3, #0]
 800e5f6:	4b21      	ldr	r3, [pc, #132]	@ (800e67c <tcp_timewait_input+0xe0>)
 800e5f8:	881b      	ldrh	r3, [r3, #0]
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	4b1d      	ldr	r3, [pc, #116]	@ (800e674 <tcp_timewait_input+0xd8>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e602:	4b1f      	ldr	r3, [pc, #124]	@ (800e680 <tcp_timewait_input+0xe4>)
 800e604:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e606:	885b      	ldrh	r3, [r3, #2]
 800e608:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e60a:	4a1d      	ldr	r2, [pc, #116]	@ (800e680 <tcp_timewait_input+0xe4>)
 800e60c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e60e:	8812      	ldrh	r2, [r2, #0]
 800e610:	b292      	uxth	r2, r2
 800e612:	9202      	str	r2, [sp, #8]
 800e614:	9301      	str	r3, [sp, #4]
 800e616:	4b1b      	ldr	r3, [pc, #108]	@ (800e684 <tcp_timewait_input+0xe8>)
 800e618:	9300      	str	r3, [sp, #0]
 800e61a:	4b1b      	ldr	r3, [pc, #108]	@ (800e688 <tcp_timewait_input+0xec>)
 800e61c:	4602      	mov	r2, r0
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f002 fe6c 	bl	80112fc <tcp_rst>
      return;
 800e624:	e01b      	b.n	800e65e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e626:	4b0f      	ldr	r3, [pc, #60]	@ (800e664 <tcp_timewait_input+0xc8>)
 800e628:	781b      	ldrb	r3, [r3, #0]
 800e62a:	f003 0301 	and.w	r3, r3, #1
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d003      	beq.n	800e63a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e632:	4b16      	ldr	r3, [pc, #88]	@ (800e68c <tcp_timewait_input+0xf0>)
 800e634:	681a      	ldr	r2, [r3, #0]
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e63a:	4b10      	ldr	r3, [pc, #64]	@ (800e67c <tcp_timewait_input+0xe0>)
 800e63c:	881b      	ldrh	r3, [r3, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d00c      	beq.n	800e65c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	8b5b      	ldrh	r3, [r3, #26]
 800e646:	f043 0302 	orr.w	r3, r3, #2
 800e64a:	b29a      	uxth	r2, r3
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f002 f89f 	bl	8010794 <tcp_output>
  }
  return;
 800e656:	e001      	b.n	800e65c <tcp_timewait_input+0xc0>
    return;
 800e658:	bf00      	nop
 800e65a:	e000      	b.n	800e65e <tcp_timewait_input+0xc2>
  return;
 800e65c:	bf00      	nop
}
 800e65e:	3708      	adds	r7, #8
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}
 800e664:	2000d3ec 	.word	0x2000d3ec
 800e668:	080168a4 	.word	0x080168a4
 800e66c:	08016abc 	.word	0x08016abc
 800e670:	080168f0 	.word	0x080168f0
 800e674:	2000d3e0 	.word	0x2000d3e0
 800e678:	2000d3e4 	.word	0x2000d3e4
 800e67c:	2000d3ea 	.word	0x2000d3ea
 800e680:	2000d3d0 	.word	0x2000d3d0
 800e684:	2000a2b8 	.word	0x2000a2b8
 800e688:	2000a2bc 	.word	0x2000a2bc
 800e68c:	2000d3a8 	.word	0x2000d3a8

0800e690 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e690:	b590      	push	{r4, r7, lr}
 800e692:	b08d      	sub	sp, #52	@ 0x34
 800e694:	af04      	add	r7, sp, #16
 800e696:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e698:	2300      	movs	r3, #0
 800e69a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e69c:	2300      	movs	r3, #0
 800e69e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d106      	bne.n	800e6b4 <tcp_process+0x24>
 800e6a6:	4b9d      	ldr	r3, [pc, #628]	@ (800e91c <tcp_process+0x28c>)
 800e6a8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800e6ac:	499c      	ldr	r1, [pc, #624]	@ (800e920 <tcp_process+0x290>)
 800e6ae:	489d      	ldr	r0, [pc, #628]	@ (800e924 <tcp_process+0x294>)
 800e6b0:	f005 ffd2 	bl	8014658 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e6b4:	4b9c      	ldr	r3, [pc, #624]	@ (800e928 <tcp_process+0x298>)
 800e6b6:	781b      	ldrb	r3, [r3, #0]
 800e6b8:	f003 0304 	and.w	r3, r3, #4
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d04e      	beq.n	800e75e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	7d1b      	ldrb	r3, [r3, #20]
 800e6c4:	2b02      	cmp	r3, #2
 800e6c6:	d108      	bne.n	800e6da <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e6cc:	4b97      	ldr	r3, [pc, #604]	@ (800e92c <tcp_process+0x29c>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	d123      	bne.n	800e71c <tcp_process+0x8c>
        acceptable = 1;
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	76fb      	strb	r3, [r7, #27]
 800e6d8:	e020      	b.n	800e71c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e6de:	4b94      	ldr	r3, [pc, #592]	@ (800e930 <tcp_process+0x2a0>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d102      	bne.n	800e6ec <tcp_process+0x5c>
        acceptable = 1;
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	76fb      	strb	r3, [r7, #27]
 800e6ea:	e017      	b.n	800e71c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e6ec:	4b90      	ldr	r3, [pc, #576]	@ (800e930 <tcp_process+0x2a0>)
 800e6ee:	681a      	ldr	r2, [r3, #0]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6f4:	1ad3      	subs	r3, r2, r3
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	db10      	blt.n	800e71c <tcp_process+0x8c>
 800e6fa:	4b8d      	ldr	r3, [pc, #564]	@ (800e930 <tcp_process+0x2a0>)
 800e6fc:	681a      	ldr	r2, [r3, #0]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e702:	6879      	ldr	r1, [r7, #4]
 800e704:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e706:	440b      	add	r3, r1
 800e708:	1ad3      	subs	r3, r2, r3
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	dc06      	bgt.n	800e71c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	8b5b      	ldrh	r3, [r3, #26]
 800e712:	f043 0302 	orr.w	r3, r3, #2
 800e716:	b29a      	uxth	r2, r3
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e71c:	7efb      	ldrb	r3, [r7, #27]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d01b      	beq.n	800e75a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	7d1b      	ldrb	r3, [r3, #20]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d106      	bne.n	800e738 <tcp_process+0xa8>
 800e72a:	4b7c      	ldr	r3, [pc, #496]	@ (800e91c <tcp_process+0x28c>)
 800e72c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800e730:	4980      	ldr	r1, [pc, #512]	@ (800e934 <tcp_process+0x2a4>)
 800e732:	487c      	ldr	r0, [pc, #496]	@ (800e924 <tcp_process+0x294>)
 800e734:	f005 ff90 	bl	8014658 <iprintf>
      recv_flags |= TF_RESET;
 800e738:	4b7f      	ldr	r3, [pc, #508]	@ (800e938 <tcp_process+0x2a8>)
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	f043 0308 	orr.w	r3, r3, #8
 800e740:	b2da      	uxtb	r2, r3
 800e742:	4b7d      	ldr	r3, [pc, #500]	@ (800e938 <tcp_process+0x2a8>)
 800e744:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	8b5b      	ldrh	r3, [r3, #26]
 800e74a:	f023 0301 	bic.w	r3, r3, #1
 800e74e:	b29a      	uxth	r2, r3
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e754:	f06f 030d 	mvn.w	r3, #13
 800e758:	e37a      	b.n	800ee50 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e75a:	2300      	movs	r3, #0
 800e75c:	e378      	b.n	800ee50 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e75e:	4b72      	ldr	r3, [pc, #456]	@ (800e928 <tcp_process+0x298>)
 800e760:	781b      	ldrb	r3, [r3, #0]
 800e762:	f003 0302 	and.w	r3, r3, #2
 800e766:	2b00      	cmp	r3, #0
 800e768:	d010      	beq.n	800e78c <tcp_process+0xfc>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	7d1b      	ldrb	r3, [r3, #20]
 800e76e:	2b02      	cmp	r3, #2
 800e770:	d00c      	beq.n	800e78c <tcp_process+0xfc>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	7d1b      	ldrb	r3, [r3, #20]
 800e776:	2b03      	cmp	r3, #3
 800e778:	d008      	beq.n	800e78c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	8b5b      	ldrh	r3, [r3, #26]
 800e77e:	f043 0302 	orr.w	r3, r3, #2
 800e782:	b29a      	uxth	r2, r3
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e788:	2300      	movs	r3, #0
 800e78a:	e361      	b.n	800ee50 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	8b5b      	ldrh	r3, [r3, #26]
 800e790:	f003 0310 	and.w	r3, r3, #16
 800e794:	2b00      	cmp	r3, #0
 800e796:	d103      	bne.n	800e7a0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e798:	4b68      	ldr	r3, [pc, #416]	@ (800e93c <tcp_process+0x2ac>)
 800e79a:	681a      	ldr	r2, [r3, #0]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f001 fc2b 	bl	801000c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	7d1b      	ldrb	r3, [r3, #20]
 800e7ba:	3b02      	subs	r3, #2
 800e7bc:	2b07      	cmp	r3, #7
 800e7be:	f200 8337 	bhi.w	800ee30 <tcp_process+0x7a0>
 800e7c2:	a201      	add	r2, pc, #4	@ (adr r2, 800e7c8 <tcp_process+0x138>)
 800e7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7c8:	0800e7e9 	.word	0x0800e7e9
 800e7cc:	0800ea19 	.word	0x0800ea19
 800e7d0:	0800eb91 	.word	0x0800eb91
 800e7d4:	0800ebbb 	.word	0x0800ebbb
 800e7d8:	0800ecdf 	.word	0x0800ecdf
 800e7dc:	0800eb91 	.word	0x0800eb91
 800e7e0:	0800ed6b 	.word	0x0800ed6b
 800e7e4:	0800edfb 	.word	0x0800edfb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e7e8:	4b4f      	ldr	r3, [pc, #316]	@ (800e928 <tcp_process+0x298>)
 800e7ea:	781b      	ldrb	r3, [r3, #0]
 800e7ec:	f003 0310 	and.w	r3, r3, #16
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	f000 80e4 	beq.w	800e9be <tcp_process+0x32e>
 800e7f6:	4b4c      	ldr	r3, [pc, #304]	@ (800e928 <tcp_process+0x298>)
 800e7f8:	781b      	ldrb	r3, [r3, #0]
 800e7fa:	f003 0302 	and.w	r3, r3, #2
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	f000 80dd 	beq.w	800e9be <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e808:	1c5a      	adds	r2, r3, #1
 800e80a:	4b48      	ldr	r3, [pc, #288]	@ (800e92c <tcp_process+0x29c>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	429a      	cmp	r2, r3
 800e810:	f040 80d5 	bne.w	800e9be <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e814:	4b46      	ldr	r3, [pc, #280]	@ (800e930 <tcp_process+0x2a0>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	1c5a      	adds	r2, r3, #1
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800e826:	4b41      	ldr	r3, [pc, #260]	@ (800e92c <tcp_process+0x29c>)
 800e828:	681a      	ldr	r2, [r3, #0]
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e82e:	4b44      	ldr	r3, [pc, #272]	@ (800e940 <tcp_process+0x2b0>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	89db      	ldrh	r3, [r3, #14]
 800e834:	b29a      	uxth	r2, r3
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e848:	4b39      	ldr	r3, [pc, #228]	@ (800e930 <tcp_process+0x2a0>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	1e5a      	subs	r2, r3, #1
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2204      	movs	r2, #4
 800e856:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	3304      	adds	r3, #4
 800e860:	4618      	mov	r0, r3
 800e862:	f004 fb1b 	bl	8012e9c <ip4_route>
 800e866:	4601      	mov	r1, r0
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	3304      	adds	r3, #4
 800e86c:	461a      	mov	r2, r3
 800e86e:	4620      	mov	r0, r4
 800e870:	f7ff f88c 	bl	800d98c <tcp_eff_send_mss_netif>
 800e874:	4603      	mov	r3, r0
 800e876:	461a      	mov	r2, r3
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e880:	009a      	lsls	r2, r3, #2
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e886:	005b      	lsls	r3, r3, #1
 800e888:	f241 111c 	movw	r1, #4380	@ 0x111c
 800e88c:	428b      	cmp	r3, r1
 800e88e:	bf38      	it	cc
 800e890:	460b      	movcc	r3, r1
 800e892:	429a      	cmp	r2, r3
 800e894:	d204      	bcs.n	800e8a0 <tcp_process+0x210>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e89a:	009b      	lsls	r3, r3, #2
 800e89c:	b29b      	uxth	r3, r3
 800e89e:	e00d      	b.n	800e8bc <tcp_process+0x22c>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e8a4:	005b      	lsls	r3, r3, #1
 800e8a6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d904      	bls.n	800e8b8 <tcp_process+0x228>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e8b2:	005b      	lsls	r3, r3, #1
 800e8b4:	b29b      	uxth	r3, r3
 800e8b6:	e001      	b.n	800e8bc <tcp_process+0x22c>
 800e8b8:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d106      	bne.n	800e8da <tcp_process+0x24a>
 800e8cc:	4b13      	ldr	r3, [pc, #76]	@ (800e91c <tcp_process+0x28c>)
 800e8ce:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800e8d2:	491c      	ldr	r1, [pc, #112]	@ (800e944 <tcp_process+0x2b4>)
 800e8d4:	4813      	ldr	r0, [pc, #76]	@ (800e924 <tcp_process+0x294>)
 800e8d6:	f005 febf 	bl	8014658 <iprintf>
        --pcb->snd_queuelen;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e8e0:	3b01      	subs	r3, #1
 800e8e2:	b29a      	uxth	r2, r3
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e8ee:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e8f0:	69fb      	ldr	r3, [r7, #28]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d12a      	bne.n	800e94c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e8fa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e8fc:	69fb      	ldr	r3, [r7, #28]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d106      	bne.n	800e910 <tcp_process+0x280>
 800e902:	4b06      	ldr	r3, [pc, #24]	@ (800e91c <tcp_process+0x28c>)
 800e904:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800e908:	490f      	ldr	r1, [pc, #60]	@ (800e948 <tcp_process+0x2b8>)
 800e90a:	4806      	ldr	r0, [pc, #24]	@ (800e924 <tcp_process+0x294>)
 800e90c:	f005 fea4 	bl	8014658 <iprintf>
          pcb->unsent = rseg->next;
 800e910:	69fb      	ldr	r3, [r7, #28]
 800e912:	681a      	ldr	r2, [r3, #0]
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e918:	e01c      	b.n	800e954 <tcp_process+0x2c4>
 800e91a:	bf00      	nop
 800e91c:	080168a4 	.word	0x080168a4
 800e920:	08016adc 	.word	0x08016adc
 800e924:	080168f0 	.word	0x080168f0
 800e928:	2000d3ec 	.word	0x2000d3ec
 800e92c:	2000d3e4 	.word	0x2000d3e4
 800e930:	2000d3e0 	.word	0x2000d3e0
 800e934:	08016af8 	.word	0x08016af8
 800e938:	2000d3ed 	.word	0x2000d3ed
 800e93c:	2000d3a8 	.word	0x2000d3a8
 800e940:	2000d3d0 	.word	0x2000d3d0
 800e944:	08016b18 	.word	0x08016b18
 800e948:	08016b30 	.word	0x08016b30
        } else {
          pcb->unacked = rseg->next;
 800e94c:	69fb      	ldr	r3, [r7, #28]
 800e94e:	681a      	ldr	r2, [r3, #0]
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800e954:	69f8      	ldr	r0, [r7, #28]
 800e956:	f7fe fd22 	bl	800d39e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d104      	bne.n	800e96c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e968:	861a      	strh	r2, [r3, #48]	@ 0x30
 800e96a:	e006      	b.n	800e97a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2200      	movs	r2, #0
 800e970:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2200      	movs	r2, #0
 800e976:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e980:	2b00      	cmp	r3, #0
 800e982:	d00a      	beq.n	800e99a <tcp_process+0x30a>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e98a:	687a      	ldr	r2, [r7, #4]
 800e98c:	6910      	ldr	r0, [r2, #16]
 800e98e:	2200      	movs	r2, #0
 800e990:	6879      	ldr	r1, [r7, #4]
 800e992:	4798      	blx	r3
 800e994:	4603      	mov	r3, r0
 800e996:	76bb      	strb	r3, [r7, #26]
 800e998:	e001      	b.n	800e99e <tcp_process+0x30e>
 800e99a:	2300      	movs	r3, #0
 800e99c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e99e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e9a2:	f113 0f0d 	cmn.w	r3, #13
 800e9a6:	d102      	bne.n	800e9ae <tcp_process+0x31e>
          return ERR_ABRT;
 800e9a8:	f06f 030c 	mvn.w	r3, #12
 800e9ac:	e250      	b.n	800ee50 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	8b5b      	ldrh	r3, [r3, #26]
 800e9b2:	f043 0302 	orr.w	r3, r3, #2
 800e9b6:	b29a      	uxth	r2, r3
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e9bc:	e23a      	b.n	800ee34 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e9be:	4b98      	ldr	r3, [pc, #608]	@ (800ec20 <tcp_process+0x590>)
 800e9c0:	781b      	ldrb	r3, [r3, #0]
 800e9c2:	f003 0310 	and.w	r3, r3, #16
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	f000 8234 	beq.w	800ee34 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9cc:	4b95      	ldr	r3, [pc, #596]	@ (800ec24 <tcp_process+0x594>)
 800e9ce:	6819      	ldr	r1, [r3, #0]
 800e9d0:	4b95      	ldr	r3, [pc, #596]	@ (800ec28 <tcp_process+0x598>)
 800e9d2:	881b      	ldrh	r3, [r3, #0]
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	4b95      	ldr	r3, [pc, #596]	@ (800ec2c <tcp_process+0x59c>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e9dc:	4b94      	ldr	r3, [pc, #592]	@ (800ec30 <tcp_process+0x5a0>)
 800e9de:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9e0:	885b      	ldrh	r3, [r3, #2]
 800e9e2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e9e4:	4a92      	ldr	r2, [pc, #584]	@ (800ec30 <tcp_process+0x5a0>)
 800e9e6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9e8:	8812      	ldrh	r2, [r2, #0]
 800e9ea:	b292      	uxth	r2, r2
 800e9ec:	9202      	str	r2, [sp, #8]
 800e9ee:	9301      	str	r3, [sp, #4]
 800e9f0:	4b90      	ldr	r3, [pc, #576]	@ (800ec34 <tcp_process+0x5a4>)
 800e9f2:	9300      	str	r3, [sp, #0]
 800e9f4:	4b90      	ldr	r3, [pc, #576]	@ (800ec38 <tcp_process+0x5a8>)
 800e9f6:	4602      	mov	r2, r0
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f002 fc7f 	bl	80112fc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ea04:	2b05      	cmp	r3, #5
 800ea06:	f200 8215 	bhi.w	800ee34 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800ea10:	6878      	ldr	r0, [r7, #4]
 800ea12:	f002 fa4b 	bl	8010eac <tcp_rexmit_rto>
      break;
 800ea16:	e20d      	b.n	800ee34 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ea18:	4b81      	ldr	r3, [pc, #516]	@ (800ec20 <tcp_process+0x590>)
 800ea1a:	781b      	ldrb	r3, [r3, #0]
 800ea1c:	f003 0310 	and.w	r3, r3, #16
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	f000 80a1 	beq.w	800eb68 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ea26:	4b7f      	ldr	r3, [pc, #508]	@ (800ec24 <tcp_process+0x594>)
 800ea28:	681a      	ldr	r2, [r3, #0]
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea2e:	1ad3      	subs	r3, r2, r3
 800ea30:	3b01      	subs	r3, #1
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	db7e      	blt.n	800eb34 <tcp_process+0x4a4>
 800ea36:	4b7b      	ldr	r3, [pc, #492]	@ (800ec24 <tcp_process+0x594>)
 800ea38:	681a      	ldr	r2, [r3, #0]
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea3e:	1ad3      	subs	r3, r2, r3
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	dc77      	bgt.n	800eb34 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2204      	movs	r2, #4
 800ea48:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d102      	bne.n	800ea58 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ea52:	23fa      	movs	r3, #250	@ 0xfa
 800ea54:	76bb      	strb	r3, [r7, #26]
 800ea56:	e01d      	b.n	800ea94 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ea5c:	699b      	ldr	r3, [r3, #24]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d106      	bne.n	800ea70 <tcp_process+0x3e0>
 800ea62:	4b76      	ldr	r3, [pc, #472]	@ (800ec3c <tcp_process+0x5ac>)
 800ea64:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800ea68:	4975      	ldr	r1, [pc, #468]	@ (800ec40 <tcp_process+0x5b0>)
 800ea6a:	4876      	ldr	r0, [pc, #472]	@ (800ec44 <tcp_process+0x5b4>)
 800ea6c:	f005 fdf4 	bl	8014658 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ea74:	699b      	ldr	r3, [r3, #24]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d00a      	beq.n	800ea90 <tcp_process+0x400>
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ea7e:	699b      	ldr	r3, [r3, #24]
 800ea80:	687a      	ldr	r2, [r7, #4]
 800ea82:	6910      	ldr	r0, [r2, #16]
 800ea84:	2200      	movs	r2, #0
 800ea86:	6879      	ldr	r1, [r7, #4]
 800ea88:	4798      	blx	r3
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	76bb      	strb	r3, [r7, #26]
 800ea8e:	e001      	b.n	800ea94 <tcp_process+0x404>
 800ea90:	23f0      	movs	r3, #240	@ 0xf0
 800ea92:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ea94:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d00a      	beq.n	800eab2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ea9c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800eaa0:	f113 0f0d 	cmn.w	r3, #13
 800eaa4:	d002      	beq.n	800eaac <tcp_process+0x41c>
              tcp_abort(pcb);
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	f7fd ff8c 	bl	800c9c4 <tcp_abort>
            }
            return ERR_ABRT;
 800eaac:	f06f 030c 	mvn.w	r3, #12
 800eab0:	e1ce      	b.n	800ee50 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f000 fae0 	bl	800f078 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800eab8:	4b63      	ldr	r3, [pc, #396]	@ (800ec48 <tcp_process+0x5b8>)
 800eaba:	881b      	ldrh	r3, [r3, #0]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d005      	beq.n	800eacc <tcp_process+0x43c>
            recv_acked--;
 800eac0:	4b61      	ldr	r3, [pc, #388]	@ (800ec48 <tcp_process+0x5b8>)
 800eac2:	881b      	ldrh	r3, [r3, #0]
 800eac4:	3b01      	subs	r3, #1
 800eac6:	b29a      	uxth	r2, r3
 800eac8:	4b5f      	ldr	r3, [pc, #380]	@ (800ec48 <tcp_process+0x5b8>)
 800eaca:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ead0:	009a      	lsls	r2, r3, #2
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ead6:	005b      	lsls	r3, r3, #1
 800ead8:	f241 111c 	movw	r1, #4380	@ 0x111c
 800eadc:	428b      	cmp	r3, r1
 800eade:	bf38      	it	cc
 800eae0:	460b      	movcc	r3, r1
 800eae2:	429a      	cmp	r2, r3
 800eae4:	d204      	bcs.n	800eaf0 <tcp_process+0x460>
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eaea:	009b      	lsls	r3, r3, #2
 800eaec:	b29b      	uxth	r3, r3
 800eaee:	e00d      	b.n	800eb0c <tcp_process+0x47c>
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eaf4:	005b      	lsls	r3, r3, #1
 800eaf6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800eafa:	4293      	cmp	r3, r2
 800eafc:	d904      	bls.n	800eb08 <tcp_process+0x478>
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eb02:	005b      	lsls	r3, r3, #1
 800eb04:	b29b      	uxth	r3, r3
 800eb06:	e001      	b.n	800eb0c <tcp_process+0x47c>
 800eb08:	f241 131c 	movw	r3, #4380	@ 0x111c
 800eb0c:	687a      	ldr	r2, [r7, #4]
 800eb0e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800eb12:	4b4e      	ldr	r3, [pc, #312]	@ (800ec4c <tcp_process+0x5bc>)
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	f003 0320 	and.w	r3, r3, #32
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d037      	beq.n	800eb8e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	8b5b      	ldrh	r3, [r3, #26]
 800eb22:	f043 0302 	orr.w	r3, r3, #2
 800eb26:	b29a      	uxth	r2, r3
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2207      	movs	r2, #7
 800eb30:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800eb32:	e02c      	b.n	800eb8e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb34:	4b3b      	ldr	r3, [pc, #236]	@ (800ec24 <tcp_process+0x594>)
 800eb36:	6819      	ldr	r1, [r3, #0]
 800eb38:	4b3b      	ldr	r3, [pc, #236]	@ (800ec28 <tcp_process+0x598>)
 800eb3a:	881b      	ldrh	r3, [r3, #0]
 800eb3c:	461a      	mov	r2, r3
 800eb3e:	4b3b      	ldr	r3, [pc, #236]	@ (800ec2c <tcp_process+0x59c>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb44:	4b3a      	ldr	r3, [pc, #232]	@ (800ec30 <tcp_process+0x5a0>)
 800eb46:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb48:	885b      	ldrh	r3, [r3, #2]
 800eb4a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb4c:	4a38      	ldr	r2, [pc, #224]	@ (800ec30 <tcp_process+0x5a0>)
 800eb4e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb50:	8812      	ldrh	r2, [r2, #0]
 800eb52:	b292      	uxth	r2, r2
 800eb54:	9202      	str	r2, [sp, #8]
 800eb56:	9301      	str	r3, [sp, #4]
 800eb58:	4b36      	ldr	r3, [pc, #216]	@ (800ec34 <tcp_process+0x5a4>)
 800eb5a:	9300      	str	r3, [sp, #0]
 800eb5c:	4b36      	ldr	r3, [pc, #216]	@ (800ec38 <tcp_process+0x5a8>)
 800eb5e:	4602      	mov	r2, r0
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f002 fbcb 	bl	80112fc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800eb66:	e167      	b.n	800ee38 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800eb68:	4b2d      	ldr	r3, [pc, #180]	@ (800ec20 <tcp_process+0x590>)
 800eb6a:	781b      	ldrb	r3, [r3, #0]
 800eb6c:	f003 0302 	and.w	r3, r3, #2
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	f000 8161 	beq.w	800ee38 <tcp_process+0x7a8>
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb7a:	1e5a      	subs	r2, r3, #1
 800eb7c:	4b2b      	ldr	r3, [pc, #172]	@ (800ec2c <tcp_process+0x59c>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	429a      	cmp	r2, r3
 800eb82:	f040 8159 	bne.w	800ee38 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f002 f9b2 	bl	8010ef0 <tcp_rexmit>
      break;
 800eb8c:	e154      	b.n	800ee38 <tcp_process+0x7a8>
 800eb8e:	e153      	b.n	800ee38 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f000 fa71 	bl	800f078 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800eb96:	4b2d      	ldr	r3, [pc, #180]	@ (800ec4c <tcp_process+0x5bc>)
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	f003 0320 	and.w	r3, r3, #32
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	f000 814c 	beq.w	800ee3c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	8b5b      	ldrh	r3, [r3, #26]
 800eba8:	f043 0302 	orr.w	r3, r3, #2
 800ebac:	b29a      	uxth	r2, r3
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2207      	movs	r2, #7
 800ebb6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ebb8:	e140      	b.n	800ee3c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f000 fa5c 	bl	800f078 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ebc0:	4b22      	ldr	r3, [pc, #136]	@ (800ec4c <tcp_process+0x5bc>)
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	f003 0320 	and.w	r3, r3, #32
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d071      	beq.n	800ecb0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ebcc:	4b14      	ldr	r3, [pc, #80]	@ (800ec20 <tcp_process+0x590>)
 800ebce:	781b      	ldrb	r3, [r3, #0]
 800ebd0:	f003 0310 	and.w	r3, r3, #16
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d060      	beq.n	800ec9a <tcp_process+0x60a>
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ebdc:	4b11      	ldr	r3, [pc, #68]	@ (800ec24 <tcp_process+0x594>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d15a      	bne.n	800ec9a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d156      	bne.n	800ec9a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	8b5b      	ldrh	r3, [r3, #26]
 800ebf0:	f043 0302 	orr.w	r3, r3, #2
 800ebf4:	b29a      	uxth	r2, r3
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f7fe fdbc 	bl	800d778 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ec00:	4b13      	ldr	r3, [pc, #76]	@ (800ec50 <tcp_process+0x5c0>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	687a      	ldr	r2, [r7, #4]
 800ec06:	429a      	cmp	r2, r3
 800ec08:	d105      	bne.n	800ec16 <tcp_process+0x586>
 800ec0a:	4b11      	ldr	r3, [pc, #68]	@ (800ec50 <tcp_process+0x5c0>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	68db      	ldr	r3, [r3, #12]
 800ec10:	4a0f      	ldr	r2, [pc, #60]	@ (800ec50 <tcp_process+0x5c0>)
 800ec12:	6013      	str	r3, [r2, #0]
 800ec14:	e02e      	b.n	800ec74 <tcp_process+0x5e4>
 800ec16:	4b0e      	ldr	r3, [pc, #56]	@ (800ec50 <tcp_process+0x5c0>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	617b      	str	r3, [r7, #20]
 800ec1c:	e027      	b.n	800ec6e <tcp_process+0x5de>
 800ec1e:	bf00      	nop
 800ec20:	2000d3ec 	.word	0x2000d3ec
 800ec24:	2000d3e4 	.word	0x2000d3e4
 800ec28:	2000d3ea 	.word	0x2000d3ea
 800ec2c:	2000d3e0 	.word	0x2000d3e0
 800ec30:	2000d3d0 	.word	0x2000d3d0
 800ec34:	2000a2b8 	.word	0x2000a2b8
 800ec38:	2000a2bc 	.word	0x2000a2bc
 800ec3c:	080168a4 	.word	0x080168a4
 800ec40:	08016b44 	.word	0x08016b44
 800ec44:	080168f0 	.word	0x080168f0
 800ec48:	2000d3e8 	.word	0x2000d3e8
 800ec4c:	2000d3ed 	.word	0x2000d3ed
 800ec50:	2000d3b4 	.word	0x2000d3b4
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	68db      	ldr	r3, [r3, #12]
 800ec58:	687a      	ldr	r2, [r7, #4]
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	d104      	bne.n	800ec68 <tcp_process+0x5d8>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	68da      	ldr	r2, [r3, #12]
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	60da      	str	r2, [r3, #12]
 800ec66:	e005      	b.n	800ec74 <tcp_process+0x5e4>
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	68db      	ldr	r3, [r3, #12]
 800ec6c:	617b      	str	r3, [r7, #20]
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d1ef      	bne.n	800ec54 <tcp_process+0x5c4>
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2200      	movs	r2, #0
 800ec78:	60da      	str	r2, [r3, #12]
 800ec7a:	4b77      	ldr	r3, [pc, #476]	@ (800ee58 <tcp_process+0x7c8>)
 800ec7c:	2201      	movs	r2, #1
 800ec7e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	220a      	movs	r2, #10
 800ec84:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ec86:	4b75      	ldr	r3, [pc, #468]	@ (800ee5c <tcp_process+0x7cc>)
 800ec88:	681a      	ldr	r2, [r3, #0]
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	60da      	str	r2, [r3, #12]
 800ec8e:	4a73      	ldr	r2, [pc, #460]	@ (800ee5c <tcp_process+0x7cc>)
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6013      	str	r3, [r2, #0]
 800ec94:	f002 fcf4 	bl	8011680 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ec98:	e0d2      	b.n	800ee40 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	8b5b      	ldrh	r3, [r3, #26]
 800ec9e:	f043 0302 	orr.w	r3, r3, #2
 800eca2:	b29a      	uxth	r2, r3
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2208      	movs	r2, #8
 800ecac:	751a      	strb	r2, [r3, #20]
      break;
 800ecae:	e0c7      	b.n	800ee40 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ecb0:	4b6b      	ldr	r3, [pc, #428]	@ (800ee60 <tcp_process+0x7d0>)
 800ecb2:	781b      	ldrb	r3, [r3, #0]
 800ecb4:	f003 0310 	and.w	r3, r3, #16
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	f000 80c1 	beq.w	800ee40 <tcp_process+0x7b0>
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ecc2:	4b68      	ldr	r3, [pc, #416]	@ (800ee64 <tcp_process+0x7d4>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	f040 80ba 	bne.w	800ee40 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	f040 80b5 	bne.w	800ee40 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2206      	movs	r2, #6
 800ecda:	751a      	strb	r2, [r3, #20]
      break;
 800ecdc:	e0b0      	b.n	800ee40 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f000 f9ca 	bl	800f078 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ece4:	4b60      	ldr	r3, [pc, #384]	@ (800ee68 <tcp_process+0x7d8>)
 800ece6:	781b      	ldrb	r3, [r3, #0]
 800ece8:	f003 0320 	and.w	r3, r3, #32
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	f000 80a9 	beq.w	800ee44 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	8b5b      	ldrh	r3, [r3, #26]
 800ecf6:	f043 0302 	orr.w	r3, r3, #2
 800ecfa:	b29a      	uxth	r2, r3
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f7fe fd39 	bl	800d778 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ed06:	4b59      	ldr	r3, [pc, #356]	@ (800ee6c <tcp_process+0x7dc>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	687a      	ldr	r2, [r7, #4]
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d105      	bne.n	800ed1c <tcp_process+0x68c>
 800ed10:	4b56      	ldr	r3, [pc, #344]	@ (800ee6c <tcp_process+0x7dc>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	68db      	ldr	r3, [r3, #12]
 800ed16:	4a55      	ldr	r2, [pc, #340]	@ (800ee6c <tcp_process+0x7dc>)
 800ed18:	6013      	str	r3, [r2, #0]
 800ed1a:	e013      	b.n	800ed44 <tcp_process+0x6b4>
 800ed1c:	4b53      	ldr	r3, [pc, #332]	@ (800ee6c <tcp_process+0x7dc>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	613b      	str	r3, [r7, #16]
 800ed22:	e00c      	b.n	800ed3e <tcp_process+0x6ae>
 800ed24:	693b      	ldr	r3, [r7, #16]
 800ed26:	68db      	ldr	r3, [r3, #12]
 800ed28:	687a      	ldr	r2, [r7, #4]
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d104      	bne.n	800ed38 <tcp_process+0x6a8>
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	68da      	ldr	r2, [r3, #12]
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	60da      	str	r2, [r3, #12]
 800ed36:	e005      	b.n	800ed44 <tcp_process+0x6b4>
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	68db      	ldr	r3, [r3, #12]
 800ed3c:	613b      	str	r3, [r7, #16]
 800ed3e:	693b      	ldr	r3, [r7, #16]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d1ef      	bne.n	800ed24 <tcp_process+0x694>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2200      	movs	r2, #0
 800ed48:	60da      	str	r2, [r3, #12]
 800ed4a:	4b43      	ldr	r3, [pc, #268]	@ (800ee58 <tcp_process+0x7c8>)
 800ed4c:	2201      	movs	r2, #1
 800ed4e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	220a      	movs	r2, #10
 800ed54:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ed56:	4b41      	ldr	r3, [pc, #260]	@ (800ee5c <tcp_process+0x7cc>)
 800ed58:	681a      	ldr	r2, [r3, #0]
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	60da      	str	r2, [r3, #12]
 800ed5e:	4a3f      	ldr	r2, [pc, #252]	@ (800ee5c <tcp_process+0x7cc>)
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	6013      	str	r3, [r2, #0]
 800ed64:	f002 fc8c 	bl	8011680 <tcp_timer_needed>
      }
      break;
 800ed68:	e06c      	b.n	800ee44 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f000 f984 	bl	800f078 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ed70:	4b3b      	ldr	r3, [pc, #236]	@ (800ee60 <tcp_process+0x7d0>)
 800ed72:	781b      	ldrb	r3, [r3, #0]
 800ed74:	f003 0310 	and.w	r3, r3, #16
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d065      	beq.n	800ee48 <tcp_process+0x7b8>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ed80:	4b38      	ldr	r3, [pc, #224]	@ (800ee64 <tcp_process+0x7d4>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d15f      	bne.n	800ee48 <tcp_process+0x7b8>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d15b      	bne.n	800ee48 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f7fe fcf1 	bl	800d778 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ed96:	4b35      	ldr	r3, [pc, #212]	@ (800ee6c <tcp_process+0x7dc>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	687a      	ldr	r2, [r7, #4]
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d105      	bne.n	800edac <tcp_process+0x71c>
 800eda0:	4b32      	ldr	r3, [pc, #200]	@ (800ee6c <tcp_process+0x7dc>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	68db      	ldr	r3, [r3, #12]
 800eda6:	4a31      	ldr	r2, [pc, #196]	@ (800ee6c <tcp_process+0x7dc>)
 800eda8:	6013      	str	r3, [r2, #0]
 800edaa:	e013      	b.n	800edd4 <tcp_process+0x744>
 800edac:	4b2f      	ldr	r3, [pc, #188]	@ (800ee6c <tcp_process+0x7dc>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	60fb      	str	r3, [r7, #12]
 800edb2:	e00c      	b.n	800edce <tcp_process+0x73e>
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	68db      	ldr	r3, [r3, #12]
 800edb8:	687a      	ldr	r2, [r7, #4]
 800edba:	429a      	cmp	r2, r3
 800edbc:	d104      	bne.n	800edc8 <tcp_process+0x738>
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	68da      	ldr	r2, [r3, #12]
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	60da      	str	r2, [r3, #12]
 800edc6:	e005      	b.n	800edd4 <tcp_process+0x744>
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	68db      	ldr	r3, [r3, #12]
 800edcc:	60fb      	str	r3, [r7, #12]
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d1ef      	bne.n	800edb4 <tcp_process+0x724>
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2200      	movs	r2, #0
 800edd8:	60da      	str	r2, [r3, #12]
 800edda:	4b1f      	ldr	r3, [pc, #124]	@ (800ee58 <tcp_process+0x7c8>)
 800eddc:	2201      	movs	r2, #1
 800edde:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	220a      	movs	r2, #10
 800ede4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ede6:	4b1d      	ldr	r3, [pc, #116]	@ (800ee5c <tcp_process+0x7cc>)
 800ede8:	681a      	ldr	r2, [r3, #0]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	60da      	str	r2, [r3, #12]
 800edee:	4a1b      	ldr	r2, [pc, #108]	@ (800ee5c <tcp_process+0x7cc>)
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	6013      	str	r3, [r2, #0]
 800edf4:	f002 fc44 	bl	8011680 <tcp_timer_needed>
      }
      break;
 800edf8:	e026      	b.n	800ee48 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f000 f93c 	bl	800f078 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ee00:	4b17      	ldr	r3, [pc, #92]	@ (800ee60 <tcp_process+0x7d0>)
 800ee02:	781b      	ldrb	r3, [r3, #0]
 800ee04:	f003 0310 	and.w	r3, r3, #16
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d01f      	beq.n	800ee4c <tcp_process+0x7bc>
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ee10:	4b14      	ldr	r3, [pc, #80]	@ (800ee64 <tcp_process+0x7d4>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d119      	bne.n	800ee4c <tcp_process+0x7bc>
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d115      	bne.n	800ee4c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ee20:	4b11      	ldr	r3, [pc, #68]	@ (800ee68 <tcp_process+0x7d8>)
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	f043 0310 	orr.w	r3, r3, #16
 800ee28:	b2da      	uxtb	r2, r3
 800ee2a:	4b0f      	ldr	r3, [pc, #60]	@ (800ee68 <tcp_process+0x7d8>)
 800ee2c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ee2e:	e00d      	b.n	800ee4c <tcp_process+0x7bc>
    default:
      break;
 800ee30:	bf00      	nop
 800ee32:	e00c      	b.n	800ee4e <tcp_process+0x7be>
      break;
 800ee34:	bf00      	nop
 800ee36:	e00a      	b.n	800ee4e <tcp_process+0x7be>
      break;
 800ee38:	bf00      	nop
 800ee3a:	e008      	b.n	800ee4e <tcp_process+0x7be>
      break;
 800ee3c:	bf00      	nop
 800ee3e:	e006      	b.n	800ee4e <tcp_process+0x7be>
      break;
 800ee40:	bf00      	nop
 800ee42:	e004      	b.n	800ee4e <tcp_process+0x7be>
      break;
 800ee44:	bf00      	nop
 800ee46:	e002      	b.n	800ee4e <tcp_process+0x7be>
      break;
 800ee48:	bf00      	nop
 800ee4a:	e000      	b.n	800ee4e <tcp_process+0x7be>
      break;
 800ee4c:	bf00      	nop
  }
  return ERR_OK;
 800ee4e:	2300      	movs	r3, #0
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	3724      	adds	r7, #36	@ 0x24
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd90      	pop	{r4, r7, pc}
 800ee58:	2000d3bc 	.word	0x2000d3bc
 800ee5c:	2000d3b8 	.word	0x2000d3b8
 800ee60:	2000d3ec 	.word	0x2000d3ec
 800ee64:	2000d3e4 	.word	0x2000d3e4
 800ee68:	2000d3ed 	.word	0x2000d3ed
 800ee6c:	2000d3b4 	.word	0x2000d3b4

0800ee70 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ee70:	b590      	push	{r4, r7, lr}
 800ee72:	b085      	sub	sp, #20
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
 800ee78:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d106      	bne.n	800ee8e <tcp_oos_insert_segment+0x1e>
 800ee80:	4b3b      	ldr	r3, [pc, #236]	@ (800ef70 <tcp_oos_insert_segment+0x100>)
 800ee82:	f240 421f 	movw	r2, #1055	@ 0x41f
 800ee86:	493b      	ldr	r1, [pc, #236]	@ (800ef74 <tcp_oos_insert_segment+0x104>)
 800ee88:	483b      	ldr	r0, [pc, #236]	@ (800ef78 <tcp_oos_insert_segment+0x108>)
 800ee8a:	f005 fbe5 	bl	8014658 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	68db      	ldr	r3, [r3, #12]
 800ee92:	899b      	ldrh	r3, [r3, #12]
 800ee94:	b29b      	uxth	r3, r3
 800ee96:	4618      	mov	r0, r3
 800ee98:	f7fb fc12 	bl	800a6c0 <lwip_htons>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	b2db      	uxtb	r3, r3
 800eea0:	f003 0301 	and.w	r3, r3, #1
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d028      	beq.n	800eefa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800eea8:	6838      	ldr	r0, [r7, #0]
 800eeaa:	f7fe fa63 	bl	800d374 <tcp_segs_free>
    next = NULL;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	603b      	str	r3, [r7, #0]
 800eeb2:	e056      	b.n	800ef62 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	68db      	ldr	r3, [r3, #12]
 800eeb8:	899b      	ldrh	r3, [r3, #12]
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7fb fbff 	bl	800a6c0 <lwip_htons>
 800eec2:	4603      	mov	r3, r0
 800eec4:	b2db      	uxtb	r3, r3
 800eec6:	f003 0301 	and.w	r3, r3, #1
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d00d      	beq.n	800eeea <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	68db      	ldr	r3, [r3, #12]
 800eed2:	899b      	ldrh	r3, [r3, #12]
 800eed4:	b29c      	uxth	r4, r3
 800eed6:	2001      	movs	r0, #1
 800eed8:	f7fb fbf2 	bl	800a6c0 <lwip_htons>
 800eedc:	4603      	mov	r3, r0
 800eede:	461a      	mov	r2, r3
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	68db      	ldr	r3, [r3, #12]
 800eee4:	4322      	orrs	r2, r4
 800eee6:	b292      	uxth	r2, r2
 800eee8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800eef4:	68f8      	ldr	r0, [r7, #12]
 800eef6:	f7fe fa52 	bl	800d39e <tcp_seg_free>
    while (next &&
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d00e      	beq.n	800ef1e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	891b      	ldrh	r3, [r3, #8]
 800ef04:	461a      	mov	r2, r3
 800ef06:	4b1d      	ldr	r3, [pc, #116]	@ (800ef7c <tcp_oos_insert_segment+0x10c>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	441a      	add	r2, r3
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	68db      	ldr	r3, [r3, #12]
 800ef10:	685b      	ldr	r3, [r3, #4]
 800ef12:	6839      	ldr	r1, [r7, #0]
 800ef14:	8909      	ldrh	r1, [r1, #8]
 800ef16:	440b      	add	r3, r1
 800ef18:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	daca      	bge.n	800eeb4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d01e      	beq.n	800ef62 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	891b      	ldrh	r3, [r3, #8]
 800ef28:	461a      	mov	r2, r3
 800ef2a:	4b14      	ldr	r3, [pc, #80]	@ (800ef7c <tcp_oos_insert_segment+0x10c>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	441a      	add	r2, r3
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	68db      	ldr	r3, [r3, #12]
 800ef34:	685b      	ldr	r3, [r3, #4]
 800ef36:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	dd12      	ble.n	800ef62 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	68db      	ldr	r3, [r3, #12]
 800ef40:	685b      	ldr	r3, [r3, #4]
 800ef42:	b29a      	uxth	r2, r3
 800ef44:	4b0d      	ldr	r3, [pc, #52]	@ (800ef7c <tcp_oos_insert_segment+0x10c>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	b29b      	uxth	r3, r3
 800ef4a:	1ad3      	subs	r3, r2, r3
 800ef4c:	b29a      	uxth	r2, r3
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	685a      	ldr	r2, [r3, #4]
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	891b      	ldrh	r3, [r3, #8]
 800ef5a:	4619      	mov	r1, r3
 800ef5c:	4610      	mov	r0, r2
 800ef5e:	f7fc fe17 	bl	800bb90 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	683a      	ldr	r2, [r7, #0]
 800ef66:	601a      	str	r2, [r3, #0]
}
 800ef68:	bf00      	nop
 800ef6a:	3714      	adds	r7, #20
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd90      	pop	{r4, r7, pc}
 800ef70:	080168a4 	.word	0x080168a4
 800ef74:	08016b64 	.word	0x08016b64
 800ef78:	080168f0 	.word	0x080168f0
 800ef7c:	2000d3e0 	.word	0x2000d3e0

0800ef80 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ef80:	b5b0      	push	{r4, r5, r7, lr}
 800ef82:	b086      	sub	sp, #24
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	60f8      	str	r0, [r7, #12]
 800ef88:	60b9      	str	r1, [r7, #8]
 800ef8a:	607a      	str	r2, [r7, #4]
 800ef8c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ef8e:	e03e      	b.n	800f00e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	685b      	ldr	r3, [r3, #4]
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f7fd f80a 	bl	800bfb8 <pbuf_clen>
 800efa4:	4603      	mov	r3, r0
 800efa6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800efae:	8a7a      	ldrh	r2, [r7, #18]
 800efb0:	429a      	cmp	r2, r3
 800efb2:	d906      	bls.n	800efc2 <tcp_free_acked_segments+0x42>
 800efb4:	4b2a      	ldr	r3, [pc, #168]	@ (800f060 <tcp_free_acked_segments+0xe0>)
 800efb6:	f240 4257 	movw	r2, #1111	@ 0x457
 800efba:	492a      	ldr	r1, [pc, #168]	@ (800f064 <tcp_free_acked_segments+0xe4>)
 800efbc:	482a      	ldr	r0, [pc, #168]	@ (800f068 <tcp_free_acked_segments+0xe8>)
 800efbe:	f005 fb4b 	bl	8014658 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800efc8:	8a7b      	ldrh	r3, [r7, #18]
 800efca:	1ad3      	subs	r3, r2, r3
 800efcc:	b29a      	uxth	r2, r3
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800efd4:	697b      	ldr	r3, [r7, #20]
 800efd6:	891a      	ldrh	r2, [r3, #8]
 800efd8:	4b24      	ldr	r3, [pc, #144]	@ (800f06c <tcp_free_acked_segments+0xec>)
 800efda:	881b      	ldrh	r3, [r3, #0]
 800efdc:	4413      	add	r3, r2
 800efde:	b29a      	uxth	r2, r3
 800efe0:	4b22      	ldr	r3, [pc, #136]	@ (800f06c <tcp_free_acked_segments+0xec>)
 800efe2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800efe4:	6978      	ldr	r0, [r7, #20]
 800efe6:	f7fe f9da 	bl	800d39e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d00c      	beq.n	800f00e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800eff4:	68bb      	ldr	r3, [r7, #8]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d109      	bne.n	800f00e <tcp_free_acked_segments+0x8e>
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d106      	bne.n	800f00e <tcp_free_acked_segments+0x8e>
 800f000:	4b17      	ldr	r3, [pc, #92]	@ (800f060 <tcp_free_acked_segments+0xe0>)
 800f002:	f240 4261 	movw	r2, #1121	@ 0x461
 800f006:	491a      	ldr	r1, [pc, #104]	@ (800f070 <tcp_free_acked_segments+0xf0>)
 800f008:	4817      	ldr	r0, [pc, #92]	@ (800f068 <tcp_free_acked_segments+0xe8>)
 800f00a:	f005 fb25 	bl	8014658 <iprintf>
  while (seg_list != NULL &&
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d020      	beq.n	800f056 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	68db      	ldr	r3, [r3, #12]
 800f018:	685b      	ldr	r3, [r3, #4]
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7fb fb65 	bl	800a6ea <lwip_htonl>
 800f020:	4604      	mov	r4, r0
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	891b      	ldrh	r3, [r3, #8]
 800f026:	461d      	mov	r5, r3
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	68db      	ldr	r3, [r3, #12]
 800f02c:	899b      	ldrh	r3, [r3, #12]
 800f02e:	b29b      	uxth	r3, r3
 800f030:	4618      	mov	r0, r3
 800f032:	f7fb fb45 	bl	800a6c0 <lwip_htons>
 800f036:	4603      	mov	r3, r0
 800f038:	b2db      	uxtb	r3, r3
 800f03a:	f003 0303 	and.w	r3, r3, #3
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d001      	beq.n	800f046 <tcp_free_acked_segments+0xc6>
 800f042:	2301      	movs	r3, #1
 800f044:	e000      	b.n	800f048 <tcp_free_acked_segments+0xc8>
 800f046:	2300      	movs	r3, #0
 800f048:	442b      	add	r3, r5
 800f04a:	18e2      	adds	r2, r4, r3
 800f04c:	4b09      	ldr	r3, [pc, #36]	@ (800f074 <tcp_free_acked_segments+0xf4>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f052:	2b00      	cmp	r3, #0
 800f054:	dd9c      	ble.n	800ef90 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f056:	68bb      	ldr	r3, [r7, #8]
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3718      	adds	r7, #24
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bdb0      	pop	{r4, r5, r7, pc}
 800f060:	080168a4 	.word	0x080168a4
 800f064:	08016b8c 	.word	0x08016b8c
 800f068:	080168f0 	.word	0x080168f0
 800f06c:	2000d3e8 	.word	0x2000d3e8
 800f070:	08016bb4 	.word	0x08016bb4
 800f074:	2000d3e4 	.word	0x2000d3e4

0800f078 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f078:	b5b0      	push	{r4, r5, r7, lr}
 800f07a:	b094      	sub	sp, #80	@ 0x50
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f080:	2300      	movs	r3, #0
 800f082:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d106      	bne.n	800f098 <tcp_receive+0x20>
 800f08a:	4b91      	ldr	r3, [pc, #580]	@ (800f2d0 <tcp_receive+0x258>)
 800f08c:	f240 427b 	movw	r2, #1147	@ 0x47b
 800f090:	4990      	ldr	r1, [pc, #576]	@ (800f2d4 <tcp_receive+0x25c>)
 800f092:	4891      	ldr	r0, [pc, #580]	@ (800f2d8 <tcp_receive+0x260>)
 800f094:	f005 fae0 	bl	8014658 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	7d1b      	ldrb	r3, [r3, #20]
 800f09c:	2b03      	cmp	r3, #3
 800f09e:	d806      	bhi.n	800f0ae <tcp_receive+0x36>
 800f0a0:	4b8b      	ldr	r3, [pc, #556]	@ (800f2d0 <tcp_receive+0x258>)
 800f0a2:	f240 427c 	movw	r2, #1148	@ 0x47c
 800f0a6:	498d      	ldr	r1, [pc, #564]	@ (800f2dc <tcp_receive+0x264>)
 800f0a8:	488b      	ldr	r0, [pc, #556]	@ (800f2d8 <tcp_receive+0x260>)
 800f0aa:	f005 fad5 	bl	8014658 <iprintf>

  if (flags & TCP_ACK) {
 800f0ae:	4b8c      	ldr	r3, [pc, #560]	@ (800f2e0 <tcp_receive+0x268>)
 800f0b0:	781b      	ldrb	r3, [r3, #0]
 800f0b2:	f003 0310 	and.w	r3, r3, #16
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	f000 8264 	beq.w	800f584 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f0c8:	4413      	add	r3, r2
 800f0ca:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f0d0:	4b84      	ldr	r3, [pc, #528]	@ (800f2e4 <tcp_receive+0x26c>)
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	1ad3      	subs	r3, r2, r3
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	db1b      	blt.n	800f112 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f0de:	4b81      	ldr	r3, [pc, #516]	@ (800f2e4 <tcp_receive+0x26c>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f0e2:	429a      	cmp	r2, r3
 800f0e4:	d106      	bne.n	800f0f4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f0ea:	4b7f      	ldr	r3, [pc, #508]	@ (800f2e8 <tcp_receive+0x270>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	1ad3      	subs	r3, r2, r3
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	db0e      	blt.n	800f112 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f0f8:	4b7b      	ldr	r3, [pc, #492]	@ (800f2e8 <tcp_receive+0x270>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	d125      	bne.n	800f14c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f100:	4b7a      	ldr	r3, [pc, #488]	@ (800f2ec <tcp_receive+0x274>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	89db      	ldrh	r3, [r3, #14]
 800f106:	b29a      	uxth	r2, r3
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f10e:	429a      	cmp	r2, r3
 800f110:	d91c      	bls.n	800f14c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f112:	4b76      	ldr	r3, [pc, #472]	@ (800f2ec <tcp_receive+0x274>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	89db      	ldrh	r3, [r3, #14]
 800f118:	b29a      	uxth	r2, r3
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f12c:	429a      	cmp	r2, r3
 800f12e:	d205      	bcs.n	800f13c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800f13c:	4b69      	ldr	r3, [pc, #420]	@ (800f2e4 <tcp_receive+0x26c>)
 800f13e:	681a      	ldr	r2, [r3, #0]
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800f144:	4b68      	ldr	r3, [pc, #416]	@ (800f2e8 <tcp_receive+0x270>)
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f14c:	4b66      	ldr	r3, [pc, #408]	@ (800f2e8 <tcp_receive+0x270>)
 800f14e:	681a      	ldr	r2, [r3, #0]
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f154:	1ad3      	subs	r3, r2, r3
 800f156:	2b00      	cmp	r3, #0
 800f158:	dc58      	bgt.n	800f20c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f15a:	4b65      	ldr	r3, [pc, #404]	@ (800f2f0 <tcp_receive+0x278>)
 800f15c:	881b      	ldrh	r3, [r3, #0]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d14b      	bne.n	800f1fa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f166:	687a      	ldr	r2, [r7, #4]
 800f168:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800f16c:	4413      	add	r3, r2
 800f16e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f170:	429a      	cmp	r2, r3
 800f172:	d142      	bne.n	800f1fa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	db3d      	blt.n	800f1fa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f182:	4b59      	ldr	r3, [pc, #356]	@ (800f2e8 <tcp_receive+0x270>)
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	429a      	cmp	r2, r3
 800f188:	d137      	bne.n	800f1fa <tcp_receive+0x182>
              found_dupack = 1;
 800f18a:	2301      	movs	r3, #1
 800f18c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f194:	2bff      	cmp	r3, #255	@ 0xff
 800f196:	d007      	beq.n	800f1a8 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f19e:	3301      	adds	r3, #1
 800f1a0:	b2da      	uxtb	r2, r3
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f1ae:	2b03      	cmp	r3, #3
 800f1b0:	d91b      	bls.n	800f1ea <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f1bc:	4413      	add	r3, r2
 800f1be:	b29a      	uxth	r2, r3
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d30a      	bcc.n	800f1e0 <tcp_receive+0x168>
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f1d4:	4413      	add	r3, r2
 800f1d6:	b29a      	uxth	r2, r3
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f1de:	e004      	b.n	800f1ea <tcp_receive+0x172>
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f1e6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f1f0:	2b02      	cmp	r3, #2
 800f1f2:	d902      	bls.n	800f1fa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f001 fee7 	bl	8010fc8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f1fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	f040 8161 	bne.w	800f4c4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2200      	movs	r2, #0
 800f206:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f20a:	e15b      	b.n	800f4c4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f20c:	4b36      	ldr	r3, [pc, #216]	@ (800f2e8 <tcp_receive+0x270>)
 800f20e:	681a      	ldr	r2, [r3, #0]
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f214:	1ad3      	subs	r3, r2, r3
 800f216:	3b01      	subs	r3, #1
 800f218:	2b00      	cmp	r3, #0
 800f21a:	f2c0 814e 	blt.w	800f4ba <tcp_receive+0x442>
 800f21e:	4b32      	ldr	r3, [pc, #200]	@ (800f2e8 <tcp_receive+0x270>)
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f226:	1ad3      	subs	r3, r2, r3
 800f228:	2b00      	cmp	r3, #0
 800f22a:	f300 8146 	bgt.w	800f4ba <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	8b5b      	ldrh	r3, [r3, #26]
 800f232:	f003 0304 	and.w	r3, r3, #4
 800f236:	2b00      	cmp	r3, #0
 800f238:	d010      	beq.n	800f25c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	8b5b      	ldrh	r3, [r3, #26]
 800f23e:	f023 0304 	bic.w	r3, r3, #4
 800f242:	b29a      	uxth	r2, r3
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2200      	movs	r2, #0
 800f258:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2200      	movs	r2, #0
 800f260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f26a:	10db      	asrs	r3, r3, #3
 800f26c:	b21b      	sxth	r3, r3
 800f26e:	b29a      	uxth	r2, r3
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f276:	b29b      	uxth	r3, r3
 800f278:	4413      	add	r3, r2
 800f27a:	b29b      	uxth	r3, r3
 800f27c:	b21a      	sxth	r2, r3
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f284:	4b18      	ldr	r3, [pc, #96]	@ (800f2e8 <tcp_receive+0x270>)
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	b29a      	uxth	r2, r3
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f28e:	b29b      	uxth	r3, r3
 800f290:	1ad3      	subs	r3, r2, r3
 800f292:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2200      	movs	r2, #0
 800f298:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800f29c:	4b12      	ldr	r3, [pc, #72]	@ (800f2e8 <tcp_receive+0x270>)
 800f29e:	681a      	ldr	r2, [r3, #0]
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	7d1b      	ldrb	r3, [r3, #20]
 800f2a8:	2b03      	cmp	r3, #3
 800f2aa:	f240 8097 	bls.w	800f3dc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d245      	bcs.n	800f34a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	8b5b      	ldrh	r3, [r3, #26]
 800f2c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d014      	beq.n	800f2f4 <tcp_receive+0x27c>
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	e013      	b.n	800f2f6 <tcp_receive+0x27e>
 800f2ce:	bf00      	nop
 800f2d0:	080168a4 	.word	0x080168a4
 800f2d4:	08016bd4 	.word	0x08016bd4
 800f2d8:	080168f0 	.word	0x080168f0
 800f2dc:	08016bf0 	.word	0x08016bf0
 800f2e0:	2000d3ec 	.word	0x2000d3ec
 800f2e4:	2000d3e0 	.word	0x2000d3e0
 800f2e8:	2000d3e4 	.word	0x2000d3e4
 800f2ec:	2000d3d0 	.word	0x2000d3d0
 800f2f0:	2000d3ea 	.word	0x2000d3ea
 800f2f4:	2302      	movs	r3, #2
 800f2f6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f2fa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800f2fe:	b29a      	uxth	r2, r3
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f304:	fb12 f303 	smulbb	r3, r2, r3
 800f308:	b29b      	uxth	r3, r3
 800f30a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f30c:	4293      	cmp	r3, r2
 800f30e:	bf28      	it	cs
 800f310:	4613      	movcs	r3, r2
 800f312:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f31a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f31c:	4413      	add	r3, r2
 800f31e:	b29a      	uxth	r2, r3
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f326:	429a      	cmp	r2, r3
 800f328:	d309      	bcc.n	800f33e <tcp_receive+0x2c6>
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f330:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f332:	4413      	add	r3, r2
 800f334:	b29a      	uxth	r2, r3
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f33c:	e04e      	b.n	800f3dc <tcp_receive+0x364>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f344:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f348:	e048      	b.n	800f3dc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f350:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f352:	4413      	add	r3, r2
 800f354:	b29a      	uxth	r2, r3
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f35c:	429a      	cmp	r2, r3
 800f35e:	d309      	bcc.n	800f374 <tcp_receive+0x2fc>
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f366:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f368:	4413      	add	r3, r2
 800f36a:	b29a      	uxth	r2, r3
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f372:	e004      	b.n	800f37e <tcp_receive+0x306>
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f37a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f38a:	429a      	cmp	r2, r3
 800f38c:	d326      	bcc.n	800f3dc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f39a:	1ad3      	subs	r3, r2, r3
 800f39c:	b29a      	uxth	r2, r3
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f3ae:	4413      	add	r3, r2
 800f3b0:	b29a      	uxth	r2, r3
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f3b8:	429a      	cmp	r2, r3
 800f3ba:	d30a      	bcc.n	800f3d2 <tcp_receive+0x35a>
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f3c6:	4413      	add	r3, r2
 800f3c8:	b29a      	uxth	r2, r3
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f3d0:	e004      	b.n	800f3dc <tcp_receive+0x364>
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f3d8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f3e4:	4a98      	ldr	r2, [pc, #608]	@ (800f648 <tcp_receive+0x5d0>)
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f7ff fdca 	bl	800ef80 <tcp_free_acked_segments>
 800f3ec:	4602      	mov	r2, r0
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f3fa:	4a94      	ldr	r2, [pc, #592]	@ (800f64c <tcp_receive+0x5d4>)
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f7ff fdbf 	bl	800ef80 <tcp_free_acked_segments>
 800f402:	4602      	mov	r2, r0
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d104      	bne.n	800f41a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f416:	861a      	strh	r2, [r3, #48]	@ 0x30
 800f418:	e002      	b.n	800f420 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2200      	movs	r2, #0
 800f41e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2200      	movs	r2, #0
 800f424:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d103      	bne.n	800f436 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2200      	movs	r2, #0
 800f432:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800f43c:	4b84      	ldr	r3, [pc, #528]	@ (800f650 <tcp_receive+0x5d8>)
 800f43e:	881b      	ldrh	r3, [r3, #0]
 800f440:	4413      	add	r3, r2
 800f442:	b29a      	uxth	r2, r3
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	8b5b      	ldrh	r3, [r3, #26]
 800f44e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f452:	2b00      	cmp	r3, #0
 800f454:	d035      	beq.n	800f4c2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d118      	bne.n	800f490 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f462:	2b00      	cmp	r3, #0
 800f464:	d00c      	beq.n	800f480 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f46e:	68db      	ldr	r3, [r3, #12]
 800f470:	685b      	ldr	r3, [r3, #4]
 800f472:	4618      	mov	r0, r3
 800f474:	f7fb f939 	bl	800a6ea <lwip_htonl>
 800f478:	4603      	mov	r3, r0
 800f47a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	dc20      	bgt.n	800f4c2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	8b5b      	ldrh	r3, [r3, #26]
 800f484:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f488:	b29a      	uxth	r2, r3
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f48e:	e018      	b.n	800f4c2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f498:	68db      	ldr	r3, [r3, #12]
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	4618      	mov	r0, r3
 800f49e:	f7fb f924 	bl	800a6ea <lwip_htonl>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	1ae3      	subs	r3, r4, r3
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	dc0b      	bgt.n	800f4c2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	8b5b      	ldrh	r3, [r3, #26]
 800f4ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f4b2:	b29a      	uxth	r2, r3
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f4b8:	e003      	b.n	800f4c2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f001 ff70 	bl	80113a0 <tcp_send_empty_ack>
 800f4c0:	e000      	b.n	800f4c4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f4c2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d05b      	beq.n	800f584 <tcp_receive+0x50c>
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f4d0:	4b60      	ldr	r3, [pc, #384]	@ (800f654 <tcp_receive+0x5dc>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	1ad3      	subs	r3, r2, r3
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	da54      	bge.n	800f584 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f4da:	4b5f      	ldr	r3, [pc, #380]	@ (800f658 <tcp_receive+0x5e0>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	b29a      	uxth	r2, r3
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f4e4:	b29b      	uxth	r3, r3
 800f4e6:	1ad3      	subs	r3, r2, r3
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f4ee:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f4f8:	10db      	asrs	r3, r3, #3
 800f4fa:	b21b      	sxth	r3, r3
 800f4fc:	b29b      	uxth	r3, r3
 800f4fe:	1ad3      	subs	r3, r2, r3
 800f500:	b29b      	uxth	r3, r3
 800f502:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f50c:	b29a      	uxth	r2, r3
 800f50e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f512:	4413      	add	r3, r2
 800f514:	b29b      	uxth	r3, r3
 800f516:	b21a      	sxth	r2, r3
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800f51c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800f520:	2b00      	cmp	r3, #0
 800f522:	da05      	bge.n	800f530 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f524:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f528:	425b      	negs	r3, r3
 800f52a:	b29b      	uxth	r3, r3
 800f52c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f530:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f53a:	109b      	asrs	r3, r3, #2
 800f53c:	b21b      	sxth	r3, r3
 800f53e:	b29b      	uxth	r3, r3
 800f540:	1ad3      	subs	r3, r2, r3
 800f542:	b29b      	uxth	r3, r3
 800f544:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f54e:	b29a      	uxth	r2, r3
 800f550:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f554:	4413      	add	r3, r2
 800f556:	b29b      	uxth	r3, r3
 800f558:	b21a      	sxth	r2, r3
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f564:	10db      	asrs	r3, r3, #3
 800f566:	b21b      	sxth	r3, r3
 800f568:	b29a      	uxth	r2, r3
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f570:	b29b      	uxth	r3, r3
 800f572:	4413      	add	r3, r2
 800f574:	b29b      	uxth	r3, r3
 800f576:	b21a      	sxth	r2, r3
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2200      	movs	r2, #0
 800f582:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f584:	4b35      	ldr	r3, [pc, #212]	@ (800f65c <tcp_receive+0x5e4>)
 800f586:	881b      	ldrh	r3, [r3, #0]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	f000 84df 	beq.w	800ff4c <tcp_receive+0xed4>
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	7d1b      	ldrb	r3, [r3, #20]
 800f592:	2b06      	cmp	r3, #6
 800f594:	f200 84da 	bhi.w	800ff4c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f59c:	4b30      	ldr	r3, [pc, #192]	@ (800f660 <tcp_receive+0x5e8>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	1ad3      	subs	r3, r2, r3
 800f5a2:	3b01      	subs	r3, #1
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	f2c0 808f 	blt.w	800f6c8 <tcp_receive+0x650>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f5ae:	4b2b      	ldr	r3, [pc, #172]	@ (800f65c <tcp_receive+0x5e4>)
 800f5b0:	881b      	ldrh	r3, [r3, #0]
 800f5b2:	4619      	mov	r1, r3
 800f5b4:	4b2a      	ldr	r3, [pc, #168]	@ (800f660 <tcp_receive+0x5e8>)
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	440b      	add	r3, r1
 800f5ba:	1ad3      	subs	r3, r2, r3
 800f5bc:	3301      	adds	r3, #1
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	f300 8082 	bgt.w	800f6c8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f5c4:	4b27      	ldr	r3, [pc, #156]	@ (800f664 <tcp_receive+0x5ec>)
 800f5c6:	685b      	ldr	r3, [r3, #4]
 800f5c8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f5ce:	4b24      	ldr	r3, [pc, #144]	@ (800f660 <tcp_receive+0x5e8>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	1ad3      	subs	r3, r2, r3
 800f5d4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f5d6:	4b23      	ldr	r3, [pc, #140]	@ (800f664 <tcp_receive+0x5ec>)
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d106      	bne.n	800f5ec <tcp_receive+0x574>
 800f5de:	4b22      	ldr	r3, [pc, #136]	@ (800f668 <tcp_receive+0x5f0>)
 800f5e0:	f240 5294 	movw	r2, #1428	@ 0x594
 800f5e4:	4921      	ldr	r1, [pc, #132]	@ (800f66c <tcp_receive+0x5f4>)
 800f5e6:	4822      	ldr	r0, [pc, #136]	@ (800f670 <tcp_receive+0x5f8>)
 800f5e8:	f005 f836 	bl	8014658 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5ee:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	d906      	bls.n	800f604 <tcp_receive+0x58c>
 800f5f6:	4b1c      	ldr	r3, [pc, #112]	@ (800f668 <tcp_receive+0x5f0>)
 800f5f8:	f240 5295 	movw	r2, #1429	@ 0x595
 800f5fc:	491d      	ldr	r1, [pc, #116]	@ (800f674 <tcp_receive+0x5fc>)
 800f5fe:	481c      	ldr	r0, [pc, #112]	@ (800f670 <tcp_receive+0x5f8>)
 800f600:	f005 f82a 	bl	8014658 <iprintf>
      off = (u16_t)off32;
 800f604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f606:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f60a:	4b16      	ldr	r3, [pc, #88]	@ (800f664 <tcp_receive+0x5ec>)
 800f60c:	685b      	ldr	r3, [r3, #4]
 800f60e:	891b      	ldrh	r3, [r3, #8]
 800f610:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f614:	429a      	cmp	r2, r3
 800f616:	d906      	bls.n	800f626 <tcp_receive+0x5ae>
 800f618:	4b13      	ldr	r3, [pc, #76]	@ (800f668 <tcp_receive+0x5f0>)
 800f61a:	f240 5297 	movw	r2, #1431	@ 0x597
 800f61e:	4916      	ldr	r1, [pc, #88]	@ (800f678 <tcp_receive+0x600>)
 800f620:	4813      	ldr	r0, [pc, #76]	@ (800f670 <tcp_receive+0x5f8>)
 800f622:	f005 f819 	bl	8014658 <iprintf>
      inseg.len -= off;
 800f626:	4b0f      	ldr	r3, [pc, #60]	@ (800f664 <tcp_receive+0x5ec>)
 800f628:	891a      	ldrh	r2, [r3, #8]
 800f62a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f62e:	1ad3      	subs	r3, r2, r3
 800f630:	b29a      	uxth	r2, r3
 800f632:	4b0c      	ldr	r3, [pc, #48]	@ (800f664 <tcp_receive+0x5ec>)
 800f634:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f636:	4b0b      	ldr	r3, [pc, #44]	@ (800f664 <tcp_receive+0x5ec>)
 800f638:	685b      	ldr	r3, [r3, #4]
 800f63a:	891a      	ldrh	r2, [r3, #8]
 800f63c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f640:	1ad3      	subs	r3, r2, r3
 800f642:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800f644:	e02a      	b.n	800f69c <tcp_receive+0x624>
 800f646:	bf00      	nop
 800f648:	08016c0c 	.word	0x08016c0c
 800f64c:	08016c14 	.word	0x08016c14
 800f650:	2000d3e8 	.word	0x2000d3e8
 800f654:	2000d3e4 	.word	0x2000d3e4
 800f658:	2000d3a8 	.word	0x2000d3a8
 800f65c:	2000d3ea 	.word	0x2000d3ea
 800f660:	2000d3e0 	.word	0x2000d3e0
 800f664:	2000d3c0 	.word	0x2000d3c0
 800f668:	080168a4 	.word	0x080168a4
 800f66c:	08016c1c 	.word	0x08016c1c
 800f670:	080168f0 	.word	0x080168f0
 800f674:	08016c2c 	.word	0x08016c2c
 800f678:	08016c3c 	.word	0x08016c3c
        off -= p->len;
 800f67c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f67e:	895b      	ldrh	r3, [r3, #10]
 800f680:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f684:	1ad3      	subs	r3, r2, r3
 800f686:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f68a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f68c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f68e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f692:	2200      	movs	r2, #0
 800f694:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f696:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800f69c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f69e:	895b      	ldrh	r3, [r3, #10]
 800f6a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d8e9      	bhi.n	800f67c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f6a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f6ac:	4619      	mov	r1, r3
 800f6ae:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f6b0:	f7fc fb6e 	bl	800bd90 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6b8:	4a90      	ldr	r2, [pc, #576]	@ (800f8fc <tcp_receive+0x884>)
 800f6ba:	6013      	str	r3, [r2, #0]
 800f6bc:	4b90      	ldr	r3, [pc, #576]	@ (800f900 <tcp_receive+0x888>)
 800f6be:	68db      	ldr	r3, [r3, #12]
 800f6c0:	4a8e      	ldr	r2, [pc, #568]	@ (800f8fc <tcp_receive+0x884>)
 800f6c2:	6812      	ldr	r2, [r2, #0]
 800f6c4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f6c6:	e00d      	b.n	800f6e4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f6c8:	4b8c      	ldr	r3, [pc, #560]	@ (800f8fc <tcp_receive+0x884>)
 800f6ca:	681a      	ldr	r2, [r3, #0]
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6d0:	1ad3      	subs	r3, r2, r3
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	da06      	bge.n	800f6e4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	8b5b      	ldrh	r3, [r3, #26]
 800f6da:	f043 0302 	orr.w	r3, r3, #2
 800f6de:	b29a      	uxth	r2, r3
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f6e4:	4b85      	ldr	r3, [pc, #532]	@ (800f8fc <tcp_receive+0x884>)
 800f6e6:	681a      	ldr	r2, [r3, #0]
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6ec:	1ad3      	subs	r3, r2, r3
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	f2c0 8427 	blt.w	800ff42 <tcp_receive+0xeca>
 800f6f4:	4b81      	ldr	r3, [pc, #516]	@ (800f8fc <tcp_receive+0x884>)
 800f6f6:	681a      	ldr	r2, [r3, #0]
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6fc:	6879      	ldr	r1, [r7, #4]
 800f6fe:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f700:	440b      	add	r3, r1
 800f702:	1ad3      	subs	r3, r2, r3
 800f704:	3301      	adds	r3, #1
 800f706:	2b00      	cmp	r3, #0
 800f708:	f300 841b 	bgt.w	800ff42 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f710:	4b7a      	ldr	r3, [pc, #488]	@ (800f8fc <tcp_receive+0x884>)
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	429a      	cmp	r2, r3
 800f716:	f040 8298 	bne.w	800fc4a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f71a:	4b79      	ldr	r3, [pc, #484]	@ (800f900 <tcp_receive+0x888>)
 800f71c:	891c      	ldrh	r4, [r3, #8]
 800f71e:	4b78      	ldr	r3, [pc, #480]	@ (800f900 <tcp_receive+0x888>)
 800f720:	68db      	ldr	r3, [r3, #12]
 800f722:	899b      	ldrh	r3, [r3, #12]
 800f724:	b29b      	uxth	r3, r3
 800f726:	4618      	mov	r0, r3
 800f728:	f7fa ffca 	bl	800a6c0 <lwip_htons>
 800f72c:	4603      	mov	r3, r0
 800f72e:	b2db      	uxtb	r3, r3
 800f730:	f003 0303 	and.w	r3, r3, #3
 800f734:	2b00      	cmp	r3, #0
 800f736:	d001      	beq.n	800f73c <tcp_receive+0x6c4>
 800f738:	2301      	movs	r3, #1
 800f73a:	e000      	b.n	800f73e <tcp_receive+0x6c6>
 800f73c:	2300      	movs	r3, #0
 800f73e:	4423      	add	r3, r4
 800f740:	b29a      	uxth	r2, r3
 800f742:	4b70      	ldr	r3, [pc, #448]	@ (800f904 <tcp_receive+0x88c>)
 800f744:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f74a:	4b6e      	ldr	r3, [pc, #440]	@ (800f904 <tcp_receive+0x88c>)
 800f74c:	881b      	ldrh	r3, [r3, #0]
 800f74e:	429a      	cmp	r2, r3
 800f750:	d274      	bcs.n	800f83c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f752:	4b6b      	ldr	r3, [pc, #428]	@ (800f900 <tcp_receive+0x888>)
 800f754:	68db      	ldr	r3, [r3, #12]
 800f756:	899b      	ldrh	r3, [r3, #12]
 800f758:	b29b      	uxth	r3, r3
 800f75a:	4618      	mov	r0, r3
 800f75c:	f7fa ffb0 	bl	800a6c0 <lwip_htons>
 800f760:	4603      	mov	r3, r0
 800f762:	b2db      	uxtb	r3, r3
 800f764:	f003 0301 	and.w	r3, r3, #1
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d01e      	beq.n	800f7aa <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f76c:	4b64      	ldr	r3, [pc, #400]	@ (800f900 <tcp_receive+0x888>)
 800f76e:	68db      	ldr	r3, [r3, #12]
 800f770:	899b      	ldrh	r3, [r3, #12]
 800f772:	b29b      	uxth	r3, r3
 800f774:	b21b      	sxth	r3, r3
 800f776:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f77a:	b21c      	sxth	r4, r3
 800f77c:	4b60      	ldr	r3, [pc, #384]	@ (800f900 <tcp_receive+0x888>)
 800f77e:	68db      	ldr	r3, [r3, #12]
 800f780:	899b      	ldrh	r3, [r3, #12]
 800f782:	b29b      	uxth	r3, r3
 800f784:	4618      	mov	r0, r3
 800f786:	f7fa ff9b 	bl	800a6c0 <lwip_htons>
 800f78a:	4603      	mov	r3, r0
 800f78c:	b2db      	uxtb	r3, r3
 800f78e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800f792:	b29b      	uxth	r3, r3
 800f794:	4618      	mov	r0, r3
 800f796:	f7fa ff93 	bl	800a6c0 <lwip_htons>
 800f79a:	4603      	mov	r3, r0
 800f79c:	b21b      	sxth	r3, r3
 800f79e:	4323      	orrs	r3, r4
 800f7a0:	b21a      	sxth	r2, r3
 800f7a2:	4b57      	ldr	r3, [pc, #348]	@ (800f900 <tcp_receive+0x888>)
 800f7a4:	68db      	ldr	r3, [r3, #12]
 800f7a6:	b292      	uxth	r2, r2
 800f7a8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f7ae:	4b54      	ldr	r3, [pc, #336]	@ (800f900 <tcp_receive+0x888>)
 800f7b0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f7b2:	4b53      	ldr	r3, [pc, #332]	@ (800f900 <tcp_receive+0x888>)
 800f7b4:	68db      	ldr	r3, [r3, #12]
 800f7b6:	899b      	ldrh	r3, [r3, #12]
 800f7b8:	b29b      	uxth	r3, r3
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f7fa ff80 	bl	800a6c0 <lwip_htons>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	b2db      	uxtb	r3, r3
 800f7c4:	f003 0302 	and.w	r3, r3, #2
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d005      	beq.n	800f7d8 <tcp_receive+0x760>
            inseg.len -= 1;
 800f7cc:	4b4c      	ldr	r3, [pc, #304]	@ (800f900 <tcp_receive+0x888>)
 800f7ce:	891b      	ldrh	r3, [r3, #8]
 800f7d0:	3b01      	subs	r3, #1
 800f7d2:	b29a      	uxth	r2, r3
 800f7d4:	4b4a      	ldr	r3, [pc, #296]	@ (800f900 <tcp_receive+0x888>)
 800f7d6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f7d8:	4b49      	ldr	r3, [pc, #292]	@ (800f900 <tcp_receive+0x888>)
 800f7da:	685b      	ldr	r3, [r3, #4]
 800f7dc:	4a48      	ldr	r2, [pc, #288]	@ (800f900 <tcp_receive+0x888>)
 800f7de:	8912      	ldrh	r2, [r2, #8]
 800f7e0:	4611      	mov	r1, r2
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f7fc f9d4 	bl	800bb90 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f7e8:	4b45      	ldr	r3, [pc, #276]	@ (800f900 <tcp_receive+0x888>)
 800f7ea:	891c      	ldrh	r4, [r3, #8]
 800f7ec:	4b44      	ldr	r3, [pc, #272]	@ (800f900 <tcp_receive+0x888>)
 800f7ee:	68db      	ldr	r3, [r3, #12]
 800f7f0:	899b      	ldrh	r3, [r3, #12]
 800f7f2:	b29b      	uxth	r3, r3
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f7fa ff63 	bl	800a6c0 <lwip_htons>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	b2db      	uxtb	r3, r3
 800f7fe:	f003 0303 	and.w	r3, r3, #3
 800f802:	2b00      	cmp	r3, #0
 800f804:	d001      	beq.n	800f80a <tcp_receive+0x792>
 800f806:	2301      	movs	r3, #1
 800f808:	e000      	b.n	800f80c <tcp_receive+0x794>
 800f80a:	2300      	movs	r3, #0
 800f80c:	4423      	add	r3, r4
 800f80e:	b29a      	uxth	r2, r3
 800f810:	4b3c      	ldr	r3, [pc, #240]	@ (800f904 <tcp_receive+0x88c>)
 800f812:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f814:	4b3b      	ldr	r3, [pc, #236]	@ (800f904 <tcp_receive+0x88c>)
 800f816:	881b      	ldrh	r3, [r3, #0]
 800f818:	461a      	mov	r2, r3
 800f81a:	4b38      	ldr	r3, [pc, #224]	@ (800f8fc <tcp_receive+0x884>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	441a      	add	r2, r3
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f824:	6879      	ldr	r1, [r7, #4]
 800f826:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f828:	440b      	add	r3, r1
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d006      	beq.n	800f83c <tcp_receive+0x7c4>
 800f82e:	4b36      	ldr	r3, [pc, #216]	@ (800f908 <tcp_receive+0x890>)
 800f830:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800f834:	4935      	ldr	r1, [pc, #212]	@ (800f90c <tcp_receive+0x894>)
 800f836:	4836      	ldr	r0, [pc, #216]	@ (800f910 <tcp_receive+0x898>)
 800f838:	f004 ff0e 	bl	8014658 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f840:	2b00      	cmp	r3, #0
 800f842:	f000 80e6 	beq.w	800fa12 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f846:	4b2e      	ldr	r3, [pc, #184]	@ (800f900 <tcp_receive+0x888>)
 800f848:	68db      	ldr	r3, [r3, #12]
 800f84a:	899b      	ldrh	r3, [r3, #12]
 800f84c:	b29b      	uxth	r3, r3
 800f84e:	4618      	mov	r0, r3
 800f850:	f7fa ff36 	bl	800a6c0 <lwip_htons>
 800f854:	4603      	mov	r3, r0
 800f856:	b2db      	uxtb	r3, r3
 800f858:	f003 0301 	and.w	r3, r3, #1
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d010      	beq.n	800f882 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f860:	e00a      	b.n	800f878 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f866:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f86c:	681a      	ldr	r2, [r3, #0]
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800f872:	68f8      	ldr	r0, [r7, #12]
 800f874:	f7fd fd93 	bl	800d39e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d1f0      	bne.n	800f862 <tcp_receive+0x7ea>
 800f880:	e0c7      	b.n	800fa12 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f886:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f888:	e051      	b.n	800f92e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f88a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f88c:	68db      	ldr	r3, [r3, #12]
 800f88e:	899b      	ldrh	r3, [r3, #12]
 800f890:	b29b      	uxth	r3, r3
 800f892:	4618      	mov	r0, r3
 800f894:	f7fa ff14 	bl	800a6c0 <lwip_htons>
 800f898:	4603      	mov	r3, r0
 800f89a:	b2db      	uxtb	r3, r3
 800f89c:	f003 0301 	and.w	r3, r3, #1
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d03c      	beq.n	800f91e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f8a4:	4b16      	ldr	r3, [pc, #88]	@ (800f900 <tcp_receive+0x888>)
 800f8a6:	68db      	ldr	r3, [r3, #12]
 800f8a8:	899b      	ldrh	r3, [r3, #12]
 800f8aa:	b29b      	uxth	r3, r3
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f7fa ff07 	bl	800a6c0 <lwip_htons>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	b2db      	uxtb	r3, r3
 800f8b6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d12f      	bne.n	800f91e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f8be:	4b10      	ldr	r3, [pc, #64]	@ (800f900 <tcp_receive+0x888>)
 800f8c0:	68db      	ldr	r3, [r3, #12]
 800f8c2:	899b      	ldrh	r3, [r3, #12]
 800f8c4:	b29c      	uxth	r4, r3
 800f8c6:	2001      	movs	r0, #1
 800f8c8:	f7fa fefa 	bl	800a6c0 <lwip_htons>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	461a      	mov	r2, r3
 800f8d0:	4b0b      	ldr	r3, [pc, #44]	@ (800f900 <tcp_receive+0x888>)
 800f8d2:	68db      	ldr	r3, [r3, #12]
 800f8d4:	4322      	orrs	r2, r4
 800f8d6:	b292      	uxth	r2, r2
 800f8d8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f8da:	4b09      	ldr	r3, [pc, #36]	@ (800f900 <tcp_receive+0x888>)
 800f8dc:	891c      	ldrh	r4, [r3, #8]
 800f8de:	4b08      	ldr	r3, [pc, #32]	@ (800f900 <tcp_receive+0x888>)
 800f8e0:	68db      	ldr	r3, [r3, #12]
 800f8e2:	899b      	ldrh	r3, [r3, #12]
 800f8e4:	b29b      	uxth	r3, r3
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7fa feea 	bl	800a6c0 <lwip_htons>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	b2db      	uxtb	r3, r3
 800f8f0:	f003 0303 	and.w	r3, r3, #3
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d00d      	beq.n	800f914 <tcp_receive+0x89c>
 800f8f8:	2301      	movs	r3, #1
 800f8fa:	e00c      	b.n	800f916 <tcp_receive+0x89e>
 800f8fc:	2000d3e0 	.word	0x2000d3e0
 800f900:	2000d3c0 	.word	0x2000d3c0
 800f904:	2000d3ea 	.word	0x2000d3ea
 800f908:	080168a4 	.word	0x080168a4
 800f90c:	08016c4c 	.word	0x08016c4c
 800f910:	080168f0 	.word	0x080168f0
 800f914:	2300      	movs	r3, #0
 800f916:	4423      	add	r3, r4
 800f918:	b29a      	uxth	r2, r3
 800f91a:	4b98      	ldr	r3, [pc, #608]	@ (800fb7c <tcp_receive+0xb04>)
 800f91c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f91e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f920:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800f928:	6938      	ldr	r0, [r7, #16]
 800f92a:	f7fd fd38 	bl	800d39e <tcp_seg_free>
            while (next &&
 800f92e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f930:	2b00      	cmp	r3, #0
 800f932:	d00e      	beq.n	800f952 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f934:	4b91      	ldr	r3, [pc, #580]	@ (800fb7c <tcp_receive+0xb04>)
 800f936:	881b      	ldrh	r3, [r3, #0]
 800f938:	461a      	mov	r2, r3
 800f93a:	4b91      	ldr	r3, [pc, #580]	@ (800fb80 <tcp_receive+0xb08>)
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	441a      	add	r2, r3
 800f940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f942:	68db      	ldr	r3, [r3, #12]
 800f944:	685b      	ldr	r3, [r3, #4]
 800f946:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f948:	8909      	ldrh	r1, [r1, #8]
 800f94a:	440b      	add	r3, r1
 800f94c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f94e:	2b00      	cmp	r3, #0
 800f950:	da9b      	bge.n	800f88a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f954:	2b00      	cmp	r3, #0
 800f956:	d059      	beq.n	800fa0c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f958:	4b88      	ldr	r3, [pc, #544]	@ (800fb7c <tcp_receive+0xb04>)
 800f95a:	881b      	ldrh	r3, [r3, #0]
 800f95c:	461a      	mov	r2, r3
 800f95e:	4b88      	ldr	r3, [pc, #544]	@ (800fb80 <tcp_receive+0xb08>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	441a      	add	r2, r3
 800f964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f966:	68db      	ldr	r3, [r3, #12]
 800f968:	685b      	ldr	r3, [r3, #4]
 800f96a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	dd4d      	ble.n	800fa0c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f972:	68db      	ldr	r3, [r3, #12]
 800f974:	685b      	ldr	r3, [r3, #4]
 800f976:	b29a      	uxth	r2, r3
 800f978:	4b81      	ldr	r3, [pc, #516]	@ (800fb80 <tcp_receive+0xb08>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	b29b      	uxth	r3, r3
 800f97e:	1ad3      	subs	r3, r2, r3
 800f980:	b29a      	uxth	r2, r3
 800f982:	4b80      	ldr	r3, [pc, #512]	@ (800fb84 <tcp_receive+0xb0c>)
 800f984:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f986:	4b7f      	ldr	r3, [pc, #508]	@ (800fb84 <tcp_receive+0xb0c>)
 800f988:	68db      	ldr	r3, [r3, #12]
 800f98a:	899b      	ldrh	r3, [r3, #12]
 800f98c:	b29b      	uxth	r3, r3
 800f98e:	4618      	mov	r0, r3
 800f990:	f7fa fe96 	bl	800a6c0 <lwip_htons>
 800f994:	4603      	mov	r3, r0
 800f996:	b2db      	uxtb	r3, r3
 800f998:	f003 0302 	and.w	r3, r3, #2
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d005      	beq.n	800f9ac <tcp_receive+0x934>
                inseg.len -= 1;
 800f9a0:	4b78      	ldr	r3, [pc, #480]	@ (800fb84 <tcp_receive+0xb0c>)
 800f9a2:	891b      	ldrh	r3, [r3, #8]
 800f9a4:	3b01      	subs	r3, #1
 800f9a6:	b29a      	uxth	r2, r3
 800f9a8:	4b76      	ldr	r3, [pc, #472]	@ (800fb84 <tcp_receive+0xb0c>)
 800f9aa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f9ac:	4b75      	ldr	r3, [pc, #468]	@ (800fb84 <tcp_receive+0xb0c>)
 800f9ae:	685b      	ldr	r3, [r3, #4]
 800f9b0:	4a74      	ldr	r2, [pc, #464]	@ (800fb84 <tcp_receive+0xb0c>)
 800f9b2:	8912      	ldrh	r2, [r2, #8]
 800f9b4:	4611      	mov	r1, r2
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f7fc f8ea 	bl	800bb90 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f9bc:	4b71      	ldr	r3, [pc, #452]	@ (800fb84 <tcp_receive+0xb0c>)
 800f9be:	891c      	ldrh	r4, [r3, #8]
 800f9c0:	4b70      	ldr	r3, [pc, #448]	@ (800fb84 <tcp_receive+0xb0c>)
 800f9c2:	68db      	ldr	r3, [r3, #12]
 800f9c4:	899b      	ldrh	r3, [r3, #12]
 800f9c6:	b29b      	uxth	r3, r3
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7fa fe79 	bl	800a6c0 <lwip_htons>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	b2db      	uxtb	r3, r3
 800f9d2:	f003 0303 	and.w	r3, r3, #3
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d001      	beq.n	800f9de <tcp_receive+0x966>
 800f9da:	2301      	movs	r3, #1
 800f9dc:	e000      	b.n	800f9e0 <tcp_receive+0x968>
 800f9de:	2300      	movs	r3, #0
 800f9e0:	4423      	add	r3, r4
 800f9e2:	b29a      	uxth	r2, r3
 800f9e4:	4b65      	ldr	r3, [pc, #404]	@ (800fb7c <tcp_receive+0xb04>)
 800f9e6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f9e8:	4b64      	ldr	r3, [pc, #400]	@ (800fb7c <tcp_receive+0xb04>)
 800f9ea:	881b      	ldrh	r3, [r3, #0]
 800f9ec:	461a      	mov	r2, r3
 800f9ee:	4b64      	ldr	r3, [pc, #400]	@ (800fb80 <tcp_receive+0xb08>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	441a      	add	r2, r3
 800f9f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9f6:	68db      	ldr	r3, [r3, #12]
 800f9f8:	685b      	ldr	r3, [r3, #4]
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d006      	beq.n	800fa0c <tcp_receive+0x994>
 800f9fe:	4b62      	ldr	r3, [pc, #392]	@ (800fb88 <tcp_receive+0xb10>)
 800fa00:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800fa04:	4961      	ldr	r1, [pc, #388]	@ (800fb8c <tcp_receive+0xb14>)
 800fa06:	4862      	ldr	r0, [pc, #392]	@ (800fb90 <tcp_receive+0xb18>)
 800fa08:	f004 fe26 	bl	8014658 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fa10:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fa12:	4b5a      	ldr	r3, [pc, #360]	@ (800fb7c <tcp_receive+0xb04>)
 800fa14:	881b      	ldrh	r3, [r3, #0]
 800fa16:	461a      	mov	r2, r3
 800fa18:	4b59      	ldr	r3, [pc, #356]	@ (800fb80 <tcp_receive+0xb08>)
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	441a      	add	r2, r3
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fa26:	4b55      	ldr	r3, [pc, #340]	@ (800fb7c <tcp_receive+0xb04>)
 800fa28:	881b      	ldrh	r3, [r3, #0]
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d206      	bcs.n	800fa3c <tcp_receive+0x9c4>
 800fa2e:	4b56      	ldr	r3, [pc, #344]	@ (800fb88 <tcp_receive+0xb10>)
 800fa30:	f240 6207 	movw	r2, #1543	@ 0x607
 800fa34:	4957      	ldr	r1, [pc, #348]	@ (800fb94 <tcp_receive+0xb1c>)
 800fa36:	4856      	ldr	r0, [pc, #344]	@ (800fb90 <tcp_receive+0xb18>)
 800fa38:	f004 fe0e 	bl	8014658 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fa40:	4b4e      	ldr	r3, [pc, #312]	@ (800fb7c <tcp_receive+0xb04>)
 800fa42:	881b      	ldrh	r3, [r3, #0]
 800fa44:	1ad3      	subs	r3, r2, r3
 800fa46:	b29a      	uxth	r2, r3
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fa4c:	6878      	ldr	r0, [r7, #4]
 800fa4e:	f7fc ffc5 	bl	800c9dc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fa52:	4b4c      	ldr	r3, [pc, #304]	@ (800fb84 <tcp_receive+0xb0c>)
 800fa54:	685b      	ldr	r3, [r3, #4]
 800fa56:	891b      	ldrh	r3, [r3, #8]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d006      	beq.n	800fa6a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800fa5c:	4b49      	ldr	r3, [pc, #292]	@ (800fb84 <tcp_receive+0xb0c>)
 800fa5e:	685b      	ldr	r3, [r3, #4]
 800fa60:	4a4d      	ldr	r2, [pc, #308]	@ (800fb98 <tcp_receive+0xb20>)
 800fa62:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fa64:	4b47      	ldr	r3, [pc, #284]	@ (800fb84 <tcp_receive+0xb0c>)
 800fa66:	2200      	movs	r2, #0
 800fa68:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fa6a:	4b46      	ldr	r3, [pc, #280]	@ (800fb84 <tcp_receive+0xb0c>)
 800fa6c:	68db      	ldr	r3, [r3, #12]
 800fa6e:	899b      	ldrh	r3, [r3, #12]
 800fa70:	b29b      	uxth	r3, r3
 800fa72:	4618      	mov	r0, r3
 800fa74:	f7fa fe24 	bl	800a6c0 <lwip_htons>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	b2db      	uxtb	r3, r3
 800fa7c:	f003 0301 	and.w	r3, r3, #1
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	f000 80b8 	beq.w	800fbf6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fa86:	4b45      	ldr	r3, [pc, #276]	@ (800fb9c <tcp_receive+0xb24>)
 800fa88:	781b      	ldrb	r3, [r3, #0]
 800fa8a:	f043 0320 	orr.w	r3, r3, #32
 800fa8e:	b2da      	uxtb	r2, r3
 800fa90:	4b42      	ldr	r3, [pc, #264]	@ (800fb9c <tcp_receive+0xb24>)
 800fa92:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fa94:	e0af      	b.n	800fbf6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa9a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800faa0:	68db      	ldr	r3, [r3, #12]
 800faa2:	685b      	ldr	r3, [r3, #4]
 800faa4:	4a36      	ldr	r2, [pc, #216]	@ (800fb80 <tcp_receive+0xb08>)
 800faa6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	891b      	ldrh	r3, [r3, #8]
 800faac:	461c      	mov	r4, r3
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	68db      	ldr	r3, [r3, #12]
 800fab2:	899b      	ldrh	r3, [r3, #12]
 800fab4:	b29b      	uxth	r3, r3
 800fab6:	4618      	mov	r0, r3
 800fab8:	f7fa fe02 	bl	800a6c0 <lwip_htons>
 800fabc:	4603      	mov	r3, r0
 800fabe:	b2db      	uxtb	r3, r3
 800fac0:	f003 0303 	and.w	r3, r3, #3
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d001      	beq.n	800facc <tcp_receive+0xa54>
 800fac8:	2301      	movs	r3, #1
 800faca:	e000      	b.n	800face <tcp_receive+0xa56>
 800facc:	2300      	movs	r3, #0
 800face:	191a      	adds	r2, r3, r4
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fad4:	441a      	add	r2, r3
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fade:	461c      	mov	r4, r3
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	891b      	ldrh	r3, [r3, #8]
 800fae4:	461d      	mov	r5, r3
 800fae6:	68bb      	ldr	r3, [r7, #8]
 800fae8:	68db      	ldr	r3, [r3, #12]
 800faea:	899b      	ldrh	r3, [r3, #12]
 800faec:	b29b      	uxth	r3, r3
 800faee:	4618      	mov	r0, r3
 800faf0:	f7fa fde6 	bl	800a6c0 <lwip_htons>
 800faf4:	4603      	mov	r3, r0
 800faf6:	b2db      	uxtb	r3, r3
 800faf8:	f003 0303 	and.w	r3, r3, #3
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d001      	beq.n	800fb04 <tcp_receive+0xa8c>
 800fb00:	2301      	movs	r3, #1
 800fb02:	e000      	b.n	800fb06 <tcp_receive+0xa8e>
 800fb04:	2300      	movs	r3, #0
 800fb06:	442b      	add	r3, r5
 800fb08:	429c      	cmp	r4, r3
 800fb0a:	d206      	bcs.n	800fb1a <tcp_receive+0xaa2>
 800fb0c:	4b1e      	ldr	r3, [pc, #120]	@ (800fb88 <tcp_receive+0xb10>)
 800fb0e:	f240 622b 	movw	r2, #1579	@ 0x62b
 800fb12:	4923      	ldr	r1, [pc, #140]	@ (800fba0 <tcp_receive+0xb28>)
 800fb14:	481e      	ldr	r0, [pc, #120]	@ (800fb90 <tcp_receive+0xb18>)
 800fb16:	f004 fd9f 	bl	8014658 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fb1a:	68bb      	ldr	r3, [r7, #8]
 800fb1c:	891b      	ldrh	r3, [r3, #8]
 800fb1e:	461c      	mov	r4, r3
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	68db      	ldr	r3, [r3, #12]
 800fb24:	899b      	ldrh	r3, [r3, #12]
 800fb26:	b29b      	uxth	r3, r3
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f7fa fdc9 	bl	800a6c0 <lwip_htons>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	b2db      	uxtb	r3, r3
 800fb32:	f003 0303 	and.w	r3, r3, #3
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d001      	beq.n	800fb3e <tcp_receive+0xac6>
 800fb3a:	2301      	movs	r3, #1
 800fb3c:	e000      	b.n	800fb40 <tcp_receive+0xac8>
 800fb3e:	2300      	movs	r3, #0
 800fb40:	1919      	adds	r1, r3, r4
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fb46:	b28b      	uxth	r3, r1
 800fb48:	1ad3      	subs	r3, r2, r3
 800fb4a:	b29a      	uxth	r2, r3
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f7fc ff43 	bl	800c9dc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fb56:	68bb      	ldr	r3, [r7, #8]
 800fb58:	685b      	ldr	r3, [r3, #4]
 800fb5a:	891b      	ldrh	r3, [r3, #8]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d028      	beq.n	800fbb2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fb60:	4b0d      	ldr	r3, [pc, #52]	@ (800fb98 <tcp_receive+0xb20>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d01d      	beq.n	800fba4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800fb68:	4b0b      	ldr	r3, [pc, #44]	@ (800fb98 <tcp_receive+0xb20>)
 800fb6a:	681a      	ldr	r2, [r3, #0]
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	685b      	ldr	r3, [r3, #4]
 800fb70:	4619      	mov	r1, r3
 800fb72:	4610      	mov	r0, r2
 800fb74:	f7fc fa60 	bl	800c038 <pbuf_cat>
 800fb78:	e018      	b.n	800fbac <tcp_receive+0xb34>
 800fb7a:	bf00      	nop
 800fb7c:	2000d3ea 	.word	0x2000d3ea
 800fb80:	2000d3e0 	.word	0x2000d3e0
 800fb84:	2000d3c0 	.word	0x2000d3c0
 800fb88:	080168a4 	.word	0x080168a4
 800fb8c:	08016c84 	.word	0x08016c84
 800fb90:	080168f0 	.word	0x080168f0
 800fb94:	08016cc0 	.word	0x08016cc0
 800fb98:	2000d3f0 	.word	0x2000d3f0
 800fb9c:	2000d3ed 	.word	0x2000d3ed
 800fba0:	08016ce0 	.word	0x08016ce0
            } else {
              recv_data = cseg->p;
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	685b      	ldr	r3, [r3, #4]
 800fba8:	4a70      	ldr	r2, [pc, #448]	@ (800fd6c <tcp_receive+0xcf4>)
 800fbaa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	2200      	movs	r2, #0
 800fbb0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	68db      	ldr	r3, [r3, #12]
 800fbb6:	899b      	ldrh	r3, [r3, #12]
 800fbb8:	b29b      	uxth	r3, r3
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7fa fd80 	bl	800a6c0 <lwip_htons>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	b2db      	uxtb	r3, r3
 800fbc4:	f003 0301 	and.w	r3, r3, #1
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d00d      	beq.n	800fbe8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fbcc:	4b68      	ldr	r3, [pc, #416]	@ (800fd70 <tcp_receive+0xcf8>)
 800fbce:	781b      	ldrb	r3, [r3, #0]
 800fbd0:	f043 0320 	orr.w	r3, r3, #32
 800fbd4:	b2da      	uxtb	r2, r3
 800fbd6:	4b66      	ldr	r3, [pc, #408]	@ (800fd70 <tcp_receive+0xcf8>)
 800fbd8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	7d1b      	ldrb	r3, [r3, #20]
 800fbde:	2b04      	cmp	r3, #4
 800fbe0:	d102      	bne.n	800fbe8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2207      	movs	r2, #7
 800fbe6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	681a      	ldr	r2, [r3, #0]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800fbf0:	68b8      	ldr	r0, [r7, #8]
 800fbf2:	f7fd fbd4 	bl	800d39e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d008      	beq.n	800fc10 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc02:	68db      	ldr	r3, [r3, #12]
 800fc04:	685a      	ldr	r2, [r3, #4]
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800fc0a:	429a      	cmp	r2, r3
 800fc0c:	f43f af43 	beq.w	800fa96 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	8b5b      	ldrh	r3, [r3, #26]
 800fc14:	f003 0301 	and.w	r3, r3, #1
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d00e      	beq.n	800fc3a <tcp_receive+0xbc2>
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	8b5b      	ldrh	r3, [r3, #26]
 800fc20:	f023 0301 	bic.w	r3, r3, #1
 800fc24:	b29a      	uxth	r2, r3
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	835a      	strh	r2, [r3, #26]
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	8b5b      	ldrh	r3, [r3, #26]
 800fc2e:	f043 0302 	orr.w	r3, r3, #2
 800fc32:	b29a      	uxth	r2, r3
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fc38:	e187      	b.n	800ff4a <tcp_receive+0xed2>
        tcp_ack(pcb);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	8b5b      	ldrh	r3, [r3, #26]
 800fc3e:	f043 0301 	orr.w	r3, r3, #1
 800fc42:	b29a      	uxth	r2, r3
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fc48:	e17f      	b.n	800ff4a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d106      	bne.n	800fc60 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fc52:	4848      	ldr	r0, [pc, #288]	@ (800fd74 <tcp_receive+0xcfc>)
 800fc54:	f7fd fbbc 	bl	800d3d0 <tcp_seg_copy>
 800fc58:	4602      	mov	r2, r0
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	675a      	str	r2, [r3, #116]	@ 0x74
 800fc5e:	e16c      	b.n	800ff3a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fc60:	2300      	movs	r3, #0
 800fc62:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc68:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fc6a:	e156      	b.n	800ff1a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800fc6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc6e:	68db      	ldr	r3, [r3, #12]
 800fc70:	685a      	ldr	r2, [r3, #4]
 800fc72:	4b41      	ldr	r3, [pc, #260]	@ (800fd78 <tcp_receive+0xd00>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d11d      	bne.n	800fcb6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fc7a:	4b3e      	ldr	r3, [pc, #248]	@ (800fd74 <tcp_receive+0xcfc>)
 800fc7c:	891a      	ldrh	r2, [r3, #8]
 800fc7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc80:	891b      	ldrh	r3, [r3, #8]
 800fc82:	429a      	cmp	r2, r3
 800fc84:	f240 814e 	bls.w	800ff24 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fc88:	483a      	ldr	r0, [pc, #232]	@ (800fd74 <tcp_receive+0xcfc>)
 800fc8a:	f7fd fba1 	bl	800d3d0 <tcp_seg_copy>
 800fc8e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	f000 8148 	beq.w	800ff28 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800fc98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d003      	beq.n	800fca6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800fc9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fca0:	697a      	ldr	r2, [r7, #20]
 800fca2:	601a      	str	r2, [r3, #0]
 800fca4:	e002      	b.n	800fcac <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	697a      	ldr	r2, [r7, #20]
 800fcaa:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fcac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fcae:	6978      	ldr	r0, [r7, #20]
 800fcb0:	f7ff f8de 	bl	800ee70 <tcp_oos_insert_segment>
                }
                break;
 800fcb4:	e138      	b.n	800ff28 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800fcb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d117      	bne.n	800fcec <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fcbc:	4b2e      	ldr	r3, [pc, #184]	@ (800fd78 <tcp_receive+0xd00>)
 800fcbe:	681a      	ldr	r2, [r3, #0]
 800fcc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcc2:	68db      	ldr	r3, [r3, #12]
 800fcc4:	685b      	ldr	r3, [r3, #4]
 800fcc6:	1ad3      	subs	r3, r2, r3
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	da57      	bge.n	800fd7c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fccc:	4829      	ldr	r0, [pc, #164]	@ (800fd74 <tcp_receive+0xcfc>)
 800fcce:	f7fd fb7f 	bl	800d3d0 <tcp_seg_copy>
 800fcd2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800fcd4:	69bb      	ldr	r3, [r7, #24]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	f000 8128 	beq.w	800ff2c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	69ba      	ldr	r2, [r7, #24]
 800fce0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800fce2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fce4:	69b8      	ldr	r0, [r7, #24]
 800fce6:	f7ff f8c3 	bl	800ee70 <tcp_oos_insert_segment>
                  }
                  break;
 800fcea:	e11f      	b.n	800ff2c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800fcec:	4b22      	ldr	r3, [pc, #136]	@ (800fd78 <tcp_receive+0xd00>)
 800fcee:	681a      	ldr	r2, [r3, #0]
 800fcf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcf2:	68db      	ldr	r3, [r3, #12]
 800fcf4:	685b      	ldr	r3, [r3, #4]
 800fcf6:	1ad3      	subs	r3, r2, r3
 800fcf8:	3b01      	subs	r3, #1
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	db3e      	blt.n	800fd7c <tcp_receive+0xd04>
 800fcfe:	4b1e      	ldr	r3, [pc, #120]	@ (800fd78 <tcp_receive+0xd00>)
 800fd00:	681a      	ldr	r2, [r3, #0]
 800fd02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd04:	68db      	ldr	r3, [r3, #12]
 800fd06:	685b      	ldr	r3, [r3, #4]
 800fd08:	1ad3      	subs	r3, r2, r3
 800fd0a:	3301      	adds	r3, #1
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	dc35      	bgt.n	800fd7c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fd10:	4818      	ldr	r0, [pc, #96]	@ (800fd74 <tcp_receive+0xcfc>)
 800fd12:	f7fd fb5d 	bl	800d3d0 <tcp_seg_copy>
 800fd16:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800fd18:	69fb      	ldr	r3, [r7, #28]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	f000 8108 	beq.w	800ff30 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fd20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd22:	68db      	ldr	r3, [r3, #12]
 800fd24:	685b      	ldr	r3, [r3, #4]
 800fd26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fd28:	8912      	ldrh	r2, [r2, #8]
 800fd2a:	441a      	add	r2, r3
 800fd2c:	4b12      	ldr	r3, [pc, #72]	@ (800fd78 <tcp_receive+0xd00>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	1ad3      	subs	r3, r2, r3
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	dd12      	ble.n	800fd5c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800fd36:	4b10      	ldr	r3, [pc, #64]	@ (800fd78 <tcp_receive+0xd00>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	b29a      	uxth	r2, r3
 800fd3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd3e:	68db      	ldr	r3, [r3, #12]
 800fd40:	685b      	ldr	r3, [r3, #4]
 800fd42:	b29b      	uxth	r3, r3
 800fd44:	1ad3      	subs	r3, r2, r3
 800fd46:	b29a      	uxth	r2, r3
 800fd48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd4a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fd4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd4e:	685a      	ldr	r2, [r3, #4]
 800fd50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd52:	891b      	ldrh	r3, [r3, #8]
 800fd54:	4619      	mov	r1, r3
 800fd56:	4610      	mov	r0, r2
 800fd58:	f7fb ff1a 	bl	800bb90 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fd5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd5e:	69fa      	ldr	r2, [r7, #28]
 800fd60:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fd62:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fd64:	69f8      	ldr	r0, [r7, #28]
 800fd66:	f7ff f883 	bl	800ee70 <tcp_oos_insert_segment>
                  }
                  break;
 800fd6a:	e0e1      	b.n	800ff30 <tcp_receive+0xeb8>
 800fd6c:	2000d3f0 	.word	0x2000d3f0
 800fd70:	2000d3ed 	.word	0x2000d3ed
 800fd74:	2000d3c0 	.word	0x2000d3c0
 800fd78:	2000d3e0 	.word	0x2000d3e0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800fd7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd7e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fd80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	f040 80c5 	bne.w	800ff14 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fd8a:	4b7f      	ldr	r3, [pc, #508]	@ (800ff88 <tcp_receive+0xf10>)
 800fd8c:	681a      	ldr	r2, [r3, #0]
 800fd8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd90:	68db      	ldr	r3, [r3, #12]
 800fd92:	685b      	ldr	r3, [r3, #4]
 800fd94:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	f340 80bc 	ble.w	800ff14 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fd9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd9e:	68db      	ldr	r3, [r3, #12]
 800fda0:	899b      	ldrh	r3, [r3, #12]
 800fda2:	b29b      	uxth	r3, r3
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7fa fc8b 	bl	800a6c0 <lwip_htons>
 800fdaa:	4603      	mov	r3, r0
 800fdac:	b2db      	uxtb	r3, r3
 800fdae:	f003 0301 	and.w	r3, r3, #1
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	f040 80be 	bne.w	800ff34 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fdb8:	4874      	ldr	r0, [pc, #464]	@ (800ff8c <tcp_receive+0xf14>)
 800fdba:	f7fd fb09 	bl	800d3d0 <tcp_seg_copy>
 800fdbe:	4602      	mov	r2, r0
 800fdc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdc2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fdc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	f000 80b5 	beq.w	800ff38 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fdce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdd0:	68db      	ldr	r3, [r3, #12]
 800fdd2:	685b      	ldr	r3, [r3, #4]
 800fdd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fdd6:	8912      	ldrh	r2, [r2, #8]
 800fdd8:	441a      	add	r2, r3
 800fdda:	4b6b      	ldr	r3, [pc, #428]	@ (800ff88 <tcp_receive+0xf10>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	1ad3      	subs	r3, r2, r3
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	dd12      	ble.n	800fe0a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800fde4:	4b68      	ldr	r3, [pc, #416]	@ (800ff88 <tcp_receive+0xf10>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	b29a      	uxth	r2, r3
 800fdea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdec:	68db      	ldr	r3, [r3, #12]
 800fdee:	685b      	ldr	r3, [r3, #4]
 800fdf0:	b29b      	uxth	r3, r3
 800fdf2:	1ad3      	subs	r3, r2, r3
 800fdf4:	b29a      	uxth	r2, r3
 800fdf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdf8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fdfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdfc:	685a      	ldr	r2, [r3, #4]
 800fdfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe00:	891b      	ldrh	r3, [r3, #8]
 800fe02:	4619      	mov	r1, r3
 800fe04:	4610      	mov	r0, r2
 800fe06:	f7fb fec3 	bl	800bb90 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fe0a:	4b61      	ldr	r3, [pc, #388]	@ (800ff90 <tcp_receive+0xf18>)
 800fe0c:	881b      	ldrh	r3, [r3, #0]
 800fe0e:	461a      	mov	r2, r3
 800fe10:	4b5d      	ldr	r3, [pc, #372]	@ (800ff88 <tcp_receive+0xf10>)
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	441a      	add	r2, r3
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe1a:	6879      	ldr	r1, [r7, #4]
 800fe1c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fe1e:	440b      	add	r3, r1
 800fe20:	1ad3      	subs	r3, r2, r3
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	f340 8088 	ble.w	800ff38 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fe28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	68db      	ldr	r3, [r3, #12]
 800fe2e:	899b      	ldrh	r3, [r3, #12]
 800fe30:	b29b      	uxth	r3, r3
 800fe32:	4618      	mov	r0, r3
 800fe34:	f7fa fc44 	bl	800a6c0 <lwip_htons>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	b2db      	uxtb	r3, r3
 800fe3c:	f003 0301 	and.w	r3, r3, #1
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d021      	beq.n	800fe88 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fe44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	68db      	ldr	r3, [r3, #12]
 800fe4a:	899b      	ldrh	r3, [r3, #12]
 800fe4c:	b29b      	uxth	r3, r3
 800fe4e:	b21b      	sxth	r3, r3
 800fe50:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800fe54:	b21c      	sxth	r4, r3
 800fe56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	68db      	ldr	r3, [r3, #12]
 800fe5c:	899b      	ldrh	r3, [r3, #12]
 800fe5e:	b29b      	uxth	r3, r3
 800fe60:	4618      	mov	r0, r3
 800fe62:	f7fa fc2d 	bl	800a6c0 <lwip_htons>
 800fe66:	4603      	mov	r3, r0
 800fe68:	b2db      	uxtb	r3, r3
 800fe6a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800fe6e:	b29b      	uxth	r3, r3
 800fe70:	4618      	mov	r0, r3
 800fe72:	f7fa fc25 	bl	800a6c0 <lwip_htons>
 800fe76:	4603      	mov	r3, r0
 800fe78:	b21b      	sxth	r3, r3
 800fe7a:	4323      	orrs	r3, r4
 800fe7c:	b21a      	sxth	r2, r3
 800fe7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	68db      	ldr	r3, [r3, #12]
 800fe84:	b292      	uxth	r2, r2
 800fe86:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe8c:	b29a      	uxth	r2, r3
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe92:	4413      	add	r3, r2
 800fe94:	b299      	uxth	r1, r3
 800fe96:	4b3c      	ldr	r3, [pc, #240]	@ (800ff88 <tcp_receive+0xf10>)
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	b29a      	uxth	r2, r3
 800fe9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	1a8a      	subs	r2, r1, r2
 800fea2:	b292      	uxth	r2, r2
 800fea4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	685a      	ldr	r2, [r3, #4]
 800feac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	891b      	ldrh	r3, [r3, #8]
 800feb2:	4619      	mov	r1, r3
 800feb4:	4610      	mov	r0, r2
 800feb6:	f7fb fe6b 	bl	800bb90 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800feba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	891c      	ldrh	r4, [r3, #8]
 800fec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	68db      	ldr	r3, [r3, #12]
 800fec6:	899b      	ldrh	r3, [r3, #12]
 800fec8:	b29b      	uxth	r3, r3
 800feca:	4618      	mov	r0, r3
 800fecc:	f7fa fbf8 	bl	800a6c0 <lwip_htons>
 800fed0:	4603      	mov	r3, r0
 800fed2:	b2db      	uxtb	r3, r3
 800fed4:	f003 0303 	and.w	r3, r3, #3
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d001      	beq.n	800fee0 <tcp_receive+0xe68>
 800fedc:	2301      	movs	r3, #1
 800fede:	e000      	b.n	800fee2 <tcp_receive+0xe6a>
 800fee0:	2300      	movs	r3, #0
 800fee2:	4423      	add	r3, r4
 800fee4:	b29a      	uxth	r2, r3
 800fee6:	4b2a      	ldr	r3, [pc, #168]	@ (800ff90 <tcp_receive+0xf18>)
 800fee8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800feea:	4b29      	ldr	r3, [pc, #164]	@ (800ff90 <tcp_receive+0xf18>)
 800feec:	881b      	ldrh	r3, [r3, #0]
 800feee:	461a      	mov	r2, r3
 800fef0:	4b25      	ldr	r3, [pc, #148]	@ (800ff88 <tcp_receive+0xf10>)
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	441a      	add	r2, r3
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fefa:	6879      	ldr	r1, [r7, #4]
 800fefc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fefe:	440b      	add	r3, r1
 800ff00:	429a      	cmp	r2, r3
 800ff02:	d019      	beq.n	800ff38 <tcp_receive+0xec0>
 800ff04:	4b23      	ldr	r3, [pc, #140]	@ (800ff94 <tcp_receive+0xf1c>)
 800ff06:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800ff0a:	4923      	ldr	r1, [pc, #140]	@ (800ff98 <tcp_receive+0xf20>)
 800ff0c:	4823      	ldr	r0, [pc, #140]	@ (800ff9c <tcp_receive+0xf24>)
 800ff0e:	f004 fba3 	bl	8014658 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ff12:	e011      	b.n	800ff38 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ff14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ff1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	f47f aea5 	bne.w	800fc6c <tcp_receive+0xbf4>
 800ff22:	e00a      	b.n	800ff3a <tcp_receive+0xec2>
                break;
 800ff24:	bf00      	nop
 800ff26:	e008      	b.n	800ff3a <tcp_receive+0xec2>
                break;
 800ff28:	bf00      	nop
 800ff2a:	e006      	b.n	800ff3a <tcp_receive+0xec2>
                  break;
 800ff2c:	bf00      	nop
 800ff2e:	e004      	b.n	800ff3a <tcp_receive+0xec2>
                  break;
 800ff30:	bf00      	nop
 800ff32:	e002      	b.n	800ff3a <tcp_receive+0xec2>
                  break;
 800ff34:	bf00      	nop
 800ff36:	e000      	b.n	800ff3a <tcp_receive+0xec2>
                break;
 800ff38:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f001 fa30 	bl	80113a0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ff40:	e003      	b.n	800ff4a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ff42:	6878      	ldr	r0, [r7, #4]
 800ff44:	f001 fa2c 	bl	80113a0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ff48:	e01a      	b.n	800ff80 <tcp_receive+0xf08>
 800ff4a:	e019      	b.n	800ff80 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ff4c:	4b0e      	ldr	r3, [pc, #56]	@ (800ff88 <tcp_receive+0xf10>)
 800ff4e:	681a      	ldr	r2, [r3, #0]
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff54:	1ad3      	subs	r3, r2, r3
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	db0a      	blt.n	800ff70 <tcp_receive+0xef8>
 800ff5a:	4b0b      	ldr	r3, [pc, #44]	@ (800ff88 <tcp_receive+0xf10>)
 800ff5c:	681a      	ldr	r2, [r3, #0]
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff62:	6879      	ldr	r1, [r7, #4]
 800ff64:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ff66:	440b      	add	r3, r1
 800ff68:	1ad3      	subs	r3, r2, r3
 800ff6a:	3301      	adds	r3, #1
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	dd07      	ble.n	800ff80 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	8b5b      	ldrh	r3, [r3, #26]
 800ff74:	f043 0302 	orr.w	r3, r3, #2
 800ff78:	b29a      	uxth	r2, r3
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ff7e:	e7ff      	b.n	800ff80 <tcp_receive+0xf08>
 800ff80:	bf00      	nop
 800ff82:	3750      	adds	r7, #80	@ 0x50
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bdb0      	pop	{r4, r5, r7, pc}
 800ff88:	2000d3e0 	.word	0x2000d3e0
 800ff8c:	2000d3c0 	.word	0x2000d3c0
 800ff90:	2000d3ea 	.word	0x2000d3ea
 800ff94:	080168a4 	.word	0x080168a4
 800ff98:	08016c4c 	.word	0x08016c4c
 800ff9c:	080168f0 	.word	0x080168f0

0800ffa0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b083      	sub	sp, #12
 800ffa4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ffa6:	4b15      	ldr	r3, [pc, #84]	@ (800fffc <tcp_get_next_optbyte+0x5c>)
 800ffa8:	881b      	ldrh	r3, [r3, #0]
 800ffaa:	1c5a      	adds	r2, r3, #1
 800ffac:	b291      	uxth	r1, r2
 800ffae:	4a13      	ldr	r2, [pc, #76]	@ (800fffc <tcp_get_next_optbyte+0x5c>)
 800ffb0:	8011      	strh	r1, [r2, #0]
 800ffb2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ffb4:	4b12      	ldr	r3, [pc, #72]	@ (8010000 <tcp_get_next_optbyte+0x60>)
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d004      	beq.n	800ffc6 <tcp_get_next_optbyte+0x26>
 800ffbc:	4b11      	ldr	r3, [pc, #68]	@ (8010004 <tcp_get_next_optbyte+0x64>)
 800ffbe:	881b      	ldrh	r3, [r3, #0]
 800ffc0:	88fa      	ldrh	r2, [r7, #6]
 800ffc2:	429a      	cmp	r2, r3
 800ffc4:	d208      	bcs.n	800ffd8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ffc6:	4b10      	ldr	r3, [pc, #64]	@ (8010008 <tcp_get_next_optbyte+0x68>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	3314      	adds	r3, #20
 800ffcc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ffce:	88fb      	ldrh	r3, [r7, #6]
 800ffd0:	683a      	ldr	r2, [r7, #0]
 800ffd2:	4413      	add	r3, r2
 800ffd4:	781b      	ldrb	r3, [r3, #0]
 800ffd6:	e00b      	b.n	800fff0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ffd8:	88fb      	ldrh	r3, [r7, #6]
 800ffda:	b2da      	uxtb	r2, r3
 800ffdc:	4b09      	ldr	r3, [pc, #36]	@ (8010004 <tcp_get_next_optbyte+0x64>)
 800ffde:	881b      	ldrh	r3, [r3, #0]
 800ffe0:	b2db      	uxtb	r3, r3
 800ffe2:	1ad3      	subs	r3, r2, r3
 800ffe4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ffe6:	4b06      	ldr	r3, [pc, #24]	@ (8010000 <tcp_get_next_optbyte+0x60>)
 800ffe8:	681a      	ldr	r2, [r3, #0]
 800ffea:	797b      	ldrb	r3, [r7, #5]
 800ffec:	4413      	add	r3, r2
 800ffee:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fff0:	4618      	mov	r0, r3
 800fff2:	370c      	adds	r7, #12
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr
 800fffc:	2000d3dc 	.word	0x2000d3dc
 8010000:	2000d3d8 	.word	0x2000d3d8
 8010004:	2000d3d6 	.word	0x2000d3d6
 8010008:	2000d3d0 	.word	0x2000d3d0

0801000c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b084      	sub	sp, #16
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d106      	bne.n	8010028 <tcp_parseopt+0x1c>
 801001a:	4b32      	ldr	r3, [pc, #200]	@ (80100e4 <tcp_parseopt+0xd8>)
 801001c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8010020:	4931      	ldr	r1, [pc, #196]	@ (80100e8 <tcp_parseopt+0xdc>)
 8010022:	4832      	ldr	r0, [pc, #200]	@ (80100ec <tcp_parseopt+0xe0>)
 8010024:	f004 fb18 	bl	8014658 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010028:	4b31      	ldr	r3, [pc, #196]	@ (80100f0 <tcp_parseopt+0xe4>)
 801002a:	881b      	ldrh	r3, [r3, #0]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d056      	beq.n	80100de <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010030:	4b30      	ldr	r3, [pc, #192]	@ (80100f4 <tcp_parseopt+0xe8>)
 8010032:	2200      	movs	r2, #0
 8010034:	801a      	strh	r2, [r3, #0]
 8010036:	e046      	b.n	80100c6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8010038:	f7ff ffb2 	bl	800ffa0 <tcp_get_next_optbyte>
 801003c:	4603      	mov	r3, r0
 801003e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010040:	7bfb      	ldrb	r3, [r7, #15]
 8010042:	2b02      	cmp	r3, #2
 8010044:	d006      	beq.n	8010054 <tcp_parseopt+0x48>
 8010046:	2b02      	cmp	r3, #2
 8010048:	dc2a      	bgt.n	80100a0 <tcp_parseopt+0x94>
 801004a:	2b00      	cmp	r3, #0
 801004c:	d042      	beq.n	80100d4 <tcp_parseopt+0xc8>
 801004e:	2b01      	cmp	r3, #1
 8010050:	d038      	beq.n	80100c4 <tcp_parseopt+0xb8>
 8010052:	e025      	b.n	80100a0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010054:	f7ff ffa4 	bl	800ffa0 <tcp_get_next_optbyte>
 8010058:	4603      	mov	r3, r0
 801005a:	2b04      	cmp	r3, #4
 801005c:	d13c      	bne.n	80100d8 <tcp_parseopt+0xcc>
 801005e:	4b25      	ldr	r3, [pc, #148]	@ (80100f4 <tcp_parseopt+0xe8>)
 8010060:	881b      	ldrh	r3, [r3, #0]
 8010062:	3301      	adds	r3, #1
 8010064:	4a22      	ldr	r2, [pc, #136]	@ (80100f0 <tcp_parseopt+0xe4>)
 8010066:	8812      	ldrh	r2, [r2, #0]
 8010068:	4293      	cmp	r3, r2
 801006a:	da35      	bge.n	80100d8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801006c:	f7ff ff98 	bl	800ffa0 <tcp_get_next_optbyte>
 8010070:	4603      	mov	r3, r0
 8010072:	021b      	lsls	r3, r3, #8
 8010074:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010076:	f7ff ff93 	bl	800ffa0 <tcp_get_next_optbyte>
 801007a:	4603      	mov	r3, r0
 801007c:	461a      	mov	r2, r3
 801007e:	89bb      	ldrh	r3, [r7, #12]
 8010080:	4313      	orrs	r3, r2
 8010082:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010084:	89bb      	ldrh	r3, [r7, #12]
 8010086:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801008a:	d804      	bhi.n	8010096 <tcp_parseopt+0x8a>
 801008c:	89bb      	ldrh	r3, [r7, #12]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d001      	beq.n	8010096 <tcp_parseopt+0x8a>
 8010092:	89ba      	ldrh	r2, [r7, #12]
 8010094:	e001      	b.n	801009a <tcp_parseopt+0x8e>
 8010096:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801009e:	e012      	b.n	80100c6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80100a0:	f7ff ff7e 	bl	800ffa0 <tcp_get_next_optbyte>
 80100a4:	4603      	mov	r3, r0
 80100a6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80100a8:	7afb      	ldrb	r3, [r7, #11]
 80100aa:	2b01      	cmp	r3, #1
 80100ac:	d916      	bls.n	80100dc <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80100ae:	7afb      	ldrb	r3, [r7, #11]
 80100b0:	b29a      	uxth	r2, r3
 80100b2:	4b10      	ldr	r3, [pc, #64]	@ (80100f4 <tcp_parseopt+0xe8>)
 80100b4:	881b      	ldrh	r3, [r3, #0]
 80100b6:	4413      	add	r3, r2
 80100b8:	b29b      	uxth	r3, r3
 80100ba:	3b02      	subs	r3, #2
 80100bc:	b29a      	uxth	r2, r3
 80100be:	4b0d      	ldr	r3, [pc, #52]	@ (80100f4 <tcp_parseopt+0xe8>)
 80100c0:	801a      	strh	r2, [r3, #0]
 80100c2:	e000      	b.n	80100c6 <tcp_parseopt+0xba>
          break;
 80100c4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80100c6:	4b0b      	ldr	r3, [pc, #44]	@ (80100f4 <tcp_parseopt+0xe8>)
 80100c8:	881a      	ldrh	r2, [r3, #0]
 80100ca:	4b09      	ldr	r3, [pc, #36]	@ (80100f0 <tcp_parseopt+0xe4>)
 80100cc:	881b      	ldrh	r3, [r3, #0]
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d3b2      	bcc.n	8010038 <tcp_parseopt+0x2c>
 80100d2:	e004      	b.n	80100de <tcp_parseopt+0xd2>
          return;
 80100d4:	bf00      	nop
 80100d6:	e002      	b.n	80100de <tcp_parseopt+0xd2>
            return;
 80100d8:	bf00      	nop
 80100da:	e000      	b.n	80100de <tcp_parseopt+0xd2>
            return;
 80100dc:	bf00      	nop
      }
    }
  }
}
 80100de:	3710      	adds	r7, #16
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}
 80100e4:	080168a4 	.word	0x080168a4
 80100e8:	08016d08 	.word	0x08016d08
 80100ec:	080168f0 	.word	0x080168f0
 80100f0:	2000d3d4 	.word	0x2000d3d4
 80100f4:	2000d3dc 	.word	0x2000d3dc

080100f8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80100f8:	b480      	push	{r7}
 80100fa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80100fc:	4b05      	ldr	r3, [pc, #20]	@ (8010114 <tcp_trigger_input_pcb_close+0x1c>)
 80100fe:	781b      	ldrb	r3, [r3, #0]
 8010100:	f043 0310 	orr.w	r3, r3, #16
 8010104:	b2da      	uxtb	r2, r3
 8010106:	4b03      	ldr	r3, [pc, #12]	@ (8010114 <tcp_trigger_input_pcb_close+0x1c>)
 8010108:	701a      	strb	r2, [r3, #0]
}
 801010a:	bf00      	nop
 801010c:	46bd      	mov	sp, r7
 801010e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010112:	4770      	bx	lr
 8010114:	2000d3ed 	.word	0x2000d3ed

08010118 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b084      	sub	sp, #16
 801011c:	af00      	add	r7, sp, #0
 801011e:	60f8      	str	r0, [r7, #12]
 8010120:	60b9      	str	r1, [r7, #8]
 8010122:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d00a      	beq.n	8010140 <tcp_route+0x28>
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	7a1b      	ldrb	r3, [r3, #8]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d006      	beq.n	8010140 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	7a1b      	ldrb	r3, [r3, #8]
 8010136:	4618      	mov	r0, r3
 8010138:	f7fb fb22 	bl	800b780 <netif_get_by_index>
 801013c:	4603      	mov	r3, r0
 801013e:	e003      	b.n	8010148 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010140:	6878      	ldr	r0, [r7, #4]
 8010142:	f002 feab 	bl	8012e9c <ip4_route>
 8010146:	4603      	mov	r3, r0
  }
}
 8010148:	4618      	mov	r0, r3
 801014a:	3710      	adds	r7, #16
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}

08010150 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010150:	b590      	push	{r4, r7, lr}
 8010152:	b087      	sub	sp, #28
 8010154:	af00      	add	r7, sp, #0
 8010156:	60f8      	str	r0, [r7, #12]
 8010158:	60b9      	str	r1, [r7, #8]
 801015a:	603b      	str	r3, [r7, #0]
 801015c:	4613      	mov	r3, r2
 801015e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d105      	bne.n	8010172 <tcp_create_segment+0x22>
 8010166:	4b43      	ldr	r3, [pc, #268]	@ (8010274 <tcp_create_segment+0x124>)
 8010168:	22a3      	movs	r2, #163	@ 0xa3
 801016a:	4943      	ldr	r1, [pc, #268]	@ (8010278 <tcp_create_segment+0x128>)
 801016c:	4843      	ldr	r0, [pc, #268]	@ (801027c <tcp_create_segment+0x12c>)
 801016e:	f004 fa73 	bl	8014658 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d105      	bne.n	8010184 <tcp_create_segment+0x34>
 8010178:	4b3e      	ldr	r3, [pc, #248]	@ (8010274 <tcp_create_segment+0x124>)
 801017a:	22a4      	movs	r2, #164	@ 0xa4
 801017c:	4940      	ldr	r1, [pc, #256]	@ (8010280 <tcp_create_segment+0x130>)
 801017e:	483f      	ldr	r0, [pc, #252]	@ (801027c <tcp_create_segment+0x12c>)
 8010180:	f004 fa6a 	bl	8014658 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010184:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010188:	009b      	lsls	r3, r3, #2
 801018a:	b2db      	uxtb	r3, r3
 801018c:	f003 0304 	and.w	r3, r3, #4
 8010190:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010192:	2003      	movs	r0, #3
 8010194:	f7fa ff68 	bl	800b068 <memp_malloc>
 8010198:	6138      	str	r0, [r7, #16]
 801019a:	693b      	ldr	r3, [r7, #16]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d104      	bne.n	80101aa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80101a0:	68b8      	ldr	r0, [r7, #8]
 80101a2:	f7fb fe7b 	bl	800be9c <pbuf_free>
    return NULL;
 80101a6:	2300      	movs	r3, #0
 80101a8:	e060      	b.n	801026c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80101aa:	693b      	ldr	r3, [r7, #16]
 80101ac:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80101b0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	2200      	movs	r2, #0
 80101b6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80101b8:	693b      	ldr	r3, [r7, #16]
 80101ba:	68ba      	ldr	r2, [r7, #8]
 80101bc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80101be:	68bb      	ldr	r3, [r7, #8]
 80101c0:	891a      	ldrh	r2, [r3, #8]
 80101c2:	7dfb      	ldrb	r3, [r7, #23]
 80101c4:	b29b      	uxth	r3, r3
 80101c6:	429a      	cmp	r2, r3
 80101c8:	d205      	bcs.n	80101d6 <tcp_create_segment+0x86>
 80101ca:	4b2a      	ldr	r3, [pc, #168]	@ (8010274 <tcp_create_segment+0x124>)
 80101cc:	22b0      	movs	r2, #176	@ 0xb0
 80101ce:	492d      	ldr	r1, [pc, #180]	@ (8010284 <tcp_create_segment+0x134>)
 80101d0:	482a      	ldr	r0, [pc, #168]	@ (801027c <tcp_create_segment+0x12c>)
 80101d2:	f004 fa41 	bl	8014658 <iprintf>
  seg->len = p->tot_len - optlen;
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	891a      	ldrh	r2, [r3, #8]
 80101da:	7dfb      	ldrb	r3, [r7, #23]
 80101dc:	b29b      	uxth	r3, r3
 80101de:	1ad3      	subs	r3, r2, r3
 80101e0:	b29a      	uxth	r2, r3
 80101e2:	693b      	ldr	r3, [r7, #16]
 80101e4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80101e6:	2114      	movs	r1, #20
 80101e8:	68b8      	ldr	r0, [r7, #8]
 80101ea:	f7fb fdc1 	bl	800bd70 <pbuf_add_header>
 80101ee:	4603      	mov	r3, r0
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d004      	beq.n	80101fe <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80101f4:	6938      	ldr	r0, [r7, #16]
 80101f6:	f7fd f8d2 	bl	800d39e <tcp_seg_free>
    return NULL;
 80101fa:	2300      	movs	r3, #0
 80101fc:	e036      	b.n	801026c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80101fe:	693b      	ldr	r3, [r7, #16]
 8010200:	685b      	ldr	r3, [r3, #4]
 8010202:	685a      	ldr	r2, [r3, #4]
 8010204:	693b      	ldr	r3, [r7, #16]
 8010206:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	8ada      	ldrh	r2, [r3, #22]
 801020c:	693b      	ldr	r3, [r7, #16]
 801020e:	68dc      	ldr	r4, [r3, #12]
 8010210:	4610      	mov	r0, r2
 8010212:	f7fa fa55 	bl	800a6c0 <lwip_htons>
 8010216:	4603      	mov	r3, r0
 8010218:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	8b1a      	ldrh	r2, [r3, #24]
 801021e:	693b      	ldr	r3, [r7, #16]
 8010220:	68dc      	ldr	r4, [r3, #12]
 8010222:	4610      	mov	r0, r2
 8010224:	f7fa fa4c 	bl	800a6c0 <lwip_htons>
 8010228:	4603      	mov	r3, r0
 801022a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801022c:	693b      	ldr	r3, [r7, #16]
 801022e:	68dc      	ldr	r4, [r3, #12]
 8010230:	6838      	ldr	r0, [r7, #0]
 8010232:	f7fa fa5a 	bl	800a6ea <lwip_htonl>
 8010236:	4603      	mov	r3, r0
 8010238:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801023a:	7dfb      	ldrb	r3, [r7, #23]
 801023c:	089b      	lsrs	r3, r3, #2
 801023e:	b2db      	uxtb	r3, r3
 8010240:	3305      	adds	r3, #5
 8010242:	b29b      	uxth	r3, r3
 8010244:	031b      	lsls	r3, r3, #12
 8010246:	b29a      	uxth	r2, r3
 8010248:	79fb      	ldrb	r3, [r7, #7]
 801024a:	b29b      	uxth	r3, r3
 801024c:	4313      	orrs	r3, r2
 801024e:	b29a      	uxth	r2, r3
 8010250:	693b      	ldr	r3, [r7, #16]
 8010252:	68dc      	ldr	r4, [r3, #12]
 8010254:	4610      	mov	r0, r2
 8010256:	f7fa fa33 	bl	800a6c0 <lwip_htons>
 801025a:	4603      	mov	r3, r0
 801025c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801025e:	693b      	ldr	r3, [r7, #16]
 8010260:	68db      	ldr	r3, [r3, #12]
 8010262:	2200      	movs	r2, #0
 8010264:	749a      	strb	r2, [r3, #18]
 8010266:	2200      	movs	r2, #0
 8010268:	74da      	strb	r2, [r3, #19]
  return seg;
 801026a:	693b      	ldr	r3, [r7, #16]
}
 801026c:	4618      	mov	r0, r3
 801026e:	371c      	adds	r7, #28
 8010270:	46bd      	mov	sp, r7
 8010272:	bd90      	pop	{r4, r7, pc}
 8010274:	08016d24 	.word	0x08016d24
 8010278:	08016d58 	.word	0x08016d58
 801027c:	08016d78 	.word	0x08016d78
 8010280:	08016da0 	.word	0x08016da0
 8010284:	08016dc4 	.word	0x08016dc4

08010288 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010288:	b590      	push	{r4, r7, lr}
 801028a:	b08b      	sub	sp, #44	@ 0x2c
 801028c:	af02      	add	r7, sp, #8
 801028e:	6078      	str	r0, [r7, #4]
 8010290:	460b      	mov	r3, r1
 8010292:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010294:	2300      	movs	r3, #0
 8010296:	61fb      	str	r3, [r7, #28]
 8010298:	2300      	movs	r3, #0
 801029a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801029c:	2300      	movs	r3, #0
 801029e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d106      	bne.n	80102b4 <tcp_split_unsent_seg+0x2c>
 80102a6:	4b95      	ldr	r3, [pc, #596]	@ (80104fc <tcp_split_unsent_seg+0x274>)
 80102a8:	f240 324b 	movw	r2, #843	@ 0x34b
 80102ac:	4994      	ldr	r1, [pc, #592]	@ (8010500 <tcp_split_unsent_seg+0x278>)
 80102ae:	4895      	ldr	r0, [pc, #596]	@ (8010504 <tcp_split_unsent_seg+0x27c>)
 80102b0:	f004 f9d2 	bl	8014658 <iprintf>

  useg = pcb->unsent;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102b8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d102      	bne.n	80102c6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80102c0:	f04f 33ff 	mov.w	r3, #4294967295
 80102c4:	e116      	b.n	80104f4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80102c6:	887b      	ldrh	r3, [r7, #2]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d109      	bne.n	80102e0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80102cc:	4b8b      	ldr	r3, [pc, #556]	@ (80104fc <tcp_split_unsent_seg+0x274>)
 80102ce:	f240 3253 	movw	r2, #851	@ 0x353
 80102d2:	498d      	ldr	r1, [pc, #564]	@ (8010508 <tcp_split_unsent_seg+0x280>)
 80102d4:	488b      	ldr	r0, [pc, #556]	@ (8010504 <tcp_split_unsent_seg+0x27c>)
 80102d6:	f004 f9bf 	bl	8014658 <iprintf>
    return ERR_VAL;
 80102da:	f06f 0305 	mvn.w	r3, #5
 80102de:	e109      	b.n	80104f4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	891b      	ldrh	r3, [r3, #8]
 80102e4:	887a      	ldrh	r2, [r7, #2]
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d301      	bcc.n	80102ee <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80102ea:	2300      	movs	r3, #0
 80102ec:	e102      	b.n	80104f4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80102f2:	887a      	ldrh	r2, [r7, #2]
 80102f4:	429a      	cmp	r2, r3
 80102f6:	d906      	bls.n	8010306 <tcp_split_unsent_seg+0x7e>
 80102f8:	4b80      	ldr	r3, [pc, #512]	@ (80104fc <tcp_split_unsent_seg+0x274>)
 80102fa:	f240 325b 	movw	r2, #859	@ 0x35b
 80102fe:	4983      	ldr	r1, [pc, #524]	@ (801050c <tcp_split_unsent_seg+0x284>)
 8010300:	4880      	ldr	r0, [pc, #512]	@ (8010504 <tcp_split_unsent_seg+0x27c>)
 8010302:	f004 f9a9 	bl	8014658 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	891b      	ldrh	r3, [r3, #8]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d106      	bne.n	801031c <tcp_split_unsent_seg+0x94>
 801030e:	4b7b      	ldr	r3, [pc, #492]	@ (80104fc <tcp_split_unsent_seg+0x274>)
 8010310:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8010314:	497e      	ldr	r1, [pc, #504]	@ (8010510 <tcp_split_unsent_seg+0x288>)
 8010316:	487b      	ldr	r0, [pc, #492]	@ (8010504 <tcp_split_unsent_seg+0x27c>)
 8010318:	f004 f99e 	bl	8014658 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	7a9b      	ldrb	r3, [r3, #10]
 8010320:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010322:	7bfb      	ldrb	r3, [r7, #15]
 8010324:	009b      	lsls	r3, r3, #2
 8010326:	b2db      	uxtb	r3, r3
 8010328:	f003 0304 	and.w	r3, r3, #4
 801032c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801032e:	697b      	ldr	r3, [r7, #20]
 8010330:	891a      	ldrh	r2, [r3, #8]
 8010332:	887b      	ldrh	r3, [r7, #2]
 8010334:	1ad3      	subs	r3, r2, r3
 8010336:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010338:	7bbb      	ldrb	r3, [r7, #14]
 801033a:	b29a      	uxth	r2, r3
 801033c:	89bb      	ldrh	r3, [r7, #12]
 801033e:	4413      	add	r3, r2
 8010340:	b29b      	uxth	r3, r3
 8010342:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010346:	4619      	mov	r1, r3
 8010348:	2036      	movs	r0, #54	@ 0x36
 801034a:	f7fb fac3 	bl	800b8d4 <pbuf_alloc>
 801034e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010350:	693b      	ldr	r3, [r7, #16]
 8010352:	2b00      	cmp	r3, #0
 8010354:	f000 80b7 	beq.w	80104c6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010358:	697b      	ldr	r3, [r7, #20]
 801035a:	685b      	ldr	r3, [r3, #4]
 801035c:	891a      	ldrh	r2, [r3, #8]
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	891b      	ldrh	r3, [r3, #8]
 8010362:	1ad3      	subs	r3, r2, r3
 8010364:	b29a      	uxth	r2, r3
 8010366:	887b      	ldrh	r3, [r7, #2]
 8010368:	4413      	add	r3, r2
 801036a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801036c:	697b      	ldr	r3, [r7, #20]
 801036e:	6858      	ldr	r0, [r3, #4]
 8010370:	693b      	ldr	r3, [r7, #16]
 8010372:	685a      	ldr	r2, [r3, #4]
 8010374:	7bbb      	ldrb	r3, [r7, #14]
 8010376:	18d1      	adds	r1, r2, r3
 8010378:	897b      	ldrh	r3, [r7, #10]
 801037a:	89ba      	ldrh	r2, [r7, #12]
 801037c:	f7fb ff84 	bl	800c288 <pbuf_copy_partial>
 8010380:	4603      	mov	r3, r0
 8010382:	461a      	mov	r2, r3
 8010384:	89bb      	ldrh	r3, [r7, #12]
 8010386:	4293      	cmp	r3, r2
 8010388:	f040 809f 	bne.w	80104ca <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801038c:	697b      	ldr	r3, [r7, #20]
 801038e:	68db      	ldr	r3, [r3, #12]
 8010390:	899b      	ldrh	r3, [r3, #12]
 8010392:	b29b      	uxth	r3, r3
 8010394:	4618      	mov	r0, r3
 8010396:	f7fa f993 	bl	800a6c0 <lwip_htons>
 801039a:	4603      	mov	r3, r0
 801039c:	b2db      	uxtb	r3, r3
 801039e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80103a2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80103a4:	2300      	movs	r3, #0
 80103a6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80103a8:	7efb      	ldrb	r3, [r7, #27]
 80103aa:	f003 0308 	and.w	r3, r3, #8
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d007      	beq.n	80103c2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80103b2:	7efb      	ldrb	r3, [r7, #27]
 80103b4:	f023 0308 	bic.w	r3, r3, #8
 80103b8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80103ba:	7ebb      	ldrb	r3, [r7, #26]
 80103bc:	f043 0308 	orr.w	r3, r3, #8
 80103c0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80103c2:	7efb      	ldrb	r3, [r7, #27]
 80103c4:	f003 0301 	and.w	r3, r3, #1
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d007      	beq.n	80103dc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80103cc:	7efb      	ldrb	r3, [r7, #27]
 80103ce:	f023 0301 	bic.w	r3, r3, #1
 80103d2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80103d4:	7ebb      	ldrb	r3, [r7, #26]
 80103d6:	f043 0301 	orr.w	r3, r3, #1
 80103da:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	68db      	ldr	r3, [r3, #12]
 80103e0:	685b      	ldr	r3, [r3, #4]
 80103e2:	4618      	mov	r0, r3
 80103e4:	f7fa f981 	bl	800a6ea <lwip_htonl>
 80103e8:	4602      	mov	r2, r0
 80103ea:	887b      	ldrh	r3, [r7, #2]
 80103ec:	18d1      	adds	r1, r2, r3
 80103ee:	7eba      	ldrb	r2, [r7, #26]
 80103f0:	7bfb      	ldrb	r3, [r7, #15]
 80103f2:	9300      	str	r3, [sp, #0]
 80103f4:	460b      	mov	r3, r1
 80103f6:	6939      	ldr	r1, [r7, #16]
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f7ff fea9 	bl	8010150 <tcp_create_segment>
 80103fe:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010400:	69fb      	ldr	r3, [r7, #28]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d063      	beq.n	80104ce <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010406:	697b      	ldr	r3, [r7, #20]
 8010408:	685b      	ldr	r3, [r3, #4]
 801040a:	4618      	mov	r0, r3
 801040c:	f7fb fdd4 	bl	800bfb8 <pbuf_clen>
 8010410:	4603      	mov	r3, r0
 8010412:	461a      	mov	r2, r3
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801041a:	1a9b      	subs	r3, r3, r2
 801041c:	b29a      	uxth	r2, r3
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010424:	697b      	ldr	r3, [r7, #20]
 8010426:	6858      	ldr	r0, [r3, #4]
 8010428:	697b      	ldr	r3, [r7, #20]
 801042a:	685b      	ldr	r3, [r3, #4]
 801042c:	891a      	ldrh	r2, [r3, #8]
 801042e:	89bb      	ldrh	r3, [r7, #12]
 8010430:	1ad3      	subs	r3, r2, r3
 8010432:	b29b      	uxth	r3, r3
 8010434:	4619      	mov	r1, r3
 8010436:	f7fb fbab 	bl	800bb90 <pbuf_realloc>
  useg->len -= remainder;
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	891a      	ldrh	r2, [r3, #8]
 801043e:	89bb      	ldrh	r3, [r7, #12]
 8010440:	1ad3      	subs	r3, r2, r3
 8010442:	b29a      	uxth	r2, r3
 8010444:	697b      	ldr	r3, [r7, #20]
 8010446:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010448:	697b      	ldr	r3, [r7, #20]
 801044a:	68db      	ldr	r3, [r3, #12]
 801044c:	899b      	ldrh	r3, [r3, #12]
 801044e:	b29c      	uxth	r4, r3
 8010450:	7efb      	ldrb	r3, [r7, #27]
 8010452:	b29b      	uxth	r3, r3
 8010454:	4618      	mov	r0, r3
 8010456:	f7fa f933 	bl	800a6c0 <lwip_htons>
 801045a:	4603      	mov	r3, r0
 801045c:	461a      	mov	r2, r3
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	68db      	ldr	r3, [r3, #12]
 8010462:	4322      	orrs	r2, r4
 8010464:	b292      	uxth	r2, r2
 8010466:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	685b      	ldr	r3, [r3, #4]
 801046c:	4618      	mov	r0, r3
 801046e:	f7fb fda3 	bl	800bfb8 <pbuf_clen>
 8010472:	4603      	mov	r3, r0
 8010474:	461a      	mov	r2, r3
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801047c:	4413      	add	r3, r2
 801047e:	b29a      	uxth	r2, r3
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010486:	69fb      	ldr	r3, [r7, #28]
 8010488:	685b      	ldr	r3, [r3, #4]
 801048a:	4618      	mov	r0, r3
 801048c:	f7fb fd94 	bl	800bfb8 <pbuf_clen>
 8010490:	4603      	mov	r3, r0
 8010492:	461a      	mov	r2, r3
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801049a:	4413      	add	r3, r2
 801049c:	b29a      	uxth	r2, r3
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80104a4:	697b      	ldr	r3, [r7, #20]
 80104a6:	681a      	ldr	r2, [r3, #0]
 80104a8:	69fb      	ldr	r3, [r7, #28]
 80104aa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80104ac:	697b      	ldr	r3, [r7, #20]
 80104ae:	69fa      	ldr	r2, [r7, #28]
 80104b0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80104b2:	69fb      	ldr	r3, [r7, #28]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d103      	bne.n	80104c2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2200      	movs	r2, #0
 80104be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80104c2:	2300      	movs	r3, #0
 80104c4:	e016      	b.n	80104f4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80104c6:	bf00      	nop
 80104c8:	e002      	b.n	80104d0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80104ca:	bf00      	nop
 80104cc:	e000      	b.n	80104d0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80104ce:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80104d0:	69fb      	ldr	r3, [r7, #28]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d006      	beq.n	80104e4 <tcp_split_unsent_seg+0x25c>
 80104d6:	4b09      	ldr	r3, [pc, #36]	@ (80104fc <tcp_split_unsent_seg+0x274>)
 80104d8:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80104dc:	490d      	ldr	r1, [pc, #52]	@ (8010514 <tcp_split_unsent_seg+0x28c>)
 80104de:	4809      	ldr	r0, [pc, #36]	@ (8010504 <tcp_split_unsent_seg+0x27c>)
 80104e0:	f004 f8ba 	bl	8014658 <iprintf>
  if (p != NULL) {
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d002      	beq.n	80104f0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80104ea:	6938      	ldr	r0, [r7, #16]
 80104ec:	f7fb fcd6 	bl	800be9c <pbuf_free>
  }

  return ERR_MEM;
 80104f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3724      	adds	r7, #36	@ 0x24
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd90      	pop	{r4, r7, pc}
 80104fc:	08016d24 	.word	0x08016d24
 8010500:	080170b8 	.word	0x080170b8
 8010504:	08016d78 	.word	0x08016d78
 8010508:	080170dc 	.word	0x080170dc
 801050c:	08017100 	.word	0x08017100
 8010510:	08017110 	.word	0x08017110
 8010514:	08017120 	.word	0x08017120

08010518 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010518:	b590      	push	{r4, r7, lr}
 801051a:	b085      	sub	sp, #20
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d106      	bne.n	8010534 <tcp_send_fin+0x1c>
 8010526:	4b21      	ldr	r3, [pc, #132]	@ (80105ac <tcp_send_fin+0x94>)
 8010528:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801052c:	4920      	ldr	r1, [pc, #128]	@ (80105b0 <tcp_send_fin+0x98>)
 801052e:	4821      	ldr	r0, [pc, #132]	@ (80105b4 <tcp_send_fin+0x9c>)
 8010530:	f004 f892 	bl	8014658 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010538:	2b00      	cmp	r3, #0
 801053a:	d02e      	beq.n	801059a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010540:	60fb      	str	r3, [r7, #12]
 8010542:	e002      	b.n	801054a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d1f8      	bne.n	8010544 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	68db      	ldr	r3, [r3, #12]
 8010556:	899b      	ldrh	r3, [r3, #12]
 8010558:	b29b      	uxth	r3, r3
 801055a:	4618      	mov	r0, r3
 801055c:	f7fa f8b0 	bl	800a6c0 <lwip_htons>
 8010560:	4603      	mov	r3, r0
 8010562:	b2db      	uxtb	r3, r3
 8010564:	f003 0307 	and.w	r3, r3, #7
 8010568:	2b00      	cmp	r3, #0
 801056a:	d116      	bne.n	801059a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	68db      	ldr	r3, [r3, #12]
 8010570:	899b      	ldrh	r3, [r3, #12]
 8010572:	b29c      	uxth	r4, r3
 8010574:	2001      	movs	r0, #1
 8010576:	f7fa f8a3 	bl	800a6c0 <lwip_htons>
 801057a:	4603      	mov	r3, r0
 801057c:	461a      	mov	r2, r3
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	68db      	ldr	r3, [r3, #12]
 8010582:	4322      	orrs	r2, r4
 8010584:	b292      	uxth	r2, r2
 8010586:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	8b5b      	ldrh	r3, [r3, #26]
 801058c:	f043 0320 	orr.w	r3, r3, #32
 8010590:	b29a      	uxth	r2, r3
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010596:	2300      	movs	r3, #0
 8010598:	e004      	b.n	80105a4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801059a:	2101      	movs	r1, #1
 801059c:	6878      	ldr	r0, [r7, #4]
 801059e:	f000 f80b 	bl	80105b8 <tcp_enqueue_flags>
 80105a2:	4603      	mov	r3, r0
}
 80105a4:	4618      	mov	r0, r3
 80105a6:	3714      	adds	r7, #20
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd90      	pop	{r4, r7, pc}
 80105ac:	08016d24 	.word	0x08016d24
 80105b0:	0801712c 	.word	0x0801712c
 80105b4:	08016d78 	.word	0x08016d78

080105b8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b08a      	sub	sp, #40	@ 0x28
 80105bc:	af02      	add	r7, sp, #8
 80105be:	6078      	str	r0, [r7, #4]
 80105c0:	460b      	mov	r3, r1
 80105c2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80105c4:	2300      	movs	r3, #0
 80105c6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80105c8:	2300      	movs	r3, #0
 80105ca:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80105cc:	78fb      	ldrb	r3, [r7, #3]
 80105ce:	f003 0303 	and.w	r3, r3, #3
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d106      	bne.n	80105e4 <tcp_enqueue_flags+0x2c>
 80105d6:	4b67      	ldr	r3, [pc, #412]	@ (8010774 <tcp_enqueue_flags+0x1bc>)
 80105d8:	f240 4211 	movw	r2, #1041	@ 0x411
 80105dc:	4966      	ldr	r1, [pc, #408]	@ (8010778 <tcp_enqueue_flags+0x1c0>)
 80105de:	4867      	ldr	r0, [pc, #412]	@ (801077c <tcp_enqueue_flags+0x1c4>)
 80105e0:	f004 f83a 	bl	8014658 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d106      	bne.n	80105f8 <tcp_enqueue_flags+0x40>
 80105ea:	4b62      	ldr	r3, [pc, #392]	@ (8010774 <tcp_enqueue_flags+0x1bc>)
 80105ec:	f240 4213 	movw	r2, #1043	@ 0x413
 80105f0:	4963      	ldr	r1, [pc, #396]	@ (8010780 <tcp_enqueue_flags+0x1c8>)
 80105f2:	4862      	ldr	r0, [pc, #392]	@ (801077c <tcp_enqueue_flags+0x1c4>)
 80105f4:	f004 f830 	bl	8014658 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80105f8:	78fb      	ldrb	r3, [r7, #3]
 80105fa:	f003 0302 	and.w	r3, r3, #2
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d001      	beq.n	8010606 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010602:	2301      	movs	r3, #1
 8010604:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010606:	7ffb      	ldrb	r3, [r7, #31]
 8010608:	009b      	lsls	r3, r3, #2
 801060a:	b2db      	uxtb	r3, r3
 801060c:	f003 0304 	and.w	r3, r3, #4
 8010610:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010612:	7dfb      	ldrb	r3, [r7, #23]
 8010614:	b29b      	uxth	r3, r3
 8010616:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801061a:	4619      	mov	r1, r3
 801061c:	2036      	movs	r0, #54	@ 0x36
 801061e:	f7fb f959 	bl	800b8d4 <pbuf_alloc>
 8010622:	6138      	str	r0, [r7, #16]
 8010624:	693b      	ldr	r3, [r7, #16]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d109      	bne.n	801063e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	8b5b      	ldrh	r3, [r3, #26]
 801062e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010632:	b29a      	uxth	r2, r3
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010638:	f04f 33ff 	mov.w	r3, #4294967295
 801063c:	e095      	b.n	801076a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801063e:	693b      	ldr	r3, [r7, #16]
 8010640:	895a      	ldrh	r2, [r3, #10]
 8010642:	7dfb      	ldrb	r3, [r7, #23]
 8010644:	b29b      	uxth	r3, r3
 8010646:	429a      	cmp	r2, r3
 8010648:	d206      	bcs.n	8010658 <tcp_enqueue_flags+0xa0>
 801064a:	4b4a      	ldr	r3, [pc, #296]	@ (8010774 <tcp_enqueue_flags+0x1bc>)
 801064c:	f240 4239 	movw	r2, #1081	@ 0x439
 8010650:	494c      	ldr	r1, [pc, #304]	@ (8010784 <tcp_enqueue_flags+0x1cc>)
 8010652:	484a      	ldr	r0, [pc, #296]	@ (801077c <tcp_enqueue_flags+0x1c4>)
 8010654:	f004 f800 	bl	8014658 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801065c:	78fa      	ldrb	r2, [r7, #3]
 801065e:	7ffb      	ldrb	r3, [r7, #31]
 8010660:	9300      	str	r3, [sp, #0]
 8010662:	460b      	mov	r3, r1
 8010664:	6939      	ldr	r1, [r7, #16]
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f7ff fd72 	bl	8010150 <tcp_create_segment>
 801066c:	60f8      	str	r0, [r7, #12]
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d109      	bne.n	8010688 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	8b5b      	ldrh	r3, [r3, #26]
 8010678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801067c:	b29a      	uxth	r2, r3
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010682:	f04f 33ff 	mov.w	r3, #4294967295
 8010686:	e070      	b.n	801076a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	68db      	ldr	r3, [r3, #12]
 801068c:	f003 0303 	and.w	r3, r3, #3
 8010690:	2b00      	cmp	r3, #0
 8010692:	d006      	beq.n	80106a2 <tcp_enqueue_flags+0xea>
 8010694:	4b37      	ldr	r3, [pc, #220]	@ (8010774 <tcp_enqueue_flags+0x1bc>)
 8010696:	f240 4242 	movw	r2, #1090	@ 0x442
 801069a:	493b      	ldr	r1, [pc, #236]	@ (8010788 <tcp_enqueue_flags+0x1d0>)
 801069c:	4837      	ldr	r0, [pc, #220]	@ (801077c <tcp_enqueue_flags+0x1c4>)
 801069e:	f003 ffdb 	bl	8014658 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	891b      	ldrh	r3, [r3, #8]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d006      	beq.n	80106b8 <tcp_enqueue_flags+0x100>
 80106aa:	4b32      	ldr	r3, [pc, #200]	@ (8010774 <tcp_enqueue_flags+0x1bc>)
 80106ac:	f240 4243 	movw	r2, #1091	@ 0x443
 80106b0:	4936      	ldr	r1, [pc, #216]	@ (801078c <tcp_enqueue_flags+0x1d4>)
 80106b2:	4832      	ldr	r0, [pc, #200]	@ (801077c <tcp_enqueue_flags+0x1c4>)
 80106b4:	f003 ffd0 	bl	8014658 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d103      	bne.n	80106c8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	68fa      	ldr	r2, [r7, #12]
 80106c4:	66da      	str	r2, [r3, #108]	@ 0x6c
 80106c6:	e00d      	b.n	80106e4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80106cc:	61bb      	str	r3, [r7, #24]
 80106ce:	e002      	b.n	80106d6 <tcp_enqueue_flags+0x11e>
 80106d0:	69bb      	ldr	r3, [r7, #24]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	61bb      	str	r3, [r7, #24]
 80106d6:	69bb      	ldr	r3, [r7, #24]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d1f8      	bne.n	80106d0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80106de:	69bb      	ldr	r3, [r7, #24]
 80106e0:	68fa      	ldr	r2, [r7, #12]
 80106e2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2200      	movs	r2, #0
 80106e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80106ec:	78fb      	ldrb	r3, [r7, #3]
 80106ee:	f003 0302 	and.w	r3, r3, #2
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d104      	bne.n	8010700 <tcp_enqueue_flags+0x148>
 80106f6:	78fb      	ldrb	r3, [r7, #3]
 80106f8:	f003 0301 	and.w	r3, r3, #1
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d004      	beq.n	801070a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010704:	1c5a      	adds	r2, r3, #1
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801070a:	78fb      	ldrb	r3, [r7, #3]
 801070c:	f003 0301 	and.w	r3, r3, #1
 8010710:	2b00      	cmp	r3, #0
 8010712:	d006      	beq.n	8010722 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	8b5b      	ldrh	r3, [r3, #26]
 8010718:	f043 0320 	orr.w	r3, r3, #32
 801071c:	b29a      	uxth	r2, r3
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	685b      	ldr	r3, [r3, #4]
 8010726:	4618      	mov	r0, r3
 8010728:	f7fb fc46 	bl	800bfb8 <pbuf_clen>
 801072c:	4603      	mov	r3, r0
 801072e:	461a      	mov	r2, r3
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010736:	4413      	add	r3, r2
 8010738:	b29a      	uxth	r2, r3
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010746:	2b00      	cmp	r3, #0
 8010748:	d00e      	beq.n	8010768 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801074e:	2b00      	cmp	r3, #0
 8010750:	d10a      	bne.n	8010768 <tcp_enqueue_flags+0x1b0>
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010756:	2b00      	cmp	r3, #0
 8010758:	d106      	bne.n	8010768 <tcp_enqueue_flags+0x1b0>
 801075a:	4b06      	ldr	r3, [pc, #24]	@ (8010774 <tcp_enqueue_flags+0x1bc>)
 801075c:	f240 4265 	movw	r2, #1125	@ 0x465
 8010760:	490b      	ldr	r1, [pc, #44]	@ (8010790 <tcp_enqueue_flags+0x1d8>)
 8010762:	4806      	ldr	r0, [pc, #24]	@ (801077c <tcp_enqueue_flags+0x1c4>)
 8010764:	f003 ff78 	bl	8014658 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010768:	2300      	movs	r3, #0
}
 801076a:	4618      	mov	r0, r3
 801076c:	3720      	adds	r7, #32
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}
 8010772:	bf00      	nop
 8010774:	08016d24 	.word	0x08016d24
 8010778:	08017148 	.word	0x08017148
 801077c:	08016d78 	.word	0x08016d78
 8010780:	080171a0 	.word	0x080171a0
 8010784:	080171c0 	.word	0x080171c0
 8010788:	080171fc 	.word	0x080171fc
 801078c:	08017214 	.word	0x08017214
 8010790:	08017240 	.word	0x08017240

08010794 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010794:	b5b0      	push	{r4, r5, r7, lr}
 8010796:	b08a      	sub	sp, #40	@ 0x28
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d106      	bne.n	80107b0 <tcp_output+0x1c>
 80107a2:	4b8a      	ldr	r3, [pc, #552]	@ (80109cc <tcp_output+0x238>)
 80107a4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80107a8:	4989      	ldr	r1, [pc, #548]	@ (80109d0 <tcp_output+0x23c>)
 80107aa:	488a      	ldr	r0, [pc, #552]	@ (80109d4 <tcp_output+0x240>)
 80107ac:	f003 ff54 	bl	8014658 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	7d1b      	ldrb	r3, [r3, #20]
 80107b4:	2b01      	cmp	r3, #1
 80107b6:	d106      	bne.n	80107c6 <tcp_output+0x32>
 80107b8:	4b84      	ldr	r3, [pc, #528]	@ (80109cc <tcp_output+0x238>)
 80107ba:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80107be:	4986      	ldr	r1, [pc, #536]	@ (80109d8 <tcp_output+0x244>)
 80107c0:	4884      	ldr	r0, [pc, #528]	@ (80109d4 <tcp_output+0x240>)
 80107c2:	f003 ff49 	bl	8014658 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80107c6:	4b85      	ldr	r3, [pc, #532]	@ (80109dc <tcp_output+0x248>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	687a      	ldr	r2, [r7, #4]
 80107cc:	429a      	cmp	r2, r3
 80107ce:	d101      	bne.n	80107d4 <tcp_output+0x40>
    return ERR_OK;
 80107d0:	2300      	movs	r3, #0
 80107d2:	e1ce      	b.n	8010b72 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80107e0:	4293      	cmp	r3, r2
 80107e2:	bf28      	it	cs
 80107e4:	4613      	movcs	r3, r2
 80107e6:	b29b      	uxth	r3, r3
 80107e8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80107ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80107f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d10b      	bne.n	801080e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	8b5b      	ldrh	r3, [r3, #26]
 80107fa:	f003 0302 	and.w	r3, r3, #2
 80107fe:	2b00      	cmp	r3, #0
 8010800:	f000 81aa 	beq.w	8010b58 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	f000 fdcb 	bl	80113a0 <tcp_send_empty_ack>
 801080a:	4603      	mov	r3, r0
 801080c:	e1b1      	b.n	8010b72 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801080e:	6879      	ldr	r1, [r7, #4]
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	3304      	adds	r3, #4
 8010814:	461a      	mov	r2, r3
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f7ff fc7e 	bl	8010118 <tcp_route>
 801081c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801081e:	697b      	ldr	r3, [r7, #20]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d102      	bne.n	801082a <tcp_output+0x96>
    return ERR_RTE;
 8010824:	f06f 0303 	mvn.w	r3, #3
 8010828:	e1a3      	b.n	8010b72 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d003      	beq.n	8010838 <tcp_output+0xa4>
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d111      	bne.n	801085c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010838:	697b      	ldr	r3, [r7, #20]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d002      	beq.n	8010844 <tcp_output+0xb0>
 801083e:	697b      	ldr	r3, [r7, #20]
 8010840:	3304      	adds	r3, #4
 8010842:	e000      	b.n	8010846 <tcp_output+0xb2>
 8010844:	2300      	movs	r3, #0
 8010846:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d102      	bne.n	8010854 <tcp_output+0xc0>
      return ERR_RTE;
 801084e:	f06f 0303 	mvn.w	r3, #3
 8010852:	e18e      	b.n	8010b72 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010854:	693b      	ldr	r3, [r7, #16]
 8010856:	681a      	ldr	r2, [r3, #0]
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801085c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801085e:	68db      	ldr	r3, [r3, #12]
 8010860:	685b      	ldr	r3, [r3, #4]
 8010862:	4618      	mov	r0, r3
 8010864:	f7f9 ff41 	bl	800a6ea <lwip_htonl>
 8010868:	4602      	mov	r2, r0
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801086e:	1ad3      	subs	r3, r2, r3
 8010870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010872:	8912      	ldrh	r2, [r2, #8]
 8010874:	4413      	add	r3, r2
 8010876:	69ba      	ldr	r2, [r7, #24]
 8010878:	429a      	cmp	r2, r3
 801087a:	d227      	bcs.n	80108cc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010882:	461a      	mov	r2, r3
 8010884:	69bb      	ldr	r3, [r7, #24]
 8010886:	4293      	cmp	r3, r2
 8010888:	d114      	bne.n	80108b4 <tcp_output+0x120>
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801088e:	2b00      	cmp	r3, #0
 8010890:	d110      	bne.n	80108b4 <tcp_output+0x120>
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010898:	2b00      	cmp	r3, #0
 801089a:	d10b      	bne.n	80108b4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2200      	movs	r2, #0
 80108a0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	2201      	movs	r2, #1
 80108a8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2200      	movs	r2, #0
 80108b0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	8b5b      	ldrh	r3, [r3, #26]
 80108b8:	f003 0302 	and.w	r3, r3, #2
 80108bc:	2b00      	cmp	r3, #0
 80108be:	f000 814d 	beq.w	8010b5c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80108c2:	6878      	ldr	r0, [r7, #4]
 80108c4:	f000 fd6c 	bl	80113a0 <tcp_send_empty_ack>
 80108c8:	4603      	mov	r3, r0
 80108ca:	e152      	b.n	8010b72 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2200      	movs	r2, #0
 80108d0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80108d8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80108da:	6a3b      	ldr	r3, [r7, #32]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	f000 811c 	beq.w	8010b1a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80108e2:	e002      	b.n	80108ea <tcp_output+0x156>
 80108e4:	6a3b      	ldr	r3, [r7, #32]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	623b      	str	r3, [r7, #32]
 80108ea:	6a3b      	ldr	r3, [r7, #32]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d1f8      	bne.n	80108e4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80108f2:	e112      	b.n	8010b1a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80108f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108f6:	68db      	ldr	r3, [r3, #12]
 80108f8:	899b      	ldrh	r3, [r3, #12]
 80108fa:	b29b      	uxth	r3, r3
 80108fc:	4618      	mov	r0, r3
 80108fe:	f7f9 fedf 	bl	800a6c0 <lwip_htons>
 8010902:	4603      	mov	r3, r0
 8010904:	b2db      	uxtb	r3, r3
 8010906:	f003 0304 	and.w	r3, r3, #4
 801090a:	2b00      	cmp	r3, #0
 801090c:	d006      	beq.n	801091c <tcp_output+0x188>
 801090e:	4b2f      	ldr	r3, [pc, #188]	@ (80109cc <tcp_output+0x238>)
 8010910:	f240 5236 	movw	r2, #1334	@ 0x536
 8010914:	4932      	ldr	r1, [pc, #200]	@ (80109e0 <tcp_output+0x24c>)
 8010916:	482f      	ldr	r0, [pc, #188]	@ (80109d4 <tcp_output+0x240>)
 8010918:	f003 fe9e 	bl	8014658 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010920:	2b00      	cmp	r3, #0
 8010922:	d01f      	beq.n	8010964 <tcp_output+0x1d0>
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	8b5b      	ldrh	r3, [r3, #26]
 8010928:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801092c:	2b00      	cmp	r3, #0
 801092e:	d119      	bne.n	8010964 <tcp_output+0x1d0>
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010934:	2b00      	cmp	r3, #0
 8010936:	d00b      	beq.n	8010950 <tcp_output+0x1bc>
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d110      	bne.n	8010964 <tcp_output+0x1d0>
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010946:	891a      	ldrh	r2, [r3, #8]
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801094c:	429a      	cmp	r2, r3
 801094e:	d209      	bcs.n	8010964 <tcp_output+0x1d0>
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010956:	2b00      	cmp	r3, #0
 8010958:	d004      	beq.n	8010964 <tcp_output+0x1d0>
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010960:	2b08      	cmp	r3, #8
 8010962:	d901      	bls.n	8010968 <tcp_output+0x1d4>
 8010964:	2301      	movs	r3, #1
 8010966:	e000      	b.n	801096a <tcp_output+0x1d6>
 8010968:	2300      	movs	r3, #0
 801096a:	2b00      	cmp	r3, #0
 801096c:	d106      	bne.n	801097c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	8b5b      	ldrh	r3, [r3, #26]
 8010972:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010976:	2b00      	cmp	r3, #0
 8010978:	f000 80e4 	beq.w	8010b44 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	7d1b      	ldrb	r3, [r3, #20]
 8010980:	2b02      	cmp	r3, #2
 8010982:	d00d      	beq.n	80109a0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010986:	68db      	ldr	r3, [r3, #12]
 8010988:	899b      	ldrh	r3, [r3, #12]
 801098a:	b29c      	uxth	r4, r3
 801098c:	2010      	movs	r0, #16
 801098e:	f7f9 fe97 	bl	800a6c0 <lwip_htons>
 8010992:	4603      	mov	r3, r0
 8010994:	461a      	mov	r2, r3
 8010996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010998:	68db      	ldr	r3, [r3, #12]
 801099a:	4322      	orrs	r2, r4
 801099c:	b292      	uxth	r2, r2
 801099e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80109a0:	697a      	ldr	r2, [r7, #20]
 80109a2:	6879      	ldr	r1, [r7, #4]
 80109a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80109a6:	f000 f909 	bl	8010bbc <tcp_output_segment>
 80109aa:	4603      	mov	r3, r0
 80109ac:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80109ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d016      	beq.n	80109e4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	8b5b      	ldrh	r3, [r3, #26]
 80109ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80109be:	b29a      	uxth	r2, r3
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	835a      	strh	r2, [r3, #26]
      return err;
 80109c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109c8:	e0d3      	b.n	8010b72 <tcp_output+0x3de>
 80109ca:	bf00      	nop
 80109cc:	08016d24 	.word	0x08016d24
 80109d0:	08017268 	.word	0x08017268
 80109d4:	08016d78 	.word	0x08016d78
 80109d8:	08017280 	.word	0x08017280
 80109dc:	2000d3f4 	.word	0x2000d3f4
 80109e0:	080172a8 	.word	0x080172a8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80109e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109e6:	681a      	ldr	r2, [r3, #0]
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	7d1b      	ldrb	r3, [r3, #20]
 80109f0:	2b02      	cmp	r3, #2
 80109f2:	d006      	beq.n	8010a02 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	8b5b      	ldrh	r3, [r3, #26]
 80109f8:	f023 0303 	bic.w	r3, r3, #3
 80109fc:	b29a      	uxth	r2, r3
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a04:	68db      	ldr	r3, [r3, #12]
 8010a06:	685b      	ldr	r3, [r3, #4]
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f7f9 fe6e 	bl	800a6ea <lwip_htonl>
 8010a0e:	4604      	mov	r4, r0
 8010a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a12:	891b      	ldrh	r3, [r3, #8]
 8010a14:	461d      	mov	r5, r3
 8010a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a18:	68db      	ldr	r3, [r3, #12]
 8010a1a:	899b      	ldrh	r3, [r3, #12]
 8010a1c:	b29b      	uxth	r3, r3
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f7f9 fe4e 	bl	800a6c0 <lwip_htons>
 8010a24:	4603      	mov	r3, r0
 8010a26:	b2db      	uxtb	r3, r3
 8010a28:	f003 0303 	and.w	r3, r3, #3
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d001      	beq.n	8010a34 <tcp_output+0x2a0>
 8010a30:	2301      	movs	r3, #1
 8010a32:	e000      	b.n	8010a36 <tcp_output+0x2a2>
 8010a34:	2300      	movs	r3, #0
 8010a36:	442b      	add	r3, r5
 8010a38:	4423      	add	r3, r4
 8010a3a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	1ad3      	subs	r3, r2, r3
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	da02      	bge.n	8010a4e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	68ba      	ldr	r2, [r7, #8]
 8010a4c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a50:	891b      	ldrh	r3, [r3, #8]
 8010a52:	461c      	mov	r4, r3
 8010a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a56:	68db      	ldr	r3, [r3, #12]
 8010a58:	899b      	ldrh	r3, [r3, #12]
 8010a5a:	b29b      	uxth	r3, r3
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f7f9 fe2f 	bl	800a6c0 <lwip_htons>
 8010a62:	4603      	mov	r3, r0
 8010a64:	b2db      	uxtb	r3, r3
 8010a66:	f003 0303 	and.w	r3, r3, #3
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d001      	beq.n	8010a72 <tcp_output+0x2de>
 8010a6e:	2301      	movs	r3, #1
 8010a70:	e000      	b.n	8010a74 <tcp_output+0x2e0>
 8010a72:	2300      	movs	r3, #0
 8010a74:	4423      	add	r3, r4
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d049      	beq.n	8010b0e <tcp_output+0x37a>
      seg->next = NULL;
 8010a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d105      	bne.n	8010a94 <tcp_output+0x300>
        pcb->unacked = seg;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a8c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8010a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a90:	623b      	str	r3, [r7, #32]
 8010a92:	e03f      	b.n	8010b14 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a96:	68db      	ldr	r3, [r3, #12]
 8010a98:	685b      	ldr	r3, [r3, #4]
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7f9 fe25 	bl	800a6ea <lwip_htonl>
 8010aa0:	4604      	mov	r4, r0
 8010aa2:	6a3b      	ldr	r3, [r7, #32]
 8010aa4:	68db      	ldr	r3, [r3, #12]
 8010aa6:	685b      	ldr	r3, [r3, #4]
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f7f9 fe1e 	bl	800a6ea <lwip_htonl>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	1ae3      	subs	r3, r4, r3
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	da24      	bge.n	8010b00 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	3370      	adds	r3, #112	@ 0x70
 8010aba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010abc:	e002      	b.n	8010ac4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010abe:	69fb      	ldr	r3, [r7, #28]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010ac4:	69fb      	ldr	r3, [r7, #28]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d011      	beq.n	8010af0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010acc:	69fb      	ldr	r3, [r7, #28]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	68db      	ldr	r3, [r3, #12]
 8010ad2:	685b      	ldr	r3, [r3, #4]
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f7f9 fe08 	bl	800a6ea <lwip_htonl>
 8010ada:	4604      	mov	r4, r0
 8010adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ade:	68db      	ldr	r3, [r3, #12]
 8010ae0:	685b      	ldr	r3, [r3, #4]
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7f9 fe01 	bl	800a6ea <lwip_htonl>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	dbe6      	blt.n	8010abe <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010af0:	69fb      	ldr	r3, [r7, #28]
 8010af2:	681a      	ldr	r2, [r3, #0]
 8010af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010af6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010af8:	69fb      	ldr	r3, [r7, #28]
 8010afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010afc:	601a      	str	r2, [r3, #0]
 8010afe:	e009      	b.n	8010b14 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010b00:	6a3b      	ldr	r3, [r7, #32]
 8010b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b04:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010b06:	6a3b      	ldr	r3, [r7, #32]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	623b      	str	r3, [r7, #32]
 8010b0c:	e002      	b.n	8010b14 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010b0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010b10:	f7fc fc45 	bl	800d39e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b18:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8010b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d012      	beq.n	8010b46 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b22:	68db      	ldr	r3, [r3, #12]
 8010b24:	685b      	ldr	r3, [r3, #4]
 8010b26:	4618      	mov	r0, r3
 8010b28:	f7f9 fddf 	bl	800a6ea <lwip_htonl>
 8010b2c:	4602      	mov	r2, r0
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b32:	1ad3      	subs	r3, r2, r3
 8010b34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b36:	8912      	ldrh	r2, [r2, #8]
 8010b38:	4413      	add	r3, r2
  while (seg != NULL &&
 8010b3a:	69ba      	ldr	r2, [r7, #24]
 8010b3c:	429a      	cmp	r2, r3
 8010b3e:	f4bf aed9 	bcs.w	80108f4 <tcp_output+0x160>
 8010b42:	e000      	b.n	8010b46 <tcp_output+0x3b2>
      break;
 8010b44:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d108      	bne.n	8010b60 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	2200      	movs	r2, #0
 8010b52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8010b56:	e004      	b.n	8010b62 <tcp_output+0x3ce>
    goto output_done;
 8010b58:	bf00      	nop
 8010b5a:	e002      	b.n	8010b62 <tcp_output+0x3ce>
    goto output_done;
 8010b5c:	bf00      	nop
 8010b5e:	e000      	b.n	8010b62 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010b60:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	8b5b      	ldrh	r3, [r3, #26]
 8010b66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010b6a:	b29a      	uxth	r2, r3
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010b70:	2300      	movs	r3, #0
}
 8010b72:	4618      	mov	r0, r3
 8010b74:	3728      	adds	r7, #40	@ 0x28
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bdb0      	pop	{r4, r5, r7, pc}
 8010b7a:	bf00      	nop

08010b7c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b082      	sub	sp, #8
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d106      	bne.n	8010b98 <tcp_output_segment_busy+0x1c>
 8010b8a:	4b09      	ldr	r3, [pc, #36]	@ (8010bb0 <tcp_output_segment_busy+0x34>)
 8010b8c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8010b90:	4908      	ldr	r1, [pc, #32]	@ (8010bb4 <tcp_output_segment_busy+0x38>)
 8010b92:	4809      	ldr	r0, [pc, #36]	@ (8010bb8 <tcp_output_segment_busy+0x3c>)
 8010b94:	f003 fd60 	bl	8014658 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	685b      	ldr	r3, [r3, #4]
 8010b9c:	7b9b      	ldrb	r3, [r3, #14]
 8010b9e:	2b01      	cmp	r3, #1
 8010ba0:	d001      	beq.n	8010ba6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010ba2:	2301      	movs	r3, #1
 8010ba4:	e000      	b.n	8010ba8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010ba6:	2300      	movs	r3, #0
}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3708      	adds	r7, #8
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}
 8010bb0:	08016d24 	.word	0x08016d24
 8010bb4:	080172c0 	.word	0x080172c0
 8010bb8:	08016d78 	.word	0x08016d78

08010bbc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010bbc:	b5b0      	push	{r4, r5, r7, lr}
 8010bbe:	b08c      	sub	sp, #48	@ 0x30
 8010bc0:	af04      	add	r7, sp, #16
 8010bc2:	60f8      	str	r0, [r7, #12]
 8010bc4:	60b9      	str	r1, [r7, #8]
 8010bc6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d106      	bne.n	8010bdc <tcp_output_segment+0x20>
 8010bce:	4b64      	ldr	r3, [pc, #400]	@ (8010d60 <tcp_output_segment+0x1a4>)
 8010bd0:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8010bd4:	4963      	ldr	r1, [pc, #396]	@ (8010d64 <tcp_output_segment+0x1a8>)
 8010bd6:	4864      	ldr	r0, [pc, #400]	@ (8010d68 <tcp_output_segment+0x1ac>)
 8010bd8:	f003 fd3e 	bl	8014658 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010bdc:	68bb      	ldr	r3, [r7, #8]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d106      	bne.n	8010bf0 <tcp_output_segment+0x34>
 8010be2:	4b5f      	ldr	r3, [pc, #380]	@ (8010d60 <tcp_output_segment+0x1a4>)
 8010be4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8010be8:	4960      	ldr	r1, [pc, #384]	@ (8010d6c <tcp_output_segment+0x1b0>)
 8010bea:	485f      	ldr	r0, [pc, #380]	@ (8010d68 <tcp_output_segment+0x1ac>)
 8010bec:	f003 fd34 	bl	8014658 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d106      	bne.n	8010c04 <tcp_output_segment+0x48>
 8010bf6:	4b5a      	ldr	r3, [pc, #360]	@ (8010d60 <tcp_output_segment+0x1a4>)
 8010bf8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8010bfc:	495c      	ldr	r1, [pc, #368]	@ (8010d70 <tcp_output_segment+0x1b4>)
 8010bfe:	485a      	ldr	r0, [pc, #360]	@ (8010d68 <tcp_output_segment+0x1ac>)
 8010c00:	f003 fd2a 	bl	8014658 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010c04:	68f8      	ldr	r0, [r7, #12]
 8010c06:	f7ff ffb9 	bl	8010b7c <tcp_output_segment_busy>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d001      	beq.n	8010c14 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010c10:	2300      	movs	r3, #0
 8010c12:	e0a1      	b.n	8010d58 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010c14:	68bb      	ldr	r3, [r7, #8]
 8010c16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	68dc      	ldr	r4, [r3, #12]
 8010c1c:	4610      	mov	r0, r2
 8010c1e:	f7f9 fd64 	bl	800a6ea <lwip_htonl>
 8010c22:	4603      	mov	r3, r0
 8010c24:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	68dc      	ldr	r4, [r3, #12]
 8010c2e:	4610      	mov	r0, r2
 8010c30:	f7f9 fd46 	bl	800a6c0 <lwip_htons>
 8010c34:	4603      	mov	r3, r0
 8010c36:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c3c:	68ba      	ldr	r2, [r7, #8]
 8010c3e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8010c40:	441a      	add	r2, r3
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	68db      	ldr	r3, [r3, #12]
 8010c4a:	3314      	adds	r3, #20
 8010c4c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	7a9b      	ldrb	r3, [r3, #10]
 8010c52:	f003 0301 	and.w	r3, r3, #1
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d015      	beq.n	8010c86 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010c5a:	68bb      	ldr	r3, [r7, #8]
 8010c5c:	3304      	adds	r3, #4
 8010c5e:	461a      	mov	r2, r3
 8010c60:	6879      	ldr	r1, [r7, #4]
 8010c62:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8010c66:	f7fc fe91 	bl	800d98c <tcp_eff_send_mss_netif>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010c6e:	8b7b      	ldrh	r3, [r7, #26]
 8010c70:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8010c74:	4618      	mov	r0, r3
 8010c76:	f7f9 fd38 	bl	800a6ea <lwip_htonl>
 8010c7a:	4602      	mov	r2, r0
 8010c7c:	69fb      	ldr	r3, [r7, #28]
 8010c7e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010c80:	69fb      	ldr	r3, [r7, #28]
 8010c82:	3304      	adds	r3, #4
 8010c84:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	da02      	bge.n	8010c96 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	2200      	movs	r2, #0
 8010c94:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8010c96:	68bb      	ldr	r3, [r7, #8]
 8010c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d10c      	bne.n	8010cb8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010c9e:	4b35      	ldr	r3, [pc, #212]	@ (8010d74 <tcp_output_segment+0x1b8>)
 8010ca0:	681a      	ldr	r2, [r3, #0]
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	68db      	ldr	r3, [r3, #12]
 8010caa:	685b      	ldr	r3, [r3, #4]
 8010cac:	4618      	mov	r0, r3
 8010cae:	f7f9 fd1c 	bl	800a6ea <lwip_htonl>
 8010cb2:	4602      	mov	r2, r0
 8010cb4:	68bb      	ldr	r3, [r7, #8]
 8010cb6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	68da      	ldr	r2, [r3, #12]
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	685b      	ldr	r3, [r3, #4]
 8010cc0:	685b      	ldr	r3, [r3, #4]
 8010cc2:	1ad3      	subs	r3, r2, r3
 8010cc4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	685b      	ldr	r3, [r3, #4]
 8010cca:	8959      	ldrh	r1, [r3, #10]
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	685b      	ldr	r3, [r3, #4]
 8010cd0:	8b3a      	ldrh	r2, [r7, #24]
 8010cd2:	1a8a      	subs	r2, r1, r2
 8010cd4:	b292      	uxth	r2, r2
 8010cd6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	685b      	ldr	r3, [r3, #4]
 8010cdc:	8919      	ldrh	r1, [r3, #8]
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	685b      	ldr	r3, [r3, #4]
 8010ce2:	8b3a      	ldrh	r2, [r7, #24]
 8010ce4:	1a8a      	subs	r2, r1, r2
 8010ce6:	b292      	uxth	r2, r2
 8010ce8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	685b      	ldr	r3, [r3, #4]
 8010cee:	68fa      	ldr	r2, [r7, #12]
 8010cf0:	68d2      	ldr	r2, [r2, #12]
 8010cf2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	68db      	ldr	r3, [r3, #12]
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	741a      	strb	r2, [r3, #16]
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	68da      	ldr	r2, [r3, #12]
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	7a9b      	ldrb	r3, [r3, #10]
 8010d08:	f003 0301 	and.w	r3, r3, #1
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d001      	beq.n	8010d14 <tcp_output_segment+0x158>
 8010d10:	2318      	movs	r3, #24
 8010d12:	e000      	b.n	8010d16 <tcp_output_segment+0x15a>
 8010d14:	2314      	movs	r3, #20
 8010d16:	4413      	add	r3, r2
 8010d18:	69fa      	ldr	r2, [r7, #28]
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d006      	beq.n	8010d2c <tcp_output_segment+0x170>
 8010d1e:	4b10      	ldr	r3, [pc, #64]	@ (8010d60 <tcp_output_segment+0x1a4>)
 8010d20:	f240 621c 	movw	r2, #1564	@ 0x61c
 8010d24:	4914      	ldr	r1, [pc, #80]	@ (8010d78 <tcp_output_segment+0x1bc>)
 8010d26:	4810      	ldr	r0, [pc, #64]	@ (8010d68 <tcp_output_segment+0x1ac>)
 8010d28:	f003 fc96 	bl	8014658 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	6858      	ldr	r0, [r3, #4]
 8010d30:	68b9      	ldr	r1, [r7, #8]
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	1d1c      	adds	r4, r3, #4
 8010d36:	68bb      	ldr	r3, [r7, #8]
 8010d38:	7add      	ldrb	r5, [r3, #11]
 8010d3a:	68bb      	ldr	r3, [r7, #8]
 8010d3c:	7a9b      	ldrb	r3, [r3, #10]
 8010d3e:	687a      	ldr	r2, [r7, #4]
 8010d40:	9202      	str	r2, [sp, #8]
 8010d42:	2206      	movs	r2, #6
 8010d44:	9201      	str	r2, [sp, #4]
 8010d46:	9300      	str	r3, [sp, #0]
 8010d48:	462b      	mov	r3, r5
 8010d4a:	4622      	mov	r2, r4
 8010d4c:	f002 fa64 	bl	8013218 <ip4_output_if>
 8010d50:	4603      	mov	r3, r0
 8010d52:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010d54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010d58:	4618      	mov	r0, r3
 8010d5a:	3720      	adds	r7, #32
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bdb0      	pop	{r4, r5, r7, pc}
 8010d60:	08016d24 	.word	0x08016d24
 8010d64:	080172e8 	.word	0x080172e8
 8010d68:	08016d78 	.word	0x08016d78
 8010d6c:	08017308 	.word	0x08017308
 8010d70:	08017328 	.word	0x08017328
 8010d74:	2000d3a8 	.word	0x2000d3a8
 8010d78:	0801734c 	.word	0x0801734c

08010d7c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010d7c:	b5b0      	push	{r4, r5, r7, lr}
 8010d7e:	b084      	sub	sp, #16
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d106      	bne.n	8010d98 <tcp_rexmit_rto_prepare+0x1c>
 8010d8a:	4b31      	ldr	r3, [pc, #196]	@ (8010e50 <tcp_rexmit_rto_prepare+0xd4>)
 8010d8c:	f240 6263 	movw	r2, #1635	@ 0x663
 8010d90:	4930      	ldr	r1, [pc, #192]	@ (8010e54 <tcp_rexmit_rto_prepare+0xd8>)
 8010d92:	4831      	ldr	r0, [pc, #196]	@ (8010e58 <tcp_rexmit_rto_prepare+0xdc>)
 8010d94:	f003 fc60 	bl	8014658 <iprintf>

  if (pcb->unacked == NULL) {
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d102      	bne.n	8010da6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010da0:	f06f 0305 	mvn.w	r3, #5
 8010da4:	e050      	b.n	8010e48 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010daa:	60fb      	str	r3, [r7, #12]
 8010dac:	e00b      	b.n	8010dc6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010dae:	68f8      	ldr	r0, [r7, #12]
 8010db0:	f7ff fee4 	bl	8010b7c <tcp_output_segment_busy>
 8010db4:	4603      	mov	r3, r0
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d002      	beq.n	8010dc0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010dba:	f06f 0305 	mvn.w	r3, #5
 8010dbe:	e043      	b.n	8010e48 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	60fb      	str	r3, [r7, #12]
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d1ef      	bne.n	8010dae <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010dce:	68f8      	ldr	r0, [r7, #12]
 8010dd0:	f7ff fed4 	bl	8010b7c <tcp_output_segment_busy>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d002      	beq.n	8010de0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010dda:	f06f 0305 	mvn.w	r3, #5
 8010dde:	e033      	b.n	8010e48 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	2200      	movs	r2, #0
 8010df4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	8b5b      	ldrh	r3, [r3, #26]
 8010dfa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8010dfe:	b29a      	uxth	r2, r3
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	68db      	ldr	r3, [r3, #12]
 8010e08:	685b      	ldr	r3, [r3, #4]
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	f7f9 fc6d 	bl	800a6ea <lwip_htonl>
 8010e10:	4604      	mov	r4, r0
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	891b      	ldrh	r3, [r3, #8]
 8010e16:	461d      	mov	r5, r3
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	68db      	ldr	r3, [r3, #12]
 8010e1c:	899b      	ldrh	r3, [r3, #12]
 8010e1e:	b29b      	uxth	r3, r3
 8010e20:	4618      	mov	r0, r3
 8010e22:	f7f9 fc4d 	bl	800a6c0 <lwip_htons>
 8010e26:	4603      	mov	r3, r0
 8010e28:	b2db      	uxtb	r3, r3
 8010e2a:	f003 0303 	and.w	r3, r3, #3
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d001      	beq.n	8010e36 <tcp_rexmit_rto_prepare+0xba>
 8010e32:	2301      	movs	r3, #1
 8010e34:	e000      	b.n	8010e38 <tcp_rexmit_rto_prepare+0xbc>
 8010e36:	2300      	movs	r3, #0
 8010e38:	442b      	add	r3, r5
 8010e3a:	18e2      	adds	r2, r4, r3
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	2200      	movs	r2, #0
 8010e44:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8010e46:	2300      	movs	r3, #0
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	3710      	adds	r7, #16
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8010e50:	08016d24 	.word	0x08016d24
 8010e54:	08017360 	.word	0x08017360
 8010e58:	08016d78 	.word	0x08016d78

08010e5c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b082      	sub	sp, #8
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d106      	bne.n	8010e78 <tcp_rexmit_rto_commit+0x1c>
 8010e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8010ea0 <tcp_rexmit_rto_commit+0x44>)
 8010e6c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8010e70:	490c      	ldr	r1, [pc, #48]	@ (8010ea4 <tcp_rexmit_rto_commit+0x48>)
 8010e72:	480d      	ldr	r0, [pc, #52]	@ (8010ea8 <tcp_rexmit_rto_commit+0x4c>)
 8010e74:	f003 fbf0 	bl	8014658 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010e7e:	2bff      	cmp	r3, #255	@ 0xff
 8010e80:	d007      	beq.n	8010e92 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010e88:	3301      	adds	r3, #1
 8010e8a:	b2da      	uxtb	r2, r3
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010e92:	6878      	ldr	r0, [r7, #4]
 8010e94:	f7ff fc7e 	bl	8010794 <tcp_output>
}
 8010e98:	bf00      	nop
 8010e9a:	3708      	adds	r7, #8
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}
 8010ea0:	08016d24 	.word	0x08016d24
 8010ea4:	08017384 	.word	0x08017384
 8010ea8:	08016d78 	.word	0x08016d78

08010eac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b082      	sub	sp, #8
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d106      	bne.n	8010ec8 <tcp_rexmit_rto+0x1c>
 8010eba:	4b0a      	ldr	r3, [pc, #40]	@ (8010ee4 <tcp_rexmit_rto+0x38>)
 8010ebc:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8010ec0:	4909      	ldr	r1, [pc, #36]	@ (8010ee8 <tcp_rexmit_rto+0x3c>)
 8010ec2:	480a      	ldr	r0, [pc, #40]	@ (8010eec <tcp_rexmit_rto+0x40>)
 8010ec4:	f003 fbc8 	bl	8014658 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f7ff ff57 	bl	8010d7c <tcp_rexmit_rto_prepare>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d102      	bne.n	8010eda <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010ed4:	6878      	ldr	r0, [r7, #4]
 8010ed6:	f7ff ffc1 	bl	8010e5c <tcp_rexmit_rto_commit>
  }
}
 8010eda:	bf00      	nop
 8010edc:	3708      	adds	r7, #8
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd80      	pop	{r7, pc}
 8010ee2:	bf00      	nop
 8010ee4:	08016d24 	.word	0x08016d24
 8010ee8:	080173a8 	.word	0x080173a8
 8010eec:	08016d78 	.word	0x08016d78

08010ef0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010ef0:	b590      	push	{r4, r7, lr}
 8010ef2:	b085      	sub	sp, #20
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d106      	bne.n	8010f0c <tcp_rexmit+0x1c>
 8010efe:	4b2f      	ldr	r3, [pc, #188]	@ (8010fbc <tcp_rexmit+0xcc>)
 8010f00:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8010f04:	492e      	ldr	r1, [pc, #184]	@ (8010fc0 <tcp_rexmit+0xd0>)
 8010f06:	482f      	ldr	r0, [pc, #188]	@ (8010fc4 <tcp_rexmit+0xd4>)
 8010f08:	f003 fba6 	bl	8014658 <iprintf>

  if (pcb->unacked == NULL) {
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d102      	bne.n	8010f1a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010f14:	f06f 0305 	mvn.w	r3, #5
 8010f18:	e04c      	b.n	8010fb4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010f1e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010f20:	68b8      	ldr	r0, [r7, #8]
 8010f22:	f7ff fe2b 	bl	8010b7c <tcp_output_segment_busy>
 8010f26:	4603      	mov	r3, r0
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d002      	beq.n	8010f32 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010f2c:	f06f 0305 	mvn.w	r3, #5
 8010f30:	e040      	b.n	8010fb4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	681a      	ldr	r2, [r3, #0]
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	336c      	adds	r3, #108	@ 0x6c
 8010f3e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010f40:	e002      	b.n	8010f48 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d011      	beq.n	8010f74 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	68db      	ldr	r3, [r3, #12]
 8010f56:	685b      	ldr	r3, [r3, #4]
 8010f58:	4618      	mov	r0, r3
 8010f5a:	f7f9 fbc6 	bl	800a6ea <lwip_htonl>
 8010f5e:	4604      	mov	r4, r0
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	68db      	ldr	r3, [r3, #12]
 8010f64:	685b      	ldr	r3, [r3, #4]
 8010f66:	4618      	mov	r0, r3
 8010f68:	f7f9 fbbf 	bl	800a6ea <lwip_htonl>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	dbe6      	blt.n	8010f42 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	681a      	ldr	r2, [r3, #0]
 8010f78:	68bb      	ldr	r3, [r7, #8]
 8010f7a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	68ba      	ldr	r2, [r7, #8]
 8010f80:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d103      	bne.n	8010f92 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010f98:	2bff      	cmp	r3, #255	@ 0xff
 8010f9a:	d007      	beq.n	8010fac <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	b2da      	uxtb	r2, r3
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2200      	movs	r2, #0
 8010fb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010fb2:	2300      	movs	r3, #0
}
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	3714      	adds	r7, #20
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd90      	pop	{r4, r7, pc}
 8010fbc:	08016d24 	.word	0x08016d24
 8010fc0:	080173c4 	.word	0x080173c4
 8010fc4:	08016d78 	.word	0x08016d78

08010fc8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b082      	sub	sp, #8
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d106      	bne.n	8010fe4 <tcp_rexmit_fast+0x1c>
 8010fd6:	4b2a      	ldr	r3, [pc, #168]	@ (8011080 <tcp_rexmit_fast+0xb8>)
 8010fd8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8010fdc:	4929      	ldr	r1, [pc, #164]	@ (8011084 <tcp_rexmit_fast+0xbc>)
 8010fde:	482a      	ldr	r0, [pc, #168]	@ (8011088 <tcp_rexmit_fast+0xc0>)
 8010fe0:	f003 fb3a 	bl	8014658 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d045      	beq.n	8011078 <tcp_rexmit_fast+0xb0>
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	8b5b      	ldrh	r3, [r3, #26]
 8010ff0:	f003 0304 	and.w	r3, r3, #4
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d13f      	bne.n	8011078 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010ff8:	6878      	ldr	r0, [r7, #4]
 8010ffa:	f7ff ff79 	bl	8010ef0 <tcp_rexmit>
 8010ffe:	4603      	mov	r3, r0
 8011000:	2b00      	cmp	r3, #0
 8011002:	d139      	bne.n	8011078 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011010:	4293      	cmp	r3, r2
 8011012:	bf28      	it	cs
 8011014:	4613      	movcs	r3, r2
 8011016:	b29b      	uxth	r3, r3
 8011018:	2b00      	cmp	r3, #0
 801101a:	da00      	bge.n	801101e <tcp_rexmit_fast+0x56>
 801101c:	3301      	adds	r3, #1
 801101e:	105b      	asrs	r3, r3, #1
 8011020:	b29a      	uxth	r2, r3
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801102e:	461a      	mov	r2, r3
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011034:	005b      	lsls	r3, r3, #1
 8011036:	429a      	cmp	r2, r3
 8011038:	d206      	bcs.n	8011048 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801103e:	005b      	lsls	r3, r3, #1
 8011040:	b29a      	uxth	r2, r3
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011052:	4619      	mov	r1, r3
 8011054:	0049      	lsls	r1, r1, #1
 8011056:	440b      	add	r3, r1
 8011058:	b29b      	uxth	r3, r3
 801105a:	4413      	add	r3, r2
 801105c:	b29a      	uxth	r2, r3
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	8b5b      	ldrh	r3, [r3, #26]
 8011068:	f043 0304 	orr.w	r3, r3, #4
 801106c:	b29a      	uxth	r2, r3
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	2200      	movs	r2, #0
 8011076:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8011078:	bf00      	nop
 801107a:	3708      	adds	r7, #8
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}
 8011080:	08016d24 	.word	0x08016d24
 8011084:	080173dc 	.word	0x080173dc
 8011088:	08016d78 	.word	0x08016d78

0801108c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b086      	sub	sp, #24
 8011090:	af00      	add	r7, sp, #0
 8011092:	60f8      	str	r0, [r7, #12]
 8011094:	607b      	str	r3, [r7, #4]
 8011096:	460b      	mov	r3, r1
 8011098:	817b      	strh	r3, [r7, #10]
 801109a:	4613      	mov	r3, r2
 801109c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801109e:	897a      	ldrh	r2, [r7, #10]
 80110a0:	893b      	ldrh	r3, [r7, #8]
 80110a2:	4413      	add	r3, r2
 80110a4:	b29b      	uxth	r3, r3
 80110a6:	3314      	adds	r3, #20
 80110a8:	b29b      	uxth	r3, r3
 80110aa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80110ae:	4619      	mov	r1, r3
 80110b0:	2022      	movs	r0, #34	@ 0x22
 80110b2:	f7fa fc0f 	bl	800b8d4 <pbuf_alloc>
 80110b6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80110b8:	697b      	ldr	r3, [r7, #20]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d04d      	beq.n	801115a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80110be:	897b      	ldrh	r3, [r7, #10]
 80110c0:	3313      	adds	r3, #19
 80110c2:	697a      	ldr	r2, [r7, #20]
 80110c4:	8952      	ldrh	r2, [r2, #10]
 80110c6:	4293      	cmp	r3, r2
 80110c8:	db06      	blt.n	80110d8 <tcp_output_alloc_header_common+0x4c>
 80110ca:	4b26      	ldr	r3, [pc, #152]	@ (8011164 <tcp_output_alloc_header_common+0xd8>)
 80110cc:	f240 7223 	movw	r2, #1827	@ 0x723
 80110d0:	4925      	ldr	r1, [pc, #148]	@ (8011168 <tcp_output_alloc_header_common+0xdc>)
 80110d2:	4826      	ldr	r0, [pc, #152]	@ (801116c <tcp_output_alloc_header_common+0xe0>)
 80110d4:	f003 fac0 	bl	8014658 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80110d8:	697b      	ldr	r3, [r7, #20]
 80110da:	685b      	ldr	r3, [r3, #4]
 80110dc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80110de:	8c3b      	ldrh	r3, [r7, #32]
 80110e0:	4618      	mov	r0, r3
 80110e2:	f7f9 faed 	bl	800a6c0 <lwip_htons>
 80110e6:	4603      	mov	r3, r0
 80110e8:	461a      	mov	r2, r3
 80110ea:	693b      	ldr	r3, [r7, #16]
 80110ec:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80110ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80110f0:	4618      	mov	r0, r3
 80110f2:	f7f9 fae5 	bl	800a6c0 <lwip_htons>
 80110f6:	4603      	mov	r3, r0
 80110f8:	461a      	mov	r2, r3
 80110fa:	693b      	ldr	r3, [r7, #16]
 80110fc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80110fe:	693b      	ldr	r3, [r7, #16]
 8011100:	687a      	ldr	r2, [r7, #4]
 8011102:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011104:	68f8      	ldr	r0, [r7, #12]
 8011106:	f7f9 faf0 	bl	800a6ea <lwip_htonl>
 801110a:	4602      	mov	r2, r0
 801110c:	693b      	ldr	r3, [r7, #16]
 801110e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011110:	897b      	ldrh	r3, [r7, #10]
 8011112:	089b      	lsrs	r3, r3, #2
 8011114:	b29b      	uxth	r3, r3
 8011116:	3305      	adds	r3, #5
 8011118:	b29b      	uxth	r3, r3
 801111a:	031b      	lsls	r3, r3, #12
 801111c:	b29a      	uxth	r2, r3
 801111e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011122:	b29b      	uxth	r3, r3
 8011124:	4313      	orrs	r3, r2
 8011126:	b29b      	uxth	r3, r3
 8011128:	4618      	mov	r0, r3
 801112a:	f7f9 fac9 	bl	800a6c0 <lwip_htons>
 801112e:	4603      	mov	r3, r0
 8011130:	461a      	mov	r2, r3
 8011132:	693b      	ldr	r3, [r7, #16]
 8011134:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011136:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011138:	4618      	mov	r0, r3
 801113a:	f7f9 fac1 	bl	800a6c0 <lwip_htons>
 801113e:	4603      	mov	r3, r0
 8011140:	461a      	mov	r2, r3
 8011142:	693b      	ldr	r3, [r7, #16]
 8011144:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011146:	693b      	ldr	r3, [r7, #16]
 8011148:	2200      	movs	r2, #0
 801114a:	741a      	strb	r2, [r3, #16]
 801114c:	2200      	movs	r2, #0
 801114e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011150:	693b      	ldr	r3, [r7, #16]
 8011152:	2200      	movs	r2, #0
 8011154:	749a      	strb	r2, [r3, #18]
 8011156:	2200      	movs	r2, #0
 8011158:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801115a:	697b      	ldr	r3, [r7, #20]
}
 801115c:	4618      	mov	r0, r3
 801115e:	3718      	adds	r7, #24
 8011160:	46bd      	mov	sp, r7
 8011162:	bd80      	pop	{r7, pc}
 8011164:	08016d24 	.word	0x08016d24
 8011168:	080173fc 	.word	0x080173fc
 801116c:	08016d78 	.word	0x08016d78

08011170 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011170:	b5b0      	push	{r4, r5, r7, lr}
 8011172:	b08a      	sub	sp, #40	@ 0x28
 8011174:	af04      	add	r7, sp, #16
 8011176:	60f8      	str	r0, [r7, #12]
 8011178:	607b      	str	r3, [r7, #4]
 801117a:	460b      	mov	r3, r1
 801117c:	817b      	strh	r3, [r7, #10]
 801117e:	4613      	mov	r3, r2
 8011180:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d106      	bne.n	8011196 <tcp_output_alloc_header+0x26>
 8011188:	4b15      	ldr	r3, [pc, #84]	@ (80111e0 <tcp_output_alloc_header+0x70>)
 801118a:	f240 7242 	movw	r2, #1858	@ 0x742
 801118e:	4915      	ldr	r1, [pc, #84]	@ (80111e4 <tcp_output_alloc_header+0x74>)
 8011190:	4815      	ldr	r0, [pc, #84]	@ (80111e8 <tcp_output_alloc_header+0x78>)
 8011192:	f003 fa61 	bl	8014658 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	8adb      	ldrh	r3, [r3, #22]
 801119e:	68fa      	ldr	r2, [r7, #12]
 80111a0:	8b12      	ldrh	r2, [r2, #24]
 80111a2:	68f9      	ldr	r1, [r7, #12]
 80111a4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80111a6:	893d      	ldrh	r5, [r7, #8]
 80111a8:	897c      	ldrh	r4, [r7, #10]
 80111aa:	9103      	str	r1, [sp, #12]
 80111ac:	2110      	movs	r1, #16
 80111ae:	9102      	str	r1, [sp, #8]
 80111b0:	9201      	str	r2, [sp, #4]
 80111b2:	9300      	str	r3, [sp, #0]
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	462a      	mov	r2, r5
 80111b8:	4621      	mov	r1, r4
 80111ba:	f7ff ff67 	bl	801108c <tcp_output_alloc_header_common>
 80111be:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80111c0:	697b      	ldr	r3, [r7, #20]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d006      	beq.n	80111d4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111ca:	68fa      	ldr	r2, [r7, #12]
 80111cc:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80111ce:	441a      	add	r2, r3
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80111d4:	697b      	ldr	r3, [r7, #20]
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	3718      	adds	r7, #24
 80111da:	46bd      	mov	sp, r7
 80111dc:	bdb0      	pop	{r4, r5, r7, pc}
 80111de:	bf00      	nop
 80111e0:	08016d24 	.word	0x08016d24
 80111e4:	0801742c 	.word	0x0801742c
 80111e8:	08016d78 	.word	0x08016d78

080111ec <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b088      	sub	sp, #32
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	60f8      	str	r0, [r7, #12]
 80111f4:	60b9      	str	r1, [r7, #8]
 80111f6:	4611      	mov	r1, r2
 80111f8:	461a      	mov	r2, r3
 80111fa:	460b      	mov	r3, r1
 80111fc:	71fb      	strb	r3, [r7, #7]
 80111fe:	4613      	mov	r3, r2
 8011200:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011202:	2300      	movs	r3, #0
 8011204:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011206:	68bb      	ldr	r3, [r7, #8]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d106      	bne.n	801121a <tcp_output_fill_options+0x2e>
 801120c:	4b12      	ldr	r3, [pc, #72]	@ (8011258 <tcp_output_fill_options+0x6c>)
 801120e:	f240 7256 	movw	r2, #1878	@ 0x756
 8011212:	4912      	ldr	r1, [pc, #72]	@ (801125c <tcp_output_fill_options+0x70>)
 8011214:	4812      	ldr	r0, [pc, #72]	@ (8011260 <tcp_output_fill_options+0x74>)
 8011216:	f003 fa1f 	bl	8014658 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	685b      	ldr	r3, [r3, #4]
 801121e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011220:	69bb      	ldr	r3, [r7, #24]
 8011222:	3314      	adds	r3, #20
 8011224:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011226:	8bfb      	ldrh	r3, [r7, #30]
 8011228:	009b      	lsls	r3, r3, #2
 801122a:	461a      	mov	r2, r3
 801122c:	79fb      	ldrb	r3, [r7, #7]
 801122e:	009b      	lsls	r3, r3, #2
 8011230:	f003 0304 	and.w	r3, r3, #4
 8011234:	4413      	add	r3, r2
 8011236:	3314      	adds	r3, #20
 8011238:	69ba      	ldr	r2, [r7, #24]
 801123a:	4413      	add	r3, r2
 801123c:	697a      	ldr	r2, [r7, #20]
 801123e:	429a      	cmp	r2, r3
 8011240:	d006      	beq.n	8011250 <tcp_output_fill_options+0x64>
 8011242:	4b05      	ldr	r3, [pc, #20]	@ (8011258 <tcp_output_fill_options+0x6c>)
 8011244:	f240 7275 	movw	r2, #1909	@ 0x775
 8011248:	4906      	ldr	r1, [pc, #24]	@ (8011264 <tcp_output_fill_options+0x78>)
 801124a:	4805      	ldr	r0, [pc, #20]	@ (8011260 <tcp_output_fill_options+0x74>)
 801124c:	f003 fa04 	bl	8014658 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011250:	bf00      	nop
 8011252:	3720      	adds	r7, #32
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}
 8011258:	08016d24 	.word	0x08016d24
 801125c:	08017454 	.word	0x08017454
 8011260:	08016d78 	.word	0x08016d78
 8011264:	0801734c 	.word	0x0801734c

08011268 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b08a      	sub	sp, #40	@ 0x28
 801126c:	af04      	add	r7, sp, #16
 801126e:	60f8      	str	r0, [r7, #12]
 8011270:	60b9      	str	r1, [r7, #8]
 8011272:	607a      	str	r2, [r7, #4]
 8011274:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011276:	68bb      	ldr	r3, [r7, #8]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d106      	bne.n	801128a <tcp_output_control_segment+0x22>
 801127c:	4b1c      	ldr	r3, [pc, #112]	@ (80112f0 <tcp_output_control_segment+0x88>)
 801127e:	f240 7287 	movw	r2, #1927	@ 0x787
 8011282:	491c      	ldr	r1, [pc, #112]	@ (80112f4 <tcp_output_control_segment+0x8c>)
 8011284:	481c      	ldr	r0, [pc, #112]	@ (80112f8 <tcp_output_control_segment+0x90>)
 8011286:	f003 f9e7 	bl	8014658 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801128a:	683a      	ldr	r2, [r7, #0]
 801128c:	6879      	ldr	r1, [r7, #4]
 801128e:	68f8      	ldr	r0, [r7, #12]
 8011290:	f7fe ff42 	bl	8010118 <tcp_route>
 8011294:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011296:	693b      	ldr	r3, [r7, #16]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d102      	bne.n	80112a2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801129c:	23fc      	movs	r3, #252	@ 0xfc
 801129e:	75fb      	strb	r3, [r7, #23]
 80112a0:	e01c      	b.n	80112dc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d006      	beq.n	80112b6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	7adb      	ldrb	r3, [r3, #11]
 80112ac:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	7a9b      	ldrb	r3, [r3, #10]
 80112b2:	757b      	strb	r3, [r7, #21]
 80112b4:	e003      	b.n	80112be <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80112b6:	23ff      	movs	r3, #255	@ 0xff
 80112b8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80112ba:	2300      	movs	r3, #0
 80112bc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80112be:	7dba      	ldrb	r2, [r7, #22]
 80112c0:	693b      	ldr	r3, [r7, #16]
 80112c2:	9302      	str	r3, [sp, #8]
 80112c4:	2306      	movs	r3, #6
 80112c6:	9301      	str	r3, [sp, #4]
 80112c8:	7d7b      	ldrb	r3, [r7, #21]
 80112ca:	9300      	str	r3, [sp, #0]
 80112cc:	4613      	mov	r3, r2
 80112ce:	683a      	ldr	r2, [r7, #0]
 80112d0:	6879      	ldr	r1, [r7, #4]
 80112d2:	68b8      	ldr	r0, [r7, #8]
 80112d4:	f001 ffa0 	bl	8013218 <ip4_output_if>
 80112d8:	4603      	mov	r3, r0
 80112da:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80112dc:	68b8      	ldr	r0, [r7, #8]
 80112de:	f7fa fddd 	bl	800be9c <pbuf_free>
  return err;
 80112e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80112e6:	4618      	mov	r0, r3
 80112e8:	3718      	adds	r7, #24
 80112ea:	46bd      	mov	sp, r7
 80112ec:	bd80      	pop	{r7, pc}
 80112ee:	bf00      	nop
 80112f0:	08016d24 	.word	0x08016d24
 80112f4:	0801747c 	.word	0x0801747c
 80112f8:	08016d78 	.word	0x08016d78

080112fc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80112fc:	b590      	push	{r4, r7, lr}
 80112fe:	b08b      	sub	sp, #44	@ 0x2c
 8011300:	af04      	add	r7, sp, #16
 8011302:	60f8      	str	r0, [r7, #12]
 8011304:	60b9      	str	r1, [r7, #8]
 8011306:	607a      	str	r2, [r7, #4]
 8011308:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d106      	bne.n	801131e <tcp_rst+0x22>
 8011310:	4b1f      	ldr	r3, [pc, #124]	@ (8011390 <tcp_rst+0x94>)
 8011312:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8011316:	491f      	ldr	r1, [pc, #124]	@ (8011394 <tcp_rst+0x98>)
 8011318:	481f      	ldr	r0, [pc, #124]	@ (8011398 <tcp_rst+0x9c>)
 801131a:	f003 f99d 	bl	8014658 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801131e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011320:	2b00      	cmp	r3, #0
 8011322:	d106      	bne.n	8011332 <tcp_rst+0x36>
 8011324:	4b1a      	ldr	r3, [pc, #104]	@ (8011390 <tcp_rst+0x94>)
 8011326:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801132a:	491c      	ldr	r1, [pc, #112]	@ (801139c <tcp_rst+0xa0>)
 801132c:	481a      	ldr	r0, [pc, #104]	@ (8011398 <tcp_rst+0x9c>)
 801132e:	f003 f993 	bl	8014658 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011332:	2300      	movs	r3, #0
 8011334:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011336:	f246 0308 	movw	r3, #24584	@ 0x6008
 801133a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801133c:	7dfb      	ldrb	r3, [r7, #23]
 801133e:	b29c      	uxth	r4, r3
 8011340:	68b8      	ldr	r0, [r7, #8]
 8011342:	f7f9 f9d2 	bl	800a6ea <lwip_htonl>
 8011346:	4602      	mov	r2, r0
 8011348:	8abb      	ldrh	r3, [r7, #20]
 801134a:	9303      	str	r3, [sp, #12]
 801134c:	2314      	movs	r3, #20
 801134e:	9302      	str	r3, [sp, #8]
 8011350:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8011352:	9301      	str	r3, [sp, #4]
 8011354:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011356:	9300      	str	r3, [sp, #0]
 8011358:	4613      	mov	r3, r2
 801135a:	2200      	movs	r2, #0
 801135c:	4621      	mov	r1, r4
 801135e:	6878      	ldr	r0, [r7, #4]
 8011360:	f7ff fe94 	bl	801108c <tcp_output_alloc_header_common>
 8011364:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011366:	693b      	ldr	r3, [r7, #16]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d00c      	beq.n	8011386 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801136c:	7dfb      	ldrb	r3, [r7, #23]
 801136e:	2200      	movs	r2, #0
 8011370:	6939      	ldr	r1, [r7, #16]
 8011372:	68f8      	ldr	r0, [r7, #12]
 8011374:	f7ff ff3a 	bl	80111ec <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801137a:	683a      	ldr	r2, [r7, #0]
 801137c:	6939      	ldr	r1, [r7, #16]
 801137e:	68f8      	ldr	r0, [r7, #12]
 8011380:	f7ff ff72 	bl	8011268 <tcp_output_control_segment>
 8011384:	e000      	b.n	8011388 <tcp_rst+0x8c>
    return;
 8011386:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011388:	371c      	adds	r7, #28
 801138a:	46bd      	mov	sp, r7
 801138c:	bd90      	pop	{r4, r7, pc}
 801138e:	bf00      	nop
 8011390:	08016d24 	.word	0x08016d24
 8011394:	080174a8 	.word	0x080174a8
 8011398:	08016d78 	.word	0x08016d78
 801139c:	080174c4 	.word	0x080174c4

080113a0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80113a0:	b590      	push	{r4, r7, lr}
 80113a2:	b087      	sub	sp, #28
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80113a8:	2300      	movs	r3, #0
 80113aa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80113ac:	2300      	movs	r3, #0
 80113ae:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d106      	bne.n	80113c4 <tcp_send_empty_ack+0x24>
 80113b6:	4b28      	ldr	r3, [pc, #160]	@ (8011458 <tcp_send_empty_ack+0xb8>)
 80113b8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80113bc:	4927      	ldr	r1, [pc, #156]	@ (801145c <tcp_send_empty_ack+0xbc>)
 80113be:	4828      	ldr	r0, [pc, #160]	@ (8011460 <tcp_send_empty_ack+0xc0>)
 80113c0:	f003 f94a 	bl	8014658 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80113c4:	7dfb      	ldrb	r3, [r7, #23]
 80113c6:	009b      	lsls	r3, r3, #2
 80113c8:	b2db      	uxtb	r3, r3
 80113ca:	f003 0304 	and.w	r3, r3, #4
 80113ce:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80113d0:	7d7b      	ldrb	r3, [r7, #21]
 80113d2:	b29c      	uxth	r4, r3
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80113d8:	4618      	mov	r0, r3
 80113da:	f7f9 f986 	bl	800a6ea <lwip_htonl>
 80113de:	4603      	mov	r3, r0
 80113e0:	2200      	movs	r2, #0
 80113e2:	4621      	mov	r1, r4
 80113e4:	6878      	ldr	r0, [r7, #4]
 80113e6:	f7ff fec3 	bl	8011170 <tcp_output_alloc_header>
 80113ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80113ec:	693b      	ldr	r3, [r7, #16]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d109      	bne.n	8011406 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	8b5b      	ldrh	r3, [r3, #26]
 80113f6:	f043 0303 	orr.w	r3, r3, #3
 80113fa:	b29a      	uxth	r2, r3
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011400:	f06f 0301 	mvn.w	r3, #1
 8011404:	e023      	b.n	801144e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011406:	7dbb      	ldrb	r3, [r7, #22]
 8011408:	7dfa      	ldrb	r2, [r7, #23]
 801140a:	6939      	ldr	r1, [r7, #16]
 801140c:	6878      	ldr	r0, [r7, #4]
 801140e:	f7ff feed 	bl	80111ec <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011412:	687a      	ldr	r2, [r7, #4]
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	3304      	adds	r3, #4
 8011418:	6939      	ldr	r1, [r7, #16]
 801141a:	6878      	ldr	r0, [r7, #4]
 801141c:	f7ff ff24 	bl	8011268 <tcp_output_control_segment>
 8011420:	4603      	mov	r3, r0
 8011422:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d007      	beq.n	801143c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	8b5b      	ldrh	r3, [r3, #26]
 8011430:	f043 0303 	orr.w	r3, r3, #3
 8011434:	b29a      	uxth	r2, r3
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	835a      	strh	r2, [r3, #26]
 801143a:	e006      	b.n	801144a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	8b5b      	ldrh	r3, [r3, #26]
 8011440:	f023 0303 	bic.w	r3, r3, #3
 8011444:	b29a      	uxth	r2, r3
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801144a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801144e:	4618      	mov	r0, r3
 8011450:	371c      	adds	r7, #28
 8011452:	46bd      	mov	sp, r7
 8011454:	bd90      	pop	{r4, r7, pc}
 8011456:	bf00      	nop
 8011458:	08016d24 	.word	0x08016d24
 801145c:	080174e0 	.word	0x080174e0
 8011460:	08016d78 	.word	0x08016d78

08011464 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011464:	b590      	push	{r4, r7, lr}
 8011466:	b087      	sub	sp, #28
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801146c:	2300      	movs	r3, #0
 801146e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d106      	bne.n	8011484 <tcp_keepalive+0x20>
 8011476:	4b18      	ldr	r3, [pc, #96]	@ (80114d8 <tcp_keepalive+0x74>)
 8011478:	f640 0224 	movw	r2, #2084	@ 0x824
 801147c:	4917      	ldr	r1, [pc, #92]	@ (80114dc <tcp_keepalive+0x78>)
 801147e:	4818      	ldr	r0, [pc, #96]	@ (80114e0 <tcp_keepalive+0x7c>)
 8011480:	f003 f8ea 	bl	8014658 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011484:	7dfb      	ldrb	r3, [r7, #23]
 8011486:	b29c      	uxth	r4, r3
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801148c:	3b01      	subs	r3, #1
 801148e:	4618      	mov	r0, r3
 8011490:	f7f9 f92b 	bl	800a6ea <lwip_htonl>
 8011494:	4603      	mov	r3, r0
 8011496:	2200      	movs	r2, #0
 8011498:	4621      	mov	r1, r4
 801149a:	6878      	ldr	r0, [r7, #4]
 801149c:	f7ff fe68 	bl	8011170 <tcp_output_alloc_header>
 80114a0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80114a2:	693b      	ldr	r3, [r7, #16]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d102      	bne.n	80114ae <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80114a8:	f04f 33ff 	mov.w	r3, #4294967295
 80114ac:	e010      	b.n	80114d0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80114ae:	7dfb      	ldrb	r3, [r7, #23]
 80114b0:	2200      	movs	r2, #0
 80114b2:	6939      	ldr	r1, [r7, #16]
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	f7ff fe99 	bl	80111ec <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80114ba:	687a      	ldr	r2, [r7, #4]
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	3304      	adds	r3, #4
 80114c0:	6939      	ldr	r1, [r7, #16]
 80114c2:	6878      	ldr	r0, [r7, #4]
 80114c4:	f7ff fed0 	bl	8011268 <tcp_output_control_segment>
 80114c8:	4603      	mov	r3, r0
 80114ca:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80114cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80114d0:	4618      	mov	r0, r3
 80114d2:	371c      	adds	r7, #28
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd90      	pop	{r4, r7, pc}
 80114d8:	08016d24 	.word	0x08016d24
 80114dc:	08017500 	.word	0x08017500
 80114e0:	08016d78 	.word	0x08016d78

080114e4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80114e4:	b590      	push	{r4, r7, lr}
 80114e6:	b08b      	sub	sp, #44	@ 0x2c
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80114ec:	2300      	movs	r3, #0
 80114ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d106      	bne.n	8011506 <tcp_zero_window_probe+0x22>
 80114f8:	4b4c      	ldr	r3, [pc, #304]	@ (801162c <tcp_zero_window_probe+0x148>)
 80114fa:	f640 024f 	movw	r2, #2127	@ 0x84f
 80114fe:	494c      	ldr	r1, [pc, #304]	@ (8011630 <tcp_zero_window_probe+0x14c>)
 8011500:	484c      	ldr	r0, [pc, #304]	@ (8011634 <tcp_zero_window_probe+0x150>)
 8011502:	f003 f8a9 	bl	8014658 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801150a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801150c:	6a3b      	ldr	r3, [r7, #32]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d101      	bne.n	8011516 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011512:	2300      	movs	r3, #0
 8011514:	e086      	b.n	8011624 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801151c:	2bff      	cmp	r3, #255	@ 0xff
 801151e:	d007      	beq.n	8011530 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011526:	3301      	adds	r3, #1
 8011528:	b2da      	uxtb	r2, r3
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011530:	6a3b      	ldr	r3, [r7, #32]
 8011532:	68db      	ldr	r3, [r3, #12]
 8011534:	899b      	ldrh	r3, [r3, #12]
 8011536:	b29b      	uxth	r3, r3
 8011538:	4618      	mov	r0, r3
 801153a:	f7f9 f8c1 	bl	800a6c0 <lwip_htons>
 801153e:	4603      	mov	r3, r0
 8011540:	b2db      	uxtb	r3, r3
 8011542:	f003 0301 	and.w	r3, r3, #1
 8011546:	2b00      	cmp	r3, #0
 8011548:	d005      	beq.n	8011556 <tcp_zero_window_probe+0x72>
 801154a:	6a3b      	ldr	r3, [r7, #32]
 801154c:	891b      	ldrh	r3, [r3, #8]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d101      	bne.n	8011556 <tcp_zero_window_probe+0x72>
 8011552:	2301      	movs	r3, #1
 8011554:	e000      	b.n	8011558 <tcp_zero_window_probe+0x74>
 8011556:	2300      	movs	r3, #0
 8011558:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801155a:	7ffb      	ldrb	r3, [r7, #31]
 801155c:	2b00      	cmp	r3, #0
 801155e:	bf0c      	ite	eq
 8011560:	2301      	moveq	r3, #1
 8011562:	2300      	movne	r3, #0
 8011564:	b2db      	uxtb	r3, r3
 8011566:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011568:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801156c:	b299      	uxth	r1, r3
 801156e:	6a3b      	ldr	r3, [r7, #32]
 8011570:	68db      	ldr	r3, [r3, #12]
 8011572:	685b      	ldr	r3, [r3, #4]
 8011574:	8bba      	ldrh	r2, [r7, #28]
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f7ff fdfa 	bl	8011170 <tcp_output_alloc_header>
 801157c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801157e:	69bb      	ldr	r3, [r7, #24]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d102      	bne.n	801158a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011584:	f04f 33ff 	mov.w	r3, #4294967295
 8011588:	e04c      	b.n	8011624 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801158a:	69bb      	ldr	r3, [r7, #24]
 801158c:	685b      	ldr	r3, [r3, #4]
 801158e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011590:	7ffb      	ldrb	r3, [r7, #31]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d011      	beq.n	80115ba <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011596:	697b      	ldr	r3, [r7, #20]
 8011598:	899b      	ldrh	r3, [r3, #12]
 801159a:	b29b      	uxth	r3, r3
 801159c:	b21b      	sxth	r3, r3
 801159e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80115a2:	b21c      	sxth	r4, r3
 80115a4:	2011      	movs	r0, #17
 80115a6:	f7f9 f88b 	bl	800a6c0 <lwip_htons>
 80115aa:	4603      	mov	r3, r0
 80115ac:	b21b      	sxth	r3, r3
 80115ae:	4323      	orrs	r3, r4
 80115b0:	b21b      	sxth	r3, r3
 80115b2:	b29a      	uxth	r2, r3
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	819a      	strh	r2, [r3, #12]
 80115b8:	e010      	b.n	80115dc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80115ba:	69bb      	ldr	r3, [r7, #24]
 80115bc:	685b      	ldr	r3, [r3, #4]
 80115be:	3314      	adds	r3, #20
 80115c0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80115c2:	6a3b      	ldr	r3, [r7, #32]
 80115c4:	6858      	ldr	r0, [r3, #4]
 80115c6:	6a3b      	ldr	r3, [r7, #32]
 80115c8:	685b      	ldr	r3, [r3, #4]
 80115ca:	891a      	ldrh	r2, [r3, #8]
 80115cc:	6a3b      	ldr	r3, [r7, #32]
 80115ce:	891b      	ldrh	r3, [r3, #8]
 80115d0:	1ad3      	subs	r3, r2, r3
 80115d2:	b29b      	uxth	r3, r3
 80115d4:	2201      	movs	r2, #1
 80115d6:	6939      	ldr	r1, [r7, #16]
 80115d8:	f7fa fe56 	bl	800c288 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80115dc:	6a3b      	ldr	r3, [r7, #32]
 80115de:	68db      	ldr	r3, [r3, #12]
 80115e0:	685b      	ldr	r3, [r3, #4]
 80115e2:	4618      	mov	r0, r3
 80115e4:	f7f9 f881 	bl	800a6ea <lwip_htonl>
 80115e8:	4603      	mov	r3, r0
 80115ea:	3301      	adds	r3, #1
 80115ec:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	1ad3      	subs	r3, r2, r3
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	da02      	bge.n	8011600 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	68fa      	ldr	r2, [r7, #12]
 80115fe:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011600:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011604:	2200      	movs	r2, #0
 8011606:	69b9      	ldr	r1, [r7, #24]
 8011608:	6878      	ldr	r0, [r7, #4]
 801160a:	f7ff fdef 	bl	80111ec <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801160e:	687a      	ldr	r2, [r7, #4]
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	3304      	adds	r3, #4
 8011614:	69b9      	ldr	r1, [r7, #24]
 8011616:	6878      	ldr	r0, [r7, #4]
 8011618:	f7ff fe26 	bl	8011268 <tcp_output_control_segment>
 801161c:	4603      	mov	r3, r0
 801161e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011620:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011624:	4618      	mov	r0, r3
 8011626:	372c      	adds	r7, #44	@ 0x2c
 8011628:	46bd      	mov	sp, r7
 801162a:	bd90      	pop	{r4, r7, pc}
 801162c:	08016d24 	.word	0x08016d24
 8011630:	0801751c 	.word	0x0801751c
 8011634:	08016d78 	.word	0x08016d78

08011638 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b082      	sub	sp, #8
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011640:	f7fa ff10 	bl	800c464 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011644:	4b0a      	ldr	r3, [pc, #40]	@ (8011670 <tcpip_tcp_timer+0x38>)
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d103      	bne.n	8011654 <tcpip_tcp_timer+0x1c>
 801164c:	4b09      	ldr	r3, [pc, #36]	@ (8011674 <tcpip_tcp_timer+0x3c>)
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d005      	beq.n	8011660 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011654:	2200      	movs	r2, #0
 8011656:	4908      	ldr	r1, [pc, #32]	@ (8011678 <tcpip_tcp_timer+0x40>)
 8011658:	20fa      	movs	r0, #250	@ 0xfa
 801165a:	f000 f8f3 	bl	8011844 <sys_timeout>
 801165e:	e003      	b.n	8011668 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011660:	4b06      	ldr	r3, [pc, #24]	@ (801167c <tcpip_tcp_timer+0x44>)
 8011662:	2200      	movs	r2, #0
 8011664:	601a      	str	r2, [r3, #0]
  }
}
 8011666:	bf00      	nop
 8011668:	bf00      	nop
 801166a:	3708      	adds	r7, #8
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}
 8011670:	2000d3b4 	.word	0x2000d3b4
 8011674:	2000d3b8 	.word	0x2000d3b8
 8011678:	08011639 	.word	0x08011639
 801167c:	2000d400 	.word	0x2000d400

08011680 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011684:	4b0a      	ldr	r3, [pc, #40]	@ (80116b0 <tcp_timer_needed+0x30>)
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d10f      	bne.n	80116ac <tcp_timer_needed+0x2c>
 801168c:	4b09      	ldr	r3, [pc, #36]	@ (80116b4 <tcp_timer_needed+0x34>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d103      	bne.n	801169c <tcp_timer_needed+0x1c>
 8011694:	4b08      	ldr	r3, [pc, #32]	@ (80116b8 <tcp_timer_needed+0x38>)
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d007      	beq.n	80116ac <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801169c:	4b04      	ldr	r3, [pc, #16]	@ (80116b0 <tcp_timer_needed+0x30>)
 801169e:	2201      	movs	r2, #1
 80116a0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80116a2:	2200      	movs	r2, #0
 80116a4:	4905      	ldr	r1, [pc, #20]	@ (80116bc <tcp_timer_needed+0x3c>)
 80116a6:	20fa      	movs	r0, #250	@ 0xfa
 80116a8:	f000 f8cc 	bl	8011844 <sys_timeout>
  }
}
 80116ac:	bf00      	nop
 80116ae:	bd80      	pop	{r7, pc}
 80116b0:	2000d400 	.word	0x2000d400
 80116b4:	2000d3b4 	.word	0x2000d3b4
 80116b8:	2000d3b8 	.word	0x2000d3b8
 80116bc:	08011639 	.word	0x08011639

080116c0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b086      	sub	sp, #24
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	60f8      	str	r0, [r7, #12]
 80116c8:	60b9      	str	r1, [r7, #8]
 80116ca:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80116cc:	200a      	movs	r0, #10
 80116ce:	f7f9 fccb 	bl	800b068 <memp_malloc>
 80116d2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80116d4:	693b      	ldr	r3, [r7, #16]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d109      	bne.n	80116ee <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80116da:	693b      	ldr	r3, [r7, #16]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d151      	bne.n	8011784 <sys_timeout_abs+0xc4>
 80116e0:	4b2a      	ldr	r3, [pc, #168]	@ (801178c <sys_timeout_abs+0xcc>)
 80116e2:	22be      	movs	r2, #190	@ 0xbe
 80116e4:	492a      	ldr	r1, [pc, #168]	@ (8011790 <sys_timeout_abs+0xd0>)
 80116e6:	482b      	ldr	r0, [pc, #172]	@ (8011794 <sys_timeout_abs+0xd4>)
 80116e8:	f002 ffb6 	bl	8014658 <iprintf>
    return;
 80116ec:	e04a      	b.n	8011784 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80116ee:	693b      	ldr	r3, [r7, #16]
 80116f0:	2200      	movs	r2, #0
 80116f2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80116f4:	693b      	ldr	r3, [r7, #16]
 80116f6:	68ba      	ldr	r2, [r7, #8]
 80116f8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80116fa:	693b      	ldr	r3, [r7, #16]
 80116fc:	687a      	ldr	r2, [r7, #4]
 80116fe:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011700:	693b      	ldr	r3, [r7, #16]
 8011702:	68fa      	ldr	r2, [r7, #12]
 8011704:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011706:	4b24      	ldr	r3, [pc, #144]	@ (8011798 <sys_timeout_abs+0xd8>)
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d103      	bne.n	8011716 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801170e:	4a22      	ldr	r2, [pc, #136]	@ (8011798 <sys_timeout_abs+0xd8>)
 8011710:	693b      	ldr	r3, [r7, #16]
 8011712:	6013      	str	r3, [r2, #0]
    return;
 8011714:	e037      	b.n	8011786 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011716:	693b      	ldr	r3, [r7, #16]
 8011718:	685a      	ldr	r2, [r3, #4]
 801171a:	4b1f      	ldr	r3, [pc, #124]	@ (8011798 <sys_timeout_abs+0xd8>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	685b      	ldr	r3, [r3, #4]
 8011720:	1ad3      	subs	r3, r2, r3
 8011722:	0fdb      	lsrs	r3, r3, #31
 8011724:	f003 0301 	and.w	r3, r3, #1
 8011728:	b2db      	uxtb	r3, r3
 801172a:	2b00      	cmp	r3, #0
 801172c:	d007      	beq.n	801173e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801172e:	4b1a      	ldr	r3, [pc, #104]	@ (8011798 <sys_timeout_abs+0xd8>)
 8011730:	681a      	ldr	r2, [r3, #0]
 8011732:	693b      	ldr	r3, [r7, #16]
 8011734:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011736:	4a18      	ldr	r2, [pc, #96]	@ (8011798 <sys_timeout_abs+0xd8>)
 8011738:	693b      	ldr	r3, [r7, #16]
 801173a:	6013      	str	r3, [r2, #0]
 801173c:	e023      	b.n	8011786 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801173e:	4b16      	ldr	r3, [pc, #88]	@ (8011798 <sys_timeout_abs+0xd8>)
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	617b      	str	r3, [r7, #20]
 8011744:	e01a      	b.n	801177c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011746:	697b      	ldr	r3, [r7, #20]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d00b      	beq.n	8011766 <sys_timeout_abs+0xa6>
 801174e:	693b      	ldr	r3, [r7, #16]
 8011750:	685a      	ldr	r2, [r3, #4]
 8011752:	697b      	ldr	r3, [r7, #20]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	685b      	ldr	r3, [r3, #4]
 8011758:	1ad3      	subs	r3, r2, r3
 801175a:	0fdb      	lsrs	r3, r3, #31
 801175c:	f003 0301 	and.w	r3, r3, #1
 8011760:	b2db      	uxtb	r3, r3
 8011762:	2b00      	cmp	r3, #0
 8011764:	d007      	beq.n	8011776 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011766:	697b      	ldr	r3, [r7, #20]
 8011768:	681a      	ldr	r2, [r3, #0]
 801176a:	693b      	ldr	r3, [r7, #16]
 801176c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801176e:	697b      	ldr	r3, [r7, #20]
 8011770:	693a      	ldr	r2, [r7, #16]
 8011772:	601a      	str	r2, [r3, #0]
        break;
 8011774:	e007      	b.n	8011786 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011776:	697b      	ldr	r3, [r7, #20]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	617b      	str	r3, [r7, #20]
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d1e1      	bne.n	8011746 <sys_timeout_abs+0x86>
 8011782:	e000      	b.n	8011786 <sys_timeout_abs+0xc6>
    return;
 8011784:	bf00      	nop
      }
    }
  }
}
 8011786:	3718      	adds	r7, #24
 8011788:	46bd      	mov	sp, r7
 801178a:	bd80      	pop	{r7, pc}
 801178c:	08017540 	.word	0x08017540
 8011790:	08017574 	.word	0x08017574
 8011794:	080175b4 	.word	0x080175b4
 8011798:	2000d3f8 	.word	0x2000d3f8

0801179c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b086      	sub	sp, #24
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80117a8:	697b      	ldr	r3, [r7, #20]
 80117aa:	685b      	ldr	r3, [r3, #4]
 80117ac:	4798      	blx	r3

  now = sys_now();
 80117ae:	f7f4 fc1b 	bl	8005fe8 <sys_now>
 80117b2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80117b4:	697b      	ldr	r3, [r7, #20]
 80117b6:	681a      	ldr	r2, [r3, #0]
 80117b8:	4b0f      	ldr	r3, [pc, #60]	@ (80117f8 <lwip_cyclic_timer+0x5c>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	4413      	add	r3, r2
 80117be:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80117c0:	68fa      	ldr	r2, [r7, #12]
 80117c2:	693b      	ldr	r3, [r7, #16]
 80117c4:	1ad3      	subs	r3, r2, r3
 80117c6:	0fdb      	lsrs	r3, r3, #31
 80117c8:	f003 0301 	and.w	r3, r3, #1
 80117cc:	b2db      	uxtb	r3, r3
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d009      	beq.n	80117e6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80117d2:	697b      	ldr	r3, [r7, #20]
 80117d4:	681a      	ldr	r2, [r3, #0]
 80117d6:	693b      	ldr	r3, [r7, #16]
 80117d8:	4413      	add	r3, r2
 80117da:	687a      	ldr	r2, [r7, #4]
 80117dc:	4907      	ldr	r1, [pc, #28]	@ (80117fc <lwip_cyclic_timer+0x60>)
 80117de:	4618      	mov	r0, r3
 80117e0:	f7ff ff6e 	bl	80116c0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80117e4:	e004      	b.n	80117f0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80117e6:	687a      	ldr	r2, [r7, #4]
 80117e8:	4904      	ldr	r1, [pc, #16]	@ (80117fc <lwip_cyclic_timer+0x60>)
 80117ea:	68f8      	ldr	r0, [r7, #12]
 80117ec:	f7ff ff68 	bl	80116c0 <sys_timeout_abs>
}
 80117f0:	bf00      	nop
 80117f2:	3718      	adds	r7, #24
 80117f4:	46bd      	mov	sp, r7
 80117f6:	bd80      	pop	{r7, pc}
 80117f8:	2000d3fc 	.word	0x2000d3fc
 80117fc:	0801179d 	.word	0x0801179d

08011800 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b082      	sub	sp, #8
 8011804:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011806:	2301      	movs	r3, #1
 8011808:	607b      	str	r3, [r7, #4]
 801180a:	e00e      	b.n	801182a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801180c:	4a0b      	ldr	r2, [pc, #44]	@ (801183c <sys_timeouts_init+0x3c>)
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	00db      	lsls	r3, r3, #3
 8011818:	4a08      	ldr	r2, [pc, #32]	@ (801183c <sys_timeouts_init+0x3c>)
 801181a:	4413      	add	r3, r2
 801181c:	461a      	mov	r2, r3
 801181e:	4908      	ldr	r1, [pc, #32]	@ (8011840 <sys_timeouts_init+0x40>)
 8011820:	f000 f810 	bl	8011844 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	3301      	adds	r3, #1
 8011828:	607b      	str	r3, [r7, #4]
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	2b02      	cmp	r3, #2
 801182e:	d9ed      	bls.n	801180c <sys_timeouts_init+0xc>
  }
}
 8011830:	bf00      	nop
 8011832:	bf00      	nop
 8011834:	3708      	adds	r7, #8
 8011836:	46bd      	mov	sp, r7
 8011838:	bd80      	pop	{r7, pc}
 801183a:	bf00      	nop
 801183c:	080181b4 	.word	0x080181b4
 8011840:	0801179d 	.word	0x0801179d

08011844 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b086      	sub	sp, #24
 8011848:	af00      	add	r7, sp, #0
 801184a:	60f8      	str	r0, [r7, #12]
 801184c:	60b9      	str	r1, [r7, #8]
 801184e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011856:	d306      	bcc.n	8011866 <sys_timeout+0x22>
 8011858:	4b0a      	ldr	r3, [pc, #40]	@ (8011884 <sys_timeout+0x40>)
 801185a:	f240 1229 	movw	r2, #297	@ 0x129
 801185e:	490a      	ldr	r1, [pc, #40]	@ (8011888 <sys_timeout+0x44>)
 8011860:	480a      	ldr	r0, [pc, #40]	@ (801188c <sys_timeout+0x48>)
 8011862:	f002 fef9 	bl	8014658 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011866:	f7f4 fbbf 	bl	8005fe8 <sys_now>
 801186a:	4602      	mov	r2, r0
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	4413      	add	r3, r2
 8011870:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011872:	687a      	ldr	r2, [r7, #4]
 8011874:	68b9      	ldr	r1, [r7, #8]
 8011876:	6978      	ldr	r0, [r7, #20]
 8011878:	f7ff ff22 	bl	80116c0 <sys_timeout_abs>
#endif
}
 801187c:	bf00      	nop
 801187e:	3718      	adds	r7, #24
 8011880:	46bd      	mov	sp, r7
 8011882:	bd80      	pop	{r7, pc}
 8011884:	08017540 	.word	0x08017540
 8011888:	080175dc 	.word	0x080175dc
 801188c:	080175b4 	.word	0x080175b4

08011890 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b084      	sub	sp, #16
 8011894:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011896:	f7f4 fba7 	bl	8005fe8 <sys_now>
 801189a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801189c:	4b17      	ldr	r3, [pc, #92]	@ (80118fc <sys_check_timeouts+0x6c>)
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80118a2:	68bb      	ldr	r3, [r7, #8]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d022      	beq.n	80118ee <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	685b      	ldr	r3, [r3, #4]
 80118ac:	68fa      	ldr	r2, [r7, #12]
 80118ae:	1ad3      	subs	r3, r2, r3
 80118b0:	0fdb      	lsrs	r3, r3, #31
 80118b2:	f003 0301 	and.w	r3, r3, #1
 80118b6:	b2db      	uxtb	r3, r3
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d11a      	bne.n	80118f2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	4a0e      	ldr	r2, [pc, #56]	@ (80118fc <sys_check_timeouts+0x6c>)
 80118c2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80118c4:	68bb      	ldr	r3, [r7, #8]
 80118c6:	689b      	ldr	r3, [r3, #8]
 80118c8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80118ca:	68bb      	ldr	r3, [r7, #8]
 80118cc:	68db      	ldr	r3, [r3, #12]
 80118ce:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80118d0:	68bb      	ldr	r3, [r7, #8]
 80118d2:	685b      	ldr	r3, [r3, #4]
 80118d4:	4a0a      	ldr	r2, [pc, #40]	@ (8011900 <sys_check_timeouts+0x70>)
 80118d6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80118d8:	68b9      	ldr	r1, [r7, #8]
 80118da:	200a      	movs	r0, #10
 80118dc:	f7f9 fc3a 	bl	800b154 <memp_free>
    if (handler != NULL) {
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d0da      	beq.n	801189c <sys_check_timeouts+0xc>
      handler(arg);
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	6838      	ldr	r0, [r7, #0]
 80118ea:	4798      	blx	r3
  do {
 80118ec:	e7d6      	b.n	801189c <sys_check_timeouts+0xc>
      return;
 80118ee:	bf00      	nop
 80118f0:	e000      	b.n	80118f4 <sys_check_timeouts+0x64>
      return;
 80118f2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80118f4:	3710      	adds	r7, #16
 80118f6:	46bd      	mov	sp, r7
 80118f8:	bd80      	pop	{r7, pc}
 80118fa:	bf00      	nop
 80118fc:	2000d3f8 	.word	0x2000d3f8
 8011900:	2000d3fc 	.word	0x2000d3fc

08011904 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b082      	sub	sp, #8
 8011908:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801190a:	4b16      	ldr	r3, [pc, #88]	@ (8011964 <sys_timeouts_sleeptime+0x60>)
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d102      	bne.n	8011918 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8011912:	f04f 33ff 	mov.w	r3, #4294967295
 8011916:	e020      	b.n	801195a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8011918:	f7f4 fb66 	bl	8005fe8 <sys_now>
 801191c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801191e:	4b11      	ldr	r3, [pc, #68]	@ (8011964 <sys_timeouts_sleeptime+0x60>)
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	685a      	ldr	r2, [r3, #4]
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	1ad3      	subs	r3, r2, r3
 8011928:	0fdb      	lsrs	r3, r3, #31
 801192a:	f003 0301 	and.w	r3, r3, #1
 801192e:	b2db      	uxtb	r3, r3
 8011930:	2b00      	cmp	r3, #0
 8011932:	d001      	beq.n	8011938 <sys_timeouts_sleeptime+0x34>
    return 0;
 8011934:	2300      	movs	r3, #0
 8011936:	e010      	b.n	801195a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8011938:	4b0a      	ldr	r3, [pc, #40]	@ (8011964 <sys_timeouts_sleeptime+0x60>)
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	685a      	ldr	r2, [r3, #4]
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	1ad3      	subs	r3, r2, r3
 8011942:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	2b00      	cmp	r3, #0
 8011948:	da06      	bge.n	8011958 <sys_timeouts_sleeptime+0x54>
 801194a:	4b07      	ldr	r3, [pc, #28]	@ (8011968 <sys_timeouts_sleeptime+0x64>)
 801194c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8011950:	4906      	ldr	r1, [pc, #24]	@ (801196c <sys_timeouts_sleeptime+0x68>)
 8011952:	4807      	ldr	r0, [pc, #28]	@ (8011970 <sys_timeouts_sleeptime+0x6c>)
 8011954:	f002 fe80 	bl	8014658 <iprintf>
    return ret;
 8011958:	683b      	ldr	r3, [r7, #0]
  }
}
 801195a:	4618      	mov	r0, r3
 801195c:	3708      	adds	r7, #8
 801195e:	46bd      	mov	sp, r7
 8011960:	bd80      	pop	{r7, pc}
 8011962:	bf00      	nop
 8011964:	2000d3f8 	.word	0x2000d3f8
 8011968:	08017540 	.word	0x08017540
 801196c:	08017614 	.word	0x08017614
 8011970:	080175b4 	.word	0x080175b4

08011974 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011974:	b580      	push	{r7, lr}
 8011976:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011978:	f002 fd6e 	bl	8014458 <rand>
 801197c:	4603      	mov	r3, r0
 801197e:	b29b      	uxth	r3, r3
 8011980:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011984:	b29b      	uxth	r3, r3
 8011986:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801198a:	b29a      	uxth	r2, r3
 801198c:	4b01      	ldr	r3, [pc, #4]	@ (8011994 <udp_init+0x20>)
 801198e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011990:	bf00      	nop
 8011992:	bd80      	pop	{r7, pc}
 8011994:	2000002c 	.word	0x2000002c

08011998 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b084      	sub	sp, #16
 801199c:	af00      	add	r7, sp, #0
 801199e:	60f8      	str	r0, [r7, #12]
 80119a0:	60b9      	str	r1, [r7, #8]
 80119a2:	4613      	mov	r3, r2
 80119a4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d105      	bne.n	80119b8 <udp_input_local_match+0x20>
 80119ac:	4b27      	ldr	r3, [pc, #156]	@ (8011a4c <udp_input_local_match+0xb4>)
 80119ae:	2287      	movs	r2, #135	@ 0x87
 80119b0:	4927      	ldr	r1, [pc, #156]	@ (8011a50 <udp_input_local_match+0xb8>)
 80119b2:	4828      	ldr	r0, [pc, #160]	@ (8011a54 <udp_input_local_match+0xbc>)
 80119b4:	f002 fe50 	bl	8014658 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80119b8:	68bb      	ldr	r3, [r7, #8]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d105      	bne.n	80119ca <udp_input_local_match+0x32>
 80119be:	4b23      	ldr	r3, [pc, #140]	@ (8011a4c <udp_input_local_match+0xb4>)
 80119c0:	2288      	movs	r2, #136	@ 0x88
 80119c2:	4925      	ldr	r1, [pc, #148]	@ (8011a58 <udp_input_local_match+0xc0>)
 80119c4:	4823      	ldr	r0, [pc, #140]	@ (8011a54 <udp_input_local_match+0xbc>)
 80119c6:	f002 fe47 	bl	8014658 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	7a1b      	ldrb	r3, [r3, #8]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d00b      	beq.n	80119ea <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	7a1a      	ldrb	r2, [r3, #8]
 80119d6:	4b21      	ldr	r3, [pc, #132]	@ (8011a5c <udp_input_local_match+0xc4>)
 80119d8:	685b      	ldr	r3, [r3, #4]
 80119da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80119de:	3301      	adds	r3, #1
 80119e0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80119e2:	429a      	cmp	r2, r3
 80119e4:	d001      	beq.n	80119ea <udp_input_local_match+0x52>
    return 0;
 80119e6:	2300      	movs	r3, #0
 80119e8:	e02b      	b.n	8011a42 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80119ea:	79fb      	ldrb	r3, [r7, #7]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d018      	beq.n	8011a22 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d013      	beq.n	8011a1e <udp_input_local_match+0x86>
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d00f      	beq.n	8011a1e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80119fe:	4b17      	ldr	r3, [pc, #92]	@ (8011a5c <udp_input_local_match+0xc4>)
 8011a00:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a06:	d00a      	beq.n	8011a1e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	681a      	ldr	r2, [r3, #0]
 8011a0c:	4b13      	ldr	r3, [pc, #76]	@ (8011a5c <udp_input_local_match+0xc4>)
 8011a0e:	695b      	ldr	r3, [r3, #20]
 8011a10:	405a      	eors	r2, r3
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	3308      	adds	r3, #8
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d110      	bne.n	8011a40 <udp_input_local_match+0xa8>
          return 1;
 8011a1e:	2301      	movs	r3, #1
 8011a20:	e00f      	b.n	8011a42 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d009      	beq.n	8011a3c <udp_input_local_match+0xa4>
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d005      	beq.n	8011a3c <udp_input_local_match+0xa4>
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	681a      	ldr	r2, [r3, #0]
 8011a34:	4b09      	ldr	r3, [pc, #36]	@ (8011a5c <udp_input_local_match+0xc4>)
 8011a36:	695b      	ldr	r3, [r3, #20]
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	d101      	bne.n	8011a40 <udp_input_local_match+0xa8>
        return 1;
 8011a3c:	2301      	movs	r3, #1
 8011a3e:	e000      	b.n	8011a42 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011a40:	2300      	movs	r3, #0
}
 8011a42:	4618      	mov	r0, r3
 8011a44:	3710      	adds	r7, #16
 8011a46:	46bd      	mov	sp, r7
 8011a48:	bd80      	pop	{r7, pc}
 8011a4a:	bf00      	nop
 8011a4c:	08017628 	.word	0x08017628
 8011a50:	08017658 	.word	0x08017658
 8011a54:	0801767c 	.word	0x0801767c
 8011a58:	080176a4 	.word	0x080176a4
 8011a5c:	2000a2a8 	.word	0x2000a2a8

08011a60 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011a60:	b590      	push	{r4, r7, lr}
 8011a62:	b08d      	sub	sp, #52	@ 0x34
 8011a64:	af02      	add	r7, sp, #8
 8011a66:	6078      	str	r0, [r7, #4]
 8011a68:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d105      	bne.n	8011a80 <udp_input+0x20>
 8011a74:	4b7c      	ldr	r3, [pc, #496]	@ (8011c68 <udp_input+0x208>)
 8011a76:	22cf      	movs	r2, #207	@ 0xcf
 8011a78:	497c      	ldr	r1, [pc, #496]	@ (8011c6c <udp_input+0x20c>)
 8011a7a:	487d      	ldr	r0, [pc, #500]	@ (8011c70 <udp_input+0x210>)
 8011a7c:	f002 fdec 	bl	8014658 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011a80:	683b      	ldr	r3, [r7, #0]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d105      	bne.n	8011a92 <udp_input+0x32>
 8011a86:	4b78      	ldr	r3, [pc, #480]	@ (8011c68 <udp_input+0x208>)
 8011a88:	22d0      	movs	r2, #208	@ 0xd0
 8011a8a:	497a      	ldr	r1, [pc, #488]	@ (8011c74 <udp_input+0x214>)
 8011a8c:	4878      	ldr	r0, [pc, #480]	@ (8011c70 <udp_input+0x210>)
 8011a8e:	f002 fde3 	bl	8014658 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	895b      	ldrh	r3, [r3, #10]
 8011a96:	2b07      	cmp	r3, #7
 8011a98:	d803      	bhi.n	8011aa2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	f7fa f9fe 	bl	800be9c <pbuf_free>
    goto end;
 8011aa0:	e0de      	b.n	8011c60 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	685b      	ldr	r3, [r3, #4]
 8011aa6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011aa8:	4b73      	ldr	r3, [pc, #460]	@ (8011c78 <udp_input+0x218>)
 8011aaa:	695b      	ldr	r3, [r3, #20]
 8011aac:	4a72      	ldr	r2, [pc, #456]	@ (8011c78 <udp_input+0x218>)
 8011aae:	6812      	ldr	r2, [r2, #0]
 8011ab0:	4611      	mov	r1, r2
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	f001 fc88 	bl	80133c8 <ip4_addr_isbroadcast_u32>
 8011ab8:	4603      	mov	r3, r0
 8011aba:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011abc:	697b      	ldr	r3, [r7, #20]
 8011abe:	881b      	ldrh	r3, [r3, #0]
 8011ac0:	b29b      	uxth	r3, r3
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	f7f8 fdfc 	bl	800a6c0 <lwip_htons>
 8011ac8:	4603      	mov	r3, r0
 8011aca:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	885b      	ldrh	r3, [r3, #2]
 8011ad0:	b29b      	uxth	r3, r3
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f7f8 fdf4 	bl	800a6c0 <lwip_htons>
 8011ad8:	4603      	mov	r3, r0
 8011ada:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011adc:	2300      	movs	r3, #0
 8011ade:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ae8:	4b64      	ldr	r3, [pc, #400]	@ (8011c7c <udp_input+0x21c>)
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	627b      	str	r3, [r7, #36]	@ 0x24
 8011aee:	e054      	b.n	8011b9a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011af2:	8a5b      	ldrh	r3, [r3, #18]
 8011af4:	89fa      	ldrh	r2, [r7, #14]
 8011af6:	429a      	cmp	r2, r3
 8011af8:	d14a      	bne.n	8011b90 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011afa:	7cfb      	ldrb	r3, [r7, #19]
 8011afc:	461a      	mov	r2, r3
 8011afe:	6839      	ldr	r1, [r7, #0]
 8011b00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011b02:	f7ff ff49 	bl	8011998 <udp_input_local_match>
 8011b06:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d041      	beq.n	8011b90 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b0e:	7c1b      	ldrb	r3, [r3, #16]
 8011b10:	f003 0304 	and.w	r3, r3, #4
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d11d      	bne.n	8011b54 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011b18:	69fb      	ldr	r3, [r7, #28]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d102      	bne.n	8011b24 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b20:	61fb      	str	r3, [r7, #28]
 8011b22:	e017      	b.n	8011b54 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011b24:	7cfb      	ldrb	r3, [r7, #19]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d014      	beq.n	8011b54 <udp_input+0xf4>
 8011b2a:	4b53      	ldr	r3, [pc, #332]	@ (8011c78 <udp_input+0x218>)
 8011b2c:	695b      	ldr	r3, [r3, #20]
 8011b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b32:	d10f      	bne.n	8011b54 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011b34:	69fb      	ldr	r3, [r7, #28]
 8011b36:	681a      	ldr	r2, [r3, #0]
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	3304      	adds	r3, #4
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	429a      	cmp	r2, r3
 8011b40:	d008      	beq.n	8011b54 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b44:	681a      	ldr	r2, [r3, #0]
 8011b46:	683b      	ldr	r3, [r7, #0]
 8011b48:	3304      	adds	r3, #4
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	429a      	cmp	r2, r3
 8011b4e:	d101      	bne.n	8011b54 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b52:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b56:	8a9b      	ldrh	r3, [r3, #20]
 8011b58:	8a3a      	ldrh	r2, [r7, #16]
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	d118      	bne.n	8011b90 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b60:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d005      	beq.n	8011b72 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b68:	685a      	ldr	r2, [r3, #4]
 8011b6a:	4b43      	ldr	r3, [pc, #268]	@ (8011c78 <udp_input+0x218>)
 8011b6c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011b6e:	429a      	cmp	r2, r3
 8011b70:	d10e      	bne.n	8011b90 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011b72:	6a3b      	ldr	r3, [r7, #32]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d014      	beq.n	8011ba2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b7a:	68da      	ldr	r2, [r3, #12]
 8011b7c:	6a3b      	ldr	r3, [r7, #32]
 8011b7e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011b80:	4b3e      	ldr	r3, [pc, #248]	@ (8011c7c <udp_input+0x21c>)
 8011b82:	681a      	ldr	r2, [r3, #0]
 8011b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b86:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011b88:	4a3c      	ldr	r2, [pc, #240]	@ (8011c7c <udp_input+0x21c>)
 8011b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b8c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011b8e:	e008      	b.n	8011ba2 <udp_input+0x142>
      }
    }

    prev = pcb;
 8011b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b92:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b96:	68db      	ldr	r3, [r3, #12]
 8011b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8011b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d1a7      	bne.n	8011af0 <udp_input+0x90>
 8011ba0:	e000      	b.n	8011ba4 <udp_input+0x144>
        break;
 8011ba2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d101      	bne.n	8011bae <udp_input+0x14e>
    pcb = uncon_pcb;
 8011baa:	69fb      	ldr	r3, [r7, #28]
 8011bac:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d002      	beq.n	8011bba <udp_input+0x15a>
    for_us = 1;
 8011bb4:	2301      	movs	r3, #1
 8011bb6:	76fb      	strb	r3, [r7, #27]
 8011bb8:	e00a      	b.n	8011bd0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011bba:	683b      	ldr	r3, [r7, #0]
 8011bbc:	3304      	adds	r3, #4
 8011bbe:	681a      	ldr	r2, [r3, #0]
 8011bc0:	4b2d      	ldr	r3, [pc, #180]	@ (8011c78 <udp_input+0x218>)
 8011bc2:	695b      	ldr	r3, [r3, #20]
 8011bc4:	429a      	cmp	r2, r3
 8011bc6:	bf0c      	ite	eq
 8011bc8:	2301      	moveq	r3, #1
 8011bca:	2300      	movne	r3, #0
 8011bcc:	b2db      	uxtb	r3, r3
 8011bce:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011bd0:	7efb      	ldrb	r3, [r7, #27]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d041      	beq.n	8011c5a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011bd6:	2108      	movs	r1, #8
 8011bd8:	6878      	ldr	r0, [r7, #4]
 8011bda:	f7fa f8d9 	bl	800bd90 <pbuf_remove_header>
 8011bde:	4603      	mov	r3, r0
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d00a      	beq.n	8011bfa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011be4:	4b20      	ldr	r3, [pc, #128]	@ (8011c68 <udp_input+0x208>)
 8011be6:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8011bea:	4925      	ldr	r1, [pc, #148]	@ (8011c80 <udp_input+0x220>)
 8011bec:	4820      	ldr	r0, [pc, #128]	@ (8011c70 <udp_input+0x210>)
 8011bee:	f002 fd33 	bl	8014658 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011bf2:	6878      	ldr	r0, [r7, #4]
 8011bf4:	f7fa f952 	bl	800be9c <pbuf_free>
      goto end;
 8011bf8:	e032      	b.n	8011c60 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d012      	beq.n	8011c26 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c02:	699b      	ldr	r3, [r3, #24]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d00a      	beq.n	8011c1e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c0a:	699c      	ldr	r4, [r3, #24]
 8011c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c0e:	69d8      	ldr	r0, [r3, #28]
 8011c10:	8a3b      	ldrh	r3, [r7, #16]
 8011c12:	9300      	str	r3, [sp, #0]
 8011c14:	4b1b      	ldr	r3, [pc, #108]	@ (8011c84 <udp_input+0x224>)
 8011c16:	687a      	ldr	r2, [r7, #4]
 8011c18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011c1a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011c1c:	e021      	b.n	8011c62 <udp_input+0x202>
        pbuf_free(p);
 8011c1e:	6878      	ldr	r0, [r7, #4]
 8011c20:	f7fa f93c 	bl	800be9c <pbuf_free>
        goto end;
 8011c24:	e01c      	b.n	8011c60 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011c26:	7cfb      	ldrb	r3, [r7, #19]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d112      	bne.n	8011c52 <udp_input+0x1f2>
 8011c2c:	4b12      	ldr	r3, [pc, #72]	@ (8011c78 <udp_input+0x218>)
 8011c2e:	695b      	ldr	r3, [r3, #20]
 8011c30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011c34:	2be0      	cmp	r3, #224	@ 0xe0
 8011c36:	d00c      	beq.n	8011c52 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011c38:	4b0f      	ldr	r3, [pc, #60]	@ (8011c78 <udp_input+0x218>)
 8011c3a:	899b      	ldrh	r3, [r3, #12]
 8011c3c:	3308      	adds	r3, #8
 8011c3e:	b29b      	uxth	r3, r3
 8011c40:	b21b      	sxth	r3, r3
 8011c42:	4619      	mov	r1, r3
 8011c44:	6878      	ldr	r0, [r7, #4]
 8011c46:	f7fa f916 	bl	800be76 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011c4a:	2103      	movs	r1, #3
 8011c4c:	6878      	ldr	r0, [r7, #4]
 8011c4e:	f001 f89b 	bl	8012d88 <icmp_dest_unreach>
      pbuf_free(p);
 8011c52:	6878      	ldr	r0, [r7, #4]
 8011c54:	f7fa f922 	bl	800be9c <pbuf_free>
  return;
 8011c58:	e003      	b.n	8011c62 <udp_input+0x202>
    pbuf_free(p);
 8011c5a:	6878      	ldr	r0, [r7, #4]
 8011c5c:	f7fa f91e 	bl	800be9c <pbuf_free>
  return;
 8011c60:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011c62:	372c      	adds	r7, #44	@ 0x2c
 8011c64:	46bd      	mov	sp, r7
 8011c66:	bd90      	pop	{r4, r7, pc}
 8011c68:	08017628 	.word	0x08017628
 8011c6c:	080176cc 	.word	0x080176cc
 8011c70:	0801767c 	.word	0x0801767c
 8011c74:	080176e4 	.word	0x080176e4
 8011c78:	2000a2a8 	.word	0x2000a2a8
 8011c7c:	2000d404 	.word	0x2000d404
 8011c80:	08017700 	.word	0x08017700
 8011c84:	2000a2b8 	.word	0x2000a2b8

08011c88 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011c88:	b480      	push	{r7}
 8011c8a:	b085      	sub	sp, #20
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
 8011c90:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d01e      	beq.n	8011cd6 <udp_netif_ip_addr_changed+0x4e>
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d01a      	beq.n	8011cd6 <udp_netif_ip_addr_changed+0x4e>
 8011ca0:	683b      	ldr	r3, [r7, #0]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d017      	beq.n	8011cd6 <udp_netif_ip_addr_changed+0x4e>
 8011ca6:	683b      	ldr	r3, [r7, #0]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d013      	beq.n	8011cd6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011cae:	4b0d      	ldr	r3, [pc, #52]	@ (8011ce4 <udp_netif_ip_addr_changed+0x5c>)
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	60fb      	str	r3, [r7, #12]
 8011cb4:	e00c      	b.n	8011cd0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	681a      	ldr	r2, [r3, #0]
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	429a      	cmp	r2, r3
 8011cc0:	d103      	bne.n	8011cca <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011cc2:	683b      	ldr	r3, [r7, #0]
 8011cc4:	681a      	ldr	r2, [r3, #0]
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	68db      	ldr	r3, [r3, #12]
 8011cce:	60fb      	str	r3, [r7, #12]
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d1ef      	bne.n	8011cb6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011cd6:	bf00      	nop
 8011cd8:	3714      	adds	r7, #20
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce0:	4770      	bx	lr
 8011ce2:	bf00      	nop
 8011ce4:	2000d404 	.word	0x2000d404

08011ce8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b082      	sub	sp, #8
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011cf0:	4915      	ldr	r1, [pc, #84]	@ (8011d48 <etharp_free_entry+0x60>)
 8011cf2:	687a      	ldr	r2, [r7, #4]
 8011cf4:	4613      	mov	r3, r2
 8011cf6:	005b      	lsls	r3, r3, #1
 8011cf8:	4413      	add	r3, r2
 8011cfa:	00db      	lsls	r3, r3, #3
 8011cfc:	440b      	add	r3, r1
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d013      	beq.n	8011d2c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011d04:	4910      	ldr	r1, [pc, #64]	@ (8011d48 <etharp_free_entry+0x60>)
 8011d06:	687a      	ldr	r2, [r7, #4]
 8011d08:	4613      	mov	r3, r2
 8011d0a:	005b      	lsls	r3, r3, #1
 8011d0c:	4413      	add	r3, r2
 8011d0e:	00db      	lsls	r3, r3, #3
 8011d10:	440b      	add	r3, r1
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	4618      	mov	r0, r3
 8011d16:	f7fa f8c1 	bl	800be9c <pbuf_free>
    arp_table[i].q = NULL;
 8011d1a:	490b      	ldr	r1, [pc, #44]	@ (8011d48 <etharp_free_entry+0x60>)
 8011d1c:	687a      	ldr	r2, [r7, #4]
 8011d1e:	4613      	mov	r3, r2
 8011d20:	005b      	lsls	r3, r3, #1
 8011d22:	4413      	add	r3, r2
 8011d24:	00db      	lsls	r3, r3, #3
 8011d26:	440b      	add	r3, r1
 8011d28:	2200      	movs	r2, #0
 8011d2a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011d2c:	4906      	ldr	r1, [pc, #24]	@ (8011d48 <etharp_free_entry+0x60>)
 8011d2e:	687a      	ldr	r2, [r7, #4]
 8011d30:	4613      	mov	r3, r2
 8011d32:	005b      	lsls	r3, r3, #1
 8011d34:	4413      	add	r3, r2
 8011d36:	00db      	lsls	r3, r3, #3
 8011d38:	440b      	add	r3, r1
 8011d3a:	3314      	adds	r3, #20
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011d40:	bf00      	nop
 8011d42:	3708      	adds	r7, #8
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd80      	pop	{r7, pc}
 8011d48:	2000d408 	.word	0x2000d408

08011d4c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b082      	sub	sp, #8
 8011d50:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011d52:	2300      	movs	r3, #0
 8011d54:	607b      	str	r3, [r7, #4]
 8011d56:	e096      	b.n	8011e86 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011d58:	494f      	ldr	r1, [pc, #316]	@ (8011e98 <etharp_tmr+0x14c>)
 8011d5a:	687a      	ldr	r2, [r7, #4]
 8011d5c:	4613      	mov	r3, r2
 8011d5e:	005b      	lsls	r3, r3, #1
 8011d60:	4413      	add	r3, r2
 8011d62:	00db      	lsls	r3, r3, #3
 8011d64:	440b      	add	r3, r1
 8011d66:	3314      	adds	r3, #20
 8011d68:	781b      	ldrb	r3, [r3, #0]
 8011d6a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011d6c:	78fb      	ldrb	r3, [r7, #3]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	f000 8086 	beq.w	8011e80 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011d74:	4948      	ldr	r1, [pc, #288]	@ (8011e98 <etharp_tmr+0x14c>)
 8011d76:	687a      	ldr	r2, [r7, #4]
 8011d78:	4613      	mov	r3, r2
 8011d7a:	005b      	lsls	r3, r3, #1
 8011d7c:	4413      	add	r3, r2
 8011d7e:	00db      	lsls	r3, r3, #3
 8011d80:	440b      	add	r3, r1
 8011d82:	3312      	adds	r3, #18
 8011d84:	881b      	ldrh	r3, [r3, #0]
 8011d86:	3301      	adds	r3, #1
 8011d88:	b298      	uxth	r0, r3
 8011d8a:	4943      	ldr	r1, [pc, #268]	@ (8011e98 <etharp_tmr+0x14c>)
 8011d8c:	687a      	ldr	r2, [r7, #4]
 8011d8e:	4613      	mov	r3, r2
 8011d90:	005b      	lsls	r3, r3, #1
 8011d92:	4413      	add	r3, r2
 8011d94:	00db      	lsls	r3, r3, #3
 8011d96:	440b      	add	r3, r1
 8011d98:	3312      	adds	r3, #18
 8011d9a:	4602      	mov	r2, r0
 8011d9c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011d9e:	493e      	ldr	r1, [pc, #248]	@ (8011e98 <etharp_tmr+0x14c>)
 8011da0:	687a      	ldr	r2, [r7, #4]
 8011da2:	4613      	mov	r3, r2
 8011da4:	005b      	lsls	r3, r3, #1
 8011da6:	4413      	add	r3, r2
 8011da8:	00db      	lsls	r3, r3, #3
 8011daa:	440b      	add	r3, r1
 8011dac:	3312      	adds	r3, #18
 8011dae:	881b      	ldrh	r3, [r3, #0]
 8011db0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8011db4:	d215      	bcs.n	8011de2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011db6:	4938      	ldr	r1, [pc, #224]	@ (8011e98 <etharp_tmr+0x14c>)
 8011db8:	687a      	ldr	r2, [r7, #4]
 8011dba:	4613      	mov	r3, r2
 8011dbc:	005b      	lsls	r3, r3, #1
 8011dbe:	4413      	add	r3, r2
 8011dc0:	00db      	lsls	r3, r3, #3
 8011dc2:	440b      	add	r3, r1
 8011dc4:	3314      	adds	r3, #20
 8011dc6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011dc8:	2b01      	cmp	r3, #1
 8011dca:	d10e      	bne.n	8011dea <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011dcc:	4932      	ldr	r1, [pc, #200]	@ (8011e98 <etharp_tmr+0x14c>)
 8011dce:	687a      	ldr	r2, [r7, #4]
 8011dd0:	4613      	mov	r3, r2
 8011dd2:	005b      	lsls	r3, r3, #1
 8011dd4:	4413      	add	r3, r2
 8011dd6:	00db      	lsls	r3, r3, #3
 8011dd8:	440b      	add	r3, r1
 8011dda:	3312      	adds	r3, #18
 8011ddc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011dde:	2b04      	cmp	r3, #4
 8011de0:	d903      	bls.n	8011dea <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f7ff ff80 	bl	8011ce8 <etharp_free_entry>
 8011de8:	e04a      	b.n	8011e80 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011dea:	492b      	ldr	r1, [pc, #172]	@ (8011e98 <etharp_tmr+0x14c>)
 8011dec:	687a      	ldr	r2, [r7, #4]
 8011dee:	4613      	mov	r3, r2
 8011df0:	005b      	lsls	r3, r3, #1
 8011df2:	4413      	add	r3, r2
 8011df4:	00db      	lsls	r3, r3, #3
 8011df6:	440b      	add	r3, r1
 8011df8:	3314      	adds	r3, #20
 8011dfa:	781b      	ldrb	r3, [r3, #0]
 8011dfc:	2b03      	cmp	r3, #3
 8011dfe:	d10a      	bne.n	8011e16 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011e00:	4925      	ldr	r1, [pc, #148]	@ (8011e98 <etharp_tmr+0x14c>)
 8011e02:	687a      	ldr	r2, [r7, #4]
 8011e04:	4613      	mov	r3, r2
 8011e06:	005b      	lsls	r3, r3, #1
 8011e08:	4413      	add	r3, r2
 8011e0a:	00db      	lsls	r3, r3, #3
 8011e0c:	440b      	add	r3, r1
 8011e0e:	3314      	adds	r3, #20
 8011e10:	2204      	movs	r2, #4
 8011e12:	701a      	strb	r2, [r3, #0]
 8011e14:	e034      	b.n	8011e80 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011e16:	4920      	ldr	r1, [pc, #128]	@ (8011e98 <etharp_tmr+0x14c>)
 8011e18:	687a      	ldr	r2, [r7, #4]
 8011e1a:	4613      	mov	r3, r2
 8011e1c:	005b      	lsls	r3, r3, #1
 8011e1e:	4413      	add	r3, r2
 8011e20:	00db      	lsls	r3, r3, #3
 8011e22:	440b      	add	r3, r1
 8011e24:	3314      	adds	r3, #20
 8011e26:	781b      	ldrb	r3, [r3, #0]
 8011e28:	2b04      	cmp	r3, #4
 8011e2a:	d10a      	bne.n	8011e42 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011e2c:	491a      	ldr	r1, [pc, #104]	@ (8011e98 <etharp_tmr+0x14c>)
 8011e2e:	687a      	ldr	r2, [r7, #4]
 8011e30:	4613      	mov	r3, r2
 8011e32:	005b      	lsls	r3, r3, #1
 8011e34:	4413      	add	r3, r2
 8011e36:	00db      	lsls	r3, r3, #3
 8011e38:	440b      	add	r3, r1
 8011e3a:	3314      	adds	r3, #20
 8011e3c:	2202      	movs	r2, #2
 8011e3e:	701a      	strb	r2, [r3, #0]
 8011e40:	e01e      	b.n	8011e80 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011e42:	4915      	ldr	r1, [pc, #84]	@ (8011e98 <etharp_tmr+0x14c>)
 8011e44:	687a      	ldr	r2, [r7, #4]
 8011e46:	4613      	mov	r3, r2
 8011e48:	005b      	lsls	r3, r3, #1
 8011e4a:	4413      	add	r3, r2
 8011e4c:	00db      	lsls	r3, r3, #3
 8011e4e:	440b      	add	r3, r1
 8011e50:	3314      	adds	r3, #20
 8011e52:	781b      	ldrb	r3, [r3, #0]
 8011e54:	2b01      	cmp	r3, #1
 8011e56:	d113      	bne.n	8011e80 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011e58:	490f      	ldr	r1, [pc, #60]	@ (8011e98 <etharp_tmr+0x14c>)
 8011e5a:	687a      	ldr	r2, [r7, #4]
 8011e5c:	4613      	mov	r3, r2
 8011e5e:	005b      	lsls	r3, r3, #1
 8011e60:	4413      	add	r3, r2
 8011e62:	00db      	lsls	r3, r3, #3
 8011e64:	440b      	add	r3, r1
 8011e66:	3308      	adds	r3, #8
 8011e68:	6818      	ldr	r0, [r3, #0]
 8011e6a:	687a      	ldr	r2, [r7, #4]
 8011e6c:	4613      	mov	r3, r2
 8011e6e:	005b      	lsls	r3, r3, #1
 8011e70:	4413      	add	r3, r2
 8011e72:	00db      	lsls	r3, r3, #3
 8011e74:	4a08      	ldr	r2, [pc, #32]	@ (8011e98 <etharp_tmr+0x14c>)
 8011e76:	4413      	add	r3, r2
 8011e78:	3304      	adds	r3, #4
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	f000 fe6e 	bl	8012b5c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	3301      	adds	r3, #1
 8011e84:	607b      	str	r3, [r7, #4]
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	2b09      	cmp	r3, #9
 8011e8a:	f77f af65 	ble.w	8011d58 <etharp_tmr+0xc>
      }
    }
  }
}
 8011e8e:	bf00      	nop
 8011e90:	bf00      	nop
 8011e92:	3708      	adds	r7, #8
 8011e94:	46bd      	mov	sp, r7
 8011e96:	bd80      	pop	{r7, pc}
 8011e98:	2000d408 	.word	0x2000d408

08011e9c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b08a      	sub	sp, #40	@ 0x28
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	60f8      	str	r0, [r7, #12]
 8011ea4:	460b      	mov	r3, r1
 8011ea6:	607a      	str	r2, [r7, #4]
 8011ea8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011eaa:	230a      	movs	r3, #10
 8011eac:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011eae:	230a      	movs	r3, #10
 8011eb0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8011eb2:	230a      	movs	r3, #10
 8011eb4:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011eba:	230a      	movs	r3, #10
 8011ebc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	83bb      	strh	r3, [r7, #28]
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	837b      	strh	r3, [r7, #26]
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011eca:	2300      	movs	r3, #0
 8011ecc:	843b      	strh	r3, [r7, #32]
 8011ece:	e0ae      	b.n	801202e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011ed0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ed4:	49a6      	ldr	r1, [pc, #664]	@ (8012170 <etharp_find_entry+0x2d4>)
 8011ed6:	4613      	mov	r3, r2
 8011ed8:	005b      	lsls	r3, r3, #1
 8011eda:	4413      	add	r3, r2
 8011edc:	00db      	lsls	r3, r3, #3
 8011ede:	440b      	add	r3, r1
 8011ee0:	3314      	adds	r3, #20
 8011ee2:	781b      	ldrb	r3, [r3, #0]
 8011ee4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011ee6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8011eea:	2b0a      	cmp	r3, #10
 8011eec:	d105      	bne.n	8011efa <etharp_find_entry+0x5e>
 8011eee:	7dfb      	ldrb	r3, [r7, #23]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d102      	bne.n	8011efa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011ef4:	8c3b      	ldrh	r3, [r7, #32]
 8011ef6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011ef8:	e095      	b.n	8012026 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011efa:	7dfb      	ldrb	r3, [r7, #23]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	f000 8092 	beq.w	8012026 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011f02:	7dfb      	ldrb	r3, [r7, #23]
 8011f04:	2b01      	cmp	r3, #1
 8011f06:	d009      	beq.n	8011f1c <etharp_find_entry+0x80>
 8011f08:	7dfb      	ldrb	r3, [r7, #23]
 8011f0a:	2b01      	cmp	r3, #1
 8011f0c:	d806      	bhi.n	8011f1c <etharp_find_entry+0x80>
 8011f0e:	4b99      	ldr	r3, [pc, #612]	@ (8012174 <etharp_find_entry+0x2d8>)
 8011f10:	f240 1223 	movw	r2, #291	@ 0x123
 8011f14:	4998      	ldr	r1, [pc, #608]	@ (8012178 <etharp_find_entry+0x2dc>)
 8011f16:	4899      	ldr	r0, [pc, #612]	@ (801217c <etharp_find_entry+0x2e0>)
 8011f18:	f002 fb9e 	bl	8014658 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d020      	beq.n	8011f64 <etharp_find_entry+0xc8>
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	6819      	ldr	r1, [r3, #0]
 8011f26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011f2a:	4891      	ldr	r0, [pc, #580]	@ (8012170 <etharp_find_entry+0x2d4>)
 8011f2c:	4613      	mov	r3, r2
 8011f2e:	005b      	lsls	r3, r3, #1
 8011f30:	4413      	add	r3, r2
 8011f32:	00db      	lsls	r3, r3, #3
 8011f34:	4403      	add	r3, r0
 8011f36:	3304      	adds	r3, #4
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	4299      	cmp	r1, r3
 8011f3c:	d112      	bne.n	8011f64 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d00c      	beq.n	8011f5e <etharp_find_entry+0xc2>
 8011f44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011f48:	4989      	ldr	r1, [pc, #548]	@ (8012170 <etharp_find_entry+0x2d4>)
 8011f4a:	4613      	mov	r3, r2
 8011f4c:	005b      	lsls	r3, r3, #1
 8011f4e:	4413      	add	r3, r2
 8011f50:	00db      	lsls	r3, r3, #3
 8011f52:	440b      	add	r3, r1
 8011f54:	3308      	adds	r3, #8
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	687a      	ldr	r2, [r7, #4]
 8011f5a:	429a      	cmp	r2, r3
 8011f5c:	d102      	bne.n	8011f64 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011f5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011f62:	e100      	b.n	8012166 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011f64:	7dfb      	ldrb	r3, [r7, #23]
 8011f66:	2b01      	cmp	r3, #1
 8011f68:	d140      	bne.n	8011fec <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011f6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011f6e:	4980      	ldr	r1, [pc, #512]	@ (8012170 <etharp_find_entry+0x2d4>)
 8011f70:	4613      	mov	r3, r2
 8011f72:	005b      	lsls	r3, r3, #1
 8011f74:	4413      	add	r3, r2
 8011f76:	00db      	lsls	r3, r3, #3
 8011f78:	440b      	add	r3, r1
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d01a      	beq.n	8011fb6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011f80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011f84:	497a      	ldr	r1, [pc, #488]	@ (8012170 <etharp_find_entry+0x2d4>)
 8011f86:	4613      	mov	r3, r2
 8011f88:	005b      	lsls	r3, r3, #1
 8011f8a:	4413      	add	r3, r2
 8011f8c:	00db      	lsls	r3, r3, #3
 8011f8e:	440b      	add	r3, r1
 8011f90:	3312      	adds	r3, #18
 8011f92:	881b      	ldrh	r3, [r3, #0]
 8011f94:	8bba      	ldrh	r2, [r7, #28]
 8011f96:	429a      	cmp	r2, r3
 8011f98:	d845      	bhi.n	8012026 <etharp_find_entry+0x18a>
            old_queue = i;
 8011f9a:	8c3b      	ldrh	r3, [r7, #32]
 8011f9c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011f9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011fa2:	4973      	ldr	r1, [pc, #460]	@ (8012170 <etharp_find_entry+0x2d4>)
 8011fa4:	4613      	mov	r3, r2
 8011fa6:	005b      	lsls	r3, r3, #1
 8011fa8:	4413      	add	r3, r2
 8011faa:	00db      	lsls	r3, r3, #3
 8011fac:	440b      	add	r3, r1
 8011fae:	3312      	adds	r3, #18
 8011fb0:	881b      	ldrh	r3, [r3, #0]
 8011fb2:	83bb      	strh	r3, [r7, #28]
 8011fb4:	e037      	b.n	8012026 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011fb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011fba:	496d      	ldr	r1, [pc, #436]	@ (8012170 <etharp_find_entry+0x2d4>)
 8011fbc:	4613      	mov	r3, r2
 8011fbe:	005b      	lsls	r3, r3, #1
 8011fc0:	4413      	add	r3, r2
 8011fc2:	00db      	lsls	r3, r3, #3
 8011fc4:	440b      	add	r3, r1
 8011fc6:	3312      	adds	r3, #18
 8011fc8:	881b      	ldrh	r3, [r3, #0]
 8011fca:	8b7a      	ldrh	r2, [r7, #26]
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	d82a      	bhi.n	8012026 <etharp_find_entry+0x18a>
            old_pending = i;
 8011fd0:	8c3b      	ldrh	r3, [r7, #32]
 8011fd2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8011fd4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011fd8:	4965      	ldr	r1, [pc, #404]	@ (8012170 <etharp_find_entry+0x2d4>)
 8011fda:	4613      	mov	r3, r2
 8011fdc:	005b      	lsls	r3, r3, #1
 8011fde:	4413      	add	r3, r2
 8011fe0:	00db      	lsls	r3, r3, #3
 8011fe2:	440b      	add	r3, r1
 8011fe4:	3312      	adds	r3, #18
 8011fe6:	881b      	ldrh	r3, [r3, #0]
 8011fe8:	837b      	strh	r3, [r7, #26]
 8011fea:	e01c      	b.n	8012026 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011fec:	7dfb      	ldrb	r3, [r7, #23]
 8011fee:	2b01      	cmp	r3, #1
 8011ff0:	d919      	bls.n	8012026 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011ff2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ff6:	495e      	ldr	r1, [pc, #376]	@ (8012170 <etharp_find_entry+0x2d4>)
 8011ff8:	4613      	mov	r3, r2
 8011ffa:	005b      	lsls	r3, r3, #1
 8011ffc:	4413      	add	r3, r2
 8011ffe:	00db      	lsls	r3, r3, #3
 8012000:	440b      	add	r3, r1
 8012002:	3312      	adds	r3, #18
 8012004:	881b      	ldrh	r3, [r3, #0]
 8012006:	8b3a      	ldrh	r2, [r7, #24]
 8012008:	429a      	cmp	r2, r3
 801200a:	d80c      	bhi.n	8012026 <etharp_find_entry+0x18a>
            old_stable = i;
 801200c:	8c3b      	ldrh	r3, [r7, #32]
 801200e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8012010:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012014:	4956      	ldr	r1, [pc, #344]	@ (8012170 <etharp_find_entry+0x2d4>)
 8012016:	4613      	mov	r3, r2
 8012018:	005b      	lsls	r3, r3, #1
 801201a:	4413      	add	r3, r2
 801201c:	00db      	lsls	r3, r3, #3
 801201e:	440b      	add	r3, r1
 8012020:	3312      	adds	r3, #18
 8012022:	881b      	ldrh	r3, [r3, #0]
 8012024:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012026:	8c3b      	ldrh	r3, [r7, #32]
 8012028:	3301      	adds	r3, #1
 801202a:	b29b      	uxth	r3, r3
 801202c:	843b      	strh	r3, [r7, #32]
 801202e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012032:	2b09      	cmp	r3, #9
 8012034:	f77f af4c 	ble.w	8011ed0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012038:	7afb      	ldrb	r3, [r7, #11]
 801203a:	f003 0302 	and.w	r3, r3, #2
 801203e:	2b00      	cmp	r3, #0
 8012040:	d108      	bne.n	8012054 <etharp_find_entry+0x1b8>
 8012042:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012046:	2b0a      	cmp	r3, #10
 8012048:	d107      	bne.n	801205a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801204a:	7afb      	ldrb	r3, [r7, #11]
 801204c:	f003 0301 	and.w	r3, r3, #1
 8012050:	2b00      	cmp	r3, #0
 8012052:	d102      	bne.n	801205a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012054:	f04f 33ff 	mov.w	r3, #4294967295
 8012058:	e085      	b.n	8012166 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801205a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801205e:	2b09      	cmp	r3, #9
 8012060:	dc02      	bgt.n	8012068 <etharp_find_entry+0x1cc>
    i = empty;
 8012062:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012064:	843b      	strh	r3, [r7, #32]
 8012066:	e039      	b.n	80120dc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012068:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801206c:	2b09      	cmp	r3, #9
 801206e:	dc14      	bgt.n	801209a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012070:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012072:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012074:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012078:	493d      	ldr	r1, [pc, #244]	@ (8012170 <etharp_find_entry+0x2d4>)
 801207a:	4613      	mov	r3, r2
 801207c:	005b      	lsls	r3, r3, #1
 801207e:	4413      	add	r3, r2
 8012080:	00db      	lsls	r3, r3, #3
 8012082:	440b      	add	r3, r1
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d018      	beq.n	80120bc <etharp_find_entry+0x220>
 801208a:	4b3a      	ldr	r3, [pc, #232]	@ (8012174 <etharp_find_entry+0x2d8>)
 801208c:	f240 126d 	movw	r2, #365	@ 0x16d
 8012090:	493b      	ldr	r1, [pc, #236]	@ (8012180 <etharp_find_entry+0x2e4>)
 8012092:	483a      	ldr	r0, [pc, #232]	@ (801217c <etharp_find_entry+0x2e0>)
 8012094:	f002 fae0 	bl	8014658 <iprintf>
 8012098:	e010      	b.n	80120bc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801209a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801209e:	2b09      	cmp	r3, #9
 80120a0:	dc02      	bgt.n	80120a8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80120a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80120a4:	843b      	strh	r3, [r7, #32]
 80120a6:	e009      	b.n	80120bc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80120a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80120ac:	2b09      	cmp	r3, #9
 80120ae:	dc02      	bgt.n	80120b6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80120b0:	8bfb      	ldrh	r3, [r7, #30]
 80120b2:	843b      	strh	r3, [r7, #32]
 80120b4:	e002      	b.n	80120bc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80120b6:	f04f 33ff 	mov.w	r3, #4294967295
 80120ba:	e054      	b.n	8012166 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80120bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80120c0:	2b09      	cmp	r3, #9
 80120c2:	dd06      	ble.n	80120d2 <etharp_find_entry+0x236>
 80120c4:	4b2b      	ldr	r3, [pc, #172]	@ (8012174 <etharp_find_entry+0x2d8>)
 80120c6:	f240 127f 	movw	r2, #383	@ 0x17f
 80120ca:	492e      	ldr	r1, [pc, #184]	@ (8012184 <etharp_find_entry+0x2e8>)
 80120cc:	482b      	ldr	r0, [pc, #172]	@ (801217c <etharp_find_entry+0x2e0>)
 80120ce:	f002 fac3 	bl	8014658 <iprintf>
    etharp_free_entry(i);
 80120d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80120d6:	4618      	mov	r0, r3
 80120d8:	f7ff fe06 	bl	8011ce8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80120dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80120e0:	2b09      	cmp	r3, #9
 80120e2:	dd06      	ble.n	80120f2 <etharp_find_entry+0x256>
 80120e4:	4b23      	ldr	r3, [pc, #140]	@ (8012174 <etharp_find_entry+0x2d8>)
 80120e6:	f240 1283 	movw	r2, #387	@ 0x183
 80120ea:	4926      	ldr	r1, [pc, #152]	@ (8012184 <etharp_find_entry+0x2e8>)
 80120ec:	4823      	ldr	r0, [pc, #140]	@ (801217c <etharp_find_entry+0x2e0>)
 80120ee:	f002 fab3 	bl	8014658 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80120f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80120f6:	491e      	ldr	r1, [pc, #120]	@ (8012170 <etharp_find_entry+0x2d4>)
 80120f8:	4613      	mov	r3, r2
 80120fa:	005b      	lsls	r3, r3, #1
 80120fc:	4413      	add	r3, r2
 80120fe:	00db      	lsls	r3, r3, #3
 8012100:	440b      	add	r3, r1
 8012102:	3314      	adds	r3, #20
 8012104:	781b      	ldrb	r3, [r3, #0]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d006      	beq.n	8012118 <etharp_find_entry+0x27c>
 801210a:	4b1a      	ldr	r3, [pc, #104]	@ (8012174 <etharp_find_entry+0x2d8>)
 801210c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8012110:	491d      	ldr	r1, [pc, #116]	@ (8012188 <etharp_find_entry+0x2ec>)
 8012112:	481a      	ldr	r0, [pc, #104]	@ (801217c <etharp_find_entry+0x2e0>)
 8012114:	f002 faa0 	bl	8014658 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d00b      	beq.n	8012136 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801211e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	6819      	ldr	r1, [r3, #0]
 8012126:	4812      	ldr	r0, [pc, #72]	@ (8012170 <etharp_find_entry+0x2d4>)
 8012128:	4613      	mov	r3, r2
 801212a:	005b      	lsls	r3, r3, #1
 801212c:	4413      	add	r3, r2
 801212e:	00db      	lsls	r3, r3, #3
 8012130:	4403      	add	r3, r0
 8012132:	3304      	adds	r3, #4
 8012134:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012136:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801213a:	490d      	ldr	r1, [pc, #52]	@ (8012170 <etharp_find_entry+0x2d4>)
 801213c:	4613      	mov	r3, r2
 801213e:	005b      	lsls	r3, r3, #1
 8012140:	4413      	add	r3, r2
 8012142:	00db      	lsls	r3, r3, #3
 8012144:	440b      	add	r3, r1
 8012146:	3312      	adds	r3, #18
 8012148:	2200      	movs	r2, #0
 801214a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801214c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012150:	4907      	ldr	r1, [pc, #28]	@ (8012170 <etharp_find_entry+0x2d4>)
 8012152:	4613      	mov	r3, r2
 8012154:	005b      	lsls	r3, r3, #1
 8012156:	4413      	add	r3, r2
 8012158:	00db      	lsls	r3, r3, #3
 801215a:	440b      	add	r3, r1
 801215c:	3308      	adds	r3, #8
 801215e:	687a      	ldr	r2, [r7, #4]
 8012160:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012162:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012166:	4618      	mov	r0, r3
 8012168:	3728      	adds	r7, #40	@ 0x28
 801216a:	46bd      	mov	sp, r7
 801216c:	bd80      	pop	{r7, pc}
 801216e:	bf00      	nop
 8012170:	2000d408 	.word	0x2000d408
 8012174:	0801798c 	.word	0x0801798c
 8012178:	080179c4 	.word	0x080179c4
 801217c:	08017a04 	.word	0x08017a04
 8012180:	08017a2c 	.word	0x08017a2c
 8012184:	08017a44 	.word	0x08017a44
 8012188:	08017a58 	.word	0x08017a58

0801218c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b088      	sub	sp, #32
 8012190:	af02      	add	r7, sp, #8
 8012192:	60f8      	str	r0, [r7, #12]
 8012194:	60b9      	str	r1, [r7, #8]
 8012196:	607a      	str	r2, [r7, #4]
 8012198:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80121a0:	2b06      	cmp	r3, #6
 80121a2:	d006      	beq.n	80121b2 <etharp_update_arp_entry+0x26>
 80121a4:	4b48      	ldr	r3, [pc, #288]	@ (80122c8 <etharp_update_arp_entry+0x13c>)
 80121a6:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80121aa:	4948      	ldr	r1, [pc, #288]	@ (80122cc <etharp_update_arp_entry+0x140>)
 80121ac:	4848      	ldr	r0, [pc, #288]	@ (80122d0 <etharp_update_arp_entry+0x144>)
 80121ae:	f002 fa53 	bl	8014658 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80121b2:	68bb      	ldr	r3, [r7, #8]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d012      	beq.n	80121de <etharp_update_arp_entry+0x52>
 80121b8:	68bb      	ldr	r3, [r7, #8]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d00e      	beq.n	80121de <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80121c0:	68bb      	ldr	r3, [r7, #8]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	68f9      	ldr	r1, [r7, #12]
 80121c6:	4618      	mov	r0, r3
 80121c8:	f001 f8fe 	bl	80133c8 <ip4_addr_isbroadcast_u32>
 80121cc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d105      	bne.n	80121de <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80121d2:	68bb      	ldr	r3, [r7, #8]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80121da:	2be0      	cmp	r3, #224	@ 0xe0
 80121dc:	d102      	bne.n	80121e4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80121de:	f06f 030f 	mvn.w	r3, #15
 80121e2:	e06c      	b.n	80122be <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80121e4:	78fb      	ldrb	r3, [r7, #3]
 80121e6:	68fa      	ldr	r2, [r7, #12]
 80121e8:	4619      	mov	r1, r3
 80121ea:	68b8      	ldr	r0, [r7, #8]
 80121ec:	f7ff fe56 	bl	8011e9c <etharp_find_entry>
 80121f0:	4603      	mov	r3, r0
 80121f2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80121f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	da02      	bge.n	8012202 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80121fc:	8afb      	ldrh	r3, [r7, #22]
 80121fe:	b25b      	sxtb	r3, r3
 8012200:	e05d      	b.n	80122be <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012202:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012206:	4933      	ldr	r1, [pc, #204]	@ (80122d4 <etharp_update_arp_entry+0x148>)
 8012208:	4613      	mov	r3, r2
 801220a:	005b      	lsls	r3, r3, #1
 801220c:	4413      	add	r3, r2
 801220e:	00db      	lsls	r3, r3, #3
 8012210:	440b      	add	r3, r1
 8012212:	3314      	adds	r3, #20
 8012214:	2202      	movs	r2, #2
 8012216:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012218:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801221c:	492d      	ldr	r1, [pc, #180]	@ (80122d4 <etharp_update_arp_entry+0x148>)
 801221e:	4613      	mov	r3, r2
 8012220:	005b      	lsls	r3, r3, #1
 8012222:	4413      	add	r3, r2
 8012224:	00db      	lsls	r3, r3, #3
 8012226:	440b      	add	r3, r1
 8012228:	3308      	adds	r3, #8
 801222a:	68fa      	ldr	r2, [r7, #12]
 801222c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801222e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012232:	4613      	mov	r3, r2
 8012234:	005b      	lsls	r3, r3, #1
 8012236:	4413      	add	r3, r2
 8012238:	00db      	lsls	r3, r3, #3
 801223a:	3308      	adds	r3, #8
 801223c:	4a25      	ldr	r2, [pc, #148]	@ (80122d4 <etharp_update_arp_entry+0x148>)
 801223e:	4413      	add	r3, r2
 8012240:	3304      	adds	r3, #4
 8012242:	2206      	movs	r2, #6
 8012244:	6879      	ldr	r1, [r7, #4]
 8012246:	4618      	mov	r0, r3
 8012248:	f002 fbcb 	bl	80149e2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801224c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012250:	4920      	ldr	r1, [pc, #128]	@ (80122d4 <etharp_update_arp_entry+0x148>)
 8012252:	4613      	mov	r3, r2
 8012254:	005b      	lsls	r3, r3, #1
 8012256:	4413      	add	r3, r2
 8012258:	00db      	lsls	r3, r3, #3
 801225a:	440b      	add	r3, r1
 801225c:	3312      	adds	r3, #18
 801225e:	2200      	movs	r2, #0
 8012260:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012262:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012266:	491b      	ldr	r1, [pc, #108]	@ (80122d4 <etharp_update_arp_entry+0x148>)
 8012268:	4613      	mov	r3, r2
 801226a:	005b      	lsls	r3, r3, #1
 801226c:	4413      	add	r3, r2
 801226e:	00db      	lsls	r3, r3, #3
 8012270:	440b      	add	r3, r1
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d021      	beq.n	80122bc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012278:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801227c:	4915      	ldr	r1, [pc, #84]	@ (80122d4 <etharp_update_arp_entry+0x148>)
 801227e:	4613      	mov	r3, r2
 8012280:	005b      	lsls	r3, r3, #1
 8012282:	4413      	add	r3, r2
 8012284:	00db      	lsls	r3, r3, #3
 8012286:	440b      	add	r3, r1
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801228c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012290:	4910      	ldr	r1, [pc, #64]	@ (80122d4 <etharp_update_arp_entry+0x148>)
 8012292:	4613      	mov	r3, r2
 8012294:	005b      	lsls	r3, r3, #1
 8012296:	4413      	add	r3, r2
 8012298:	00db      	lsls	r3, r3, #3
 801229a:	440b      	add	r3, r1
 801229c:	2200      	movs	r2, #0
 801229e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80122a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80122aa:	9300      	str	r3, [sp, #0]
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	6939      	ldr	r1, [r7, #16]
 80122b0:	68f8      	ldr	r0, [r7, #12]
 80122b2:	f001 ff97 	bl	80141e4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80122b6:	6938      	ldr	r0, [r7, #16]
 80122b8:	f7f9 fdf0 	bl	800be9c <pbuf_free>
  }
  return ERR_OK;
 80122bc:	2300      	movs	r3, #0
}
 80122be:	4618      	mov	r0, r3
 80122c0:	3718      	adds	r7, #24
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bd80      	pop	{r7, pc}
 80122c6:	bf00      	nop
 80122c8:	0801798c 	.word	0x0801798c
 80122cc:	08017a84 	.word	0x08017a84
 80122d0:	08017a04 	.word	0x08017a04
 80122d4:	2000d408 	.word	0x2000d408

080122d8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b084      	sub	sp, #16
 80122dc:	af00      	add	r7, sp, #0
 80122de:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80122e0:	2300      	movs	r3, #0
 80122e2:	60fb      	str	r3, [r7, #12]
 80122e4:	e01e      	b.n	8012324 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80122e6:	4913      	ldr	r1, [pc, #76]	@ (8012334 <etharp_cleanup_netif+0x5c>)
 80122e8:	68fa      	ldr	r2, [r7, #12]
 80122ea:	4613      	mov	r3, r2
 80122ec:	005b      	lsls	r3, r3, #1
 80122ee:	4413      	add	r3, r2
 80122f0:	00db      	lsls	r3, r3, #3
 80122f2:	440b      	add	r3, r1
 80122f4:	3314      	adds	r3, #20
 80122f6:	781b      	ldrb	r3, [r3, #0]
 80122f8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80122fa:	7afb      	ldrb	r3, [r7, #11]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d00e      	beq.n	801231e <etharp_cleanup_netif+0x46>
 8012300:	490c      	ldr	r1, [pc, #48]	@ (8012334 <etharp_cleanup_netif+0x5c>)
 8012302:	68fa      	ldr	r2, [r7, #12]
 8012304:	4613      	mov	r3, r2
 8012306:	005b      	lsls	r3, r3, #1
 8012308:	4413      	add	r3, r2
 801230a:	00db      	lsls	r3, r3, #3
 801230c:	440b      	add	r3, r1
 801230e:	3308      	adds	r3, #8
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	687a      	ldr	r2, [r7, #4]
 8012314:	429a      	cmp	r2, r3
 8012316:	d102      	bne.n	801231e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012318:	68f8      	ldr	r0, [r7, #12]
 801231a:	f7ff fce5 	bl	8011ce8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	3301      	adds	r3, #1
 8012322:	60fb      	str	r3, [r7, #12]
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	2b09      	cmp	r3, #9
 8012328:	dddd      	ble.n	80122e6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801232a:	bf00      	nop
 801232c:	bf00      	nop
 801232e:	3710      	adds	r7, #16
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}
 8012334:	2000d408 	.word	0x2000d408

08012338 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012338:	b5b0      	push	{r4, r5, r7, lr}
 801233a:	b08a      	sub	sp, #40	@ 0x28
 801233c:	af04      	add	r7, sp, #16
 801233e:	6078      	str	r0, [r7, #4]
 8012340:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d107      	bne.n	8012358 <etharp_input+0x20>
 8012348:	4b3d      	ldr	r3, [pc, #244]	@ (8012440 <etharp_input+0x108>)
 801234a:	f240 228a 	movw	r2, #650	@ 0x28a
 801234e:	493d      	ldr	r1, [pc, #244]	@ (8012444 <etharp_input+0x10c>)
 8012350:	483d      	ldr	r0, [pc, #244]	@ (8012448 <etharp_input+0x110>)
 8012352:	f002 f981 	bl	8014658 <iprintf>
 8012356:	e06f      	b.n	8012438 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	685b      	ldr	r3, [r3, #4]
 801235c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801235e:	693b      	ldr	r3, [r7, #16]
 8012360:	881b      	ldrh	r3, [r3, #0]
 8012362:	b29b      	uxth	r3, r3
 8012364:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012368:	d10c      	bne.n	8012384 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801236a:	693b      	ldr	r3, [r7, #16]
 801236c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801236e:	2b06      	cmp	r3, #6
 8012370:	d108      	bne.n	8012384 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012372:	693b      	ldr	r3, [r7, #16]
 8012374:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012376:	2b04      	cmp	r3, #4
 8012378:	d104      	bne.n	8012384 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801237a:	693b      	ldr	r3, [r7, #16]
 801237c:	885b      	ldrh	r3, [r3, #2]
 801237e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012380:	2b08      	cmp	r3, #8
 8012382:	d003      	beq.n	801238c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f7f9 fd89 	bl	800be9c <pbuf_free>
    return;
 801238a:	e055      	b.n	8012438 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801238c:	693b      	ldr	r3, [r7, #16]
 801238e:	330e      	adds	r3, #14
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012394:	693b      	ldr	r3, [r7, #16]
 8012396:	3318      	adds	r3, #24
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801239c:	683b      	ldr	r3, [r7, #0]
 801239e:	3304      	adds	r3, #4
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d102      	bne.n	80123ac <etharp_input+0x74>
    for_us = 0;
 80123a6:	2300      	movs	r3, #0
 80123a8:	75fb      	strb	r3, [r7, #23]
 80123aa:	e009      	b.n	80123c0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80123ac:	68ba      	ldr	r2, [r7, #8]
 80123ae:	683b      	ldr	r3, [r7, #0]
 80123b0:	3304      	adds	r3, #4
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	429a      	cmp	r2, r3
 80123b6:	bf0c      	ite	eq
 80123b8:	2301      	moveq	r3, #1
 80123ba:	2300      	movne	r3, #0
 80123bc:	b2db      	uxtb	r3, r3
 80123be:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80123c0:	693b      	ldr	r3, [r7, #16]
 80123c2:	f103 0208 	add.w	r2, r3, #8
 80123c6:	7dfb      	ldrb	r3, [r7, #23]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d001      	beq.n	80123d0 <etharp_input+0x98>
 80123cc:	2301      	movs	r3, #1
 80123ce:	e000      	b.n	80123d2 <etharp_input+0x9a>
 80123d0:	2302      	movs	r3, #2
 80123d2:	f107 010c 	add.w	r1, r7, #12
 80123d6:	6838      	ldr	r0, [r7, #0]
 80123d8:	f7ff fed8 	bl	801218c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80123dc:	693b      	ldr	r3, [r7, #16]
 80123de:	88db      	ldrh	r3, [r3, #6]
 80123e0:	b29b      	uxth	r3, r3
 80123e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80123e6:	d003      	beq.n	80123f0 <etharp_input+0xb8>
 80123e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80123ec:	d01e      	beq.n	801242c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80123ee:	e020      	b.n	8012432 <etharp_input+0xfa>
      if (for_us) {
 80123f0:	7dfb      	ldrb	r3, [r7, #23]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d01c      	beq.n	8012430 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80123fc:	693b      	ldr	r3, [r7, #16]
 80123fe:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8012408:	683b      	ldr	r3, [r7, #0]
 801240a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801240c:	693a      	ldr	r2, [r7, #16]
 801240e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012410:	2102      	movs	r1, #2
 8012412:	9103      	str	r1, [sp, #12]
 8012414:	f107 010c 	add.w	r1, r7, #12
 8012418:	9102      	str	r1, [sp, #8]
 801241a:	9201      	str	r2, [sp, #4]
 801241c:	9300      	str	r3, [sp, #0]
 801241e:	462b      	mov	r3, r5
 8012420:	4622      	mov	r2, r4
 8012422:	4601      	mov	r1, r0
 8012424:	6838      	ldr	r0, [r7, #0]
 8012426:	f000 faeb 	bl	8012a00 <etharp_raw>
      break;
 801242a:	e001      	b.n	8012430 <etharp_input+0xf8>
      break;
 801242c:	bf00      	nop
 801242e:	e000      	b.n	8012432 <etharp_input+0xfa>
      break;
 8012430:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012432:	6878      	ldr	r0, [r7, #4]
 8012434:	f7f9 fd32 	bl	800be9c <pbuf_free>
}
 8012438:	3718      	adds	r7, #24
 801243a:	46bd      	mov	sp, r7
 801243c:	bdb0      	pop	{r4, r5, r7, pc}
 801243e:	bf00      	nop
 8012440:	0801798c 	.word	0x0801798c
 8012444:	08017adc 	.word	0x08017adc
 8012448:	08017a04 	.word	0x08017a04

0801244c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b086      	sub	sp, #24
 8012450:	af02      	add	r7, sp, #8
 8012452:	60f8      	str	r0, [r7, #12]
 8012454:	60b9      	str	r1, [r7, #8]
 8012456:	4613      	mov	r3, r2
 8012458:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801245a:	79fa      	ldrb	r2, [r7, #7]
 801245c:	4944      	ldr	r1, [pc, #272]	@ (8012570 <etharp_output_to_arp_index+0x124>)
 801245e:	4613      	mov	r3, r2
 8012460:	005b      	lsls	r3, r3, #1
 8012462:	4413      	add	r3, r2
 8012464:	00db      	lsls	r3, r3, #3
 8012466:	440b      	add	r3, r1
 8012468:	3314      	adds	r3, #20
 801246a:	781b      	ldrb	r3, [r3, #0]
 801246c:	2b01      	cmp	r3, #1
 801246e:	d806      	bhi.n	801247e <etharp_output_to_arp_index+0x32>
 8012470:	4b40      	ldr	r3, [pc, #256]	@ (8012574 <etharp_output_to_arp_index+0x128>)
 8012472:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8012476:	4940      	ldr	r1, [pc, #256]	@ (8012578 <etharp_output_to_arp_index+0x12c>)
 8012478:	4840      	ldr	r0, [pc, #256]	@ (801257c <etharp_output_to_arp_index+0x130>)
 801247a:	f002 f8ed 	bl	8014658 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801247e:	79fa      	ldrb	r2, [r7, #7]
 8012480:	493b      	ldr	r1, [pc, #236]	@ (8012570 <etharp_output_to_arp_index+0x124>)
 8012482:	4613      	mov	r3, r2
 8012484:	005b      	lsls	r3, r3, #1
 8012486:	4413      	add	r3, r2
 8012488:	00db      	lsls	r3, r3, #3
 801248a:	440b      	add	r3, r1
 801248c:	3314      	adds	r3, #20
 801248e:	781b      	ldrb	r3, [r3, #0]
 8012490:	2b02      	cmp	r3, #2
 8012492:	d153      	bne.n	801253c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012494:	79fa      	ldrb	r2, [r7, #7]
 8012496:	4936      	ldr	r1, [pc, #216]	@ (8012570 <etharp_output_to_arp_index+0x124>)
 8012498:	4613      	mov	r3, r2
 801249a:	005b      	lsls	r3, r3, #1
 801249c:	4413      	add	r3, r2
 801249e:	00db      	lsls	r3, r3, #3
 80124a0:	440b      	add	r3, r1
 80124a2:	3312      	adds	r3, #18
 80124a4:	881b      	ldrh	r3, [r3, #0]
 80124a6:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80124aa:	d919      	bls.n	80124e0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80124ac:	79fa      	ldrb	r2, [r7, #7]
 80124ae:	4613      	mov	r3, r2
 80124b0:	005b      	lsls	r3, r3, #1
 80124b2:	4413      	add	r3, r2
 80124b4:	00db      	lsls	r3, r3, #3
 80124b6:	4a2e      	ldr	r2, [pc, #184]	@ (8012570 <etharp_output_to_arp_index+0x124>)
 80124b8:	4413      	add	r3, r2
 80124ba:	3304      	adds	r3, #4
 80124bc:	4619      	mov	r1, r3
 80124be:	68f8      	ldr	r0, [r7, #12]
 80124c0:	f000 fb4c 	bl	8012b5c <etharp_request>
 80124c4:	4603      	mov	r3, r0
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d138      	bne.n	801253c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80124ca:	79fa      	ldrb	r2, [r7, #7]
 80124cc:	4928      	ldr	r1, [pc, #160]	@ (8012570 <etharp_output_to_arp_index+0x124>)
 80124ce:	4613      	mov	r3, r2
 80124d0:	005b      	lsls	r3, r3, #1
 80124d2:	4413      	add	r3, r2
 80124d4:	00db      	lsls	r3, r3, #3
 80124d6:	440b      	add	r3, r1
 80124d8:	3314      	adds	r3, #20
 80124da:	2203      	movs	r2, #3
 80124dc:	701a      	strb	r2, [r3, #0]
 80124de:	e02d      	b.n	801253c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80124e0:	79fa      	ldrb	r2, [r7, #7]
 80124e2:	4923      	ldr	r1, [pc, #140]	@ (8012570 <etharp_output_to_arp_index+0x124>)
 80124e4:	4613      	mov	r3, r2
 80124e6:	005b      	lsls	r3, r3, #1
 80124e8:	4413      	add	r3, r2
 80124ea:	00db      	lsls	r3, r3, #3
 80124ec:	440b      	add	r3, r1
 80124ee:	3312      	adds	r3, #18
 80124f0:	881b      	ldrh	r3, [r3, #0]
 80124f2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80124f6:	d321      	bcc.n	801253c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80124f8:	79fa      	ldrb	r2, [r7, #7]
 80124fa:	4613      	mov	r3, r2
 80124fc:	005b      	lsls	r3, r3, #1
 80124fe:	4413      	add	r3, r2
 8012500:	00db      	lsls	r3, r3, #3
 8012502:	4a1b      	ldr	r2, [pc, #108]	@ (8012570 <etharp_output_to_arp_index+0x124>)
 8012504:	4413      	add	r3, r2
 8012506:	1d19      	adds	r1, r3, #4
 8012508:	79fa      	ldrb	r2, [r7, #7]
 801250a:	4613      	mov	r3, r2
 801250c:	005b      	lsls	r3, r3, #1
 801250e:	4413      	add	r3, r2
 8012510:	00db      	lsls	r3, r3, #3
 8012512:	3308      	adds	r3, #8
 8012514:	4a16      	ldr	r2, [pc, #88]	@ (8012570 <etharp_output_to_arp_index+0x124>)
 8012516:	4413      	add	r3, r2
 8012518:	3304      	adds	r3, #4
 801251a:	461a      	mov	r2, r3
 801251c:	68f8      	ldr	r0, [r7, #12]
 801251e:	f000 fafb 	bl	8012b18 <etharp_request_dst>
 8012522:	4603      	mov	r3, r0
 8012524:	2b00      	cmp	r3, #0
 8012526:	d109      	bne.n	801253c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012528:	79fa      	ldrb	r2, [r7, #7]
 801252a:	4911      	ldr	r1, [pc, #68]	@ (8012570 <etharp_output_to_arp_index+0x124>)
 801252c:	4613      	mov	r3, r2
 801252e:	005b      	lsls	r3, r3, #1
 8012530:	4413      	add	r3, r2
 8012532:	00db      	lsls	r3, r3, #3
 8012534:	440b      	add	r3, r1
 8012536:	3314      	adds	r3, #20
 8012538:	2203      	movs	r2, #3
 801253a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8012542:	79fa      	ldrb	r2, [r7, #7]
 8012544:	4613      	mov	r3, r2
 8012546:	005b      	lsls	r3, r3, #1
 8012548:	4413      	add	r3, r2
 801254a:	00db      	lsls	r3, r3, #3
 801254c:	3308      	adds	r3, #8
 801254e:	4a08      	ldr	r2, [pc, #32]	@ (8012570 <etharp_output_to_arp_index+0x124>)
 8012550:	4413      	add	r3, r2
 8012552:	3304      	adds	r3, #4
 8012554:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012558:	9200      	str	r2, [sp, #0]
 801255a:	460a      	mov	r2, r1
 801255c:	68b9      	ldr	r1, [r7, #8]
 801255e:	68f8      	ldr	r0, [r7, #12]
 8012560:	f001 fe40 	bl	80141e4 <ethernet_output>
 8012564:	4603      	mov	r3, r0
}
 8012566:	4618      	mov	r0, r3
 8012568:	3710      	adds	r7, #16
 801256a:	46bd      	mov	sp, r7
 801256c:	bd80      	pop	{r7, pc}
 801256e:	bf00      	nop
 8012570:	2000d408 	.word	0x2000d408
 8012574:	0801798c 	.word	0x0801798c
 8012578:	08017afc 	.word	0x08017afc
 801257c:	08017a04 	.word	0x08017a04

08012580 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b08a      	sub	sp, #40	@ 0x28
 8012584:	af02      	add	r7, sp, #8
 8012586:	60f8      	str	r0, [r7, #12]
 8012588:	60b9      	str	r1, [r7, #8]
 801258a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d106      	bne.n	80125a4 <etharp_output+0x24>
 8012596:	4b73      	ldr	r3, [pc, #460]	@ (8012764 <etharp_output+0x1e4>)
 8012598:	f240 321e 	movw	r2, #798	@ 0x31e
 801259c:	4972      	ldr	r1, [pc, #456]	@ (8012768 <etharp_output+0x1e8>)
 801259e:	4873      	ldr	r0, [pc, #460]	@ (801276c <etharp_output+0x1ec>)
 80125a0:	f002 f85a 	bl	8014658 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80125a4:	68bb      	ldr	r3, [r7, #8]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d106      	bne.n	80125b8 <etharp_output+0x38>
 80125aa:	4b6e      	ldr	r3, [pc, #440]	@ (8012764 <etharp_output+0x1e4>)
 80125ac:	f240 321f 	movw	r2, #799	@ 0x31f
 80125b0:	496f      	ldr	r1, [pc, #444]	@ (8012770 <etharp_output+0x1f0>)
 80125b2:	486e      	ldr	r0, [pc, #440]	@ (801276c <etharp_output+0x1ec>)
 80125b4:	f002 f850 	bl	8014658 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d106      	bne.n	80125cc <etharp_output+0x4c>
 80125be:	4b69      	ldr	r3, [pc, #420]	@ (8012764 <etharp_output+0x1e4>)
 80125c0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80125c4:	496b      	ldr	r1, [pc, #428]	@ (8012774 <etharp_output+0x1f4>)
 80125c6:	4869      	ldr	r0, [pc, #420]	@ (801276c <etharp_output+0x1ec>)
 80125c8:	f002 f846 	bl	8014658 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	68f9      	ldr	r1, [r7, #12]
 80125d2:	4618      	mov	r0, r3
 80125d4:	f000 fef8 	bl	80133c8 <ip4_addr_isbroadcast_u32>
 80125d8:	4603      	mov	r3, r0
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d002      	beq.n	80125e4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80125de:	4b66      	ldr	r3, [pc, #408]	@ (8012778 <etharp_output+0x1f8>)
 80125e0:	61fb      	str	r3, [r7, #28]
 80125e2:	e0af      	b.n	8012744 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80125ec:	2be0      	cmp	r3, #224	@ 0xe0
 80125ee:	d118      	bne.n	8012622 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80125f0:	2301      	movs	r3, #1
 80125f2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80125f4:	2300      	movs	r3, #0
 80125f6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80125f8:	235e      	movs	r3, #94	@ 0x5e
 80125fa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	3301      	adds	r3, #1
 8012600:	781b      	ldrb	r3, [r3, #0]
 8012602:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012606:	b2db      	uxtb	r3, r3
 8012608:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	3302      	adds	r3, #2
 801260e:	781b      	ldrb	r3, [r3, #0]
 8012610:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	3303      	adds	r3, #3
 8012616:	781b      	ldrb	r3, [r3, #0]
 8012618:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801261a:	f107 0310 	add.w	r3, r7, #16
 801261e:	61fb      	str	r3, [r7, #28]
 8012620:	e090      	b.n	8012744 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	681a      	ldr	r2, [r3, #0]
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	3304      	adds	r3, #4
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	405a      	eors	r2, r3
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	3308      	adds	r3, #8
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	4013      	ands	r3, r2
 8012636:	2b00      	cmp	r3, #0
 8012638:	d012      	beq.n	8012660 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012640:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8012644:	4293      	cmp	r3, r2
 8012646:	d00b      	beq.n	8012660 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	330c      	adds	r3, #12
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d003      	beq.n	801265a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	330c      	adds	r3, #12
 8012656:	61bb      	str	r3, [r7, #24]
 8012658:	e002      	b.n	8012660 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801265a:	f06f 0303 	mvn.w	r3, #3
 801265e:	e07d      	b.n	801275c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012660:	4b46      	ldr	r3, [pc, #280]	@ (801277c <etharp_output+0x1fc>)
 8012662:	781b      	ldrb	r3, [r3, #0]
 8012664:	4619      	mov	r1, r3
 8012666:	4a46      	ldr	r2, [pc, #280]	@ (8012780 <etharp_output+0x200>)
 8012668:	460b      	mov	r3, r1
 801266a:	005b      	lsls	r3, r3, #1
 801266c:	440b      	add	r3, r1
 801266e:	00db      	lsls	r3, r3, #3
 8012670:	4413      	add	r3, r2
 8012672:	3314      	adds	r3, #20
 8012674:	781b      	ldrb	r3, [r3, #0]
 8012676:	2b01      	cmp	r3, #1
 8012678:	d925      	bls.n	80126c6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801267a:	4b40      	ldr	r3, [pc, #256]	@ (801277c <etharp_output+0x1fc>)
 801267c:	781b      	ldrb	r3, [r3, #0]
 801267e:	4619      	mov	r1, r3
 8012680:	4a3f      	ldr	r2, [pc, #252]	@ (8012780 <etharp_output+0x200>)
 8012682:	460b      	mov	r3, r1
 8012684:	005b      	lsls	r3, r3, #1
 8012686:	440b      	add	r3, r1
 8012688:	00db      	lsls	r3, r3, #3
 801268a:	4413      	add	r3, r2
 801268c:	3308      	adds	r3, #8
 801268e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012690:	68fa      	ldr	r2, [r7, #12]
 8012692:	429a      	cmp	r2, r3
 8012694:	d117      	bne.n	80126c6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012696:	69bb      	ldr	r3, [r7, #24]
 8012698:	681a      	ldr	r2, [r3, #0]
 801269a:	4b38      	ldr	r3, [pc, #224]	@ (801277c <etharp_output+0x1fc>)
 801269c:	781b      	ldrb	r3, [r3, #0]
 801269e:	4618      	mov	r0, r3
 80126a0:	4937      	ldr	r1, [pc, #220]	@ (8012780 <etharp_output+0x200>)
 80126a2:	4603      	mov	r3, r0
 80126a4:	005b      	lsls	r3, r3, #1
 80126a6:	4403      	add	r3, r0
 80126a8:	00db      	lsls	r3, r3, #3
 80126aa:	440b      	add	r3, r1
 80126ac:	3304      	adds	r3, #4
 80126ae:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80126b0:	429a      	cmp	r2, r3
 80126b2:	d108      	bne.n	80126c6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80126b4:	4b31      	ldr	r3, [pc, #196]	@ (801277c <etharp_output+0x1fc>)
 80126b6:	781b      	ldrb	r3, [r3, #0]
 80126b8:	461a      	mov	r2, r3
 80126ba:	68b9      	ldr	r1, [r7, #8]
 80126bc:	68f8      	ldr	r0, [r7, #12]
 80126be:	f7ff fec5 	bl	801244c <etharp_output_to_arp_index>
 80126c2:	4603      	mov	r3, r0
 80126c4:	e04a      	b.n	801275c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80126c6:	2300      	movs	r3, #0
 80126c8:	75fb      	strb	r3, [r7, #23]
 80126ca:	e031      	b.n	8012730 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80126cc:	7dfa      	ldrb	r2, [r7, #23]
 80126ce:	492c      	ldr	r1, [pc, #176]	@ (8012780 <etharp_output+0x200>)
 80126d0:	4613      	mov	r3, r2
 80126d2:	005b      	lsls	r3, r3, #1
 80126d4:	4413      	add	r3, r2
 80126d6:	00db      	lsls	r3, r3, #3
 80126d8:	440b      	add	r3, r1
 80126da:	3314      	adds	r3, #20
 80126dc:	781b      	ldrb	r3, [r3, #0]
 80126de:	2b01      	cmp	r3, #1
 80126e0:	d923      	bls.n	801272a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80126e2:	7dfa      	ldrb	r2, [r7, #23]
 80126e4:	4926      	ldr	r1, [pc, #152]	@ (8012780 <etharp_output+0x200>)
 80126e6:	4613      	mov	r3, r2
 80126e8:	005b      	lsls	r3, r3, #1
 80126ea:	4413      	add	r3, r2
 80126ec:	00db      	lsls	r3, r3, #3
 80126ee:	440b      	add	r3, r1
 80126f0:	3308      	adds	r3, #8
 80126f2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80126f4:	68fa      	ldr	r2, [r7, #12]
 80126f6:	429a      	cmp	r2, r3
 80126f8:	d117      	bne.n	801272a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80126fa:	69bb      	ldr	r3, [r7, #24]
 80126fc:	6819      	ldr	r1, [r3, #0]
 80126fe:	7dfa      	ldrb	r2, [r7, #23]
 8012700:	481f      	ldr	r0, [pc, #124]	@ (8012780 <etharp_output+0x200>)
 8012702:	4613      	mov	r3, r2
 8012704:	005b      	lsls	r3, r3, #1
 8012706:	4413      	add	r3, r2
 8012708:	00db      	lsls	r3, r3, #3
 801270a:	4403      	add	r3, r0
 801270c:	3304      	adds	r3, #4
 801270e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012710:	4299      	cmp	r1, r3
 8012712:	d10a      	bne.n	801272a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012714:	4a19      	ldr	r2, [pc, #100]	@ (801277c <etharp_output+0x1fc>)
 8012716:	7dfb      	ldrb	r3, [r7, #23]
 8012718:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801271a:	7dfb      	ldrb	r3, [r7, #23]
 801271c:	461a      	mov	r2, r3
 801271e:	68b9      	ldr	r1, [r7, #8]
 8012720:	68f8      	ldr	r0, [r7, #12]
 8012722:	f7ff fe93 	bl	801244c <etharp_output_to_arp_index>
 8012726:	4603      	mov	r3, r0
 8012728:	e018      	b.n	801275c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801272a:	7dfb      	ldrb	r3, [r7, #23]
 801272c:	3301      	adds	r3, #1
 801272e:	75fb      	strb	r3, [r7, #23]
 8012730:	7dfb      	ldrb	r3, [r7, #23]
 8012732:	2b09      	cmp	r3, #9
 8012734:	d9ca      	bls.n	80126cc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012736:	68ba      	ldr	r2, [r7, #8]
 8012738:	69b9      	ldr	r1, [r7, #24]
 801273a:	68f8      	ldr	r0, [r7, #12]
 801273c:	f000 f822 	bl	8012784 <etharp_query>
 8012740:	4603      	mov	r3, r0
 8012742:	e00b      	b.n	801275c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801274a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801274e:	9300      	str	r3, [sp, #0]
 8012750:	69fb      	ldr	r3, [r7, #28]
 8012752:	68b9      	ldr	r1, [r7, #8]
 8012754:	68f8      	ldr	r0, [r7, #12]
 8012756:	f001 fd45 	bl	80141e4 <ethernet_output>
 801275a:	4603      	mov	r3, r0
}
 801275c:	4618      	mov	r0, r3
 801275e:	3720      	adds	r7, #32
 8012760:	46bd      	mov	sp, r7
 8012762:	bd80      	pop	{r7, pc}
 8012764:	0801798c 	.word	0x0801798c
 8012768:	08017adc 	.word	0x08017adc
 801276c:	08017a04 	.word	0x08017a04
 8012770:	08017b2c 	.word	0x08017b2c
 8012774:	08017acc 	.word	0x08017acc
 8012778:	080181d0 	.word	0x080181d0
 801277c:	2000d4f8 	.word	0x2000d4f8
 8012780:	2000d408 	.word	0x2000d408

08012784 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b08c      	sub	sp, #48	@ 0x30
 8012788:	af02      	add	r7, sp, #8
 801278a:	60f8      	str	r0, [r7, #12]
 801278c:	60b9      	str	r1, [r7, #8]
 801278e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	3326      	adds	r3, #38	@ 0x26
 8012794:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012796:	23ff      	movs	r3, #255	@ 0xff
 8012798:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801279c:	2300      	movs	r3, #0
 801279e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80127a0:	68bb      	ldr	r3, [r7, #8]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	68f9      	ldr	r1, [r7, #12]
 80127a6:	4618      	mov	r0, r3
 80127a8:	f000 fe0e 	bl	80133c8 <ip4_addr_isbroadcast_u32>
 80127ac:	4603      	mov	r3, r0
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d10c      	bne.n	80127cc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80127b2:	68bb      	ldr	r3, [r7, #8]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80127ba:	2be0      	cmp	r3, #224	@ 0xe0
 80127bc:	d006      	beq.n	80127cc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80127be:	68bb      	ldr	r3, [r7, #8]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d003      	beq.n	80127cc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80127c4:	68bb      	ldr	r3, [r7, #8]
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d102      	bne.n	80127d2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80127cc:	f06f 030f 	mvn.w	r3, #15
 80127d0:	e101      	b.n	80129d6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80127d2:	68fa      	ldr	r2, [r7, #12]
 80127d4:	2101      	movs	r1, #1
 80127d6:	68b8      	ldr	r0, [r7, #8]
 80127d8:	f7ff fb60 	bl	8011e9c <etharp_find_entry>
 80127dc:	4603      	mov	r3, r0
 80127de:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80127e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	da02      	bge.n	80127ee <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80127e8:	8a7b      	ldrh	r3, [r7, #18]
 80127ea:	b25b      	sxtb	r3, r3
 80127ec:	e0f3      	b.n	80129d6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80127ee:	8a7b      	ldrh	r3, [r7, #18]
 80127f0:	2b7e      	cmp	r3, #126	@ 0x7e
 80127f2:	d906      	bls.n	8012802 <etharp_query+0x7e>
 80127f4:	4b7a      	ldr	r3, [pc, #488]	@ (80129e0 <etharp_query+0x25c>)
 80127f6:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80127fa:	497a      	ldr	r1, [pc, #488]	@ (80129e4 <etharp_query+0x260>)
 80127fc:	487a      	ldr	r0, [pc, #488]	@ (80129e8 <etharp_query+0x264>)
 80127fe:	f001 ff2b 	bl	8014658 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012802:	8a7b      	ldrh	r3, [r7, #18]
 8012804:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012806:	7c7a      	ldrb	r2, [r7, #17]
 8012808:	4978      	ldr	r1, [pc, #480]	@ (80129ec <etharp_query+0x268>)
 801280a:	4613      	mov	r3, r2
 801280c:	005b      	lsls	r3, r3, #1
 801280e:	4413      	add	r3, r2
 8012810:	00db      	lsls	r3, r3, #3
 8012812:	440b      	add	r3, r1
 8012814:	3314      	adds	r3, #20
 8012816:	781b      	ldrb	r3, [r3, #0]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d115      	bne.n	8012848 <etharp_query+0xc4>
    is_new_entry = 1;
 801281c:	2301      	movs	r3, #1
 801281e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012820:	7c7a      	ldrb	r2, [r7, #17]
 8012822:	4972      	ldr	r1, [pc, #456]	@ (80129ec <etharp_query+0x268>)
 8012824:	4613      	mov	r3, r2
 8012826:	005b      	lsls	r3, r3, #1
 8012828:	4413      	add	r3, r2
 801282a:	00db      	lsls	r3, r3, #3
 801282c:	440b      	add	r3, r1
 801282e:	3314      	adds	r3, #20
 8012830:	2201      	movs	r2, #1
 8012832:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012834:	7c7a      	ldrb	r2, [r7, #17]
 8012836:	496d      	ldr	r1, [pc, #436]	@ (80129ec <etharp_query+0x268>)
 8012838:	4613      	mov	r3, r2
 801283a:	005b      	lsls	r3, r3, #1
 801283c:	4413      	add	r3, r2
 801283e:	00db      	lsls	r3, r3, #3
 8012840:	440b      	add	r3, r1
 8012842:	3308      	adds	r3, #8
 8012844:	68fa      	ldr	r2, [r7, #12]
 8012846:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012848:	7c7a      	ldrb	r2, [r7, #17]
 801284a:	4968      	ldr	r1, [pc, #416]	@ (80129ec <etharp_query+0x268>)
 801284c:	4613      	mov	r3, r2
 801284e:	005b      	lsls	r3, r3, #1
 8012850:	4413      	add	r3, r2
 8012852:	00db      	lsls	r3, r3, #3
 8012854:	440b      	add	r3, r1
 8012856:	3314      	adds	r3, #20
 8012858:	781b      	ldrb	r3, [r3, #0]
 801285a:	2b01      	cmp	r3, #1
 801285c:	d011      	beq.n	8012882 <etharp_query+0xfe>
 801285e:	7c7a      	ldrb	r2, [r7, #17]
 8012860:	4962      	ldr	r1, [pc, #392]	@ (80129ec <etharp_query+0x268>)
 8012862:	4613      	mov	r3, r2
 8012864:	005b      	lsls	r3, r3, #1
 8012866:	4413      	add	r3, r2
 8012868:	00db      	lsls	r3, r3, #3
 801286a:	440b      	add	r3, r1
 801286c:	3314      	adds	r3, #20
 801286e:	781b      	ldrb	r3, [r3, #0]
 8012870:	2b01      	cmp	r3, #1
 8012872:	d806      	bhi.n	8012882 <etharp_query+0xfe>
 8012874:	4b5a      	ldr	r3, [pc, #360]	@ (80129e0 <etharp_query+0x25c>)
 8012876:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801287a:	495d      	ldr	r1, [pc, #372]	@ (80129f0 <etharp_query+0x26c>)
 801287c:	485a      	ldr	r0, [pc, #360]	@ (80129e8 <etharp_query+0x264>)
 801287e:	f001 feeb 	bl	8014658 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012882:	6a3b      	ldr	r3, [r7, #32]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d102      	bne.n	801288e <etharp_query+0x10a>
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d10c      	bne.n	80128a8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801288e:	68b9      	ldr	r1, [r7, #8]
 8012890:	68f8      	ldr	r0, [r7, #12]
 8012892:	f000 f963 	bl	8012b5c <etharp_request>
 8012896:	4603      	mov	r3, r0
 8012898:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d102      	bne.n	80128a8 <etharp_query+0x124>
      return result;
 80128a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80128a6:	e096      	b.n	80129d6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d106      	bne.n	80128bc <etharp_query+0x138>
 80128ae:	4b4c      	ldr	r3, [pc, #304]	@ (80129e0 <etharp_query+0x25c>)
 80128b0:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80128b4:	494f      	ldr	r1, [pc, #316]	@ (80129f4 <etharp_query+0x270>)
 80128b6:	484c      	ldr	r0, [pc, #304]	@ (80129e8 <etharp_query+0x264>)
 80128b8:	f001 fece 	bl	8014658 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80128bc:	7c7a      	ldrb	r2, [r7, #17]
 80128be:	494b      	ldr	r1, [pc, #300]	@ (80129ec <etharp_query+0x268>)
 80128c0:	4613      	mov	r3, r2
 80128c2:	005b      	lsls	r3, r3, #1
 80128c4:	4413      	add	r3, r2
 80128c6:	00db      	lsls	r3, r3, #3
 80128c8:	440b      	add	r3, r1
 80128ca:	3314      	adds	r3, #20
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	2b01      	cmp	r3, #1
 80128d0:	d917      	bls.n	8012902 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80128d2:	4a49      	ldr	r2, [pc, #292]	@ (80129f8 <etharp_query+0x274>)
 80128d4:	7c7b      	ldrb	r3, [r7, #17]
 80128d6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80128d8:	7c7a      	ldrb	r2, [r7, #17]
 80128da:	4613      	mov	r3, r2
 80128dc:	005b      	lsls	r3, r3, #1
 80128de:	4413      	add	r3, r2
 80128e0:	00db      	lsls	r3, r3, #3
 80128e2:	3308      	adds	r3, #8
 80128e4:	4a41      	ldr	r2, [pc, #260]	@ (80129ec <etharp_query+0x268>)
 80128e6:	4413      	add	r3, r2
 80128e8:	3304      	adds	r3, #4
 80128ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80128ee:	9200      	str	r2, [sp, #0]
 80128f0:	697a      	ldr	r2, [r7, #20]
 80128f2:	6879      	ldr	r1, [r7, #4]
 80128f4:	68f8      	ldr	r0, [r7, #12]
 80128f6:	f001 fc75 	bl	80141e4 <ethernet_output>
 80128fa:	4603      	mov	r3, r0
 80128fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012900:	e067      	b.n	80129d2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012902:	7c7a      	ldrb	r2, [r7, #17]
 8012904:	4939      	ldr	r1, [pc, #228]	@ (80129ec <etharp_query+0x268>)
 8012906:	4613      	mov	r3, r2
 8012908:	005b      	lsls	r3, r3, #1
 801290a:	4413      	add	r3, r2
 801290c:	00db      	lsls	r3, r3, #3
 801290e:	440b      	add	r3, r1
 8012910:	3314      	adds	r3, #20
 8012912:	781b      	ldrb	r3, [r3, #0]
 8012914:	2b01      	cmp	r3, #1
 8012916:	d15c      	bne.n	80129d2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012918:	2300      	movs	r3, #0
 801291a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012920:	e01c      	b.n	801295c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012922:	69fb      	ldr	r3, [r7, #28]
 8012924:	895a      	ldrh	r2, [r3, #10]
 8012926:	69fb      	ldr	r3, [r7, #28]
 8012928:	891b      	ldrh	r3, [r3, #8]
 801292a:	429a      	cmp	r2, r3
 801292c:	d10a      	bne.n	8012944 <etharp_query+0x1c0>
 801292e:	69fb      	ldr	r3, [r7, #28]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d006      	beq.n	8012944 <etharp_query+0x1c0>
 8012936:	4b2a      	ldr	r3, [pc, #168]	@ (80129e0 <etharp_query+0x25c>)
 8012938:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801293c:	492f      	ldr	r1, [pc, #188]	@ (80129fc <etharp_query+0x278>)
 801293e:	482a      	ldr	r0, [pc, #168]	@ (80129e8 <etharp_query+0x264>)
 8012940:	f001 fe8a 	bl	8014658 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012944:	69fb      	ldr	r3, [r7, #28]
 8012946:	7b1b      	ldrb	r3, [r3, #12]
 8012948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801294c:	2b00      	cmp	r3, #0
 801294e:	d002      	beq.n	8012956 <etharp_query+0x1d2>
        copy_needed = 1;
 8012950:	2301      	movs	r3, #1
 8012952:	61bb      	str	r3, [r7, #24]
        break;
 8012954:	e005      	b.n	8012962 <etharp_query+0x1de>
      }
      p = p->next;
 8012956:	69fb      	ldr	r3, [r7, #28]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801295c:	69fb      	ldr	r3, [r7, #28]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d1df      	bne.n	8012922 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012962:	69bb      	ldr	r3, [r7, #24]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d007      	beq.n	8012978 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012968:	687a      	ldr	r2, [r7, #4]
 801296a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801296e:	200e      	movs	r0, #14
 8012970:	f7f9 fcfc 	bl	800c36c <pbuf_clone>
 8012974:	61f8      	str	r0, [r7, #28]
 8012976:	e004      	b.n	8012982 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801297c:	69f8      	ldr	r0, [r7, #28]
 801297e:	f7f9 fb33 	bl	800bfe8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012982:	69fb      	ldr	r3, [r7, #28]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d021      	beq.n	80129cc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012988:	7c7a      	ldrb	r2, [r7, #17]
 801298a:	4918      	ldr	r1, [pc, #96]	@ (80129ec <etharp_query+0x268>)
 801298c:	4613      	mov	r3, r2
 801298e:	005b      	lsls	r3, r3, #1
 8012990:	4413      	add	r3, r2
 8012992:	00db      	lsls	r3, r3, #3
 8012994:	440b      	add	r3, r1
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d00a      	beq.n	80129b2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801299c:	7c7a      	ldrb	r2, [r7, #17]
 801299e:	4913      	ldr	r1, [pc, #76]	@ (80129ec <etharp_query+0x268>)
 80129a0:	4613      	mov	r3, r2
 80129a2:	005b      	lsls	r3, r3, #1
 80129a4:	4413      	add	r3, r2
 80129a6:	00db      	lsls	r3, r3, #3
 80129a8:	440b      	add	r3, r1
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	4618      	mov	r0, r3
 80129ae:	f7f9 fa75 	bl	800be9c <pbuf_free>
      }
      arp_table[i].q = p;
 80129b2:	7c7a      	ldrb	r2, [r7, #17]
 80129b4:	490d      	ldr	r1, [pc, #52]	@ (80129ec <etharp_query+0x268>)
 80129b6:	4613      	mov	r3, r2
 80129b8:	005b      	lsls	r3, r3, #1
 80129ba:	4413      	add	r3, r2
 80129bc:	00db      	lsls	r3, r3, #3
 80129be:	440b      	add	r3, r1
 80129c0:	69fa      	ldr	r2, [r7, #28]
 80129c2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80129c4:	2300      	movs	r3, #0
 80129c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80129ca:	e002      	b.n	80129d2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80129cc:	23ff      	movs	r3, #255	@ 0xff
 80129ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80129d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80129d6:	4618      	mov	r0, r3
 80129d8:	3728      	adds	r7, #40	@ 0x28
 80129da:	46bd      	mov	sp, r7
 80129dc:	bd80      	pop	{r7, pc}
 80129de:	bf00      	nop
 80129e0:	0801798c 	.word	0x0801798c
 80129e4:	08017b38 	.word	0x08017b38
 80129e8:	08017a04 	.word	0x08017a04
 80129ec:	2000d408 	.word	0x2000d408
 80129f0:	08017b48 	.word	0x08017b48
 80129f4:	08017b2c 	.word	0x08017b2c
 80129f8:	2000d4f8 	.word	0x2000d4f8
 80129fc:	08017b70 	.word	0x08017b70

08012a00 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b08a      	sub	sp, #40	@ 0x28
 8012a04:	af02      	add	r7, sp, #8
 8012a06:	60f8      	str	r0, [r7, #12]
 8012a08:	60b9      	str	r1, [r7, #8]
 8012a0a:	607a      	str	r2, [r7, #4]
 8012a0c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012a0e:	2300      	movs	r3, #0
 8012a10:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d106      	bne.n	8012a26 <etharp_raw+0x26>
 8012a18:	4b3a      	ldr	r3, [pc, #232]	@ (8012b04 <etharp_raw+0x104>)
 8012a1a:	f240 4257 	movw	r2, #1111	@ 0x457
 8012a1e:	493a      	ldr	r1, [pc, #232]	@ (8012b08 <etharp_raw+0x108>)
 8012a20:	483a      	ldr	r0, [pc, #232]	@ (8012b0c <etharp_raw+0x10c>)
 8012a22:	f001 fe19 	bl	8014658 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012a26:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012a2a:	211c      	movs	r1, #28
 8012a2c:	200e      	movs	r0, #14
 8012a2e:	f7f8 ff51 	bl	800b8d4 <pbuf_alloc>
 8012a32:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012a34:	69bb      	ldr	r3, [r7, #24]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d102      	bne.n	8012a40 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8012a3e:	e05d      	b.n	8012afc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012a40:	69bb      	ldr	r3, [r7, #24]
 8012a42:	895b      	ldrh	r3, [r3, #10]
 8012a44:	2b1b      	cmp	r3, #27
 8012a46:	d806      	bhi.n	8012a56 <etharp_raw+0x56>
 8012a48:	4b2e      	ldr	r3, [pc, #184]	@ (8012b04 <etharp_raw+0x104>)
 8012a4a:	f240 4262 	movw	r2, #1122	@ 0x462
 8012a4e:	4930      	ldr	r1, [pc, #192]	@ (8012b10 <etharp_raw+0x110>)
 8012a50:	482e      	ldr	r0, [pc, #184]	@ (8012b0c <etharp_raw+0x10c>)
 8012a52:	f001 fe01 	bl	8014658 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012a56:	69bb      	ldr	r3, [r7, #24]
 8012a58:	685b      	ldr	r3, [r3, #4]
 8012a5a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012a5c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8012a5e:	4618      	mov	r0, r3
 8012a60:	f7f7 fe2e 	bl	800a6c0 <lwip_htons>
 8012a64:	4603      	mov	r3, r0
 8012a66:	461a      	mov	r2, r3
 8012a68:	697b      	ldr	r3, [r7, #20]
 8012a6a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012a72:	2b06      	cmp	r3, #6
 8012a74:	d006      	beq.n	8012a84 <etharp_raw+0x84>
 8012a76:	4b23      	ldr	r3, [pc, #140]	@ (8012b04 <etharp_raw+0x104>)
 8012a78:	f240 4269 	movw	r2, #1129	@ 0x469
 8012a7c:	4925      	ldr	r1, [pc, #148]	@ (8012b14 <etharp_raw+0x114>)
 8012a7e:	4823      	ldr	r0, [pc, #140]	@ (8012b0c <etharp_raw+0x10c>)
 8012a80:	f001 fdea 	bl	8014658 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012a84:	697b      	ldr	r3, [r7, #20]
 8012a86:	3308      	adds	r3, #8
 8012a88:	2206      	movs	r2, #6
 8012a8a:	6839      	ldr	r1, [r7, #0]
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	f001 ffa8 	bl	80149e2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012a92:	697b      	ldr	r3, [r7, #20]
 8012a94:	3312      	adds	r3, #18
 8012a96:	2206      	movs	r2, #6
 8012a98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f001 ffa1 	bl	80149e2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012aa0:	697b      	ldr	r3, [r7, #20]
 8012aa2:	330e      	adds	r3, #14
 8012aa4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012aa6:	6812      	ldr	r2, [r2, #0]
 8012aa8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012aaa:	697b      	ldr	r3, [r7, #20]
 8012aac:	3318      	adds	r3, #24
 8012aae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012ab0:	6812      	ldr	r2, [r2, #0]
 8012ab2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012ab4:	697b      	ldr	r3, [r7, #20]
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	701a      	strb	r2, [r3, #0]
 8012aba:	2200      	movs	r2, #0
 8012abc:	f042 0201 	orr.w	r2, r2, #1
 8012ac0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012ac2:	697b      	ldr	r3, [r7, #20]
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	f042 0208 	orr.w	r2, r2, #8
 8012aca:	709a      	strb	r2, [r3, #2]
 8012acc:	2200      	movs	r2, #0
 8012ace:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012ad0:	697b      	ldr	r3, [r7, #20]
 8012ad2:	2206      	movs	r2, #6
 8012ad4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012ad6:	697b      	ldr	r3, [r7, #20]
 8012ad8:	2204      	movs	r2, #4
 8012ada:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012adc:	f640 0306 	movw	r3, #2054	@ 0x806
 8012ae0:	9300      	str	r3, [sp, #0]
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	68ba      	ldr	r2, [r7, #8]
 8012ae6:	69b9      	ldr	r1, [r7, #24]
 8012ae8:	68f8      	ldr	r0, [r7, #12]
 8012aea:	f001 fb7b 	bl	80141e4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012aee:	69b8      	ldr	r0, [r7, #24]
 8012af0:	f7f9 f9d4 	bl	800be9c <pbuf_free>
  p = NULL;
 8012af4:	2300      	movs	r3, #0
 8012af6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012af8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012afc:	4618      	mov	r0, r3
 8012afe:	3720      	adds	r7, #32
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd80      	pop	{r7, pc}
 8012b04:	0801798c 	.word	0x0801798c
 8012b08:	08017adc 	.word	0x08017adc
 8012b0c:	08017a04 	.word	0x08017a04
 8012b10:	08017b8c 	.word	0x08017b8c
 8012b14:	08017bc0 	.word	0x08017bc0

08012b18 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b088      	sub	sp, #32
 8012b1c:	af04      	add	r7, sp, #16
 8012b1e:	60f8      	str	r0, [r7, #12]
 8012b20:	60b9      	str	r1, [r7, #8]
 8012b22:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012b34:	2201      	movs	r2, #1
 8012b36:	9203      	str	r2, [sp, #12]
 8012b38:	68ba      	ldr	r2, [r7, #8]
 8012b3a:	9202      	str	r2, [sp, #8]
 8012b3c:	4a06      	ldr	r2, [pc, #24]	@ (8012b58 <etharp_request_dst+0x40>)
 8012b3e:	9201      	str	r2, [sp, #4]
 8012b40:	9300      	str	r3, [sp, #0]
 8012b42:	4603      	mov	r3, r0
 8012b44:	687a      	ldr	r2, [r7, #4]
 8012b46:	68f8      	ldr	r0, [r7, #12]
 8012b48:	f7ff ff5a 	bl	8012a00 <etharp_raw>
 8012b4c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012b4e:	4618      	mov	r0, r3
 8012b50:	3710      	adds	r7, #16
 8012b52:	46bd      	mov	sp, r7
 8012b54:	bd80      	pop	{r7, pc}
 8012b56:	bf00      	nop
 8012b58:	080181d8 	.word	0x080181d8

08012b5c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b082      	sub	sp, #8
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
 8012b64:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012b66:	4a05      	ldr	r2, [pc, #20]	@ (8012b7c <etharp_request+0x20>)
 8012b68:	6839      	ldr	r1, [r7, #0]
 8012b6a:	6878      	ldr	r0, [r7, #4]
 8012b6c:	f7ff ffd4 	bl	8012b18 <etharp_request_dst>
 8012b70:	4603      	mov	r3, r0
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	3708      	adds	r7, #8
 8012b76:	46bd      	mov	sp, r7
 8012b78:	bd80      	pop	{r7, pc}
 8012b7a:	bf00      	nop
 8012b7c:	080181d0 	.word	0x080181d0

08012b80 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b08e      	sub	sp, #56	@ 0x38
 8012b84:	af04      	add	r7, sp, #16
 8012b86:	6078      	str	r0, [r7, #4]
 8012b88:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012b8a:	4b79      	ldr	r3, [pc, #484]	@ (8012d70 <icmp_input+0x1f0>)
 8012b8c:	689b      	ldr	r3, [r3, #8]
 8012b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b92:	781b      	ldrb	r3, [r3, #0]
 8012b94:	f003 030f 	and.w	r3, r3, #15
 8012b98:	b2db      	uxtb	r3, r3
 8012b9a:	009b      	lsls	r3, r3, #2
 8012b9c:	b2db      	uxtb	r3, r3
 8012b9e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8012ba0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012ba2:	2b13      	cmp	r3, #19
 8012ba4:	f240 80cd 	bls.w	8012d42 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	895b      	ldrh	r3, [r3, #10]
 8012bac:	2b03      	cmp	r3, #3
 8012bae:	f240 80ca 	bls.w	8012d46 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	685b      	ldr	r3, [r3, #4]
 8012bb6:	781b      	ldrb	r3, [r3, #0]
 8012bb8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012bbc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	f000 80b7 	beq.w	8012d34 <icmp_input+0x1b4>
 8012bc6:	2b08      	cmp	r3, #8
 8012bc8:	f040 80b7 	bne.w	8012d3a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012bcc:	4b69      	ldr	r3, [pc, #420]	@ (8012d74 <icmp_input+0x1f4>)
 8012bce:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012bd0:	4b67      	ldr	r3, [pc, #412]	@ (8012d70 <icmp_input+0x1f0>)
 8012bd2:	695b      	ldr	r3, [r3, #20]
 8012bd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012bd8:	2be0      	cmp	r3, #224	@ 0xe0
 8012bda:	f000 80bb 	beq.w	8012d54 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012bde:	4b64      	ldr	r3, [pc, #400]	@ (8012d70 <icmp_input+0x1f0>)
 8012be0:	695b      	ldr	r3, [r3, #20]
 8012be2:	4a63      	ldr	r2, [pc, #396]	@ (8012d70 <icmp_input+0x1f0>)
 8012be4:	6812      	ldr	r2, [r2, #0]
 8012be6:	4611      	mov	r1, r2
 8012be8:	4618      	mov	r0, r3
 8012bea:	f000 fbed 	bl	80133c8 <ip4_addr_isbroadcast_u32>
 8012bee:	4603      	mov	r3, r0
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	f040 80b1 	bne.w	8012d58 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	891b      	ldrh	r3, [r3, #8]
 8012bfa:	2b07      	cmp	r3, #7
 8012bfc:	f240 80a5 	bls.w	8012d4a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012c00:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012c02:	330e      	adds	r3, #14
 8012c04:	4619      	mov	r1, r3
 8012c06:	6878      	ldr	r0, [r7, #4]
 8012c08:	f7f9 f8b2 	bl	800bd70 <pbuf_add_header>
 8012c0c:	4603      	mov	r3, r0
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d04b      	beq.n	8012caa <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	891a      	ldrh	r2, [r3, #8]
 8012c16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012c18:	4413      	add	r3, r2
 8012c1a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	891b      	ldrh	r3, [r3, #8]
 8012c20:	8b7a      	ldrh	r2, [r7, #26]
 8012c22:	429a      	cmp	r2, r3
 8012c24:	f0c0 809a 	bcc.w	8012d5c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012c28:	8b7b      	ldrh	r3, [r7, #26]
 8012c2a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012c2e:	4619      	mov	r1, r3
 8012c30:	200e      	movs	r0, #14
 8012c32:	f7f8 fe4f 	bl	800b8d4 <pbuf_alloc>
 8012c36:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012c38:	697b      	ldr	r3, [r7, #20]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	f000 8090 	beq.w	8012d60 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012c40:	697b      	ldr	r3, [r7, #20]
 8012c42:	895b      	ldrh	r3, [r3, #10]
 8012c44:	461a      	mov	r2, r3
 8012c46:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012c48:	3308      	adds	r3, #8
 8012c4a:	429a      	cmp	r2, r3
 8012c4c:	d203      	bcs.n	8012c56 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012c4e:	6978      	ldr	r0, [r7, #20]
 8012c50:	f7f9 f924 	bl	800be9c <pbuf_free>
          goto icmperr;
 8012c54:	e085      	b.n	8012d62 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012c56:	697b      	ldr	r3, [r7, #20]
 8012c58:	685b      	ldr	r3, [r3, #4]
 8012c5a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012c5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f001 febf 	bl	80149e2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012c64:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012c66:	4619      	mov	r1, r3
 8012c68:	6978      	ldr	r0, [r7, #20]
 8012c6a:	f7f9 f891 	bl	800bd90 <pbuf_remove_header>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d009      	beq.n	8012c88 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012c74:	4b40      	ldr	r3, [pc, #256]	@ (8012d78 <icmp_input+0x1f8>)
 8012c76:	22b6      	movs	r2, #182	@ 0xb6
 8012c78:	4940      	ldr	r1, [pc, #256]	@ (8012d7c <icmp_input+0x1fc>)
 8012c7a:	4841      	ldr	r0, [pc, #260]	@ (8012d80 <icmp_input+0x200>)
 8012c7c:	f001 fcec 	bl	8014658 <iprintf>
          pbuf_free(r);
 8012c80:	6978      	ldr	r0, [r7, #20]
 8012c82:	f7f9 f90b 	bl	800be9c <pbuf_free>
          goto icmperr;
 8012c86:	e06c      	b.n	8012d62 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012c88:	6879      	ldr	r1, [r7, #4]
 8012c8a:	6978      	ldr	r0, [r7, #20]
 8012c8c:	f7f9 fa2a 	bl	800c0e4 <pbuf_copy>
 8012c90:	4603      	mov	r3, r0
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d003      	beq.n	8012c9e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012c96:	6978      	ldr	r0, [r7, #20]
 8012c98:	f7f9 f900 	bl	800be9c <pbuf_free>
          goto icmperr;
 8012c9c:	e061      	b.n	8012d62 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	f7f9 f8fc 	bl	800be9c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012ca4:	697b      	ldr	r3, [r7, #20]
 8012ca6:	607b      	str	r3, [r7, #4]
 8012ca8:	e00f      	b.n	8012cca <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012caa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012cac:	330e      	adds	r3, #14
 8012cae:	4619      	mov	r1, r3
 8012cb0:	6878      	ldr	r0, [r7, #4]
 8012cb2:	f7f9 f86d 	bl	800bd90 <pbuf_remove_header>
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d006      	beq.n	8012cca <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8012d78 <icmp_input+0x1f8>)
 8012cbe:	22c7      	movs	r2, #199	@ 0xc7
 8012cc0:	4930      	ldr	r1, [pc, #192]	@ (8012d84 <icmp_input+0x204>)
 8012cc2:	482f      	ldr	r0, [pc, #188]	@ (8012d80 <icmp_input+0x200>)
 8012cc4:	f001 fcc8 	bl	8014658 <iprintf>
          goto icmperr;
 8012cc8:	e04b      	b.n	8012d62 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	685b      	ldr	r3, [r3, #4]
 8012cce:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012cd0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012cd2:	4619      	mov	r1, r3
 8012cd4:	6878      	ldr	r0, [r7, #4]
 8012cd6:	f7f9 f84b 	bl	800bd70 <pbuf_add_header>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d12b      	bne.n	8012d38 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	685b      	ldr	r3, [r3, #4]
 8012ce4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012ce6:	69fb      	ldr	r3, [r7, #28]
 8012ce8:	681a      	ldr	r2, [r3, #0]
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012cee:	4b20      	ldr	r3, [pc, #128]	@ (8012d70 <icmp_input+0x1f0>)
 8012cf0:	691a      	ldr	r2, [r3, #16]
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012cf6:	693b      	ldr	r3, [r7, #16]
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012cfc:	693b      	ldr	r3, [r7, #16]
 8012cfe:	2200      	movs	r2, #0
 8012d00:	709a      	strb	r2, [r3, #2]
 8012d02:	2200      	movs	r2, #0
 8012d04:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	22ff      	movs	r2, #255	@ 0xff
 8012d0a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	2200      	movs	r2, #0
 8012d10:	729a      	strb	r2, [r3, #10]
 8012d12:	2200      	movs	r2, #0
 8012d14:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012d16:	683b      	ldr	r3, [r7, #0]
 8012d18:	9302      	str	r3, [sp, #8]
 8012d1a:	2301      	movs	r3, #1
 8012d1c:	9301      	str	r3, [sp, #4]
 8012d1e:	2300      	movs	r3, #0
 8012d20:	9300      	str	r3, [sp, #0]
 8012d22:	23ff      	movs	r3, #255	@ 0xff
 8012d24:	2200      	movs	r2, #0
 8012d26:	69f9      	ldr	r1, [r7, #28]
 8012d28:	6878      	ldr	r0, [r7, #4]
 8012d2a:	f000 fa75 	bl	8013218 <ip4_output_if>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8012d32:	e001      	b.n	8012d38 <icmp_input+0x1b8>
      break;
 8012d34:	bf00      	nop
 8012d36:	e000      	b.n	8012d3a <icmp_input+0x1ba>
      break;
 8012d38:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012d3a:	6878      	ldr	r0, [r7, #4]
 8012d3c:	f7f9 f8ae 	bl	800be9c <pbuf_free>
  return;
 8012d40:	e013      	b.n	8012d6a <icmp_input+0x1ea>
    goto lenerr;
 8012d42:	bf00      	nop
 8012d44:	e002      	b.n	8012d4c <icmp_input+0x1cc>
    goto lenerr;
 8012d46:	bf00      	nop
 8012d48:	e000      	b.n	8012d4c <icmp_input+0x1cc>
        goto lenerr;
 8012d4a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012d4c:	6878      	ldr	r0, [r7, #4]
 8012d4e:	f7f9 f8a5 	bl	800be9c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012d52:	e00a      	b.n	8012d6a <icmp_input+0x1ea>
        goto icmperr;
 8012d54:	bf00      	nop
 8012d56:	e004      	b.n	8012d62 <icmp_input+0x1e2>
        goto icmperr;
 8012d58:	bf00      	nop
 8012d5a:	e002      	b.n	8012d62 <icmp_input+0x1e2>
          goto icmperr;
 8012d5c:	bf00      	nop
 8012d5e:	e000      	b.n	8012d62 <icmp_input+0x1e2>
          goto icmperr;
 8012d60:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012d62:	6878      	ldr	r0, [r7, #4]
 8012d64:	f7f9 f89a 	bl	800be9c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012d68:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012d6a:	3728      	adds	r7, #40	@ 0x28
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	bd80      	pop	{r7, pc}
 8012d70:	2000a2a8 	.word	0x2000a2a8
 8012d74:	2000a2bc 	.word	0x2000a2bc
 8012d78:	08017c04 	.word	0x08017c04
 8012d7c:	08017c3c 	.word	0x08017c3c
 8012d80:	08017c74 	.word	0x08017c74
 8012d84:	08017c9c 	.word	0x08017c9c

08012d88 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b082      	sub	sp, #8
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
 8012d90:	460b      	mov	r3, r1
 8012d92:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012d94:	78fb      	ldrb	r3, [r7, #3]
 8012d96:	461a      	mov	r2, r3
 8012d98:	2103      	movs	r1, #3
 8012d9a:	6878      	ldr	r0, [r7, #4]
 8012d9c:	f000 f814 	bl	8012dc8 <icmp_send_response>
}
 8012da0:	bf00      	nop
 8012da2:	3708      	adds	r7, #8
 8012da4:	46bd      	mov	sp, r7
 8012da6:	bd80      	pop	{r7, pc}

08012da8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b082      	sub	sp, #8
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
 8012db0:	460b      	mov	r3, r1
 8012db2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012db4:	78fb      	ldrb	r3, [r7, #3]
 8012db6:	461a      	mov	r2, r3
 8012db8:	210b      	movs	r1, #11
 8012dba:	6878      	ldr	r0, [r7, #4]
 8012dbc:	f000 f804 	bl	8012dc8 <icmp_send_response>
}
 8012dc0:	bf00      	nop
 8012dc2:	3708      	adds	r7, #8
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	bd80      	pop	{r7, pc}

08012dc8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b08c      	sub	sp, #48	@ 0x30
 8012dcc:	af04      	add	r7, sp, #16
 8012dce:	6078      	str	r0, [r7, #4]
 8012dd0:	460b      	mov	r3, r1
 8012dd2:	70fb      	strb	r3, [r7, #3]
 8012dd4:	4613      	mov	r3, r2
 8012dd6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012dd8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012ddc:	2124      	movs	r1, #36	@ 0x24
 8012dde:	2022      	movs	r0, #34	@ 0x22
 8012de0:	f7f8 fd78 	bl	800b8d4 <pbuf_alloc>
 8012de4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012de6:	69fb      	ldr	r3, [r7, #28]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d04c      	beq.n	8012e86 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012dec:	69fb      	ldr	r3, [r7, #28]
 8012dee:	895b      	ldrh	r3, [r3, #10]
 8012df0:	2b23      	cmp	r3, #35	@ 0x23
 8012df2:	d806      	bhi.n	8012e02 <icmp_send_response+0x3a>
 8012df4:	4b26      	ldr	r3, [pc, #152]	@ (8012e90 <icmp_send_response+0xc8>)
 8012df6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8012dfa:	4926      	ldr	r1, [pc, #152]	@ (8012e94 <icmp_send_response+0xcc>)
 8012dfc:	4826      	ldr	r0, [pc, #152]	@ (8012e98 <icmp_send_response+0xd0>)
 8012dfe:	f001 fc2b 	bl	8014658 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	685b      	ldr	r3, [r3, #4]
 8012e06:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012e08:	69fb      	ldr	r3, [r7, #28]
 8012e0a:	685b      	ldr	r3, [r3, #4]
 8012e0c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8012e0e:	697b      	ldr	r3, [r7, #20]
 8012e10:	78fa      	ldrb	r2, [r7, #3]
 8012e12:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8012e14:	697b      	ldr	r3, [r7, #20]
 8012e16:	78ba      	ldrb	r2, [r7, #2]
 8012e18:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012e1a:	697b      	ldr	r3, [r7, #20]
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	711a      	strb	r2, [r3, #4]
 8012e20:	2200      	movs	r2, #0
 8012e22:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012e24:	697b      	ldr	r3, [r7, #20]
 8012e26:	2200      	movs	r2, #0
 8012e28:	719a      	strb	r2, [r3, #6]
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012e2e:	69fb      	ldr	r3, [r7, #28]
 8012e30:	685b      	ldr	r3, [r3, #4]
 8012e32:	f103 0008 	add.w	r0, r3, #8
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	685b      	ldr	r3, [r3, #4]
 8012e3a:	221c      	movs	r2, #28
 8012e3c:	4619      	mov	r1, r3
 8012e3e:	f001 fdd0 	bl	80149e2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012e42:	69bb      	ldr	r3, [r7, #24]
 8012e44:	68db      	ldr	r3, [r3, #12]
 8012e46:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012e48:	f107 030c 	add.w	r3, r7, #12
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f000 f825 	bl	8012e9c <ip4_route>
 8012e52:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012e54:	693b      	ldr	r3, [r7, #16]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d011      	beq.n	8012e7e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012e5a:	697b      	ldr	r3, [r7, #20]
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	709a      	strb	r2, [r3, #2]
 8012e60:	2200      	movs	r2, #0
 8012e62:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012e64:	f107 020c 	add.w	r2, r7, #12
 8012e68:	693b      	ldr	r3, [r7, #16]
 8012e6a:	9302      	str	r3, [sp, #8]
 8012e6c:	2301      	movs	r3, #1
 8012e6e:	9301      	str	r3, [sp, #4]
 8012e70:	2300      	movs	r3, #0
 8012e72:	9300      	str	r3, [sp, #0]
 8012e74:	23ff      	movs	r3, #255	@ 0xff
 8012e76:	2100      	movs	r1, #0
 8012e78:	69f8      	ldr	r0, [r7, #28]
 8012e7a:	f000 f9cd 	bl	8013218 <ip4_output_if>
  }
  pbuf_free(q);
 8012e7e:	69f8      	ldr	r0, [r7, #28]
 8012e80:	f7f9 f80c 	bl	800be9c <pbuf_free>
 8012e84:	e000      	b.n	8012e88 <icmp_send_response+0xc0>
    return;
 8012e86:	bf00      	nop
}
 8012e88:	3720      	adds	r7, #32
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd80      	pop	{r7, pc}
 8012e8e:	bf00      	nop
 8012e90:	08017c04 	.word	0x08017c04
 8012e94:	08017cd0 	.word	0x08017cd0
 8012e98:	08017c74 	.word	0x08017c74

08012e9c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012e9c:	b480      	push	{r7}
 8012e9e:	b085      	sub	sp, #20
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012ea4:	4b33      	ldr	r3, [pc, #204]	@ (8012f74 <ip4_route+0xd8>)
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	60fb      	str	r3, [r7, #12]
 8012eaa:	e036      	b.n	8012f1a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012eb2:	f003 0301 	and.w	r3, r3, #1
 8012eb6:	b2db      	uxtb	r3, r3
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d02b      	beq.n	8012f14 <ip4_route+0x78>
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012ec2:	089b      	lsrs	r3, r3, #2
 8012ec4:	f003 0301 	and.w	r3, r3, #1
 8012ec8:	b2db      	uxtb	r3, r3
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d022      	beq.n	8012f14 <ip4_route+0x78>
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	3304      	adds	r3, #4
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d01d      	beq.n	8012f14 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	681a      	ldr	r2, [r3, #0]
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	3304      	adds	r3, #4
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	405a      	eors	r2, r3
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	3308      	adds	r3, #8
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	4013      	ands	r3, r2
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d101      	bne.n	8012ef4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	e038      	b.n	8012f66 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012efa:	f003 0302 	and.w	r3, r3, #2
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d108      	bne.n	8012f14 <ip4_route+0x78>
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	681a      	ldr	r2, [r3, #0]
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	330c      	adds	r3, #12
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	429a      	cmp	r2, r3
 8012f0e:	d101      	bne.n	8012f14 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	e028      	b.n	8012f66 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	60fb      	str	r3, [r7, #12]
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d1c5      	bne.n	8012eac <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012f20:	4b15      	ldr	r3, [pc, #84]	@ (8012f78 <ip4_route+0xdc>)
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d01a      	beq.n	8012f5e <ip4_route+0xc2>
 8012f28:	4b13      	ldr	r3, [pc, #76]	@ (8012f78 <ip4_route+0xdc>)
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012f30:	f003 0301 	and.w	r3, r3, #1
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d012      	beq.n	8012f5e <ip4_route+0xc2>
 8012f38:	4b0f      	ldr	r3, [pc, #60]	@ (8012f78 <ip4_route+0xdc>)
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012f40:	f003 0304 	and.w	r3, r3, #4
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d00a      	beq.n	8012f5e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012f48:	4b0b      	ldr	r3, [pc, #44]	@ (8012f78 <ip4_route+0xdc>)
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	3304      	adds	r3, #4
 8012f4e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d004      	beq.n	8012f5e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	b2db      	uxtb	r3, r3
 8012f5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8012f5c:	d101      	bne.n	8012f62 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012f5e:	2300      	movs	r3, #0
 8012f60:	e001      	b.n	8012f66 <ip4_route+0xca>
  }

  return netif_default;
 8012f62:	4b05      	ldr	r3, [pc, #20]	@ (8012f78 <ip4_route+0xdc>)
 8012f64:	681b      	ldr	r3, [r3, #0]
}
 8012f66:	4618      	mov	r0, r3
 8012f68:	3714      	adds	r7, #20
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f70:	4770      	bx	lr
 8012f72:	bf00      	nop
 8012f74:	2000d39c 	.word	0x2000d39c
 8012f78:	2000d3a0 	.word	0x2000d3a0

08012f7c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b082      	sub	sp, #8
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012f8a:	f003 0301 	and.w	r3, r3, #1
 8012f8e:	b2db      	uxtb	r3, r3
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d016      	beq.n	8012fc2 <ip4_input_accept+0x46>
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	3304      	adds	r3, #4
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d011      	beq.n	8012fc2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8012fcc <ip4_input_accept+0x50>)
 8012fa0:	695a      	ldr	r2, [r3, #20]
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	3304      	adds	r3, #4
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	429a      	cmp	r2, r3
 8012faa:	d008      	beq.n	8012fbe <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012fac:	4b07      	ldr	r3, [pc, #28]	@ (8012fcc <ip4_input_accept+0x50>)
 8012fae:	695b      	ldr	r3, [r3, #20]
 8012fb0:	6879      	ldr	r1, [r7, #4]
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f000 fa08 	bl	80133c8 <ip4_addr_isbroadcast_u32>
 8012fb8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d001      	beq.n	8012fc2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012fbe:	2301      	movs	r3, #1
 8012fc0:	e000      	b.n	8012fc4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012fc2:	2300      	movs	r3, #0
}
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	3708      	adds	r7, #8
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	bd80      	pop	{r7, pc}
 8012fcc:	2000a2a8 	.word	0x2000a2a8

08012fd0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b086      	sub	sp, #24
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
 8012fd8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	685b      	ldr	r3, [r3, #4]
 8012fde:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012fe0:	697b      	ldr	r3, [r7, #20]
 8012fe2:	781b      	ldrb	r3, [r3, #0]
 8012fe4:	091b      	lsrs	r3, r3, #4
 8012fe6:	b2db      	uxtb	r3, r3
 8012fe8:	2b04      	cmp	r3, #4
 8012fea:	d004      	beq.n	8012ff6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012fec:	6878      	ldr	r0, [r7, #4]
 8012fee:	f7f8 ff55 	bl	800be9c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	e107      	b.n	8013206 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012ff6:	697b      	ldr	r3, [r7, #20]
 8012ff8:	781b      	ldrb	r3, [r3, #0]
 8012ffa:	f003 030f 	and.w	r3, r3, #15
 8012ffe:	b2db      	uxtb	r3, r3
 8013000:	009b      	lsls	r3, r3, #2
 8013002:	b2db      	uxtb	r3, r3
 8013004:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	885b      	ldrh	r3, [r3, #2]
 801300a:	b29b      	uxth	r3, r3
 801300c:	4618      	mov	r0, r3
 801300e:	f7f7 fb57 	bl	800a6c0 <lwip_htons>
 8013012:	4603      	mov	r3, r0
 8013014:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	891b      	ldrh	r3, [r3, #8]
 801301a:	89ba      	ldrh	r2, [r7, #12]
 801301c:	429a      	cmp	r2, r3
 801301e:	d204      	bcs.n	801302a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013020:	89bb      	ldrh	r3, [r7, #12]
 8013022:	4619      	mov	r1, r3
 8013024:	6878      	ldr	r0, [r7, #4]
 8013026:	f7f8 fdb3 	bl	800bb90 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	895b      	ldrh	r3, [r3, #10]
 801302e:	89fa      	ldrh	r2, [r7, #14]
 8013030:	429a      	cmp	r2, r3
 8013032:	d807      	bhi.n	8013044 <ip4_input+0x74>
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	891b      	ldrh	r3, [r3, #8]
 8013038:	89ba      	ldrh	r2, [r7, #12]
 801303a:	429a      	cmp	r2, r3
 801303c:	d802      	bhi.n	8013044 <ip4_input+0x74>
 801303e:	89fb      	ldrh	r3, [r7, #14]
 8013040:	2b13      	cmp	r3, #19
 8013042:	d804      	bhi.n	801304e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f7f8 ff29 	bl	800be9c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801304a:	2300      	movs	r3, #0
 801304c:	e0db      	b.n	8013206 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801304e:	697b      	ldr	r3, [r7, #20]
 8013050:	691b      	ldr	r3, [r3, #16]
 8013052:	4a6f      	ldr	r2, [pc, #444]	@ (8013210 <ip4_input+0x240>)
 8013054:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013056:	697b      	ldr	r3, [r7, #20]
 8013058:	68db      	ldr	r3, [r3, #12]
 801305a:	4a6d      	ldr	r2, [pc, #436]	@ (8013210 <ip4_input+0x240>)
 801305c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801305e:	4b6c      	ldr	r3, [pc, #432]	@ (8013210 <ip4_input+0x240>)
 8013060:	695b      	ldr	r3, [r3, #20]
 8013062:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013066:	2be0      	cmp	r3, #224	@ 0xe0
 8013068:	d112      	bne.n	8013090 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801306a:	683b      	ldr	r3, [r7, #0]
 801306c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013070:	f003 0301 	and.w	r3, r3, #1
 8013074:	b2db      	uxtb	r3, r3
 8013076:	2b00      	cmp	r3, #0
 8013078:	d007      	beq.n	801308a <ip4_input+0xba>
 801307a:	683b      	ldr	r3, [r7, #0]
 801307c:	3304      	adds	r3, #4
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d002      	beq.n	801308a <ip4_input+0xba>
      netif = inp;
 8013084:	683b      	ldr	r3, [r7, #0]
 8013086:	613b      	str	r3, [r7, #16]
 8013088:	e02a      	b.n	80130e0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801308a:	2300      	movs	r3, #0
 801308c:	613b      	str	r3, [r7, #16]
 801308e:	e027      	b.n	80130e0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013090:	6838      	ldr	r0, [r7, #0]
 8013092:	f7ff ff73 	bl	8012f7c <ip4_input_accept>
 8013096:	4603      	mov	r3, r0
 8013098:	2b00      	cmp	r3, #0
 801309a:	d002      	beq.n	80130a2 <ip4_input+0xd2>
      netif = inp;
 801309c:	683b      	ldr	r3, [r7, #0]
 801309e:	613b      	str	r3, [r7, #16]
 80130a0:	e01e      	b.n	80130e0 <ip4_input+0x110>
    } else {
      netif = NULL;
 80130a2:	2300      	movs	r3, #0
 80130a4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80130a6:	4b5a      	ldr	r3, [pc, #360]	@ (8013210 <ip4_input+0x240>)
 80130a8:	695b      	ldr	r3, [r3, #20]
 80130aa:	b2db      	uxtb	r3, r3
 80130ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80130ae:	d017      	beq.n	80130e0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80130b0:	4b58      	ldr	r3, [pc, #352]	@ (8013214 <ip4_input+0x244>)
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	613b      	str	r3, [r7, #16]
 80130b6:	e00e      	b.n	80130d6 <ip4_input+0x106>
          if (netif == inp) {
 80130b8:	693a      	ldr	r2, [r7, #16]
 80130ba:	683b      	ldr	r3, [r7, #0]
 80130bc:	429a      	cmp	r2, r3
 80130be:	d006      	beq.n	80130ce <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80130c0:	6938      	ldr	r0, [r7, #16]
 80130c2:	f7ff ff5b 	bl	8012f7c <ip4_input_accept>
 80130c6:	4603      	mov	r3, r0
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d108      	bne.n	80130de <ip4_input+0x10e>
 80130cc:	e000      	b.n	80130d0 <ip4_input+0x100>
            continue;
 80130ce:	bf00      	nop
        NETIF_FOREACH(netif) {
 80130d0:	693b      	ldr	r3, [r7, #16]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	613b      	str	r3, [r7, #16]
 80130d6:	693b      	ldr	r3, [r7, #16]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d1ed      	bne.n	80130b8 <ip4_input+0xe8>
 80130dc:	e000      	b.n	80130e0 <ip4_input+0x110>
            break;
 80130de:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80130e0:	4b4b      	ldr	r3, [pc, #300]	@ (8013210 <ip4_input+0x240>)
 80130e2:	691b      	ldr	r3, [r3, #16]
 80130e4:	6839      	ldr	r1, [r7, #0]
 80130e6:	4618      	mov	r0, r3
 80130e8:	f000 f96e 	bl	80133c8 <ip4_addr_isbroadcast_u32>
 80130ec:	4603      	mov	r3, r0
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d105      	bne.n	80130fe <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80130f2:	4b47      	ldr	r3, [pc, #284]	@ (8013210 <ip4_input+0x240>)
 80130f4:	691b      	ldr	r3, [r3, #16]
 80130f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80130fa:	2be0      	cmp	r3, #224	@ 0xe0
 80130fc:	d104      	bne.n	8013108 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80130fe:	6878      	ldr	r0, [r7, #4]
 8013100:	f7f8 fecc 	bl	800be9c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013104:	2300      	movs	r3, #0
 8013106:	e07e      	b.n	8013206 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013108:	693b      	ldr	r3, [r7, #16]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d104      	bne.n	8013118 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801310e:	6878      	ldr	r0, [r7, #4]
 8013110:	f7f8 fec4 	bl	800be9c <pbuf_free>
    return ERR_OK;
 8013114:	2300      	movs	r3, #0
 8013116:	e076      	b.n	8013206 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013118:	697b      	ldr	r3, [r7, #20]
 801311a:	88db      	ldrh	r3, [r3, #6]
 801311c:	b29b      	uxth	r3, r3
 801311e:	461a      	mov	r2, r3
 8013120:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8013124:	4013      	ands	r3, r2
 8013126:	2b00      	cmp	r3, #0
 8013128:	d00b      	beq.n	8013142 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801312a:	6878      	ldr	r0, [r7, #4]
 801312c:	f000 fc92 	bl	8013a54 <ip4_reass>
 8013130:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d101      	bne.n	801313c <ip4_input+0x16c>
      return ERR_OK;
 8013138:	2300      	movs	r3, #0
 801313a:	e064      	b.n	8013206 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	685b      	ldr	r3, [r3, #4]
 8013140:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013142:	4a33      	ldr	r2, [pc, #204]	@ (8013210 <ip4_input+0x240>)
 8013144:	693b      	ldr	r3, [r7, #16]
 8013146:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013148:	4a31      	ldr	r2, [pc, #196]	@ (8013210 <ip4_input+0x240>)
 801314a:	683b      	ldr	r3, [r7, #0]
 801314c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801314e:	4a30      	ldr	r2, [pc, #192]	@ (8013210 <ip4_input+0x240>)
 8013150:	697b      	ldr	r3, [r7, #20]
 8013152:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013154:	697b      	ldr	r3, [r7, #20]
 8013156:	781b      	ldrb	r3, [r3, #0]
 8013158:	f003 030f 	and.w	r3, r3, #15
 801315c:	b2db      	uxtb	r3, r3
 801315e:	009b      	lsls	r3, r3, #2
 8013160:	b2db      	uxtb	r3, r3
 8013162:	461a      	mov	r2, r3
 8013164:	4b2a      	ldr	r3, [pc, #168]	@ (8013210 <ip4_input+0x240>)
 8013166:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013168:	89fb      	ldrh	r3, [r7, #14]
 801316a:	4619      	mov	r1, r3
 801316c:	6878      	ldr	r0, [r7, #4]
 801316e:	f7f8 fe0f 	bl	800bd90 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013172:	697b      	ldr	r3, [r7, #20]
 8013174:	7a5b      	ldrb	r3, [r3, #9]
 8013176:	2b11      	cmp	r3, #17
 8013178:	d006      	beq.n	8013188 <ip4_input+0x1b8>
 801317a:	2b11      	cmp	r3, #17
 801317c:	dc13      	bgt.n	80131a6 <ip4_input+0x1d6>
 801317e:	2b01      	cmp	r3, #1
 8013180:	d00c      	beq.n	801319c <ip4_input+0x1cc>
 8013182:	2b06      	cmp	r3, #6
 8013184:	d005      	beq.n	8013192 <ip4_input+0x1c2>
 8013186:	e00e      	b.n	80131a6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013188:	6839      	ldr	r1, [r7, #0]
 801318a:	6878      	ldr	r0, [r7, #4]
 801318c:	f7fe fc68 	bl	8011a60 <udp_input>
        break;
 8013190:	e026      	b.n	80131e0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013192:	6839      	ldr	r1, [r7, #0]
 8013194:	6878      	ldr	r0, [r7, #4]
 8013196:	f7fa fcb7 	bl	800db08 <tcp_input>
        break;
 801319a:	e021      	b.n	80131e0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801319c:	6839      	ldr	r1, [r7, #0]
 801319e:	6878      	ldr	r0, [r7, #4]
 80131a0:	f7ff fcee 	bl	8012b80 <icmp_input>
        break;
 80131a4:	e01c      	b.n	80131e0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80131a6:	4b1a      	ldr	r3, [pc, #104]	@ (8013210 <ip4_input+0x240>)
 80131a8:	695b      	ldr	r3, [r3, #20]
 80131aa:	6939      	ldr	r1, [r7, #16]
 80131ac:	4618      	mov	r0, r3
 80131ae:	f000 f90b 	bl	80133c8 <ip4_addr_isbroadcast_u32>
 80131b2:	4603      	mov	r3, r0
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d10f      	bne.n	80131d8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80131b8:	4b15      	ldr	r3, [pc, #84]	@ (8013210 <ip4_input+0x240>)
 80131ba:	695b      	ldr	r3, [r3, #20]
 80131bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80131c0:	2be0      	cmp	r3, #224	@ 0xe0
 80131c2:	d009      	beq.n	80131d8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80131c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80131c8:	4619      	mov	r1, r3
 80131ca:	6878      	ldr	r0, [r7, #4]
 80131cc:	f7f8 fe53 	bl	800be76 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80131d0:	2102      	movs	r1, #2
 80131d2:	6878      	ldr	r0, [r7, #4]
 80131d4:	f7ff fdd8 	bl	8012d88 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80131d8:	6878      	ldr	r0, [r7, #4]
 80131da:	f7f8 fe5f 	bl	800be9c <pbuf_free>
        break;
 80131de:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80131e0:	4b0b      	ldr	r3, [pc, #44]	@ (8013210 <ip4_input+0x240>)
 80131e2:	2200      	movs	r2, #0
 80131e4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80131e6:	4b0a      	ldr	r3, [pc, #40]	@ (8013210 <ip4_input+0x240>)
 80131e8:	2200      	movs	r2, #0
 80131ea:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80131ec:	4b08      	ldr	r3, [pc, #32]	@ (8013210 <ip4_input+0x240>)
 80131ee:	2200      	movs	r2, #0
 80131f0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80131f2:	4b07      	ldr	r3, [pc, #28]	@ (8013210 <ip4_input+0x240>)
 80131f4:	2200      	movs	r2, #0
 80131f6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80131f8:	4b05      	ldr	r3, [pc, #20]	@ (8013210 <ip4_input+0x240>)
 80131fa:	2200      	movs	r2, #0
 80131fc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80131fe:	4b04      	ldr	r3, [pc, #16]	@ (8013210 <ip4_input+0x240>)
 8013200:	2200      	movs	r2, #0
 8013202:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013204:	2300      	movs	r3, #0
}
 8013206:	4618      	mov	r0, r3
 8013208:	3718      	adds	r7, #24
 801320a:	46bd      	mov	sp, r7
 801320c:	bd80      	pop	{r7, pc}
 801320e:	bf00      	nop
 8013210:	2000a2a8 	.word	0x2000a2a8
 8013214:	2000d39c 	.word	0x2000d39c

08013218 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b08a      	sub	sp, #40	@ 0x28
 801321c:	af04      	add	r7, sp, #16
 801321e:	60f8      	str	r0, [r7, #12]
 8013220:	60b9      	str	r1, [r7, #8]
 8013222:	607a      	str	r2, [r7, #4]
 8013224:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d009      	beq.n	8013244 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013230:	68bb      	ldr	r3, [r7, #8]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d003      	beq.n	801323e <ip4_output_if+0x26>
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d102      	bne.n	8013244 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801323e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013240:	3304      	adds	r3, #4
 8013242:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013244:	78fa      	ldrb	r2, [r7, #3]
 8013246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013248:	9302      	str	r3, [sp, #8]
 801324a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801324e:	9301      	str	r3, [sp, #4]
 8013250:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013254:	9300      	str	r3, [sp, #0]
 8013256:	4613      	mov	r3, r2
 8013258:	687a      	ldr	r2, [r7, #4]
 801325a:	6979      	ldr	r1, [r7, #20]
 801325c:	68f8      	ldr	r0, [r7, #12]
 801325e:	f000 f805 	bl	801326c <ip4_output_if_src>
 8013262:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013264:	4618      	mov	r0, r3
 8013266:	3718      	adds	r7, #24
 8013268:	46bd      	mov	sp, r7
 801326a:	bd80      	pop	{r7, pc}

0801326c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b088      	sub	sp, #32
 8013270:	af00      	add	r7, sp, #0
 8013272:	60f8      	str	r0, [r7, #12]
 8013274:	60b9      	str	r1, [r7, #8]
 8013276:	607a      	str	r2, [r7, #4]
 8013278:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	7b9b      	ldrb	r3, [r3, #14]
 801327e:	2b01      	cmp	r3, #1
 8013280:	d006      	beq.n	8013290 <ip4_output_if_src+0x24>
 8013282:	4b4b      	ldr	r3, [pc, #300]	@ (80133b0 <ip4_output_if_src+0x144>)
 8013284:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8013288:	494a      	ldr	r1, [pc, #296]	@ (80133b4 <ip4_output_if_src+0x148>)
 801328a:	484b      	ldr	r0, [pc, #300]	@ (80133b8 <ip4_output_if_src+0x14c>)
 801328c:	f001 f9e4 	bl	8014658 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d060      	beq.n	8013358 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013296:	2314      	movs	r3, #20
 8013298:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801329a:	2114      	movs	r1, #20
 801329c:	68f8      	ldr	r0, [r7, #12]
 801329e:	f7f8 fd67 	bl	800bd70 <pbuf_add_header>
 80132a2:	4603      	mov	r3, r0
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d002      	beq.n	80132ae <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80132a8:	f06f 0301 	mvn.w	r3, #1
 80132ac:	e07c      	b.n	80133a8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	685b      	ldr	r3, [r3, #4]
 80132b2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	895b      	ldrh	r3, [r3, #10]
 80132b8:	2b13      	cmp	r3, #19
 80132ba:	d806      	bhi.n	80132ca <ip4_output_if_src+0x5e>
 80132bc:	4b3c      	ldr	r3, [pc, #240]	@ (80133b0 <ip4_output_if_src+0x144>)
 80132be:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80132c2:	493e      	ldr	r1, [pc, #248]	@ (80133bc <ip4_output_if_src+0x150>)
 80132c4:	483c      	ldr	r0, [pc, #240]	@ (80133b8 <ip4_output_if_src+0x14c>)
 80132c6:	f001 f9c7 	bl	8014658 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80132ca:	69fb      	ldr	r3, [r7, #28]
 80132cc:	78fa      	ldrb	r2, [r7, #3]
 80132ce:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80132d0:	69fb      	ldr	r3, [r7, #28]
 80132d2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80132d6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	681a      	ldr	r2, [r3, #0]
 80132dc:	69fb      	ldr	r3, [r7, #28]
 80132de:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80132e0:	8b7b      	ldrh	r3, [r7, #26]
 80132e2:	089b      	lsrs	r3, r3, #2
 80132e4:	b29b      	uxth	r3, r3
 80132e6:	b2db      	uxtb	r3, r3
 80132e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80132ec:	b2da      	uxtb	r2, r3
 80132ee:	69fb      	ldr	r3, [r7, #28]
 80132f0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80132f2:	69fb      	ldr	r3, [r7, #28]
 80132f4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80132f8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	891b      	ldrh	r3, [r3, #8]
 80132fe:	4618      	mov	r0, r3
 8013300:	f7f7 f9de 	bl	800a6c0 <lwip_htons>
 8013304:	4603      	mov	r3, r0
 8013306:	461a      	mov	r2, r3
 8013308:	69fb      	ldr	r3, [r7, #28]
 801330a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801330c:	69fb      	ldr	r3, [r7, #28]
 801330e:	2200      	movs	r2, #0
 8013310:	719a      	strb	r2, [r3, #6]
 8013312:	2200      	movs	r2, #0
 8013314:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013316:	4b2a      	ldr	r3, [pc, #168]	@ (80133c0 <ip4_output_if_src+0x154>)
 8013318:	881b      	ldrh	r3, [r3, #0]
 801331a:	4618      	mov	r0, r3
 801331c:	f7f7 f9d0 	bl	800a6c0 <lwip_htons>
 8013320:	4603      	mov	r3, r0
 8013322:	461a      	mov	r2, r3
 8013324:	69fb      	ldr	r3, [r7, #28]
 8013326:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013328:	4b25      	ldr	r3, [pc, #148]	@ (80133c0 <ip4_output_if_src+0x154>)
 801332a:	881b      	ldrh	r3, [r3, #0]
 801332c:	3301      	adds	r3, #1
 801332e:	b29a      	uxth	r2, r3
 8013330:	4b23      	ldr	r3, [pc, #140]	@ (80133c0 <ip4_output_if_src+0x154>)
 8013332:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013334:	68bb      	ldr	r3, [r7, #8]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d104      	bne.n	8013344 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801333a:	4b22      	ldr	r3, [pc, #136]	@ (80133c4 <ip4_output_if_src+0x158>)
 801333c:	681a      	ldr	r2, [r3, #0]
 801333e:	69fb      	ldr	r3, [r7, #28]
 8013340:	60da      	str	r2, [r3, #12]
 8013342:	e003      	b.n	801334c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013344:	68bb      	ldr	r3, [r7, #8]
 8013346:	681a      	ldr	r2, [r3, #0]
 8013348:	69fb      	ldr	r3, [r7, #28]
 801334a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801334c:	69fb      	ldr	r3, [r7, #28]
 801334e:	2200      	movs	r2, #0
 8013350:	729a      	strb	r2, [r3, #10]
 8013352:	2200      	movs	r2, #0
 8013354:	72da      	strb	r2, [r3, #11]
 8013356:	e00f      	b.n	8013378 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	895b      	ldrh	r3, [r3, #10]
 801335c:	2b13      	cmp	r3, #19
 801335e:	d802      	bhi.n	8013366 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013360:	f06f 0301 	mvn.w	r3, #1
 8013364:	e020      	b.n	80133a8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	685b      	ldr	r3, [r3, #4]
 801336a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801336c:	69fb      	ldr	r3, [r7, #28]
 801336e:	691b      	ldr	r3, [r3, #16]
 8013370:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013372:	f107 0314 	add.w	r3, r7, #20
 8013376:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801337a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801337c:	2b00      	cmp	r3, #0
 801337e:	d00c      	beq.n	801339a <ip4_output_if_src+0x12e>
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	891a      	ldrh	r2, [r3, #8]
 8013384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013386:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013388:	429a      	cmp	r2, r3
 801338a:	d906      	bls.n	801339a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801338c:	687a      	ldr	r2, [r7, #4]
 801338e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013390:	68f8      	ldr	r0, [r7, #12]
 8013392:	f000 fd53 	bl	8013e3c <ip4_frag>
 8013396:	4603      	mov	r3, r0
 8013398:	e006      	b.n	80133a8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801339a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801339c:	695b      	ldr	r3, [r3, #20]
 801339e:	687a      	ldr	r2, [r7, #4]
 80133a0:	68f9      	ldr	r1, [r7, #12]
 80133a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80133a4:	4798      	blx	r3
 80133a6:	4603      	mov	r3, r0
}
 80133a8:	4618      	mov	r0, r3
 80133aa:	3720      	adds	r7, #32
 80133ac:	46bd      	mov	sp, r7
 80133ae:	bd80      	pop	{r7, pc}
 80133b0:	08017cfc 	.word	0x08017cfc
 80133b4:	08017d30 	.word	0x08017d30
 80133b8:	08017d3c 	.word	0x08017d3c
 80133bc:	08017d64 	.word	0x08017d64
 80133c0:	2000d4fa 	.word	0x2000d4fa
 80133c4:	080181cc 	.word	0x080181cc

080133c8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80133c8:	b480      	push	{r7}
 80133ca:	b085      	sub	sp, #20
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
 80133d0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133dc:	d002      	beq.n	80133e4 <ip4_addr_isbroadcast_u32+0x1c>
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d101      	bne.n	80133e8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80133e4:	2301      	movs	r3, #1
 80133e6:	e02a      	b.n	801343e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80133ee:	f003 0302 	and.w	r3, r3, #2
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d101      	bne.n	80133fa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80133f6:	2300      	movs	r3, #0
 80133f8:	e021      	b.n	801343e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80133fa:	683b      	ldr	r3, [r7, #0]
 80133fc:	3304      	adds	r3, #4
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	687a      	ldr	r2, [r7, #4]
 8013402:	429a      	cmp	r2, r3
 8013404:	d101      	bne.n	801340a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013406:	2300      	movs	r3, #0
 8013408:	e019      	b.n	801343e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801340a:	68fa      	ldr	r2, [r7, #12]
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	3304      	adds	r3, #4
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	405a      	eors	r2, r3
 8013414:	683b      	ldr	r3, [r7, #0]
 8013416:	3308      	adds	r3, #8
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	4013      	ands	r3, r2
 801341c:	2b00      	cmp	r3, #0
 801341e:	d10d      	bne.n	801343c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013420:	683b      	ldr	r3, [r7, #0]
 8013422:	3308      	adds	r3, #8
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	43da      	mvns	r2, r3
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801342c:	683b      	ldr	r3, [r7, #0]
 801342e:	3308      	adds	r3, #8
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013434:	429a      	cmp	r2, r3
 8013436:	d101      	bne.n	801343c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013438:	2301      	movs	r3, #1
 801343a:	e000      	b.n	801343e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801343c:	2300      	movs	r3, #0
  }
}
 801343e:	4618      	mov	r0, r3
 8013440:	3714      	adds	r7, #20
 8013442:	46bd      	mov	sp, r7
 8013444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013448:	4770      	bx	lr
	...

0801344c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b084      	sub	sp, #16
 8013450:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013452:	2300      	movs	r3, #0
 8013454:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013456:	4b12      	ldr	r3, [pc, #72]	@ (80134a0 <ip_reass_tmr+0x54>)
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801345c:	e018      	b.n	8013490 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	7fdb      	ldrb	r3, [r3, #31]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d00b      	beq.n	801347e <ip_reass_tmr+0x32>
      r->timer--;
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	7fdb      	ldrb	r3, [r3, #31]
 801346a:	3b01      	subs	r3, #1
 801346c:	b2da      	uxtb	r2, r3
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	60fb      	str	r3, [r7, #12]
 801347c:	e008      	b.n	8013490 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013488:	68b9      	ldr	r1, [r7, #8]
 801348a:	6878      	ldr	r0, [r7, #4]
 801348c:	f000 f80a 	bl	80134a4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d1e3      	bne.n	801345e <ip_reass_tmr+0x12>
    }
  }
}
 8013496:	bf00      	nop
 8013498:	bf00      	nop
 801349a:	3710      	adds	r7, #16
 801349c:	46bd      	mov	sp, r7
 801349e:	bd80      	pop	{r7, pc}
 80134a0:	2000d4fc 	.word	0x2000d4fc

080134a4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b088      	sub	sp, #32
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
 80134ac:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80134ae:	2300      	movs	r3, #0
 80134b0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80134b2:	683a      	ldr	r2, [r7, #0]
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	429a      	cmp	r2, r3
 80134b8:	d105      	bne.n	80134c6 <ip_reass_free_complete_datagram+0x22>
 80134ba:	4b45      	ldr	r3, [pc, #276]	@ (80135d0 <ip_reass_free_complete_datagram+0x12c>)
 80134bc:	22ab      	movs	r2, #171	@ 0xab
 80134be:	4945      	ldr	r1, [pc, #276]	@ (80135d4 <ip_reass_free_complete_datagram+0x130>)
 80134c0:	4845      	ldr	r0, [pc, #276]	@ (80135d8 <ip_reass_free_complete_datagram+0x134>)
 80134c2:	f001 f8c9 	bl	8014658 <iprintf>
  if (prev != NULL) {
 80134c6:	683b      	ldr	r3, [r7, #0]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d00a      	beq.n	80134e2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80134cc:	683b      	ldr	r3, [r7, #0]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	687a      	ldr	r2, [r7, #4]
 80134d2:	429a      	cmp	r2, r3
 80134d4:	d005      	beq.n	80134e2 <ip_reass_free_complete_datagram+0x3e>
 80134d6:	4b3e      	ldr	r3, [pc, #248]	@ (80135d0 <ip_reass_free_complete_datagram+0x12c>)
 80134d8:	22ad      	movs	r2, #173	@ 0xad
 80134da:	4940      	ldr	r1, [pc, #256]	@ (80135dc <ip_reass_free_complete_datagram+0x138>)
 80134dc:	483e      	ldr	r0, [pc, #248]	@ (80135d8 <ip_reass_free_complete_datagram+0x134>)
 80134de:	f001 f8bb 	bl	8014658 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	685b      	ldr	r3, [r3, #4]
 80134e6:	685b      	ldr	r3, [r3, #4]
 80134e8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80134ea:	697b      	ldr	r3, [r7, #20]
 80134ec:	889b      	ldrh	r3, [r3, #4]
 80134ee:	b29b      	uxth	r3, r3
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d12a      	bne.n	801354a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	685b      	ldr	r3, [r3, #4]
 80134f8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80134fa:	697b      	ldr	r3, [r7, #20]
 80134fc:	681a      	ldr	r2, [r3, #0]
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013502:	69bb      	ldr	r3, [r7, #24]
 8013504:	6858      	ldr	r0, [r3, #4]
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	3308      	adds	r3, #8
 801350a:	2214      	movs	r2, #20
 801350c:	4619      	mov	r1, r3
 801350e:	f001 fa68 	bl	80149e2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013512:	2101      	movs	r1, #1
 8013514:	69b8      	ldr	r0, [r7, #24]
 8013516:	f7ff fc47 	bl	8012da8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801351a:	69b8      	ldr	r0, [r7, #24]
 801351c:	f7f8 fd4c 	bl	800bfb8 <pbuf_clen>
 8013520:	4603      	mov	r3, r0
 8013522:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013524:	8bfa      	ldrh	r2, [r7, #30]
 8013526:	8a7b      	ldrh	r3, [r7, #18]
 8013528:	4413      	add	r3, r2
 801352a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801352e:	db05      	blt.n	801353c <ip_reass_free_complete_datagram+0x98>
 8013530:	4b27      	ldr	r3, [pc, #156]	@ (80135d0 <ip_reass_free_complete_datagram+0x12c>)
 8013532:	22bc      	movs	r2, #188	@ 0xbc
 8013534:	492a      	ldr	r1, [pc, #168]	@ (80135e0 <ip_reass_free_complete_datagram+0x13c>)
 8013536:	4828      	ldr	r0, [pc, #160]	@ (80135d8 <ip_reass_free_complete_datagram+0x134>)
 8013538:	f001 f88e 	bl	8014658 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801353c:	8bfa      	ldrh	r2, [r7, #30]
 801353e:	8a7b      	ldrh	r3, [r7, #18]
 8013540:	4413      	add	r3, r2
 8013542:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013544:	69b8      	ldr	r0, [r7, #24]
 8013546:	f7f8 fca9 	bl	800be9c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	685b      	ldr	r3, [r3, #4]
 801354e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013550:	e01f      	b.n	8013592 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013552:	69bb      	ldr	r3, [r7, #24]
 8013554:	685b      	ldr	r3, [r3, #4]
 8013556:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013558:	69bb      	ldr	r3, [r7, #24]
 801355a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801355c:	697b      	ldr	r3, [r7, #20]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013562:	68f8      	ldr	r0, [r7, #12]
 8013564:	f7f8 fd28 	bl	800bfb8 <pbuf_clen>
 8013568:	4603      	mov	r3, r0
 801356a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801356c:	8bfa      	ldrh	r2, [r7, #30]
 801356e:	8a7b      	ldrh	r3, [r7, #18]
 8013570:	4413      	add	r3, r2
 8013572:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013576:	db05      	blt.n	8013584 <ip_reass_free_complete_datagram+0xe0>
 8013578:	4b15      	ldr	r3, [pc, #84]	@ (80135d0 <ip_reass_free_complete_datagram+0x12c>)
 801357a:	22cc      	movs	r2, #204	@ 0xcc
 801357c:	4918      	ldr	r1, [pc, #96]	@ (80135e0 <ip_reass_free_complete_datagram+0x13c>)
 801357e:	4816      	ldr	r0, [pc, #88]	@ (80135d8 <ip_reass_free_complete_datagram+0x134>)
 8013580:	f001 f86a 	bl	8014658 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013584:	8bfa      	ldrh	r2, [r7, #30]
 8013586:	8a7b      	ldrh	r3, [r7, #18]
 8013588:	4413      	add	r3, r2
 801358a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801358c:	68f8      	ldr	r0, [r7, #12]
 801358e:	f7f8 fc85 	bl	800be9c <pbuf_free>
  while (p != NULL) {
 8013592:	69bb      	ldr	r3, [r7, #24]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d1dc      	bne.n	8013552 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013598:	6839      	ldr	r1, [r7, #0]
 801359a:	6878      	ldr	r0, [r7, #4]
 801359c:	f000 f8c2 	bl	8013724 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80135a0:	4b10      	ldr	r3, [pc, #64]	@ (80135e4 <ip_reass_free_complete_datagram+0x140>)
 80135a2:	881b      	ldrh	r3, [r3, #0]
 80135a4:	8bfa      	ldrh	r2, [r7, #30]
 80135a6:	429a      	cmp	r2, r3
 80135a8:	d905      	bls.n	80135b6 <ip_reass_free_complete_datagram+0x112>
 80135aa:	4b09      	ldr	r3, [pc, #36]	@ (80135d0 <ip_reass_free_complete_datagram+0x12c>)
 80135ac:	22d2      	movs	r2, #210	@ 0xd2
 80135ae:	490e      	ldr	r1, [pc, #56]	@ (80135e8 <ip_reass_free_complete_datagram+0x144>)
 80135b0:	4809      	ldr	r0, [pc, #36]	@ (80135d8 <ip_reass_free_complete_datagram+0x134>)
 80135b2:	f001 f851 	bl	8014658 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80135b6:	4b0b      	ldr	r3, [pc, #44]	@ (80135e4 <ip_reass_free_complete_datagram+0x140>)
 80135b8:	881a      	ldrh	r2, [r3, #0]
 80135ba:	8bfb      	ldrh	r3, [r7, #30]
 80135bc:	1ad3      	subs	r3, r2, r3
 80135be:	b29a      	uxth	r2, r3
 80135c0:	4b08      	ldr	r3, [pc, #32]	@ (80135e4 <ip_reass_free_complete_datagram+0x140>)
 80135c2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80135c4:	8bfb      	ldrh	r3, [r7, #30]
}
 80135c6:	4618      	mov	r0, r3
 80135c8:	3720      	adds	r7, #32
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd80      	pop	{r7, pc}
 80135ce:	bf00      	nop
 80135d0:	08017d94 	.word	0x08017d94
 80135d4:	08017dd0 	.word	0x08017dd0
 80135d8:	08017ddc 	.word	0x08017ddc
 80135dc:	08017e04 	.word	0x08017e04
 80135e0:	08017e18 	.word	0x08017e18
 80135e4:	2000d500 	.word	0x2000d500
 80135e8:	08017e38 	.word	0x08017e38

080135ec <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b08a      	sub	sp, #40	@ 0x28
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
 80135f4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80135f6:	2300      	movs	r3, #0
 80135f8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80135fa:	2300      	movs	r3, #0
 80135fc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80135fe:	2300      	movs	r3, #0
 8013600:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013602:	2300      	movs	r3, #0
 8013604:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013606:	2300      	movs	r3, #0
 8013608:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801360a:	4b28      	ldr	r3, [pc, #160]	@ (80136ac <ip_reass_remove_oldest_datagram+0xc0>)
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013610:	e030      	b.n	8013674 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013614:	695a      	ldr	r2, [r3, #20]
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	68db      	ldr	r3, [r3, #12]
 801361a:	429a      	cmp	r2, r3
 801361c:	d10c      	bne.n	8013638 <ip_reass_remove_oldest_datagram+0x4c>
 801361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013620:	699a      	ldr	r2, [r3, #24]
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	691b      	ldr	r3, [r3, #16]
 8013626:	429a      	cmp	r2, r3
 8013628:	d106      	bne.n	8013638 <ip_reass_remove_oldest_datagram+0x4c>
 801362a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801362c:	899a      	ldrh	r2, [r3, #12]
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	889b      	ldrh	r3, [r3, #4]
 8013632:	b29b      	uxth	r3, r3
 8013634:	429a      	cmp	r2, r3
 8013636:	d014      	beq.n	8013662 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013638:	693b      	ldr	r3, [r7, #16]
 801363a:	3301      	adds	r3, #1
 801363c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801363e:	6a3b      	ldr	r3, [r7, #32]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d104      	bne.n	801364e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013646:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013648:	69fb      	ldr	r3, [r7, #28]
 801364a:	61bb      	str	r3, [r7, #24]
 801364c:	e009      	b.n	8013662 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013650:	7fda      	ldrb	r2, [r3, #31]
 8013652:	6a3b      	ldr	r3, [r7, #32]
 8013654:	7fdb      	ldrb	r3, [r3, #31]
 8013656:	429a      	cmp	r2, r3
 8013658:	d803      	bhi.n	8013662 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801365a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801365c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801365e:	69fb      	ldr	r3, [r7, #28]
 8013660:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d001      	beq.n	801366e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801366a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801366c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801366e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013676:	2b00      	cmp	r3, #0
 8013678:	d1cb      	bne.n	8013612 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801367a:	6a3b      	ldr	r3, [r7, #32]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d008      	beq.n	8013692 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013680:	69b9      	ldr	r1, [r7, #24]
 8013682:	6a38      	ldr	r0, [r7, #32]
 8013684:	f7ff ff0e 	bl	80134a4 <ip_reass_free_complete_datagram>
 8013688:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801368a:	697a      	ldr	r2, [r7, #20]
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	4413      	add	r3, r2
 8013690:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013692:	697a      	ldr	r2, [r7, #20]
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	429a      	cmp	r2, r3
 8013698:	da02      	bge.n	80136a0 <ip_reass_remove_oldest_datagram+0xb4>
 801369a:	693b      	ldr	r3, [r7, #16]
 801369c:	2b01      	cmp	r3, #1
 801369e:	dcac      	bgt.n	80135fa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80136a0:	697b      	ldr	r3, [r7, #20]
}
 80136a2:	4618      	mov	r0, r3
 80136a4:	3728      	adds	r7, #40	@ 0x28
 80136a6:	46bd      	mov	sp, r7
 80136a8:	bd80      	pop	{r7, pc}
 80136aa:	bf00      	nop
 80136ac:	2000d4fc 	.word	0x2000d4fc

080136b0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b084      	sub	sp, #16
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
 80136b8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80136ba:	2004      	movs	r0, #4
 80136bc:	f7f7 fcd4 	bl	800b068 <memp_malloc>
 80136c0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d110      	bne.n	80136ea <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80136c8:	6839      	ldr	r1, [r7, #0]
 80136ca:	6878      	ldr	r0, [r7, #4]
 80136cc:	f7ff ff8e 	bl	80135ec <ip_reass_remove_oldest_datagram>
 80136d0:	4602      	mov	r2, r0
 80136d2:	683b      	ldr	r3, [r7, #0]
 80136d4:	4293      	cmp	r3, r2
 80136d6:	dc03      	bgt.n	80136e0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80136d8:	2004      	movs	r0, #4
 80136da:	f7f7 fcc5 	bl	800b068 <memp_malloc>
 80136de:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d101      	bne.n	80136ea <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80136e6:	2300      	movs	r3, #0
 80136e8:	e016      	b.n	8013718 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80136ea:	2220      	movs	r2, #32
 80136ec:	2100      	movs	r1, #0
 80136ee:	68f8      	ldr	r0, [r7, #12]
 80136f0:	f001 f8ac 	bl	801484c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	220f      	movs	r2, #15
 80136f8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80136fa:	4b09      	ldr	r3, [pc, #36]	@ (8013720 <ip_reass_enqueue_new_datagram+0x70>)
 80136fc:	681a      	ldr	r2, [r3, #0]
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013702:	4a07      	ldr	r2, [pc, #28]	@ (8013720 <ip_reass_enqueue_new_datagram+0x70>)
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	3308      	adds	r3, #8
 801370c:	2214      	movs	r2, #20
 801370e:	6879      	ldr	r1, [r7, #4]
 8013710:	4618      	mov	r0, r3
 8013712:	f001 f966 	bl	80149e2 <memcpy>
  return ipr;
 8013716:	68fb      	ldr	r3, [r7, #12]
}
 8013718:	4618      	mov	r0, r3
 801371a:	3710      	adds	r7, #16
 801371c:	46bd      	mov	sp, r7
 801371e:	bd80      	pop	{r7, pc}
 8013720:	2000d4fc 	.word	0x2000d4fc

08013724 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b082      	sub	sp, #8
 8013728:	af00      	add	r7, sp, #0
 801372a:	6078      	str	r0, [r7, #4]
 801372c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801372e:	4b10      	ldr	r3, [pc, #64]	@ (8013770 <ip_reass_dequeue_datagram+0x4c>)
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	687a      	ldr	r2, [r7, #4]
 8013734:	429a      	cmp	r2, r3
 8013736:	d104      	bne.n	8013742 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	4a0c      	ldr	r2, [pc, #48]	@ (8013770 <ip_reass_dequeue_datagram+0x4c>)
 801373e:	6013      	str	r3, [r2, #0]
 8013740:	e00d      	b.n	801375e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013742:	683b      	ldr	r3, [r7, #0]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d106      	bne.n	8013756 <ip_reass_dequeue_datagram+0x32>
 8013748:	4b0a      	ldr	r3, [pc, #40]	@ (8013774 <ip_reass_dequeue_datagram+0x50>)
 801374a:	f240 1245 	movw	r2, #325	@ 0x145
 801374e:	490a      	ldr	r1, [pc, #40]	@ (8013778 <ip_reass_dequeue_datagram+0x54>)
 8013750:	480a      	ldr	r0, [pc, #40]	@ (801377c <ip_reass_dequeue_datagram+0x58>)
 8013752:	f000 ff81 	bl	8014658 <iprintf>
    prev->next = ipr->next;
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	681a      	ldr	r2, [r3, #0]
 801375a:	683b      	ldr	r3, [r7, #0]
 801375c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801375e:	6879      	ldr	r1, [r7, #4]
 8013760:	2004      	movs	r0, #4
 8013762:	f7f7 fcf7 	bl	800b154 <memp_free>
}
 8013766:	bf00      	nop
 8013768:	3708      	adds	r7, #8
 801376a:	46bd      	mov	sp, r7
 801376c:	bd80      	pop	{r7, pc}
 801376e:	bf00      	nop
 8013770:	2000d4fc 	.word	0x2000d4fc
 8013774:	08017d94 	.word	0x08017d94
 8013778:	08017e5c 	.word	0x08017e5c
 801377c:	08017ddc 	.word	0x08017ddc

08013780 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b08c      	sub	sp, #48	@ 0x30
 8013784:	af00      	add	r7, sp, #0
 8013786:	60f8      	str	r0, [r7, #12]
 8013788:	60b9      	str	r1, [r7, #8]
 801378a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801378c:	2300      	movs	r3, #0
 801378e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013790:	2301      	movs	r3, #1
 8013792:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013794:	68bb      	ldr	r3, [r7, #8]
 8013796:	685b      	ldr	r3, [r3, #4]
 8013798:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801379a:	69fb      	ldr	r3, [r7, #28]
 801379c:	885b      	ldrh	r3, [r3, #2]
 801379e:	b29b      	uxth	r3, r3
 80137a0:	4618      	mov	r0, r3
 80137a2:	f7f6 ff8d 	bl	800a6c0 <lwip_htons>
 80137a6:	4603      	mov	r3, r0
 80137a8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80137aa:	69fb      	ldr	r3, [r7, #28]
 80137ac:	781b      	ldrb	r3, [r3, #0]
 80137ae:	f003 030f 	and.w	r3, r3, #15
 80137b2:	b2db      	uxtb	r3, r3
 80137b4:	009b      	lsls	r3, r3, #2
 80137b6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80137b8:	7e7b      	ldrb	r3, [r7, #25]
 80137ba:	b29b      	uxth	r3, r3
 80137bc:	8b7a      	ldrh	r2, [r7, #26]
 80137be:	429a      	cmp	r2, r3
 80137c0:	d202      	bcs.n	80137c8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80137c2:	f04f 33ff 	mov.w	r3, #4294967295
 80137c6:	e135      	b.n	8013a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80137c8:	7e7b      	ldrb	r3, [r7, #25]
 80137ca:	b29b      	uxth	r3, r3
 80137cc:	8b7a      	ldrh	r2, [r7, #26]
 80137ce:	1ad3      	subs	r3, r2, r3
 80137d0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80137d2:	69fb      	ldr	r3, [r7, #28]
 80137d4:	88db      	ldrh	r3, [r3, #6]
 80137d6:	b29b      	uxth	r3, r3
 80137d8:	4618      	mov	r0, r3
 80137da:	f7f6 ff71 	bl	800a6c0 <lwip_htons>
 80137de:	4603      	mov	r3, r0
 80137e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80137e4:	b29b      	uxth	r3, r3
 80137e6:	00db      	lsls	r3, r3, #3
 80137e8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80137ea:	68bb      	ldr	r3, [r7, #8]
 80137ec:	685b      	ldr	r3, [r3, #4]
 80137ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80137f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137f2:	2200      	movs	r2, #0
 80137f4:	701a      	strb	r2, [r3, #0]
 80137f6:	2200      	movs	r2, #0
 80137f8:	705a      	strb	r2, [r3, #1]
 80137fa:	2200      	movs	r2, #0
 80137fc:	709a      	strb	r2, [r3, #2]
 80137fe:	2200      	movs	r2, #0
 8013800:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013804:	8afa      	ldrh	r2, [r7, #22]
 8013806:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013808:	8afa      	ldrh	r2, [r7, #22]
 801380a:	8b7b      	ldrh	r3, [r7, #26]
 801380c:	4413      	add	r3, r2
 801380e:	b29a      	uxth	r2, r3
 8013810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013812:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013816:	88db      	ldrh	r3, [r3, #6]
 8013818:	b29b      	uxth	r3, r3
 801381a:	8afa      	ldrh	r2, [r7, #22]
 801381c:	429a      	cmp	r2, r3
 801381e:	d902      	bls.n	8013826 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013820:	f04f 33ff 	mov.w	r3, #4294967295
 8013824:	e106      	b.n	8013a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	685b      	ldr	r3, [r3, #4]
 801382a:	627b      	str	r3, [r7, #36]	@ 0x24
 801382c:	e068      	b.n	8013900 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801382e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013830:	685b      	ldr	r3, [r3, #4]
 8013832:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013836:	889b      	ldrh	r3, [r3, #4]
 8013838:	b29a      	uxth	r2, r3
 801383a:	693b      	ldr	r3, [r7, #16]
 801383c:	889b      	ldrh	r3, [r3, #4]
 801383e:	b29b      	uxth	r3, r3
 8013840:	429a      	cmp	r2, r3
 8013842:	d235      	bcs.n	80138b0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013848:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801384a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801384c:	2b00      	cmp	r3, #0
 801384e:	d020      	beq.n	8013892 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013852:	889b      	ldrh	r3, [r3, #4]
 8013854:	b29a      	uxth	r2, r3
 8013856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013858:	88db      	ldrh	r3, [r3, #6]
 801385a:	b29b      	uxth	r3, r3
 801385c:	429a      	cmp	r2, r3
 801385e:	d307      	bcc.n	8013870 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013862:	88db      	ldrh	r3, [r3, #6]
 8013864:	b29a      	uxth	r2, r3
 8013866:	693b      	ldr	r3, [r7, #16]
 8013868:	889b      	ldrh	r3, [r3, #4]
 801386a:	b29b      	uxth	r3, r3
 801386c:	429a      	cmp	r2, r3
 801386e:	d902      	bls.n	8013876 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013870:	f04f 33ff 	mov.w	r3, #4294967295
 8013874:	e0de      	b.n	8013a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013878:	68ba      	ldr	r2, [r7, #8]
 801387a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801387c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801387e:	88db      	ldrh	r3, [r3, #6]
 8013880:	b29a      	uxth	r2, r3
 8013882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013884:	889b      	ldrh	r3, [r3, #4]
 8013886:	b29b      	uxth	r3, r3
 8013888:	429a      	cmp	r2, r3
 801388a:	d03d      	beq.n	8013908 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801388c:	2300      	movs	r3, #0
 801388e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013890:	e03a      	b.n	8013908 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013894:	88db      	ldrh	r3, [r3, #6]
 8013896:	b29a      	uxth	r2, r3
 8013898:	693b      	ldr	r3, [r7, #16]
 801389a:	889b      	ldrh	r3, [r3, #4]
 801389c:	b29b      	uxth	r3, r3
 801389e:	429a      	cmp	r2, r3
 80138a0:	d902      	bls.n	80138a8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80138a2:	f04f 33ff 	mov.w	r3, #4294967295
 80138a6:	e0c5      	b.n	8013a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	68ba      	ldr	r2, [r7, #8]
 80138ac:	605a      	str	r2, [r3, #4]
      break;
 80138ae:	e02b      	b.n	8013908 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80138b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138b2:	889b      	ldrh	r3, [r3, #4]
 80138b4:	b29a      	uxth	r2, r3
 80138b6:	693b      	ldr	r3, [r7, #16]
 80138b8:	889b      	ldrh	r3, [r3, #4]
 80138ba:	b29b      	uxth	r3, r3
 80138bc:	429a      	cmp	r2, r3
 80138be:	d102      	bne.n	80138c6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80138c0:	f04f 33ff 	mov.w	r3, #4294967295
 80138c4:	e0b6      	b.n	8013a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80138c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138c8:	889b      	ldrh	r3, [r3, #4]
 80138ca:	b29a      	uxth	r2, r3
 80138cc:	693b      	ldr	r3, [r7, #16]
 80138ce:	88db      	ldrh	r3, [r3, #6]
 80138d0:	b29b      	uxth	r3, r3
 80138d2:	429a      	cmp	r2, r3
 80138d4:	d202      	bcs.n	80138dc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80138d6:	f04f 33ff 	mov.w	r3, #4294967295
 80138da:	e0ab      	b.n	8013a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80138dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d009      	beq.n	80138f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80138e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138e4:	88db      	ldrh	r3, [r3, #6]
 80138e6:	b29a      	uxth	r2, r3
 80138e8:	693b      	ldr	r3, [r7, #16]
 80138ea:	889b      	ldrh	r3, [r3, #4]
 80138ec:	b29b      	uxth	r3, r3
 80138ee:	429a      	cmp	r2, r3
 80138f0:	d001      	beq.n	80138f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80138f2:	2300      	movs	r3, #0
 80138f4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80138f6:	693b      	ldr	r3, [r7, #16]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80138fc:	693b      	ldr	r3, [r7, #16]
 80138fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8013900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013902:	2b00      	cmp	r3, #0
 8013904:	d193      	bne.n	801382e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013906:	e000      	b.n	801390a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013908:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801390c:	2b00      	cmp	r3, #0
 801390e:	d12d      	bne.n	801396c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013912:	2b00      	cmp	r3, #0
 8013914:	d01c      	beq.n	8013950 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013918:	88db      	ldrh	r3, [r3, #6]
 801391a:	b29a      	uxth	r2, r3
 801391c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801391e:	889b      	ldrh	r3, [r3, #4]
 8013920:	b29b      	uxth	r3, r3
 8013922:	429a      	cmp	r2, r3
 8013924:	d906      	bls.n	8013934 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013926:	4b45      	ldr	r3, [pc, #276]	@ (8013a3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013928:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801392c:	4944      	ldr	r1, [pc, #272]	@ (8013a40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801392e:	4845      	ldr	r0, [pc, #276]	@ (8013a44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013930:	f000 fe92 	bl	8014658 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013936:	68ba      	ldr	r2, [r7, #8]
 8013938:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801393a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801393c:	88db      	ldrh	r3, [r3, #6]
 801393e:	b29a      	uxth	r2, r3
 8013940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013942:	889b      	ldrh	r3, [r3, #4]
 8013944:	b29b      	uxth	r3, r3
 8013946:	429a      	cmp	r2, r3
 8013948:	d010      	beq.n	801396c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801394a:	2300      	movs	r3, #0
 801394c:	623b      	str	r3, [r7, #32]
 801394e:	e00d      	b.n	801396c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	685b      	ldr	r3, [r3, #4]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d006      	beq.n	8013966 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013958:	4b38      	ldr	r3, [pc, #224]	@ (8013a3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801395a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801395e:	493a      	ldr	r1, [pc, #232]	@ (8013a48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013960:	4838      	ldr	r0, [pc, #224]	@ (8013a44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013962:	f000 fe79 	bl	8014658 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	68ba      	ldr	r2, [r7, #8]
 801396a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d105      	bne.n	801397e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	7f9b      	ldrb	r3, [r3, #30]
 8013976:	f003 0301 	and.w	r3, r3, #1
 801397a:	2b00      	cmp	r3, #0
 801397c:	d059      	beq.n	8013a32 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801397e:	6a3b      	ldr	r3, [r7, #32]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d04f      	beq.n	8013a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	685b      	ldr	r3, [r3, #4]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d006      	beq.n	801399a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	685b      	ldr	r3, [r3, #4]
 8013990:	685b      	ldr	r3, [r3, #4]
 8013992:	889b      	ldrh	r3, [r3, #4]
 8013994:	b29b      	uxth	r3, r3
 8013996:	2b00      	cmp	r3, #0
 8013998:	d002      	beq.n	80139a0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801399a:	2300      	movs	r3, #0
 801399c:	623b      	str	r3, [r7, #32]
 801399e:	e041      	b.n	8013a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80139a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139a2:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80139a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80139aa:	e012      	b.n	80139d2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80139ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139ae:	685b      	ldr	r3, [r3, #4]
 80139b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80139b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139b4:	88db      	ldrh	r3, [r3, #6]
 80139b6:	b29a      	uxth	r2, r3
 80139b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139ba:	889b      	ldrh	r3, [r3, #4]
 80139bc:	b29b      	uxth	r3, r3
 80139be:	429a      	cmp	r2, r3
 80139c0:	d002      	beq.n	80139c8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80139c2:	2300      	movs	r3, #0
 80139c4:	623b      	str	r3, [r7, #32]
            break;
 80139c6:	e007      	b.n	80139d8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80139c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139ca:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80139cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80139d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d1e9      	bne.n	80139ac <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80139d8:	6a3b      	ldr	r3, [r7, #32]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d022      	beq.n	8013a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	685b      	ldr	r3, [r3, #4]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d106      	bne.n	80139f4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80139e6:	4b15      	ldr	r3, [pc, #84]	@ (8013a3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80139e8:	f240 12df 	movw	r2, #479	@ 0x1df
 80139ec:	4917      	ldr	r1, [pc, #92]	@ (8013a4c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80139ee:	4815      	ldr	r0, [pc, #84]	@ (8013a44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80139f0:	f000 fe32 	bl	8014658 <iprintf>
          LWIP_ASSERT("sanity check",
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	685b      	ldr	r3, [r3, #4]
 80139f8:	685b      	ldr	r3, [r3, #4]
 80139fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80139fc:	429a      	cmp	r2, r3
 80139fe:	d106      	bne.n	8013a0e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013a00:	4b0e      	ldr	r3, [pc, #56]	@ (8013a3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013a02:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8013a06:	4911      	ldr	r1, [pc, #68]	@ (8013a4c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013a08:	480e      	ldr	r0, [pc, #56]	@ (8013a44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013a0a:	f000 fe25 	bl	8014658 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d006      	beq.n	8013a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013a16:	4b09      	ldr	r3, [pc, #36]	@ (8013a3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013a18:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8013a1c:	490c      	ldr	r1, [pc, #48]	@ (8013a50 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013a1e:	4809      	ldr	r0, [pc, #36]	@ (8013a44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013a20:	f000 fe1a 	bl	8014658 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013a24:	6a3b      	ldr	r3, [r7, #32]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	bf14      	ite	ne
 8013a2a:	2301      	movne	r3, #1
 8013a2c:	2300      	moveq	r3, #0
 8013a2e:	b2db      	uxtb	r3, r3
 8013a30:	e000      	b.n	8013a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013a32:	2300      	movs	r3, #0
}
 8013a34:	4618      	mov	r0, r3
 8013a36:	3730      	adds	r7, #48	@ 0x30
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bd80      	pop	{r7, pc}
 8013a3c:	08017d94 	.word	0x08017d94
 8013a40:	08017e78 	.word	0x08017e78
 8013a44:	08017ddc 	.word	0x08017ddc
 8013a48:	08017e98 	.word	0x08017e98
 8013a4c:	08017ed0 	.word	0x08017ed0
 8013a50:	08017ee0 	.word	0x08017ee0

08013a54 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b08e      	sub	sp, #56	@ 0x38
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	685b      	ldr	r3, [r3, #4]
 8013a60:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a64:	781b      	ldrb	r3, [r3, #0]
 8013a66:	f003 030f 	and.w	r3, r3, #15
 8013a6a:	b2db      	uxtb	r3, r3
 8013a6c:	009b      	lsls	r3, r3, #2
 8013a6e:	b2db      	uxtb	r3, r3
 8013a70:	2b14      	cmp	r3, #20
 8013a72:	f040 8171 	bne.w	8013d58 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a78:	88db      	ldrh	r3, [r3, #6]
 8013a7a:	b29b      	uxth	r3, r3
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f7f6 fe1f 	bl	800a6c0 <lwip_htons>
 8013a82:	4603      	mov	r3, r0
 8013a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013a88:	b29b      	uxth	r3, r3
 8013a8a:	00db      	lsls	r3, r3, #3
 8013a8c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a90:	885b      	ldrh	r3, [r3, #2]
 8013a92:	b29b      	uxth	r3, r3
 8013a94:	4618      	mov	r0, r3
 8013a96:	f7f6 fe13 	bl	800a6c0 <lwip_htons>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8013a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013aa0:	781b      	ldrb	r3, [r3, #0]
 8013aa2:	f003 030f 	and.w	r3, r3, #15
 8013aa6:	b2db      	uxtb	r3, r3
 8013aa8:	009b      	lsls	r3, r3, #2
 8013aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8013aae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013ab2:	b29b      	uxth	r3, r3
 8013ab4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013ab6:	429a      	cmp	r2, r3
 8013ab8:	f0c0 8150 	bcc.w	8013d5c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013abc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013ac0:	b29b      	uxth	r3, r3
 8013ac2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013ac4:	1ad3      	subs	r3, r2, r3
 8013ac6:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013ac8:	6878      	ldr	r0, [r7, #4]
 8013aca:	f7f8 fa75 	bl	800bfb8 <pbuf_clen>
 8013ace:	4603      	mov	r3, r0
 8013ad0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013ad2:	4b8c      	ldr	r3, [pc, #560]	@ (8013d04 <ip4_reass+0x2b0>)
 8013ad4:	881b      	ldrh	r3, [r3, #0]
 8013ad6:	461a      	mov	r2, r3
 8013ad8:	8c3b      	ldrh	r3, [r7, #32]
 8013ada:	4413      	add	r3, r2
 8013adc:	2b0a      	cmp	r3, #10
 8013ade:	dd10      	ble.n	8013b02 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013ae0:	8c3b      	ldrh	r3, [r7, #32]
 8013ae2:	4619      	mov	r1, r3
 8013ae4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013ae6:	f7ff fd81 	bl	80135ec <ip_reass_remove_oldest_datagram>
 8013aea:	4603      	mov	r3, r0
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	f000 8137 	beq.w	8013d60 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013af2:	4b84      	ldr	r3, [pc, #528]	@ (8013d04 <ip4_reass+0x2b0>)
 8013af4:	881b      	ldrh	r3, [r3, #0]
 8013af6:	461a      	mov	r2, r3
 8013af8:	8c3b      	ldrh	r3, [r7, #32]
 8013afa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013afc:	2b0a      	cmp	r3, #10
 8013afe:	f300 812f 	bgt.w	8013d60 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013b02:	4b81      	ldr	r3, [pc, #516]	@ (8013d08 <ip4_reass+0x2b4>)
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	633b      	str	r3, [r7, #48]	@ 0x30
 8013b08:	e015      	b.n	8013b36 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b0c:	695a      	ldr	r2, [r3, #20]
 8013b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b10:	68db      	ldr	r3, [r3, #12]
 8013b12:	429a      	cmp	r2, r3
 8013b14:	d10c      	bne.n	8013b30 <ip4_reass+0xdc>
 8013b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b18:	699a      	ldr	r2, [r3, #24]
 8013b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b1c:	691b      	ldr	r3, [r3, #16]
 8013b1e:	429a      	cmp	r2, r3
 8013b20:	d106      	bne.n	8013b30 <ip4_reass+0xdc>
 8013b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b24:	899a      	ldrh	r2, [r3, #12]
 8013b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b28:	889b      	ldrh	r3, [r3, #4]
 8013b2a:	b29b      	uxth	r3, r3
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d006      	beq.n	8013b3e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	633b      	str	r3, [r7, #48]	@ 0x30
 8013b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d1e6      	bne.n	8013b0a <ip4_reass+0xb6>
 8013b3c:	e000      	b.n	8013b40 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013b3e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d109      	bne.n	8013b5a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013b46:	8c3b      	ldrh	r3, [r7, #32]
 8013b48:	4619      	mov	r1, r3
 8013b4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013b4c:	f7ff fdb0 	bl	80136b0 <ip_reass_enqueue_new_datagram>
 8013b50:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d11c      	bne.n	8013b92 <ip4_reass+0x13e>
      goto nullreturn;
 8013b58:	e105      	b.n	8013d66 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b5c:	88db      	ldrh	r3, [r3, #6]
 8013b5e:	b29b      	uxth	r3, r3
 8013b60:	4618      	mov	r0, r3
 8013b62:	f7f6 fdad 	bl	800a6c0 <lwip_htons>
 8013b66:	4603      	mov	r3, r0
 8013b68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d110      	bne.n	8013b92 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b72:	89db      	ldrh	r3, [r3, #14]
 8013b74:	4618      	mov	r0, r3
 8013b76:	f7f6 fda3 	bl	800a6c0 <lwip_htons>
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d006      	beq.n	8013b92 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b86:	3308      	adds	r3, #8
 8013b88:	2214      	movs	r2, #20
 8013b8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	f000 ff28 	bl	80149e2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b94:	88db      	ldrh	r3, [r3, #6]
 8013b96:	b29b      	uxth	r3, r3
 8013b98:	f003 0320 	and.w	r3, r3, #32
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	bf0c      	ite	eq
 8013ba0:	2301      	moveq	r3, #1
 8013ba2:	2300      	movne	r3, #0
 8013ba4:	b2db      	uxtb	r3, r3
 8013ba6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013ba8:	69fb      	ldr	r3, [r7, #28]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d00e      	beq.n	8013bcc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013bae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8013bb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013bb2:	4413      	add	r3, r2
 8013bb4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013bb6:	8b7a      	ldrh	r2, [r7, #26]
 8013bb8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013bba:	429a      	cmp	r2, r3
 8013bbc:	f0c0 80a0 	bcc.w	8013d00 <ip4_reass+0x2ac>
 8013bc0:	8b7b      	ldrh	r3, [r7, #26]
 8013bc2:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8013bc6:	4293      	cmp	r3, r2
 8013bc8:	f200 809a 	bhi.w	8013d00 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013bcc:	69fa      	ldr	r2, [r7, #28]
 8013bce:	6879      	ldr	r1, [r7, #4]
 8013bd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013bd2:	f7ff fdd5 	bl	8013780 <ip_reass_chain_frag_into_datagram_and_validate>
 8013bd6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013bd8:	697b      	ldr	r3, [r7, #20]
 8013bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bde:	f000 809b 	beq.w	8013d18 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013be2:	4b48      	ldr	r3, [pc, #288]	@ (8013d04 <ip4_reass+0x2b0>)
 8013be4:	881a      	ldrh	r2, [r3, #0]
 8013be6:	8c3b      	ldrh	r3, [r7, #32]
 8013be8:	4413      	add	r3, r2
 8013bea:	b29a      	uxth	r2, r3
 8013bec:	4b45      	ldr	r3, [pc, #276]	@ (8013d04 <ip4_reass+0x2b0>)
 8013bee:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013bf0:	69fb      	ldr	r3, [r7, #28]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d00d      	beq.n	8013c12 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013bf6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8013bf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013bfa:	4413      	add	r3, r2
 8013bfc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c00:	8a7a      	ldrh	r2, [r7, #18]
 8013c02:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c06:	7f9b      	ldrb	r3, [r3, #30]
 8013c08:	f043 0301 	orr.w	r3, r3, #1
 8013c0c:	b2da      	uxtb	r2, r3
 8013c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c10:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013c12:	697b      	ldr	r3, [r7, #20]
 8013c14:	2b01      	cmp	r3, #1
 8013c16:	d171      	bne.n	8013cfc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c1a:	8b9b      	ldrh	r3, [r3, #28]
 8013c1c:	3314      	adds	r3, #20
 8013c1e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c22:	685b      	ldr	r3, [r3, #4]
 8013c24:	685b      	ldr	r3, [r3, #4]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c2c:	685b      	ldr	r3, [r3, #4]
 8013c2e:	685b      	ldr	r3, [r3, #4]
 8013c30:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c34:	3308      	adds	r3, #8
 8013c36:	2214      	movs	r2, #20
 8013c38:	4619      	mov	r1, r3
 8013c3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013c3c:	f000 fed1 	bl	80149e2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013c40:	8a3b      	ldrh	r3, [r7, #16]
 8013c42:	4618      	mov	r0, r3
 8013c44:	f7f6 fd3c 	bl	800a6c0 <lwip_htons>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	461a      	mov	r2, r3
 8013c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c4e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c52:	2200      	movs	r2, #0
 8013c54:	719a      	strb	r2, [r3, #6]
 8013c56:	2200      	movs	r2, #0
 8013c58:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c5c:	2200      	movs	r2, #0
 8013c5e:	729a      	strb	r2, [r3, #10]
 8013c60:	2200      	movs	r2, #0
 8013c62:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c66:	685b      	ldr	r3, [r3, #4]
 8013c68:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013c6a:	e00d      	b.n	8013c88 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c6e:	685b      	ldr	r3, [r3, #4]
 8013c70:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013c72:	2114      	movs	r1, #20
 8013c74:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8013c76:	f7f8 f88b 	bl	800bd90 <pbuf_remove_header>
      pbuf_cat(p, r);
 8013c7a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f7f8 f9db 	bl	800c038 <pbuf_cat>
      r = iprh->next_pbuf;
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8013c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d1ee      	bne.n	8013c6c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8013d08 <ip4_reass+0x2b4>)
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013c94:	429a      	cmp	r2, r3
 8013c96:	d102      	bne.n	8013c9e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013c98:	2300      	movs	r3, #0
 8013c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013c9c:	e010      	b.n	8013cc0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8013d08 <ip4_reass+0x2b4>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013ca4:	e007      	b.n	8013cb6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013cac:	429a      	cmp	r2, r3
 8013cae:	d006      	beq.n	8013cbe <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d1f4      	bne.n	8013ca6 <ip4_reass+0x252>
 8013cbc:	e000      	b.n	8013cc0 <ip4_reass+0x26c>
          break;
 8013cbe:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013cc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013cc2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013cc4:	f7ff fd2e 	bl	8013724 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013cc8:	6878      	ldr	r0, [r7, #4]
 8013cca:	f7f8 f975 	bl	800bfb8 <pbuf_clen>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8013d04 <ip4_reass+0x2b0>)
 8013cd4:	881b      	ldrh	r3, [r3, #0]
 8013cd6:	8c3a      	ldrh	r2, [r7, #32]
 8013cd8:	429a      	cmp	r2, r3
 8013cda:	d906      	bls.n	8013cea <ip4_reass+0x296>
 8013cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8013d0c <ip4_reass+0x2b8>)
 8013cde:	f240 229b 	movw	r2, #667	@ 0x29b
 8013ce2:	490b      	ldr	r1, [pc, #44]	@ (8013d10 <ip4_reass+0x2bc>)
 8013ce4:	480b      	ldr	r0, [pc, #44]	@ (8013d14 <ip4_reass+0x2c0>)
 8013ce6:	f000 fcb7 	bl	8014658 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013cea:	4b06      	ldr	r3, [pc, #24]	@ (8013d04 <ip4_reass+0x2b0>)
 8013cec:	881a      	ldrh	r2, [r3, #0]
 8013cee:	8c3b      	ldrh	r3, [r7, #32]
 8013cf0:	1ad3      	subs	r3, r2, r3
 8013cf2:	b29a      	uxth	r2, r3
 8013cf4:	4b03      	ldr	r3, [pc, #12]	@ (8013d04 <ip4_reass+0x2b0>)
 8013cf6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	e038      	b.n	8013d6e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	e036      	b.n	8013d6e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8013d00:	bf00      	nop
 8013d02:	e00a      	b.n	8013d1a <ip4_reass+0x2c6>
 8013d04:	2000d500 	.word	0x2000d500
 8013d08:	2000d4fc 	.word	0x2000d4fc
 8013d0c:	08017d94 	.word	0x08017d94
 8013d10:	08017f04 	.word	0x08017f04
 8013d14:	08017ddc 	.word	0x08017ddc
    goto nullreturn_ipr;
 8013d18:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d106      	bne.n	8013d2e <ip4_reass+0x2da>
 8013d20:	4b15      	ldr	r3, [pc, #84]	@ (8013d78 <ip4_reass+0x324>)
 8013d22:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8013d26:	4915      	ldr	r1, [pc, #84]	@ (8013d7c <ip4_reass+0x328>)
 8013d28:	4815      	ldr	r0, [pc, #84]	@ (8013d80 <ip4_reass+0x32c>)
 8013d2a:	f000 fc95 	bl	8014658 <iprintf>
  if (ipr->p == NULL) {
 8013d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d30:	685b      	ldr	r3, [r3, #4]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d116      	bne.n	8013d64 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013d36:	4b13      	ldr	r3, [pc, #76]	@ (8013d84 <ip4_reass+0x330>)
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013d3c:	429a      	cmp	r2, r3
 8013d3e:	d006      	beq.n	8013d4e <ip4_reass+0x2fa>
 8013d40:	4b0d      	ldr	r3, [pc, #52]	@ (8013d78 <ip4_reass+0x324>)
 8013d42:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8013d46:	4910      	ldr	r1, [pc, #64]	@ (8013d88 <ip4_reass+0x334>)
 8013d48:	480d      	ldr	r0, [pc, #52]	@ (8013d80 <ip4_reass+0x32c>)
 8013d4a:	f000 fc85 	bl	8014658 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013d4e:	2100      	movs	r1, #0
 8013d50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013d52:	f7ff fce7 	bl	8013724 <ip_reass_dequeue_datagram>
 8013d56:	e006      	b.n	8013d66 <ip4_reass+0x312>
    goto nullreturn;
 8013d58:	bf00      	nop
 8013d5a:	e004      	b.n	8013d66 <ip4_reass+0x312>
    goto nullreturn;
 8013d5c:	bf00      	nop
 8013d5e:	e002      	b.n	8013d66 <ip4_reass+0x312>
      goto nullreturn;
 8013d60:	bf00      	nop
 8013d62:	e000      	b.n	8013d66 <ip4_reass+0x312>
  }

nullreturn:
 8013d64:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013d66:	6878      	ldr	r0, [r7, #4]
 8013d68:	f7f8 f898 	bl	800be9c <pbuf_free>
  return NULL;
 8013d6c:	2300      	movs	r3, #0
}
 8013d6e:	4618      	mov	r0, r3
 8013d70:	3738      	adds	r7, #56	@ 0x38
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}
 8013d76:	bf00      	nop
 8013d78:	08017d94 	.word	0x08017d94
 8013d7c:	08017f20 	.word	0x08017f20
 8013d80:	08017ddc 	.word	0x08017ddc
 8013d84:	2000d4fc 	.word	0x2000d4fc
 8013d88:	08017f2c 	.word	0x08017f2c

08013d8c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013d90:	2005      	movs	r0, #5
 8013d92:	f7f7 f969 	bl	800b068 <memp_malloc>
 8013d96:	4603      	mov	r3, r0
}
 8013d98:	4618      	mov	r0, r3
 8013d9a:	bd80      	pop	{r7, pc}

08013d9c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b082      	sub	sp, #8
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d106      	bne.n	8013db8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013daa:	4b07      	ldr	r3, [pc, #28]	@ (8013dc8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013dac:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8013db0:	4906      	ldr	r1, [pc, #24]	@ (8013dcc <ip_frag_free_pbuf_custom_ref+0x30>)
 8013db2:	4807      	ldr	r0, [pc, #28]	@ (8013dd0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013db4:	f000 fc50 	bl	8014658 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013db8:	6879      	ldr	r1, [r7, #4]
 8013dba:	2005      	movs	r0, #5
 8013dbc:	f7f7 f9ca 	bl	800b154 <memp_free>
}
 8013dc0:	bf00      	nop
 8013dc2:	3708      	adds	r7, #8
 8013dc4:	46bd      	mov	sp, r7
 8013dc6:	bd80      	pop	{r7, pc}
 8013dc8:	08017d94 	.word	0x08017d94
 8013dcc:	08017f4c 	.word	0x08017f4c
 8013dd0:	08017ddc 	.word	0x08017ddc

08013dd4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b084      	sub	sp, #16
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d106      	bne.n	8013df4 <ipfrag_free_pbuf_custom+0x20>
 8013de6:	4b11      	ldr	r3, [pc, #68]	@ (8013e2c <ipfrag_free_pbuf_custom+0x58>)
 8013de8:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8013dec:	4910      	ldr	r1, [pc, #64]	@ (8013e30 <ipfrag_free_pbuf_custom+0x5c>)
 8013dee:	4811      	ldr	r0, [pc, #68]	@ (8013e34 <ipfrag_free_pbuf_custom+0x60>)
 8013df0:	f000 fc32 	bl	8014658 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013df4:	68fa      	ldr	r2, [r7, #12]
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	429a      	cmp	r2, r3
 8013dfa:	d006      	beq.n	8013e0a <ipfrag_free_pbuf_custom+0x36>
 8013dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8013e2c <ipfrag_free_pbuf_custom+0x58>)
 8013dfe:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8013e02:	490d      	ldr	r1, [pc, #52]	@ (8013e38 <ipfrag_free_pbuf_custom+0x64>)
 8013e04:	480b      	ldr	r0, [pc, #44]	@ (8013e34 <ipfrag_free_pbuf_custom+0x60>)
 8013e06:	f000 fc27 	bl	8014658 <iprintf>
  if (pcr->original != NULL) {
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	695b      	ldr	r3, [r3, #20]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d004      	beq.n	8013e1c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	695b      	ldr	r3, [r3, #20]
 8013e16:	4618      	mov	r0, r3
 8013e18:	f7f8 f840 	bl	800be9c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013e1c:	68f8      	ldr	r0, [r7, #12]
 8013e1e:	f7ff ffbd 	bl	8013d9c <ip_frag_free_pbuf_custom_ref>
}
 8013e22:	bf00      	nop
 8013e24:	3710      	adds	r7, #16
 8013e26:	46bd      	mov	sp, r7
 8013e28:	bd80      	pop	{r7, pc}
 8013e2a:	bf00      	nop
 8013e2c:	08017d94 	.word	0x08017d94
 8013e30:	08017f58 	.word	0x08017f58
 8013e34:	08017ddc 	.word	0x08017ddc
 8013e38:	08017f64 	.word	0x08017f64

08013e3c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b094      	sub	sp, #80	@ 0x50
 8013e40:	af02      	add	r7, sp, #8
 8013e42:	60f8      	str	r0, [r7, #12]
 8013e44:	60b9      	str	r1, [r7, #8]
 8013e46:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013e48:	2300      	movs	r3, #0
 8013e4a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013e4e:	68bb      	ldr	r3, [r7, #8]
 8013e50:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013e52:	3b14      	subs	r3, #20
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	da00      	bge.n	8013e5a <ip4_frag+0x1e>
 8013e58:	3307      	adds	r3, #7
 8013e5a:	10db      	asrs	r3, r3, #3
 8013e5c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013e5e:	2314      	movs	r3, #20
 8013e60:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	685b      	ldr	r3, [r3, #4]
 8013e66:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8013e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e6a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e6e:	781b      	ldrb	r3, [r3, #0]
 8013e70:	f003 030f 	and.w	r3, r3, #15
 8013e74:	b2db      	uxtb	r3, r3
 8013e76:	009b      	lsls	r3, r3, #2
 8013e78:	b2db      	uxtb	r3, r3
 8013e7a:	2b14      	cmp	r3, #20
 8013e7c:	d002      	beq.n	8013e84 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013e7e:	f06f 0305 	mvn.w	r3, #5
 8013e82:	e110      	b.n	80140a6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	895b      	ldrh	r3, [r3, #10]
 8013e88:	2b13      	cmp	r3, #19
 8013e8a:	d809      	bhi.n	8013ea0 <ip4_frag+0x64>
 8013e8c:	4b88      	ldr	r3, [pc, #544]	@ (80140b0 <ip4_frag+0x274>)
 8013e8e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8013e92:	4988      	ldr	r1, [pc, #544]	@ (80140b4 <ip4_frag+0x278>)
 8013e94:	4888      	ldr	r0, [pc, #544]	@ (80140b8 <ip4_frag+0x27c>)
 8013e96:	f000 fbdf 	bl	8014658 <iprintf>
 8013e9a:	f06f 0305 	mvn.w	r3, #5
 8013e9e:	e102      	b.n	80140a6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ea2:	88db      	ldrh	r3, [r3, #6]
 8013ea4:	b29b      	uxth	r3, r3
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f7f6 fc0a 	bl	800a6c0 <lwip_htons>
 8013eac:	4603      	mov	r3, r0
 8013eae:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8013eb0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013eb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013eb6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013eba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013ebc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	891b      	ldrh	r3, [r3, #8]
 8013ec6:	3b14      	subs	r3, #20
 8013ec8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8013ecc:	e0e1      	b.n	8014092 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013ece:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013ed0:	00db      	lsls	r3, r3, #3
 8013ed2:	b29b      	uxth	r3, r3
 8013ed4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013ed8:	4293      	cmp	r3, r2
 8013eda:	bf28      	it	cs
 8013edc:	4613      	movcs	r3, r2
 8013ede:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013ee0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013ee4:	2114      	movs	r1, #20
 8013ee6:	200e      	movs	r0, #14
 8013ee8:	f7f7 fcf4 	bl	800b8d4 <pbuf_alloc>
 8013eec:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8013eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	f000 80d5 	beq.w	80140a0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ef8:	895b      	ldrh	r3, [r3, #10]
 8013efa:	2b13      	cmp	r3, #19
 8013efc:	d806      	bhi.n	8013f0c <ip4_frag+0xd0>
 8013efe:	4b6c      	ldr	r3, [pc, #432]	@ (80140b0 <ip4_frag+0x274>)
 8013f00:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8013f04:	496d      	ldr	r1, [pc, #436]	@ (80140bc <ip4_frag+0x280>)
 8013f06:	486c      	ldr	r0, [pc, #432]	@ (80140b8 <ip4_frag+0x27c>)
 8013f08:	f000 fba6 	bl	8014658 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f0e:	685b      	ldr	r3, [r3, #4]
 8013f10:	2214      	movs	r2, #20
 8013f12:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013f14:	4618      	mov	r0, r3
 8013f16:	f000 fd64 	bl	80149e2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f1c:	685b      	ldr	r3, [r3, #4]
 8013f1e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8013f20:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013f22:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8013f26:	e064      	b.n	8013ff2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	895a      	ldrh	r2, [r3, #10]
 8013f2c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013f2e:	1ad3      	subs	r3, r2, r3
 8013f30:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	895b      	ldrh	r3, [r3, #10]
 8013f36:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8013f38:	429a      	cmp	r2, r3
 8013f3a:	d906      	bls.n	8013f4a <ip4_frag+0x10e>
 8013f3c:	4b5c      	ldr	r3, [pc, #368]	@ (80140b0 <ip4_frag+0x274>)
 8013f3e:	f240 322d 	movw	r2, #813	@ 0x32d
 8013f42:	495f      	ldr	r1, [pc, #380]	@ (80140c0 <ip4_frag+0x284>)
 8013f44:	485c      	ldr	r0, [pc, #368]	@ (80140b8 <ip4_frag+0x27c>)
 8013f46:	f000 fb87 	bl	8014658 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013f4a:	8bfa      	ldrh	r2, [r7, #30]
 8013f4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013f50:	4293      	cmp	r3, r2
 8013f52:	bf28      	it	cs
 8013f54:	4613      	movcs	r3, r2
 8013f56:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013f5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d105      	bne.n	8013f6e <ip4_frag+0x132>
        poff = 0;
 8013f62:	2300      	movs	r3, #0
 8013f64:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	60fb      	str	r3, [r7, #12]
        continue;
 8013f6c:	e041      	b.n	8013ff2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013f6e:	f7ff ff0d 	bl	8013d8c <ip_frag_alloc_pbuf_custom_ref>
 8013f72:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013f74:	69bb      	ldr	r3, [r7, #24]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d103      	bne.n	8013f82 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013f7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013f7c:	f7f7 ff8e 	bl	800be9c <pbuf_free>
        goto memerr;
 8013f80:	e08f      	b.n	80140a2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013f82:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013f88:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013f8a:	4413      	add	r3, r2
 8013f8c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8013f90:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8013f94:	9201      	str	r2, [sp, #4]
 8013f96:	9300      	str	r3, [sp, #0]
 8013f98:	4603      	mov	r3, r0
 8013f9a:	2241      	movs	r2, #65	@ 0x41
 8013f9c:	2000      	movs	r0, #0
 8013f9e:	f7f7 fdc3 	bl	800bb28 <pbuf_alloced_custom>
 8013fa2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013fa4:	697b      	ldr	r3, [r7, #20]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d106      	bne.n	8013fb8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013faa:	69b8      	ldr	r0, [r7, #24]
 8013fac:	f7ff fef6 	bl	8013d9c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013fb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013fb2:	f7f7 ff73 	bl	800be9c <pbuf_free>
        goto memerr;
 8013fb6:	e074      	b.n	80140a2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013fb8:	68f8      	ldr	r0, [r7, #12]
 8013fba:	f7f8 f815 	bl	800bfe8 <pbuf_ref>
      pcr->original = p;
 8013fbe:	69bb      	ldr	r3, [r7, #24]
 8013fc0:	68fa      	ldr	r2, [r7, #12]
 8013fc2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013fc4:	69bb      	ldr	r3, [r7, #24]
 8013fc6:	4a3f      	ldr	r2, [pc, #252]	@ (80140c4 <ip4_frag+0x288>)
 8013fc8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013fca:	6979      	ldr	r1, [r7, #20]
 8013fcc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013fce:	f7f8 f833 	bl	800c038 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013fd2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8013fd6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013fda:	1ad3      	subs	r3, r2, r3
 8013fdc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8013fe0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d004      	beq.n	8013ff2 <ip4_frag+0x1b6>
        poff = 0;
 8013fe8:	2300      	movs	r3, #0
 8013fea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013ff2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d196      	bne.n	8013f28 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013ffa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8013ffc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014000:	4413      	add	r3, r2
 8014002:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014004:	68bb      	ldr	r3, [r7, #8]
 8014006:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014008:	f1a3 0213 	sub.w	r2, r3, #19
 801400c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014010:	429a      	cmp	r2, r3
 8014012:	bfcc      	ite	gt
 8014014:	2301      	movgt	r3, #1
 8014016:	2300      	movle	r3, #0
 8014018:	b2db      	uxtb	r3, r3
 801401a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801401c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8014020:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014024:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8014026:	6a3b      	ldr	r3, [r7, #32]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d002      	beq.n	8014032 <ip4_frag+0x1f6>
 801402c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801402e:	2b00      	cmp	r3, #0
 8014030:	d003      	beq.n	801403a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014032:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014034:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8014038:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801403a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801403c:	4618      	mov	r0, r3
 801403e:	f7f6 fb3f 	bl	800a6c0 <lwip_htons>
 8014042:	4603      	mov	r3, r0
 8014044:	461a      	mov	r2, r3
 8014046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014048:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801404a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801404c:	3314      	adds	r3, #20
 801404e:	b29b      	uxth	r3, r3
 8014050:	4618      	mov	r0, r3
 8014052:	f7f6 fb35 	bl	800a6c0 <lwip_htons>
 8014056:	4603      	mov	r3, r0
 8014058:	461a      	mov	r2, r3
 801405a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801405c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801405e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014060:	2200      	movs	r2, #0
 8014062:	729a      	strb	r2, [r3, #10]
 8014064:	2200      	movs	r2, #0
 8014066:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014068:	68bb      	ldr	r3, [r7, #8]
 801406a:	695b      	ldr	r3, [r3, #20]
 801406c:	687a      	ldr	r2, [r7, #4]
 801406e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014070:	68b8      	ldr	r0, [r7, #8]
 8014072:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014074:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014076:	f7f7 ff11 	bl	800be9c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801407a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801407e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014080:	1ad3      	subs	r3, r2, r3
 8014082:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8014086:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801408a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801408c:	4413      	add	r3, r2
 801408e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8014092:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014096:	2b00      	cmp	r3, #0
 8014098:	f47f af19 	bne.w	8013ece <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801409c:	2300      	movs	r3, #0
 801409e:	e002      	b.n	80140a6 <ip4_frag+0x26a>
      goto memerr;
 80140a0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80140a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80140a6:	4618      	mov	r0, r3
 80140a8:	3748      	adds	r7, #72	@ 0x48
 80140aa:	46bd      	mov	sp, r7
 80140ac:	bd80      	pop	{r7, pc}
 80140ae:	bf00      	nop
 80140b0:	08017d94 	.word	0x08017d94
 80140b4:	08017f70 	.word	0x08017f70
 80140b8:	08017ddc 	.word	0x08017ddc
 80140bc:	08017f8c 	.word	0x08017f8c
 80140c0:	08017fac 	.word	0x08017fac
 80140c4:	08013dd5 	.word	0x08013dd5

080140c8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b086      	sub	sp, #24
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	6078      	str	r0, [r7, #4]
 80140d0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80140d2:	230e      	movs	r3, #14
 80140d4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	895b      	ldrh	r3, [r3, #10]
 80140da:	2b0e      	cmp	r3, #14
 80140dc:	d96e      	bls.n	80141bc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	7bdb      	ldrb	r3, [r3, #15]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d106      	bne.n	80140f4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80140e6:	683b      	ldr	r3, [r7, #0]
 80140e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80140ec:	3301      	adds	r3, #1
 80140ee:	b2da      	uxtb	r2, r3
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	685b      	ldr	r3, [r3, #4]
 80140f8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80140fa:	693b      	ldr	r3, [r7, #16]
 80140fc:	7b1a      	ldrb	r2, [r3, #12]
 80140fe:	7b5b      	ldrb	r3, [r3, #13]
 8014100:	021b      	lsls	r3, r3, #8
 8014102:	4313      	orrs	r3, r2
 8014104:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014106:	693b      	ldr	r3, [r7, #16]
 8014108:	781b      	ldrb	r3, [r3, #0]
 801410a:	f003 0301 	and.w	r3, r3, #1
 801410e:	2b00      	cmp	r3, #0
 8014110:	d023      	beq.n	801415a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014112:	693b      	ldr	r3, [r7, #16]
 8014114:	781b      	ldrb	r3, [r3, #0]
 8014116:	2b01      	cmp	r3, #1
 8014118:	d10f      	bne.n	801413a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801411a:	693b      	ldr	r3, [r7, #16]
 801411c:	785b      	ldrb	r3, [r3, #1]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d11b      	bne.n	801415a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014122:	693b      	ldr	r3, [r7, #16]
 8014124:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014126:	2b5e      	cmp	r3, #94	@ 0x5e
 8014128:	d117      	bne.n	801415a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	7b5b      	ldrb	r3, [r3, #13]
 801412e:	f043 0310 	orr.w	r3, r3, #16
 8014132:	b2da      	uxtb	r2, r3
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	735a      	strb	r2, [r3, #13]
 8014138:	e00f      	b.n	801415a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801413a:	693b      	ldr	r3, [r7, #16]
 801413c:	2206      	movs	r2, #6
 801413e:	4928      	ldr	r1, [pc, #160]	@ (80141e0 <ethernet_input+0x118>)
 8014140:	4618      	mov	r0, r3
 8014142:	f000 fb73 	bl	801482c <memcmp>
 8014146:	4603      	mov	r3, r0
 8014148:	2b00      	cmp	r3, #0
 801414a:	d106      	bne.n	801415a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	7b5b      	ldrb	r3, [r3, #13]
 8014150:	f043 0308 	orr.w	r3, r3, #8
 8014154:	b2da      	uxtb	r2, r3
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801415a:	89fb      	ldrh	r3, [r7, #14]
 801415c:	2b08      	cmp	r3, #8
 801415e:	d003      	beq.n	8014168 <ethernet_input+0xa0>
 8014160:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8014164:	d014      	beq.n	8014190 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014166:	e032      	b.n	80141ce <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014168:	683b      	ldr	r3, [r7, #0]
 801416a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801416e:	f003 0308 	and.w	r3, r3, #8
 8014172:	2b00      	cmp	r3, #0
 8014174:	d024      	beq.n	80141c0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014176:	8afb      	ldrh	r3, [r7, #22]
 8014178:	4619      	mov	r1, r3
 801417a:	6878      	ldr	r0, [r7, #4]
 801417c:	f7f7 fe08 	bl	800bd90 <pbuf_remove_header>
 8014180:	4603      	mov	r3, r0
 8014182:	2b00      	cmp	r3, #0
 8014184:	d11e      	bne.n	80141c4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014186:	6839      	ldr	r1, [r7, #0]
 8014188:	6878      	ldr	r0, [r7, #4]
 801418a:	f7fe ff21 	bl	8012fd0 <ip4_input>
      break;
 801418e:	e013      	b.n	80141b8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014190:	683b      	ldr	r3, [r7, #0]
 8014192:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014196:	f003 0308 	and.w	r3, r3, #8
 801419a:	2b00      	cmp	r3, #0
 801419c:	d014      	beq.n	80141c8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801419e:	8afb      	ldrh	r3, [r7, #22]
 80141a0:	4619      	mov	r1, r3
 80141a2:	6878      	ldr	r0, [r7, #4]
 80141a4:	f7f7 fdf4 	bl	800bd90 <pbuf_remove_header>
 80141a8:	4603      	mov	r3, r0
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d10e      	bne.n	80141cc <ethernet_input+0x104>
        etharp_input(p, netif);
 80141ae:	6839      	ldr	r1, [r7, #0]
 80141b0:	6878      	ldr	r0, [r7, #4]
 80141b2:	f7fe f8c1 	bl	8012338 <etharp_input>
      break;
 80141b6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80141b8:	2300      	movs	r3, #0
 80141ba:	e00c      	b.n	80141d6 <ethernet_input+0x10e>
    goto free_and_return;
 80141bc:	bf00      	nop
 80141be:	e006      	b.n	80141ce <ethernet_input+0x106>
        goto free_and_return;
 80141c0:	bf00      	nop
 80141c2:	e004      	b.n	80141ce <ethernet_input+0x106>
        goto free_and_return;
 80141c4:	bf00      	nop
 80141c6:	e002      	b.n	80141ce <ethernet_input+0x106>
        goto free_and_return;
 80141c8:	bf00      	nop
 80141ca:	e000      	b.n	80141ce <ethernet_input+0x106>
        goto free_and_return;
 80141cc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80141ce:	6878      	ldr	r0, [r7, #4]
 80141d0:	f7f7 fe64 	bl	800be9c <pbuf_free>
  return ERR_OK;
 80141d4:	2300      	movs	r3, #0
}
 80141d6:	4618      	mov	r0, r3
 80141d8:	3718      	adds	r7, #24
 80141da:	46bd      	mov	sp, r7
 80141dc:	bd80      	pop	{r7, pc}
 80141de:	bf00      	nop
 80141e0:	080181d0 	.word	0x080181d0

080141e4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b086      	sub	sp, #24
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	60f8      	str	r0, [r7, #12]
 80141ec:	60b9      	str	r1, [r7, #8]
 80141ee:	607a      	str	r2, [r7, #4]
 80141f0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80141f2:	8c3b      	ldrh	r3, [r7, #32]
 80141f4:	4618      	mov	r0, r3
 80141f6:	f7f6 fa63 	bl	800a6c0 <lwip_htons>
 80141fa:	4603      	mov	r3, r0
 80141fc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80141fe:	210e      	movs	r1, #14
 8014200:	68b8      	ldr	r0, [r7, #8]
 8014202:	f7f7 fdb5 	bl	800bd70 <pbuf_add_header>
 8014206:	4603      	mov	r3, r0
 8014208:	2b00      	cmp	r3, #0
 801420a:	d125      	bne.n	8014258 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801420c:	68bb      	ldr	r3, [r7, #8]
 801420e:	685b      	ldr	r3, [r3, #4]
 8014210:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014212:	693b      	ldr	r3, [r7, #16]
 8014214:	8afa      	ldrh	r2, [r7, #22]
 8014216:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014218:	693b      	ldr	r3, [r7, #16]
 801421a:	2206      	movs	r2, #6
 801421c:	6839      	ldr	r1, [r7, #0]
 801421e:	4618      	mov	r0, r3
 8014220:	f000 fbdf 	bl	80149e2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014224:	693b      	ldr	r3, [r7, #16]
 8014226:	3306      	adds	r3, #6
 8014228:	2206      	movs	r2, #6
 801422a:	6879      	ldr	r1, [r7, #4]
 801422c:	4618      	mov	r0, r3
 801422e:	f000 fbd8 	bl	80149e2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014238:	2b06      	cmp	r3, #6
 801423a:	d006      	beq.n	801424a <ethernet_output+0x66>
 801423c:	4b0a      	ldr	r3, [pc, #40]	@ (8014268 <ethernet_output+0x84>)
 801423e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8014242:	490a      	ldr	r1, [pc, #40]	@ (801426c <ethernet_output+0x88>)
 8014244:	480a      	ldr	r0, [pc, #40]	@ (8014270 <ethernet_output+0x8c>)
 8014246:	f000 fa07 	bl	8014658 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	699b      	ldr	r3, [r3, #24]
 801424e:	68b9      	ldr	r1, [r7, #8]
 8014250:	68f8      	ldr	r0, [r7, #12]
 8014252:	4798      	blx	r3
 8014254:	4603      	mov	r3, r0
 8014256:	e002      	b.n	801425e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014258:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801425a:	f06f 0301 	mvn.w	r3, #1
}
 801425e:	4618      	mov	r0, r3
 8014260:	3718      	adds	r7, #24
 8014262:	46bd      	mov	sp, r7
 8014264:	bd80      	pop	{r7, pc}
 8014266:	bf00      	nop
 8014268:	08017fbc 	.word	0x08017fbc
 801426c:	08017ff4 	.word	0x08017ff4
 8014270:	08018028 	.word	0x08018028

08014274 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014274:	b580      	push	{r7, lr}
 8014276:	b082      	sub	sp, #8
 8014278:	af00      	add	r7, sp, #0
 801427a:	6078      	str	r0, [r7, #4]
 801427c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801427e:	683b      	ldr	r3, [r7, #0]
 8014280:	2200      	movs	r2, #0
 8014282:	2104      	movs	r1, #4
 8014284:	4618      	mov	r0, r3
 8014286:	f7f2 fcdf 	bl	8006c48 <osMessageQueueNew>
 801428a:	4602      	mov	r2, r0
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	2b00      	cmp	r3, #0
 8014296:	d102      	bne.n	801429e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8014298:	f04f 33ff 	mov.w	r3, #4294967295
 801429c:	e000      	b.n	80142a0 <sys_mbox_new+0x2c>

  return ERR_OK;
 801429e:	2300      	movs	r3, #0
}
 80142a0:	4618      	mov	r0, r3
 80142a2:	3708      	adds	r7, #8
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bd80      	pop	{r7, pc}

080142a8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b084      	sub	sp, #16
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
 80142b0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	6818      	ldr	r0, [r3, #0]
 80142b6:	4639      	mov	r1, r7
 80142b8:	2300      	movs	r3, #0
 80142ba:	2200      	movs	r2, #0
 80142bc:	f7f2 fd4a 	bl	8006d54 <osMessageQueuePut>
 80142c0:	4603      	mov	r3, r0
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d102      	bne.n	80142cc <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80142c6:	2300      	movs	r3, #0
 80142c8:	73fb      	strb	r3, [r7, #15]
 80142ca:	e001      	b.n	80142d0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80142cc:	23ff      	movs	r3, #255	@ 0xff
 80142ce:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80142d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80142d4:	4618      	mov	r0, r3
 80142d6:	3710      	adds	r7, #16
 80142d8:	46bd      	mov	sp, r7
 80142da:	bd80      	pop	{r7, pc}

080142dc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80142dc:	b580      	push	{r7, lr}
 80142de:	b086      	sub	sp, #24
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	60f8      	str	r0, [r7, #12]
 80142e4:	60b9      	str	r1, [r7, #8]
 80142e6:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80142e8:	f7f2 f910 	bl	800650c <osKernelGetTickCount>
 80142ec:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d013      	beq.n	801431c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	6818      	ldr	r0, [r3, #0]
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	2200      	movs	r2, #0
 80142fc:	68b9      	ldr	r1, [r7, #8]
 80142fe:	f7f2 fd9d 	bl	8006e3c <osMessageQueueGet>
 8014302:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8014304:	693b      	ldr	r3, [r7, #16]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d105      	bne.n	8014316 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801430a:	f7f2 f8ff 	bl	800650c <osKernelGetTickCount>
 801430e:	4602      	mov	r2, r0
 8014310:	697b      	ldr	r3, [r7, #20]
 8014312:	1ad3      	subs	r3, r2, r3
 8014314:	e00f      	b.n	8014336 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014316:	f04f 33ff 	mov.w	r3, #4294967295
 801431a:	e00c      	b.n	8014336 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	6818      	ldr	r0, [r3, #0]
 8014320:	f04f 33ff 	mov.w	r3, #4294967295
 8014324:	2200      	movs	r2, #0
 8014326:	68b9      	ldr	r1, [r7, #8]
 8014328:	f7f2 fd88 	bl	8006e3c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801432c:	f7f2 f8ee 	bl	800650c <osKernelGetTickCount>
 8014330:	4602      	mov	r2, r0
 8014332:	697b      	ldr	r3, [r7, #20]
 8014334:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8014336:	4618      	mov	r0, r3
 8014338:	3718      	adds	r7, #24
 801433a:	46bd      	mov	sp, r7
 801433c:	bd80      	pop	{r7, pc}

0801433e <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801433e:	b480      	push	{r7}
 8014340:	b083      	sub	sp, #12
 8014342:	af00      	add	r7, sp, #0
 8014344:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d101      	bne.n	8014352 <sys_mbox_valid+0x14>
    return 0;
 801434e:	2300      	movs	r3, #0
 8014350:	e000      	b.n	8014354 <sys_mbox_valid+0x16>
  else
    return 1;
 8014352:	2301      	movs	r3, #1
}
 8014354:	4618      	mov	r0, r3
 8014356:	370c      	adds	r7, #12
 8014358:	46bd      	mov	sp, r7
 801435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435e:	4770      	bx	lr

08014360 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8014360:	b580      	push	{r7, lr}
 8014362:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8014364:	2000      	movs	r0, #0
 8014366:	f7f2 f9cd 	bl	8006704 <osMutexNew>
 801436a:	4603      	mov	r3, r0
 801436c:	4a01      	ldr	r2, [pc, #4]	@ (8014374 <sys_init+0x14>)
 801436e:	6013      	str	r3, [r2, #0]
#endif
}
 8014370:	bf00      	nop
 8014372:	bd80      	pop	{r7, pc}
 8014374:	2000d504 	.word	0x2000d504

08014378 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8014378:	b580      	push	{r7, lr}
 801437a:	b082      	sub	sp, #8
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8014380:	2000      	movs	r0, #0
 8014382:	f7f2 f9bf 	bl	8006704 <osMutexNew>
 8014386:	4602      	mov	r2, r0
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d102      	bne.n	801439a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014394:	f04f 33ff 	mov.w	r3, #4294967295
 8014398:	e000      	b.n	801439c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801439a:	2300      	movs	r3, #0
}
 801439c:	4618      	mov	r0, r3
 801439e:	3708      	adds	r7, #8
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd80      	pop	{r7, pc}

080143a4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b082      	sub	sp, #8
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	f04f 31ff 	mov.w	r1, #4294967295
 80143b4:	4618      	mov	r0, r3
 80143b6:	f7f2 fa3f 	bl	8006838 <osMutexAcquire>
#endif
}
 80143ba:	bf00      	nop
 80143bc:	3708      	adds	r7, #8
 80143be:	46bd      	mov	sp, r7
 80143c0:	bd80      	pop	{r7, pc}

080143c2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80143c2:	b580      	push	{r7, lr}
 80143c4:	b082      	sub	sp, #8
 80143c6:	af00      	add	r7, sp, #0
 80143c8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	4618      	mov	r0, r3
 80143d0:	f7f2 fa90 	bl	80068f4 <osMutexRelease>
}
 80143d4:	bf00      	nop
 80143d6:	3708      	adds	r7, #8
 80143d8:	46bd      	mov	sp, r7
 80143da:	bd80      	pop	{r7, pc}

080143dc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80143dc:	b580      	push	{r7, lr}
 80143de:	b08e      	sub	sp, #56	@ 0x38
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	60f8      	str	r0, [r7, #12]
 80143e4:	60b9      	str	r1, [r7, #8]
 80143e6:	607a      	str	r2, [r7, #4]
 80143e8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80143ea:	f107 0314 	add.w	r3, r7, #20
 80143ee:	2224      	movs	r2, #36	@ 0x24
 80143f0:	2100      	movs	r1, #0
 80143f2:	4618      	mov	r0, r3
 80143f4:	f000 fa2a 	bl	801484c <memset>
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	617b      	str	r3, [r7, #20]
 80143fc:	683b      	ldr	r3, [r7, #0]
 80143fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014400:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014402:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8014404:	f107 0314 	add.w	r3, r7, #20
 8014408:	461a      	mov	r2, r3
 801440a:	6879      	ldr	r1, [r7, #4]
 801440c:	68b8      	ldr	r0, [r7, #8]
 801440e:	f7f2 f8a5 	bl	800655c <osThreadNew>
 8014412:	4603      	mov	r3, r0
#endif
}
 8014414:	4618      	mov	r0, r3
 8014416:	3738      	adds	r7, #56	@ 0x38
 8014418:	46bd      	mov	sp, r7
 801441a:	bd80      	pop	{r7, pc}

0801441c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8014420:	4b04      	ldr	r3, [pc, #16]	@ (8014434 <sys_arch_protect+0x18>)
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	f04f 31ff 	mov.w	r1, #4294967295
 8014428:	4618      	mov	r0, r3
 801442a:	f7f2 fa05 	bl	8006838 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801442e:	2301      	movs	r3, #1
}
 8014430:	4618      	mov	r0, r3
 8014432:	bd80      	pop	{r7, pc}
 8014434:	2000d504 	.word	0x2000d504

08014438 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8014438:	b580      	push	{r7, lr}
 801443a:	b082      	sub	sp, #8
 801443c:	af00      	add	r7, sp, #0
 801443e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8014440:	4b04      	ldr	r3, [pc, #16]	@ (8014454 <sys_arch_unprotect+0x1c>)
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	4618      	mov	r0, r3
 8014446:	f7f2 fa55 	bl	80068f4 <osMutexRelease>
}
 801444a:	bf00      	nop
 801444c:	3708      	adds	r7, #8
 801444e:	46bd      	mov	sp, r7
 8014450:	bd80      	pop	{r7, pc}
 8014452:	bf00      	nop
 8014454:	2000d504 	.word	0x2000d504

08014458 <rand>:
 8014458:	4b16      	ldr	r3, [pc, #88]	@ (80144b4 <rand+0x5c>)
 801445a:	b510      	push	{r4, lr}
 801445c:	681c      	ldr	r4, [r3, #0]
 801445e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014460:	b9b3      	cbnz	r3, 8014490 <rand+0x38>
 8014462:	2018      	movs	r0, #24
 8014464:	f000 fb34 	bl	8014ad0 <malloc>
 8014468:	4602      	mov	r2, r0
 801446a:	6320      	str	r0, [r4, #48]	@ 0x30
 801446c:	b920      	cbnz	r0, 8014478 <rand+0x20>
 801446e:	4b12      	ldr	r3, [pc, #72]	@ (80144b8 <rand+0x60>)
 8014470:	4812      	ldr	r0, [pc, #72]	@ (80144bc <rand+0x64>)
 8014472:	2152      	movs	r1, #82	@ 0x52
 8014474:	f000 fac4 	bl	8014a00 <__assert_func>
 8014478:	4911      	ldr	r1, [pc, #68]	@ (80144c0 <rand+0x68>)
 801447a:	4b12      	ldr	r3, [pc, #72]	@ (80144c4 <rand+0x6c>)
 801447c:	e9c0 1300 	strd	r1, r3, [r0]
 8014480:	4b11      	ldr	r3, [pc, #68]	@ (80144c8 <rand+0x70>)
 8014482:	6083      	str	r3, [r0, #8]
 8014484:	230b      	movs	r3, #11
 8014486:	8183      	strh	r3, [r0, #12]
 8014488:	2100      	movs	r1, #0
 801448a:	2001      	movs	r0, #1
 801448c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014490:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014492:	480e      	ldr	r0, [pc, #56]	@ (80144cc <rand+0x74>)
 8014494:	690b      	ldr	r3, [r1, #16]
 8014496:	694c      	ldr	r4, [r1, #20]
 8014498:	4a0d      	ldr	r2, [pc, #52]	@ (80144d0 <rand+0x78>)
 801449a:	4358      	muls	r0, r3
 801449c:	fb02 0004 	mla	r0, r2, r4, r0
 80144a0:	fba3 3202 	umull	r3, r2, r3, r2
 80144a4:	3301      	adds	r3, #1
 80144a6:	eb40 0002 	adc.w	r0, r0, r2
 80144aa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80144ae:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80144b2:	bd10      	pop	{r4, pc}
 80144b4:	2000003c 	.word	0x2000003c
 80144b8:	080181de 	.word	0x080181de
 80144bc:	080181f5 	.word	0x080181f5
 80144c0:	abcd330e 	.word	0xabcd330e
 80144c4:	e66d1234 	.word	0xe66d1234
 80144c8:	0005deec 	.word	0x0005deec
 80144cc:	5851f42d 	.word	0x5851f42d
 80144d0:	4c957f2d 	.word	0x4c957f2d

080144d4 <std>:
 80144d4:	2300      	movs	r3, #0
 80144d6:	b510      	push	{r4, lr}
 80144d8:	4604      	mov	r4, r0
 80144da:	e9c0 3300 	strd	r3, r3, [r0]
 80144de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80144e2:	6083      	str	r3, [r0, #8]
 80144e4:	8181      	strh	r1, [r0, #12]
 80144e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80144e8:	81c2      	strh	r2, [r0, #14]
 80144ea:	6183      	str	r3, [r0, #24]
 80144ec:	4619      	mov	r1, r3
 80144ee:	2208      	movs	r2, #8
 80144f0:	305c      	adds	r0, #92	@ 0x5c
 80144f2:	f000 f9ab 	bl	801484c <memset>
 80144f6:	4b0d      	ldr	r3, [pc, #52]	@ (801452c <std+0x58>)
 80144f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80144fa:	4b0d      	ldr	r3, [pc, #52]	@ (8014530 <std+0x5c>)
 80144fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80144fe:	4b0d      	ldr	r3, [pc, #52]	@ (8014534 <std+0x60>)
 8014500:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014502:	4b0d      	ldr	r3, [pc, #52]	@ (8014538 <std+0x64>)
 8014504:	6323      	str	r3, [r4, #48]	@ 0x30
 8014506:	4b0d      	ldr	r3, [pc, #52]	@ (801453c <std+0x68>)
 8014508:	6224      	str	r4, [r4, #32]
 801450a:	429c      	cmp	r4, r3
 801450c:	d006      	beq.n	801451c <std+0x48>
 801450e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014512:	4294      	cmp	r4, r2
 8014514:	d002      	beq.n	801451c <std+0x48>
 8014516:	33d0      	adds	r3, #208	@ 0xd0
 8014518:	429c      	cmp	r4, r3
 801451a:	d105      	bne.n	8014528 <std+0x54>
 801451c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014524:	f000 ba5a 	b.w	80149dc <__retarget_lock_init_recursive>
 8014528:	bd10      	pop	{r4, pc}
 801452a:	bf00      	nop
 801452c:	0801467d 	.word	0x0801467d
 8014530:	0801469f 	.word	0x0801469f
 8014534:	080146d7 	.word	0x080146d7
 8014538:	080146fb 	.word	0x080146fb
 801453c:	2000d508 	.word	0x2000d508

08014540 <stdio_exit_handler>:
 8014540:	4a02      	ldr	r2, [pc, #8]	@ (801454c <stdio_exit_handler+0xc>)
 8014542:	4903      	ldr	r1, [pc, #12]	@ (8014550 <stdio_exit_handler+0x10>)
 8014544:	4803      	ldr	r0, [pc, #12]	@ (8014554 <stdio_exit_handler+0x14>)
 8014546:	f000 b869 	b.w	801461c <_fwalk_sglue>
 801454a:	bf00      	nop
 801454c:	20000030 	.word	0x20000030
 8014550:	080152e5 	.word	0x080152e5
 8014554:	20000040 	.word	0x20000040

08014558 <cleanup_stdio>:
 8014558:	6841      	ldr	r1, [r0, #4]
 801455a:	4b0c      	ldr	r3, [pc, #48]	@ (801458c <cleanup_stdio+0x34>)
 801455c:	4299      	cmp	r1, r3
 801455e:	b510      	push	{r4, lr}
 8014560:	4604      	mov	r4, r0
 8014562:	d001      	beq.n	8014568 <cleanup_stdio+0x10>
 8014564:	f000 febe 	bl	80152e4 <_fflush_r>
 8014568:	68a1      	ldr	r1, [r4, #8]
 801456a:	4b09      	ldr	r3, [pc, #36]	@ (8014590 <cleanup_stdio+0x38>)
 801456c:	4299      	cmp	r1, r3
 801456e:	d002      	beq.n	8014576 <cleanup_stdio+0x1e>
 8014570:	4620      	mov	r0, r4
 8014572:	f000 feb7 	bl	80152e4 <_fflush_r>
 8014576:	68e1      	ldr	r1, [r4, #12]
 8014578:	4b06      	ldr	r3, [pc, #24]	@ (8014594 <cleanup_stdio+0x3c>)
 801457a:	4299      	cmp	r1, r3
 801457c:	d004      	beq.n	8014588 <cleanup_stdio+0x30>
 801457e:	4620      	mov	r0, r4
 8014580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014584:	f000 beae 	b.w	80152e4 <_fflush_r>
 8014588:	bd10      	pop	{r4, pc}
 801458a:	bf00      	nop
 801458c:	2000d508 	.word	0x2000d508
 8014590:	2000d570 	.word	0x2000d570
 8014594:	2000d5d8 	.word	0x2000d5d8

08014598 <global_stdio_init.part.0>:
 8014598:	b510      	push	{r4, lr}
 801459a:	4b0b      	ldr	r3, [pc, #44]	@ (80145c8 <global_stdio_init.part.0+0x30>)
 801459c:	4c0b      	ldr	r4, [pc, #44]	@ (80145cc <global_stdio_init.part.0+0x34>)
 801459e:	4a0c      	ldr	r2, [pc, #48]	@ (80145d0 <global_stdio_init.part.0+0x38>)
 80145a0:	601a      	str	r2, [r3, #0]
 80145a2:	4620      	mov	r0, r4
 80145a4:	2200      	movs	r2, #0
 80145a6:	2104      	movs	r1, #4
 80145a8:	f7ff ff94 	bl	80144d4 <std>
 80145ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80145b0:	2201      	movs	r2, #1
 80145b2:	2109      	movs	r1, #9
 80145b4:	f7ff ff8e 	bl	80144d4 <std>
 80145b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80145bc:	2202      	movs	r2, #2
 80145be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80145c2:	2112      	movs	r1, #18
 80145c4:	f7ff bf86 	b.w	80144d4 <std>
 80145c8:	2000d640 	.word	0x2000d640
 80145cc:	2000d508 	.word	0x2000d508
 80145d0:	08014541 	.word	0x08014541

080145d4 <__sfp_lock_acquire>:
 80145d4:	4801      	ldr	r0, [pc, #4]	@ (80145dc <__sfp_lock_acquire+0x8>)
 80145d6:	f000 ba02 	b.w	80149de <__retarget_lock_acquire_recursive>
 80145da:	bf00      	nop
 80145dc:	2000d649 	.word	0x2000d649

080145e0 <__sfp_lock_release>:
 80145e0:	4801      	ldr	r0, [pc, #4]	@ (80145e8 <__sfp_lock_release+0x8>)
 80145e2:	f000 b9fd 	b.w	80149e0 <__retarget_lock_release_recursive>
 80145e6:	bf00      	nop
 80145e8:	2000d649 	.word	0x2000d649

080145ec <__sinit>:
 80145ec:	b510      	push	{r4, lr}
 80145ee:	4604      	mov	r4, r0
 80145f0:	f7ff fff0 	bl	80145d4 <__sfp_lock_acquire>
 80145f4:	6a23      	ldr	r3, [r4, #32]
 80145f6:	b11b      	cbz	r3, 8014600 <__sinit+0x14>
 80145f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80145fc:	f7ff bff0 	b.w	80145e0 <__sfp_lock_release>
 8014600:	4b04      	ldr	r3, [pc, #16]	@ (8014614 <__sinit+0x28>)
 8014602:	6223      	str	r3, [r4, #32]
 8014604:	4b04      	ldr	r3, [pc, #16]	@ (8014618 <__sinit+0x2c>)
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d1f5      	bne.n	80145f8 <__sinit+0xc>
 801460c:	f7ff ffc4 	bl	8014598 <global_stdio_init.part.0>
 8014610:	e7f2      	b.n	80145f8 <__sinit+0xc>
 8014612:	bf00      	nop
 8014614:	08014559 	.word	0x08014559
 8014618:	2000d640 	.word	0x2000d640

0801461c <_fwalk_sglue>:
 801461c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014620:	4607      	mov	r7, r0
 8014622:	4688      	mov	r8, r1
 8014624:	4614      	mov	r4, r2
 8014626:	2600      	movs	r6, #0
 8014628:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801462c:	f1b9 0901 	subs.w	r9, r9, #1
 8014630:	d505      	bpl.n	801463e <_fwalk_sglue+0x22>
 8014632:	6824      	ldr	r4, [r4, #0]
 8014634:	2c00      	cmp	r4, #0
 8014636:	d1f7      	bne.n	8014628 <_fwalk_sglue+0xc>
 8014638:	4630      	mov	r0, r6
 801463a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801463e:	89ab      	ldrh	r3, [r5, #12]
 8014640:	2b01      	cmp	r3, #1
 8014642:	d907      	bls.n	8014654 <_fwalk_sglue+0x38>
 8014644:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014648:	3301      	adds	r3, #1
 801464a:	d003      	beq.n	8014654 <_fwalk_sglue+0x38>
 801464c:	4629      	mov	r1, r5
 801464e:	4638      	mov	r0, r7
 8014650:	47c0      	blx	r8
 8014652:	4306      	orrs	r6, r0
 8014654:	3568      	adds	r5, #104	@ 0x68
 8014656:	e7e9      	b.n	801462c <_fwalk_sglue+0x10>

08014658 <iprintf>:
 8014658:	b40f      	push	{r0, r1, r2, r3}
 801465a:	b507      	push	{r0, r1, r2, lr}
 801465c:	4906      	ldr	r1, [pc, #24]	@ (8014678 <iprintf+0x20>)
 801465e:	ab04      	add	r3, sp, #16
 8014660:	6808      	ldr	r0, [r1, #0]
 8014662:	f853 2b04 	ldr.w	r2, [r3], #4
 8014666:	6881      	ldr	r1, [r0, #8]
 8014668:	9301      	str	r3, [sp, #4]
 801466a:	f000 fb11 	bl	8014c90 <_vfiprintf_r>
 801466e:	b003      	add	sp, #12
 8014670:	f85d eb04 	ldr.w	lr, [sp], #4
 8014674:	b004      	add	sp, #16
 8014676:	4770      	bx	lr
 8014678:	2000003c 	.word	0x2000003c

0801467c <__sread>:
 801467c:	b510      	push	{r4, lr}
 801467e:	460c      	mov	r4, r1
 8014680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014684:	f000 f962 	bl	801494c <_read_r>
 8014688:	2800      	cmp	r0, #0
 801468a:	bfab      	itete	ge
 801468c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801468e:	89a3      	ldrhlt	r3, [r4, #12]
 8014690:	181b      	addge	r3, r3, r0
 8014692:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014696:	bfac      	ite	ge
 8014698:	6563      	strge	r3, [r4, #84]	@ 0x54
 801469a:	81a3      	strhlt	r3, [r4, #12]
 801469c:	bd10      	pop	{r4, pc}

0801469e <__swrite>:
 801469e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146a2:	461f      	mov	r7, r3
 80146a4:	898b      	ldrh	r3, [r1, #12]
 80146a6:	05db      	lsls	r3, r3, #23
 80146a8:	4605      	mov	r5, r0
 80146aa:	460c      	mov	r4, r1
 80146ac:	4616      	mov	r6, r2
 80146ae:	d505      	bpl.n	80146bc <__swrite+0x1e>
 80146b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146b4:	2302      	movs	r3, #2
 80146b6:	2200      	movs	r2, #0
 80146b8:	f000 f936 	bl	8014928 <_lseek_r>
 80146bc:	89a3      	ldrh	r3, [r4, #12]
 80146be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80146c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80146c6:	81a3      	strh	r3, [r4, #12]
 80146c8:	4632      	mov	r2, r6
 80146ca:	463b      	mov	r3, r7
 80146cc:	4628      	mov	r0, r5
 80146ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80146d2:	f000 b94d 	b.w	8014970 <_write_r>

080146d6 <__sseek>:
 80146d6:	b510      	push	{r4, lr}
 80146d8:	460c      	mov	r4, r1
 80146da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146de:	f000 f923 	bl	8014928 <_lseek_r>
 80146e2:	1c43      	adds	r3, r0, #1
 80146e4:	89a3      	ldrh	r3, [r4, #12]
 80146e6:	bf15      	itete	ne
 80146e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80146ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80146ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80146f2:	81a3      	strheq	r3, [r4, #12]
 80146f4:	bf18      	it	ne
 80146f6:	81a3      	strhne	r3, [r4, #12]
 80146f8:	bd10      	pop	{r4, pc}

080146fa <__sclose>:
 80146fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146fe:	f000 b8ad 	b.w	801485c <_close_r>

08014702 <__swbuf_r>:
 8014702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014704:	460e      	mov	r6, r1
 8014706:	4614      	mov	r4, r2
 8014708:	4605      	mov	r5, r0
 801470a:	b118      	cbz	r0, 8014714 <__swbuf_r+0x12>
 801470c:	6a03      	ldr	r3, [r0, #32]
 801470e:	b90b      	cbnz	r3, 8014714 <__swbuf_r+0x12>
 8014710:	f7ff ff6c 	bl	80145ec <__sinit>
 8014714:	69a3      	ldr	r3, [r4, #24]
 8014716:	60a3      	str	r3, [r4, #8]
 8014718:	89a3      	ldrh	r3, [r4, #12]
 801471a:	071a      	lsls	r2, r3, #28
 801471c:	d501      	bpl.n	8014722 <__swbuf_r+0x20>
 801471e:	6923      	ldr	r3, [r4, #16]
 8014720:	b943      	cbnz	r3, 8014734 <__swbuf_r+0x32>
 8014722:	4621      	mov	r1, r4
 8014724:	4628      	mov	r0, r5
 8014726:	f000 f82b 	bl	8014780 <__swsetup_r>
 801472a:	b118      	cbz	r0, 8014734 <__swbuf_r+0x32>
 801472c:	f04f 37ff 	mov.w	r7, #4294967295
 8014730:	4638      	mov	r0, r7
 8014732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014734:	6823      	ldr	r3, [r4, #0]
 8014736:	6922      	ldr	r2, [r4, #16]
 8014738:	1a98      	subs	r0, r3, r2
 801473a:	6963      	ldr	r3, [r4, #20]
 801473c:	b2f6      	uxtb	r6, r6
 801473e:	4283      	cmp	r3, r0
 8014740:	4637      	mov	r7, r6
 8014742:	dc05      	bgt.n	8014750 <__swbuf_r+0x4e>
 8014744:	4621      	mov	r1, r4
 8014746:	4628      	mov	r0, r5
 8014748:	f000 fdcc 	bl	80152e4 <_fflush_r>
 801474c:	2800      	cmp	r0, #0
 801474e:	d1ed      	bne.n	801472c <__swbuf_r+0x2a>
 8014750:	68a3      	ldr	r3, [r4, #8]
 8014752:	3b01      	subs	r3, #1
 8014754:	60a3      	str	r3, [r4, #8]
 8014756:	6823      	ldr	r3, [r4, #0]
 8014758:	1c5a      	adds	r2, r3, #1
 801475a:	6022      	str	r2, [r4, #0]
 801475c:	701e      	strb	r6, [r3, #0]
 801475e:	6962      	ldr	r2, [r4, #20]
 8014760:	1c43      	adds	r3, r0, #1
 8014762:	429a      	cmp	r2, r3
 8014764:	d004      	beq.n	8014770 <__swbuf_r+0x6e>
 8014766:	89a3      	ldrh	r3, [r4, #12]
 8014768:	07db      	lsls	r3, r3, #31
 801476a:	d5e1      	bpl.n	8014730 <__swbuf_r+0x2e>
 801476c:	2e0a      	cmp	r6, #10
 801476e:	d1df      	bne.n	8014730 <__swbuf_r+0x2e>
 8014770:	4621      	mov	r1, r4
 8014772:	4628      	mov	r0, r5
 8014774:	f000 fdb6 	bl	80152e4 <_fflush_r>
 8014778:	2800      	cmp	r0, #0
 801477a:	d0d9      	beq.n	8014730 <__swbuf_r+0x2e>
 801477c:	e7d6      	b.n	801472c <__swbuf_r+0x2a>
	...

08014780 <__swsetup_r>:
 8014780:	b538      	push	{r3, r4, r5, lr}
 8014782:	4b29      	ldr	r3, [pc, #164]	@ (8014828 <__swsetup_r+0xa8>)
 8014784:	4605      	mov	r5, r0
 8014786:	6818      	ldr	r0, [r3, #0]
 8014788:	460c      	mov	r4, r1
 801478a:	b118      	cbz	r0, 8014794 <__swsetup_r+0x14>
 801478c:	6a03      	ldr	r3, [r0, #32]
 801478e:	b90b      	cbnz	r3, 8014794 <__swsetup_r+0x14>
 8014790:	f7ff ff2c 	bl	80145ec <__sinit>
 8014794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014798:	0719      	lsls	r1, r3, #28
 801479a:	d422      	bmi.n	80147e2 <__swsetup_r+0x62>
 801479c:	06da      	lsls	r2, r3, #27
 801479e:	d407      	bmi.n	80147b0 <__swsetup_r+0x30>
 80147a0:	2209      	movs	r2, #9
 80147a2:	602a      	str	r2, [r5, #0]
 80147a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80147a8:	81a3      	strh	r3, [r4, #12]
 80147aa:	f04f 30ff 	mov.w	r0, #4294967295
 80147ae:	e033      	b.n	8014818 <__swsetup_r+0x98>
 80147b0:	0758      	lsls	r0, r3, #29
 80147b2:	d512      	bpl.n	80147da <__swsetup_r+0x5a>
 80147b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80147b6:	b141      	cbz	r1, 80147ca <__swsetup_r+0x4a>
 80147b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80147bc:	4299      	cmp	r1, r3
 80147be:	d002      	beq.n	80147c6 <__swsetup_r+0x46>
 80147c0:	4628      	mov	r0, r5
 80147c2:	f000 f93b 	bl	8014a3c <_free_r>
 80147c6:	2300      	movs	r3, #0
 80147c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80147ca:	89a3      	ldrh	r3, [r4, #12]
 80147cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80147d0:	81a3      	strh	r3, [r4, #12]
 80147d2:	2300      	movs	r3, #0
 80147d4:	6063      	str	r3, [r4, #4]
 80147d6:	6923      	ldr	r3, [r4, #16]
 80147d8:	6023      	str	r3, [r4, #0]
 80147da:	89a3      	ldrh	r3, [r4, #12]
 80147dc:	f043 0308 	orr.w	r3, r3, #8
 80147e0:	81a3      	strh	r3, [r4, #12]
 80147e2:	6923      	ldr	r3, [r4, #16]
 80147e4:	b94b      	cbnz	r3, 80147fa <__swsetup_r+0x7a>
 80147e6:	89a3      	ldrh	r3, [r4, #12]
 80147e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80147ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80147f0:	d003      	beq.n	80147fa <__swsetup_r+0x7a>
 80147f2:	4621      	mov	r1, r4
 80147f4:	4628      	mov	r0, r5
 80147f6:	f000 fdd5 	bl	80153a4 <__smakebuf_r>
 80147fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147fe:	f013 0201 	ands.w	r2, r3, #1
 8014802:	d00a      	beq.n	801481a <__swsetup_r+0x9a>
 8014804:	2200      	movs	r2, #0
 8014806:	60a2      	str	r2, [r4, #8]
 8014808:	6962      	ldr	r2, [r4, #20]
 801480a:	4252      	negs	r2, r2
 801480c:	61a2      	str	r2, [r4, #24]
 801480e:	6922      	ldr	r2, [r4, #16]
 8014810:	b942      	cbnz	r2, 8014824 <__swsetup_r+0xa4>
 8014812:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014816:	d1c5      	bne.n	80147a4 <__swsetup_r+0x24>
 8014818:	bd38      	pop	{r3, r4, r5, pc}
 801481a:	0799      	lsls	r1, r3, #30
 801481c:	bf58      	it	pl
 801481e:	6962      	ldrpl	r2, [r4, #20]
 8014820:	60a2      	str	r2, [r4, #8]
 8014822:	e7f4      	b.n	801480e <__swsetup_r+0x8e>
 8014824:	2000      	movs	r0, #0
 8014826:	e7f7      	b.n	8014818 <__swsetup_r+0x98>
 8014828:	2000003c 	.word	0x2000003c

0801482c <memcmp>:
 801482c:	b510      	push	{r4, lr}
 801482e:	3901      	subs	r1, #1
 8014830:	4402      	add	r2, r0
 8014832:	4290      	cmp	r0, r2
 8014834:	d101      	bne.n	801483a <memcmp+0xe>
 8014836:	2000      	movs	r0, #0
 8014838:	e005      	b.n	8014846 <memcmp+0x1a>
 801483a:	7803      	ldrb	r3, [r0, #0]
 801483c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014840:	42a3      	cmp	r3, r4
 8014842:	d001      	beq.n	8014848 <memcmp+0x1c>
 8014844:	1b18      	subs	r0, r3, r4
 8014846:	bd10      	pop	{r4, pc}
 8014848:	3001      	adds	r0, #1
 801484a:	e7f2      	b.n	8014832 <memcmp+0x6>

0801484c <memset>:
 801484c:	4402      	add	r2, r0
 801484e:	4603      	mov	r3, r0
 8014850:	4293      	cmp	r3, r2
 8014852:	d100      	bne.n	8014856 <memset+0xa>
 8014854:	4770      	bx	lr
 8014856:	f803 1b01 	strb.w	r1, [r3], #1
 801485a:	e7f9      	b.n	8014850 <memset+0x4>

0801485c <_close_r>:
 801485c:	b538      	push	{r3, r4, r5, lr}
 801485e:	4d06      	ldr	r5, [pc, #24]	@ (8014878 <_close_r+0x1c>)
 8014860:	2300      	movs	r3, #0
 8014862:	4604      	mov	r4, r0
 8014864:	4608      	mov	r0, r1
 8014866:	602b      	str	r3, [r5, #0]
 8014868:	f7ec fb58 	bl	8000f1c <_close>
 801486c:	1c43      	adds	r3, r0, #1
 801486e:	d102      	bne.n	8014876 <_close_r+0x1a>
 8014870:	682b      	ldr	r3, [r5, #0]
 8014872:	b103      	cbz	r3, 8014876 <_close_r+0x1a>
 8014874:	6023      	str	r3, [r4, #0]
 8014876:	bd38      	pop	{r3, r4, r5, pc}
 8014878:	2000d644 	.word	0x2000d644

0801487c <_reclaim_reent>:
 801487c:	4b29      	ldr	r3, [pc, #164]	@ (8014924 <_reclaim_reent+0xa8>)
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	4283      	cmp	r3, r0
 8014882:	b570      	push	{r4, r5, r6, lr}
 8014884:	4604      	mov	r4, r0
 8014886:	d04b      	beq.n	8014920 <_reclaim_reent+0xa4>
 8014888:	69c3      	ldr	r3, [r0, #28]
 801488a:	b1ab      	cbz	r3, 80148b8 <_reclaim_reent+0x3c>
 801488c:	68db      	ldr	r3, [r3, #12]
 801488e:	b16b      	cbz	r3, 80148ac <_reclaim_reent+0x30>
 8014890:	2500      	movs	r5, #0
 8014892:	69e3      	ldr	r3, [r4, #28]
 8014894:	68db      	ldr	r3, [r3, #12]
 8014896:	5959      	ldr	r1, [r3, r5]
 8014898:	2900      	cmp	r1, #0
 801489a:	d13b      	bne.n	8014914 <_reclaim_reent+0x98>
 801489c:	3504      	adds	r5, #4
 801489e:	2d80      	cmp	r5, #128	@ 0x80
 80148a0:	d1f7      	bne.n	8014892 <_reclaim_reent+0x16>
 80148a2:	69e3      	ldr	r3, [r4, #28]
 80148a4:	4620      	mov	r0, r4
 80148a6:	68d9      	ldr	r1, [r3, #12]
 80148a8:	f000 f8c8 	bl	8014a3c <_free_r>
 80148ac:	69e3      	ldr	r3, [r4, #28]
 80148ae:	6819      	ldr	r1, [r3, #0]
 80148b0:	b111      	cbz	r1, 80148b8 <_reclaim_reent+0x3c>
 80148b2:	4620      	mov	r0, r4
 80148b4:	f000 f8c2 	bl	8014a3c <_free_r>
 80148b8:	6961      	ldr	r1, [r4, #20]
 80148ba:	b111      	cbz	r1, 80148c2 <_reclaim_reent+0x46>
 80148bc:	4620      	mov	r0, r4
 80148be:	f000 f8bd 	bl	8014a3c <_free_r>
 80148c2:	69e1      	ldr	r1, [r4, #28]
 80148c4:	b111      	cbz	r1, 80148cc <_reclaim_reent+0x50>
 80148c6:	4620      	mov	r0, r4
 80148c8:	f000 f8b8 	bl	8014a3c <_free_r>
 80148cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80148ce:	b111      	cbz	r1, 80148d6 <_reclaim_reent+0x5a>
 80148d0:	4620      	mov	r0, r4
 80148d2:	f000 f8b3 	bl	8014a3c <_free_r>
 80148d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80148d8:	b111      	cbz	r1, 80148e0 <_reclaim_reent+0x64>
 80148da:	4620      	mov	r0, r4
 80148dc:	f000 f8ae 	bl	8014a3c <_free_r>
 80148e0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80148e2:	b111      	cbz	r1, 80148ea <_reclaim_reent+0x6e>
 80148e4:	4620      	mov	r0, r4
 80148e6:	f000 f8a9 	bl	8014a3c <_free_r>
 80148ea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80148ec:	b111      	cbz	r1, 80148f4 <_reclaim_reent+0x78>
 80148ee:	4620      	mov	r0, r4
 80148f0:	f000 f8a4 	bl	8014a3c <_free_r>
 80148f4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80148f6:	b111      	cbz	r1, 80148fe <_reclaim_reent+0x82>
 80148f8:	4620      	mov	r0, r4
 80148fa:	f000 f89f 	bl	8014a3c <_free_r>
 80148fe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014900:	b111      	cbz	r1, 8014908 <_reclaim_reent+0x8c>
 8014902:	4620      	mov	r0, r4
 8014904:	f000 f89a 	bl	8014a3c <_free_r>
 8014908:	6a23      	ldr	r3, [r4, #32]
 801490a:	b14b      	cbz	r3, 8014920 <_reclaim_reent+0xa4>
 801490c:	4620      	mov	r0, r4
 801490e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014912:	4718      	bx	r3
 8014914:	680e      	ldr	r6, [r1, #0]
 8014916:	4620      	mov	r0, r4
 8014918:	f000 f890 	bl	8014a3c <_free_r>
 801491c:	4631      	mov	r1, r6
 801491e:	e7bb      	b.n	8014898 <_reclaim_reent+0x1c>
 8014920:	bd70      	pop	{r4, r5, r6, pc}
 8014922:	bf00      	nop
 8014924:	2000003c 	.word	0x2000003c

08014928 <_lseek_r>:
 8014928:	b538      	push	{r3, r4, r5, lr}
 801492a:	4d07      	ldr	r5, [pc, #28]	@ (8014948 <_lseek_r+0x20>)
 801492c:	4604      	mov	r4, r0
 801492e:	4608      	mov	r0, r1
 8014930:	4611      	mov	r1, r2
 8014932:	2200      	movs	r2, #0
 8014934:	602a      	str	r2, [r5, #0]
 8014936:	461a      	mov	r2, r3
 8014938:	f7ec fb17 	bl	8000f6a <_lseek>
 801493c:	1c43      	adds	r3, r0, #1
 801493e:	d102      	bne.n	8014946 <_lseek_r+0x1e>
 8014940:	682b      	ldr	r3, [r5, #0]
 8014942:	b103      	cbz	r3, 8014946 <_lseek_r+0x1e>
 8014944:	6023      	str	r3, [r4, #0]
 8014946:	bd38      	pop	{r3, r4, r5, pc}
 8014948:	2000d644 	.word	0x2000d644

0801494c <_read_r>:
 801494c:	b538      	push	{r3, r4, r5, lr}
 801494e:	4d07      	ldr	r5, [pc, #28]	@ (801496c <_read_r+0x20>)
 8014950:	4604      	mov	r4, r0
 8014952:	4608      	mov	r0, r1
 8014954:	4611      	mov	r1, r2
 8014956:	2200      	movs	r2, #0
 8014958:	602a      	str	r2, [r5, #0]
 801495a:	461a      	mov	r2, r3
 801495c:	f7ec faa5 	bl	8000eaa <_read>
 8014960:	1c43      	adds	r3, r0, #1
 8014962:	d102      	bne.n	801496a <_read_r+0x1e>
 8014964:	682b      	ldr	r3, [r5, #0]
 8014966:	b103      	cbz	r3, 801496a <_read_r+0x1e>
 8014968:	6023      	str	r3, [r4, #0]
 801496a:	bd38      	pop	{r3, r4, r5, pc}
 801496c:	2000d644 	.word	0x2000d644

08014970 <_write_r>:
 8014970:	b538      	push	{r3, r4, r5, lr}
 8014972:	4d07      	ldr	r5, [pc, #28]	@ (8014990 <_write_r+0x20>)
 8014974:	4604      	mov	r4, r0
 8014976:	4608      	mov	r0, r1
 8014978:	4611      	mov	r1, r2
 801497a:	2200      	movs	r2, #0
 801497c:	602a      	str	r2, [r5, #0]
 801497e:	461a      	mov	r2, r3
 8014980:	f7ec fab0 	bl	8000ee4 <_write>
 8014984:	1c43      	adds	r3, r0, #1
 8014986:	d102      	bne.n	801498e <_write_r+0x1e>
 8014988:	682b      	ldr	r3, [r5, #0]
 801498a:	b103      	cbz	r3, 801498e <_write_r+0x1e>
 801498c:	6023      	str	r3, [r4, #0]
 801498e:	bd38      	pop	{r3, r4, r5, pc}
 8014990:	2000d644 	.word	0x2000d644

08014994 <__libc_init_array>:
 8014994:	b570      	push	{r4, r5, r6, lr}
 8014996:	4d0d      	ldr	r5, [pc, #52]	@ (80149cc <__libc_init_array+0x38>)
 8014998:	4c0d      	ldr	r4, [pc, #52]	@ (80149d0 <__libc_init_array+0x3c>)
 801499a:	1b64      	subs	r4, r4, r5
 801499c:	10a4      	asrs	r4, r4, #2
 801499e:	2600      	movs	r6, #0
 80149a0:	42a6      	cmp	r6, r4
 80149a2:	d109      	bne.n	80149b8 <__libc_init_array+0x24>
 80149a4:	4d0b      	ldr	r5, [pc, #44]	@ (80149d4 <__libc_init_array+0x40>)
 80149a6:	4c0c      	ldr	r4, [pc, #48]	@ (80149d8 <__libc_init_array+0x44>)
 80149a8:	f000 fdb6 	bl	8015518 <_init>
 80149ac:	1b64      	subs	r4, r4, r5
 80149ae:	10a4      	asrs	r4, r4, #2
 80149b0:	2600      	movs	r6, #0
 80149b2:	42a6      	cmp	r6, r4
 80149b4:	d105      	bne.n	80149c2 <__libc_init_array+0x2e>
 80149b6:	bd70      	pop	{r4, r5, r6, pc}
 80149b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80149bc:	4798      	blx	r3
 80149be:	3601      	adds	r6, #1
 80149c0:	e7ee      	b.n	80149a0 <__libc_init_array+0xc>
 80149c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80149c6:	4798      	blx	r3
 80149c8:	3601      	adds	r6, #1
 80149ca:	e7f2      	b.n	80149b2 <__libc_init_array+0x1e>
 80149cc:	080182c4 	.word	0x080182c4
 80149d0:	080182c4 	.word	0x080182c4
 80149d4:	080182c4 	.word	0x080182c4
 80149d8:	080182c8 	.word	0x080182c8

080149dc <__retarget_lock_init_recursive>:
 80149dc:	4770      	bx	lr

080149de <__retarget_lock_acquire_recursive>:
 80149de:	4770      	bx	lr

080149e0 <__retarget_lock_release_recursive>:
 80149e0:	4770      	bx	lr

080149e2 <memcpy>:
 80149e2:	440a      	add	r2, r1
 80149e4:	4291      	cmp	r1, r2
 80149e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80149ea:	d100      	bne.n	80149ee <memcpy+0xc>
 80149ec:	4770      	bx	lr
 80149ee:	b510      	push	{r4, lr}
 80149f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80149f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80149f8:	4291      	cmp	r1, r2
 80149fa:	d1f9      	bne.n	80149f0 <memcpy+0xe>
 80149fc:	bd10      	pop	{r4, pc}
	...

08014a00 <__assert_func>:
 8014a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014a02:	4614      	mov	r4, r2
 8014a04:	461a      	mov	r2, r3
 8014a06:	4b09      	ldr	r3, [pc, #36]	@ (8014a2c <__assert_func+0x2c>)
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	4605      	mov	r5, r0
 8014a0c:	68d8      	ldr	r0, [r3, #12]
 8014a0e:	b954      	cbnz	r4, 8014a26 <__assert_func+0x26>
 8014a10:	4b07      	ldr	r3, [pc, #28]	@ (8014a30 <__assert_func+0x30>)
 8014a12:	461c      	mov	r4, r3
 8014a14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014a18:	9100      	str	r1, [sp, #0]
 8014a1a:	462b      	mov	r3, r5
 8014a1c:	4905      	ldr	r1, [pc, #20]	@ (8014a34 <__assert_func+0x34>)
 8014a1e:	f000 fc89 	bl	8015334 <fiprintf>
 8014a22:	f000 fd2d 	bl	8015480 <abort>
 8014a26:	4b04      	ldr	r3, [pc, #16]	@ (8014a38 <__assert_func+0x38>)
 8014a28:	e7f4      	b.n	8014a14 <__assert_func+0x14>
 8014a2a:	bf00      	nop
 8014a2c:	2000003c 	.word	0x2000003c
 8014a30:	08018288 	.word	0x08018288
 8014a34:	0801825a 	.word	0x0801825a
 8014a38:	0801824d 	.word	0x0801824d

08014a3c <_free_r>:
 8014a3c:	b538      	push	{r3, r4, r5, lr}
 8014a3e:	4605      	mov	r5, r0
 8014a40:	2900      	cmp	r1, #0
 8014a42:	d041      	beq.n	8014ac8 <_free_r+0x8c>
 8014a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a48:	1f0c      	subs	r4, r1, #4
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	bfb8      	it	lt
 8014a4e:	18e4      	addlt	r4, r4, r3
 8014a50:	f000 f8e8 	bl	8014c24 <__malloc_lock>
 8014a54:	4a1d      	ldr	r2, [pc, #116]	@ (8014acc <_free_r+0x90>)
 8014a56:	6813      	ldr	r3, [r2, #0]
 8014a58:	b933      	cbnz	r3, 8014a68 <_free_r+0x2c>
 8014a5a:	6063      	str	r3, [r4, #4]
 8014a5c:	6014      	str	r4, [r2, #0]
 8014a5e:	4628      	mov	r0, r5
 8014a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a64:	f000 b8e4 	b.w	8014c30 <__malloc_unlock>
 8014a68:	42a3      	cmp	r3, r4
 8014a6a:	d908      	bls.n	8014a7e <_free_r+0x42>
 8014a6c:	6820      	ldr	r0, [r4, #0]
 8014a6e:	1821      	adds	r1, r4, r0
 8014a70:	428b      	cmp	r3, r1
 8014a72:	bf01      	itttt	eq
 8014a74:	6819      	ldreq	r1, [r3, #0]
 8014a76:	685b      	ldreq	r3, [r3, #4]
 8014a78:	1809      	addeq	r1, r1, r0
 8014a7a:	6021      	streq	r1, [r4, #0]
 8014a7c:	e7ed      	b.n	8014a5a <_free_r+0x1e>
 8014a7e:	461a      	mov	r2, r3
 8014a80:	685b      	ldr	r3, [r3, #4]
 8014a82:	b10b      	cbz	r3, 8014a88 <_free_r+0x4c>
 8014a84:	42a3      	cmp	r3, r4
 8014a86:	d9fa      	bls.n	8014a7e <_free_r+0x42>
 8014a88:	6811      	ldr	r1, [r2, #0]
 8014a8a:	1850      	adds	r0, r2, r1
 8014a8c:	42a0      	cmp	r0, r4
 8014a8e:	d10b      	bne.n	8014aa8 <_free_r+0x6c>
 8014a90:	6820      	ldr	r0, [r4, #0]
 8014a92:	4401      	add	r1, r0
 8014a94:	1850      	adds	r0, r2, r1
 8014a96:	4283      	cmp	r3, r0
 8014a98:	6011      	str	r1, [r2, #0]
 8014a9a:	d1e0      	bne.n	8014a5e <_free_r+0x22>
 8014a9c:	6818      	ldr	r0, [r3, #0]
 8014a9e:	685b      	ldr	r3, [r3, #4]
 8014aa0:	6053      	str	r3, [r2, #4]
 8014aa2:	4408      	add	r0, r1
 8014aa4:	6010      	str	r0, [r2, #0]
 8014aa6:	e7da      	b.n	8014a5e <_free_r+0x22>
 8014aa8:	d902      	bls.n	8014ab0 <_free_r+0x74>
 8014aaa:	230c      	movs	r3, #12
 8014aac:	602b      	str	r3, [r5, #0]
 8014aae:	e7d6      	b.n	8014a5e <_free_r+0x22>
 8014ab0:	6820      	ldr	r0, [r4, #0]
 8014ab2:	1821      	adds	r1, r4, r0
 8014ab4:	428b      	cmp	r3, r1
 8014ab6:	bf04      	itt	eq
 8014ab8:	6819      	ldreq	r1, [r3, #0]
 8014aba:	685b      	ldreq	r3, [r3, #4]
 8014abc:	6063      	str	r3, [r4, #4]
 8014abe:	bf04      	itt	eq
 8014ac0:	1809      	addeq	r1, r1, r0
 8014ac2:	6021      	streq	r1, [r4, #0]
 8014ac4:	6054      	str	r4, [r2, #4]
 8014ac6:	e7ca      	b.n	8014a5e <_free_r+0x22>
 8014ac8:	bd38      	pop	{r3, r4, r5, pc}
 8014aca:	bf00      	nop
 8014acc:	2000d650 	.word	0x2000d650

08014ad0 <malloc>:
 8014ad0:	4b02      	ldr	r3, [pc, #8]	@ (8014adc <malloc+0xc>)
 8014ad2:	4601      	mov	r1, r0
 8014ad4:	6818      	ldr	r0, [r3, #0]
 8014ad6:	f000 b825 	b.w	8014b24 <_malloc_r>
 8014ada:	bf00      	nop
 8014adc:	2000003c 	.word	0x2000003c

08014ae0 <sbrk_aligned>:
 8014ae0:	b570      	push	{r4, r5, r6, lr}
 8014ae2:	4e0f      	ldr	r6, [pc, #60]	@ (8014b20 <sbrk_aligned+0x40>)
 8014ae4:	460c      	mov	r4, r1
 8014ae6:	6831      	ldr	r1, [r6, #0]
 8014ae8:	4605      	mov	r5, r0
 8014aea:	b911      	cbnz	r1, 8014af2 <sbrk_aligned+0x12>
 8014aec:	f000 fcb8 	bl	8015460 <_sbrk_r>
 8014af0:	6030      	str	r0, [r6, #0]
 8014af2:	4621      	mov	r1, r4
 8014af4:	4628      	mov	r0, r5
 8014af6:	f000 fcb3 	bl	8015460 <_sbrk_r>
 8014afa:	1c43      	adds	r3, r0, #1
 8014afc:	d103      	bne.n	8014b06 <sbrk_aligned+0x26>
 8014afe:	f04f 34ff 	mov.w	r4, #4294967295
 8014b02:	4620      	mov	r0, r4
 8014b04:	bd70      	pop	{r4, r5, r6, pc}
 8014b06:	1cc4      	adds	r4, r0, #3
 8014b08:	f024 0403 	bic.w	r4, r4, #3
 8014b0c:	42a0      	cmp	r0, r4
 8014b0e:	d0f8      	beq.n	8014b02 <sbrk_aligned+0x22>
 8014b10:	1a21      	subs	r1, r4, r0
 8014b12:	4628      	mov	r0, r5
 8014b14:	f000 fca4 	bl	8015460 <_sbrk_r>
 8014b18:	3001      	adds	r0, #1
 8014b1a:	d1f2      	bne.n	8014b02 <sbrk_aligned+0x22>
 8014b1c:	e7ef      	b.n	8014afe <sbrk_aligned+0x1e>
 8014b1e:	bf00      	nop
 8014b20:	2000d64c 	.word	0x2000d64c

08014b24 <_malloc_r>:
 8014b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b28:	1ccd      	adds	r5, r1, #3
 8014b2a:	f025 0503 	bic.w	r5, r5, #3
 8014b2e:	3508      	adds	r5, #8
 8014b30:	2d0c      	cmp	r5, #12
 8014b32:	bf38      	it	cc
 8014b34:	250c      	movcc	r5, #12
 8014b36:	2d00      	cmp	r5, #0
 8014b38:	4606      	mov	r6, r0
 8014b3a:	db01      	blt.n	8014b40 <_malloc_r+0x1c>
 8014b3c:	42a9      	cmp	r1, r5
 8014b3e:	d904      	bls.n	8014b4a <_malloc_r+0x26>
 8014b40:	230c      	movs	r3, #12
 8014b42:	6033      	str	r3, [r6, #0]
 8014b44:	2000      	movs	r0, #0
 8014b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014c20 <_malloc_r+0xfc>
 8014b4e:	f000 f869 	bl	8014c24 <__malloc_lock>
 8014b52:	f8d8 3000 	ldr.w	r3, [r8]
 8014b56:	461c      	mov	r4, r3
 8014b58:	bb44      	cbnz	r4, 8014bac <_malloc_r+0x88>
 8014b5a:	4629      	mov	r1, r5
 8014b5c:	4630      	mov	r0, r6
 8014b5e:	f7ff ffbf 	bl	8014ae0 <sbrk_aligned>
 8014b62:	1c43      	adds	r3, r0, #1
 8014b64:	4604      	mov	r4, r0
 8014b66:	d158      	bne.n	8014c1a <_malloc_r+0xf6>
 8014b68:	f8d8 4000 	ldr.w	r4, [r8]
 8014b6c:	4627      	mov	r7, r4
 8014b6e:	2f00      	cmp	r7, #0
 8014b70:	d143      	bne.n	8014bfa <_malloc_r+0xd6>
 8014b72:	2c00      	cmp	r4, #0
 8014b74:	d04b      	beq.n	8014c0e <_malloc_r+0xea>
 8014b76:	6823      	ldr	r3, [r4, #0]
 8014b78:	4639      	mov	r1, r7
 8014b7a:	4630      	mov	r0, r6
 8014b7c:	eb04 0903 	add.w	r9, r4, r3
 8014b80:	f000 fc6e 	bl	8015460 <_sbrk_r>
 8014b84:	4581      	cmp	r9, r0
 8014b86:	d142      	bne.n	8014c0e <_malloc_r+0xea>
 8014b88:	6821      	ldr	r1, [r4, #0]
 8014b8a:	1a6d      	subs	r5, r5, r1
 8014b8c:	4629      	mov	r1, r5
 8014b8e:	4630      	mov	r0, r6
 8014b90:	f7ff ffa6 	bl	8014ae0 <sbrk_aligned>
 8014b94:	3001      	adds	r0, #1
 8014b96:	d03a      	beq.n	8014c0e <_malloc_r+0xea>
 8014b98:	6823      	ldr	r3, [r4, #0]
 8014b9a:	442b      	add	r3, r5
 8014b9c:	6023      	str	r3, [r4, #0]
 8014b9e:	f8d8 3000 	ldr.w	r3, [r8]
 8014ba2:	685a      	ldr	r2, [r3, #4]
 8014ba4:	bb62      	cbnz	r2, 8014c00 <_malloc_r+0xdc>
 8014ba6:	f8c8 7000 	str.w	r7, [r8]
 8014baa:	e00f      	b.n	8014bcc <_malloc_r+0xa8>
 8014bac:	6822      	ldr	r2, [r4, #0]
 8014bae:	1b52      	subs	r2, r2, r5
 8014bb0:	d420      	bmi.n	8014bf4 <_malloc_r+0xd0>
 8014bb2:	2a0b      	cmp	r2, #11
 8014bb4:	d917      	bls.n	8014be6 <_malloc_r+0xc2>
 8014bb6:	1961      	adds	r1, r4, r5
 8014bb8:	42a3      	cmp	r3, r4
 8014bba:	6025      	str	r5, [r4, #0]
 8014bbc:	bf18      	it	ne
 8014bbe:	6059      	strne	r1, [r3, #4]
 8014bc0:	6863      	ldr	r3, [r4, #4]
 8014bc2:	bf08      	it	eq
 8014bc4:	f8c8 1000 	streq.w	r1, [r8]
 8014bc8:	5162      	str	r2, [r4, r5]
 8014bca:	604b      	str	r3, [r1, #4]
 8014bcc:	4630      	mov	r0, r6
 8014bce:	f000 f82f 	bl	8014c30 <__malloc_unlock>
 8014bd2:	f104 000b 	add.w	r0, r4, #11
 8014bd6:	1d23      	adds	r3, r4, #4
 8014bd8:	f020 0007 	bic.w	r0, r0, #7
 8014bdc:	1ac2      	subs	r2, r0, r3
 8014bde:	bf1c      	itt	ne
 8014be0:	1a1b      	subne	r3, r3, r0
 8014be2:	50a3      	strne	r3, [r4, r2]
 8014be4:	e7af      	b.n	8014b46 <_malloc_r+0x22>
 8014be6:	6862      	ldr	r2, [r4, #4]
 8014be8:	42a3      	cmp	r3, r4
 8014bea:	bf0c      	ite	eq
 8014bec:	f8c8 2000 	streq.w	r2, [r8]
 8014bf0:	605a      	strne	r2, [r3, #4]
 8014bf2:	e7eb      	b.n	8014bcc <_malloc_r+0xa8>
 8014bf4:	4623      	mov	r3, r4
 8014bf6:	6864      	ldr	r4, [r4, #4]
 8014bf8:	e7ae      	b.n	8014b58 <_malloc_r+0x34>
 8014bfa:	463c      	mov	r4, r7
 8014bfc:	687f      	ldr	r7, [r7, #4]
 8014bfe:	e7b6      	b.n	8014b6e <_malloc_r+0x4a>
 8014c00:	461a      	mov	r2, r3
 8014c02:	685b      	ldr	r3, [r3, #4]
 8014c04:	42a3      	cmp	r3, r4
 8014c06:	d1fb      	bne.n	8014c00 <_malloc_r+0xdc>
 8014c08:	2300      	movs	r3, #0
 8014c0a:	6053      	str	r3, [r2, #4]
 8014c0c:	e7de      	b.n	8014bcc <_malloc_r+0xa8>
 8014c0e:	230c      	movs	r3, #12
 8014c10:	6033      	str	r3, [r6, #0]
 8014c12:	4630      	mov	r0, r6
 8014c14:	f000 f80c 	bl	8014c30 <__malloc_unlock>
 8014c18:	e794      	b.n	8014b44 <_malloc_r+0x20>
 8014c1a:	6005      	str	r5, [r0, #0]
 8014c1c:	e7d6      	b.n	8014bcc <_malloc_r+0xa8>
 8014c1e:	bf00      	nop
 8014c20:	2000d650 	.word	0x2000d650

08014c24 <__malloc_lock>:
 8014c24:	4801      	ldr	r0, [pc, #4]	@ (8014c2c <__malloc_lock+0x8>)
 8014c26:	f7ff beda 	b.w	80149de <__retarget_lock_acquire_recursive>
 8014c2a:	bf00      	nop
 8014c2c:	2000d648 	.word	0x2000d648

08014c30 <__malloc_unlock>:
 8014c30:	4801      	ldr	r0, [pc, #4]	@ (8014c38 <__malloc_unlock+0x8>)
 8014c32:	f7ff bed5 	b.w	80149e0 <__retarget_lock_release_recursive>
 8014c36:	bf00      	nop
 8014c38:	2000d648 	.word	0x2000d648

08014c3c <__sfputc_r>:
 8014c3c:	6893      	ldr	r3, [r2, #8]
 8014c3e:	3b01      	subs	r3, #1
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	b410      	push	{r4}
 8014c44:	6093      	str	r3, [r2, #8]
 8014c46:	da08      	bge.n	8014c5a <__sfputc_r+0x1e>
 8014c48:	6994      	ldr	r4, [r2, #24]
 8014c4a:	42a3      	cmp	r3, r4
 8014c4c:	db01      	blt.n	8014c52 <__sfputc_r+0x16>
 8014c4e:	290a      	cmp	r1, #10
 8014c50:	d103      	bne.n	8014c5a <__sfputc_r+0x1e>
 8014c52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c56:	f7ff bd54 	b.w	8014702 <__swbuf_r>
 8014c5a:	6813      	ldr	r3, [r2, #0]
 8014c5c:	1c58      	adds	r0, r3, #1
 8014c5e:	6010      	str	r0, [r2, #0]
 8014c60:	7019      	strb	r1, [r3, #0]
 8014c62:	4608      	mov	r0, r1
 8014c64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c68:	4770      	bx	lr

08014c6a <__sfputs_r>:
 8014c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c6c:	4606      	mov	r6, r0
 8014c6e:	460f      	mov	r7, r1
 8014c70:	4614      	mov	r4, r2
 8014c72:	18d5      	adds	r5, r2, r3
 8014c74:	42ac      	cmp	r4, r5
 8014c76:	d101      	bne.n	8014c7c <__sfputs_r+0x12>
 8014c78:	2000      	movs	r0, #0
 8014c7a:	e007      	b.n	8014c8c <__sfputs_r+0x22>
 8014c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c80:	463a      	mov	r2, r7
 8014c82:	4630      	mov	r0, r6
 8014c84:	f7ff ffda 	bl	8014c3c <__sfputc_r>
 8014c88:	1c43      	adds	r3, r0, #1
 8014c8a:	d1f3      	bne.n	8014c74 <__sfputs_r+0xa>
 8014c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014c90 <_vfiprintf_r>:
 8014c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c94:	460d      	mov	r5, r1
 8014c96:	b09d      	sub	sp, #116	@ 0x74
 8014c98:	4614      	mov	r4, r2
 8014c9a:	4698      	mov	r8, r3
 8014c9c:	4606      	mov	r6, r0
 8014c9e:	b118      	cbz	r0, 8014ca8 <_vfiprintf_r+0x18>
 8014ca0:	6a03      	ldr	r3, [r0, #32]
 8014ca2:	b90b      	cbnz	r3, 8014ca8 <_vfiprintf_r+0x18>
 8014ca4:	f7ff fca2 	bl	80145ec <__sinit>
 8014ca8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014caa:	07d9      	lsls	r1, r3, #31
 8014cac:	d405      	bmi.n	8014cba <_vfiprintf_r+0x2a>
 8014cae:	89ab      	ldrh	r3, [r5, #12]
 8014cb0:	059a      	lsls	r2, r3, #22
 8014cb2:	d402      	bmi.n	8014cba <_vfiprintf_r+0x2a>
 8014cb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014cb6:	f7ff fe92 	bl	80149de <__retarget_lock_acquire_recursive>
 8014cba:	89ab      	ldrh	r3, [r5, #12]
 8014cbc:	071b      	lsls	r3, r3, #28
 8014cbe:	d501      	bpl.n	8014cc4 <_vfiprintf_r+0x34>
 8014cc0:	692b      	ldr	r3, [r5, #16]
 8014cc2:	b99b      	cbnz	r3, 8014cec <_vfiprintf_r+0x5c>
 8014cc4:	4629      	mov	r1, r5
 8014cc6:	4630      	mov	r0, r6
 8014cc8:	f7ff fd5a 	bl	8014780 <__swsetup_r>
 8014ccc:	b170      	cbz	r0, 8014cec <_vfiprintf_r+0x5c>
 8014cce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014cd0:	07dc      	lsls	r4, r3, #31
 8014cd2:	d504      	bpl.n	8014cde <_vfiprintf_r+0x4e>
 8014cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8014cd8:	b01d      	add	sp, #116	@ 0x74
 8014cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cde:	89ab      	ldrh	r3, [r5, #12]
 8014ce0:	0598      	lsls	r0, r3, #22
 8014ce2:	d4f7      	bmi.n	8014cd4 <_vfiprintf_r+0x44>
 8014ce4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014ce6:	f7ff fe7b 	bl	80149e0 <__retarget_lock_release_recursive>
 8014cea:	e7f3      	b.n	8014cd4 <_vfiprintf_r+0x44>
 8014cec:	2300      	movs	r3, #0
 8014cee:	9309      	str	r3, [sp, #36]	@ 0x24
 8014cf0:	2320      	movs	r3, #32
 8014cf2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014cf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8014cfa:	2330      	movs	r3, #48	@ 0x30
 8014cfc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014eac <_vfiprintf_r+0x21c>
 8014d00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014d04:	f04f 0901 	mov.w	r9, #1
 8014d08:	4623      	mov	r3, r4
 8014d0a:	469a      	mov	sl, r3
 8014d0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d10:	b10a      	cbz	r2, 8014d16 <_vfiprintf_r+0x86>
 8014d12:	2a25      	cmp	r2, #37	@ 0x25
 8014d14:	d1f9      	bne.n	8014d0a <_vfiprintf_r+0x7a>
 8014d16:	ebba 0b04 	subs.w	fp, sl, r4
 8014d1a:	d00b      	beq.n	8014d34 <_vfiprintf_r+0xa4>
 8014d1c:	465b      	mov	r3, fp
 8014d1e:	4622      	mov	r2, r4
 8014d20:	4629      	mov	r1, r5
 8014d22:	4630      	mov	r0, r6
 8014d24:	f7ff ffa1 	bl	8014c6a <__sfputs_r>
 8014d28:	3001      	adds	r0, #1
 8014d2a:	f000 80a7 	beq.w	8014e7c <_vfiprintf_r+0x1ec>
 8014d2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014d30:	445a      	add	r2, fp
 8014d32:	9209      	str	r2, [sp, #36]	@ 0x24
 8014d34:	f89a 3000 	ldrb.w	r3, [sl]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	f000 809f 	beq.w	8014e7c <_vfiprintf_r+0x1ec>
 8014d3e:	2300      	movs	r3, #0
 8014d40:	f04f 32ff 	mov.w	r2, #4294967295
 8014d44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014d48:	f10a 0a01 	add.w	sl, sl, #1
 8014d4c:	9304      	str	r3, [sp, #16]
 8014d4e:	9307      	str	r3, [sp, #28]
 8014d50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014d54:	931a      	str	r3, [sp, #104]	@ 0x68
 8014d56:	4654      	mov	r4, sl
 8014d58:	2205      	movs	r2, #5
 8014d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d5e:	4853      	ldr	r0, [pc, #332]	@ (8014eac <_vfiprintf_r+0x21c>)
 8014d60:	f7eb fa6e 	bl	8000240 <memchr>
 8014d64:	9a04      	ldr	r2, [sp, #16]
 8014d66:	b9d8      	cbnz	r0, 8014da0 <_vfiprintf_r+0x110>
 8014d68:	06d1      	lsls	r1, r2, #27
 8014d6a:	bf44      	itt	mi
 8014d6c:	2320      	movmi	r3, #32
 8014d6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014d72:	0713      	lsls	r3, r2, #28
 8014d74:	bf44      	itt	mi
 8014d76:	232b      	movmi	r3, #43	@ 0x2b
 8014d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8014d80:	2b2a      	cmp	r3, #42	@ 0x2a
 8014d82:	d015      	beq.n	8014db0 <_vfiprintf_r+0x120>
 8014d84:	9a07      	ldr	r2, [sp, #28]
 8014d86:	4654      	mov	r4, sl
 8014d88:	2000      	movs	r0, #0
 8014d8a:	f04f 0c0a 	mov.w	ip, #10
 8014d8e:	4621      	mov	r1, r4
 8014d90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014d94:	3b30      	subs	r3, #48	@ 0x30
 8014d96:	2b09      	cmp	r3, #9
 8014d98:	d94b      	bls.n	8014e32 <_vfiprintf_r+0x1a2>
 8014d9a:	b1b0      	cbz	r0, 8014dca <_vfiprintf_r+0x13a>
 8014d9c:	9207      	str	r2, [sp, #28]
 8014d9e:	e014      	b.n	8014dca <_vfiprintf_r+0x13a>
 8014da0:	eba0 0308 	sub.w	r3, r0, r8
 8014da4:	fa09 f303 	lsl.w	r3, r9, r3
 8014da8:	4313      	orrs	r3, r2
 8014daa:	9304      	str	r3, [sp, #16]
 8014dac:	46a2      	mov	sl, r4
 8014dae:	e7d2      	b.n	8014d56 <_vfiprintf_r+0xc6>
 8014db0:	9b03      	ldr	r3, [sp, #12]
 8014db2:	1d19      	adds	r1, r3, #4
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	9103      	str	r1, [sp, #12]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	bfbb      	ittet	lt
 8014dbc:	425b      	neglt	r3, r3
 8014dbe:	f042 0202 	orrlt.w	r2, r2, #2
 8014dc2:	9307      	strge	r3, [sp, #28]
 8014dc4:	9307      	strlt	r3, [sp, #28]
 8014dc6:	bfb8      	it	lt
 8014dc8:	9204      	strlt	r2, [sp, #16]
 8014dca:	7823      	ldrb	r3, [r4, #0]
 8014dcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8014dce:	d10a      	bne.n	8014de6 <_vfiprintf_r+0x156>
 8014dd0:	7863      	ldrb	r3, [r4, #1]
 8014dd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8014dd4:	d132      	bne.n	8014e3c <_vfiprintf_r+0x1ac>
 8014dd6:	9b03      	ldr	r3, [sp, #12]
 8014dd8:	1d1a      	adds	r2, r3, #4
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	9203      	str	r2, [sp, #12]
 8014dde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014de2:	3402      	adds	r4, #2
 8014de4:	9305      	str	r3, [sp, #20]
 8014de6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014ebc <_vfiprintf_r+0x22c>
 8014dea:	7821      	ldrb	r1, [r4, #0]
 8014dec:	2203      	movs	r2, #3
 8014dee:	4650      	mov	r0, sl
 8014df0:	f7eb fa26 	bl	8000240 <memchr>
 8014df4:	b138      	cbz	r0, 8014e06 <_vfiprintf_r+0x176>
 8014df6:	9b04      	ldr	r3, [sp, #16]
 8014df8:	eba0 000a 	sub.w	r0, r0, sl
 8014dfc:	2240      	movs	r2, #64	@ 0x40
 8014dfe:	4082      	lsls	r2, r0
 8014e00:	4313      	orrs	r3, r2
 8014e02:	3401      	adds	r4, #1
 8014e04:	9304      	str	r3, [sp, #16]
 8014e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e0a:	4829      	ldr	r0, [pc, #164]	@ (8014eb0 <_vfiprintf_r+0x220>)
 8014e0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014e10:	2206      	movs	r2, #6
 8014e12:	f7eb fa15 	bl	8000240 <memchr>
 8014e16:	2800      	cmp	r0, #0
 8014e18:	d03f      	beq.n	8014e9a <_vfiprintf_r+0x20a>
 8014e1a:	4b26      	ldr	r3, [pc, #152]	@ (8014eb4 <_vfiprintf_r+0x224>)
 8014e1c:	bb1b      	cbnz	r3, 8014e66 <_vfiprintf_r+0x1d6>
 8014e1e:	9b03      	ldr	r3, [sp, #12]
 8014e20:	3307      	adds	r3, #7
 8014e22:	f023 0307 	bic.w	r3, r3, #7
 8014e26:	3308      	adds	r3, #8
 8014e28:	9303      	str	r3, [sp, #12]
 8014e2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e2c:	443b      	add	r3, r7
 8014e2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014e30:	e76a      	b.n	8014d08 <_vfiprintf_r+0x78>
 8014e32:	fb0c 3202 	mla	r2, ip, r2, r3
 8014e36:	460c      	mov	r4, r1
 8014e38:	2001      	movs	r0, #1
 8014e3a:	e7a8      	b.n	8014d8e <_vfiprintf_r+0xfe>
 8014e3c:	2300      	movs	r3, #0
 8014e3e:	3401      	adds	r4, #1
 8014e40:	9305      	str	r3, [sp, #20]
 8014e42:	4619      	mov	r1, r3
 8014e44:	f04f 0c0a 	mov.w	ip, #10
 8014e48:	4620      	mov	r0, r4
 8014e4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014e4e:	3a30      	subs	r2, #48	@ 0x30
 8014e50:	2a09      	cmp	r2, #9
 8014e52:	d903      	bls.n	8014e5c <_vfiprintf_r+0x1cc>
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d0c6      	beq.n	8014de6 <_vfiprintf_r+0x156>
 8014e58:	9105      	str	r1, [sp, #20]
 8014e5a:	e7c4      	b.n	8014de6 <_vfiprintf_r+0x156>
 8014e5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014e60:	4604      	mov	r4, r0
 8014e62:	2301      	movs	r3, #1
 8014e64:	e7f0      	b.n	8014e48 <_vfiprintf_r+0x1b8>
 8014e66:	ab03      	add	r3, sp, #12
 8014e68:	9300      	str	r3, [sp, #0]
 8014e6a:	462a      	mov	r2, r5
 8014e6c:	4b12      	ldr	r3, [pc, #72]	@ (8014eb8 <_vfiprintf_r+0x228>)
 8014e6e:	a904      	add	r1, sp, #16
 8014e70:	4630      	mov	r0, r6
 8014e72:	f3af 8000 	nop.w
 8014e76:	4607      	mov	r7, r0
 8014e78:	1c78      	adds	r0, r7, #1
 8014e7a:	d1d6      	bne.n	8014e2a <_vfiprintf_r+0x19a>
 8014e7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014e7e:	07d9      	lsls	r1, r3, #31
 8014e80:	d405      	bmi.n	8014e8e <_vfiprintf_r+0x1fe>
 8014e82:	89ab      	ldrh	r3, [r5, #12]
 8014e84:	059a      	lsls	r2, r3, #22
 8014e86:	d402      	bmi.n	8014e8e <_vfiprintf_r+0x1fe>
 8014e88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014e8a:	f7ff fda9 	bl	80149e0 <__retarget_lock_release_recursive>
 8014e8e:	89ab      	ldrh	r3, [r5, #12]
 8014e90:	065b      	lsls	r3, r3, #25
 8014e92:	f53f af1f 	bmi.w	8014cd4 <_vfiprintf_r+0x44>
 8014e96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014e98:	e71e      	b.n	8014cd8 <_vfiprintf_r+0x48>
 8014e9a:	ab03      	add	r3, sp, #12
 8014e9c:	9300      	str	r3, [sp, #0]
 8014e9e:	462a      	mov	r2, r5
 8014ea0:	4b05      	ldr	r3, [pc, #20]	@ (8014eb8 <_vfiprintf_r+0x228>)
 8014ea2:	a904      	add	r1, sp, #16
 8014ea4:	4630      	mov	r0, r6
 8014ea6:	f000 f879 	bl	8014f9c <_printf_i>
 8014eaa:	e7e4      	b.n	8014e76 <_vfiprintf_r+0x1e6>
 8014eac:	08018289 	.word	0x08018289
 8014eb0:	08018293 	.word	0x08018293
 8014eb4:	00000000 	.word	0x00000000
 8014eb8:	08014c6b 	.word	0x08014c6b
 8014ebc:	0801828f 	.word	0x0801828f

08014ec0 <_printf_common>:
 8014ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ec4:	4616      	mov	r6, r2
 8014ec6:	4698      	mov	r8, r3
 8014ec8:	688a      	ldr	r2, [r1, #8]
 8014eca:	690b      	ldr	r3, [r1, #16]
 8014ecc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014ed0:	4293      	cmp	r3, r2
 8014ed2:	bfb8      	it	lt
 8014ed4:	4613      	movlt	r3, r2
 8014ed6:	6033      	str	r3, [r6, #0]
 8014ed8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014edc:	4607      	mov	r7, r0
 8014ede:	460c      	mov	r4, r1
 8014ee0:	b10a      	cbz	r2, 8014ee6 <_printf_common+0x26>
 8014ee2:	3301      	adds	r3, #1
 8014ee4:	6033      	str	r3, [r6, #0]
 8014ee6:	6823      	ldr	r3, [r4, #0]
 8014ee8:	0699      	lsls	r1, r3, #26
 8014eea:	bf42      	ittt	mi
 8014eec:	6833      	ldrmi	r3, [r6, #0]
 8014eee:	3302      	addmi	r3, #2
 8014ef0:	6033      	strmi	r3, [r6, #0]
 8014ef2:	6825      	ldr	r5, [r4, #0]
 8014ef4:	f015 0506 	ands.w	r5, r5, #6
 8014ef8:	d106      	bne.n	8014f08 <_printf_common+0x48>
 8014efa:	f104 0a19 	add.w	sl, r4, #25
 8014efe:	68e3      	ldr	r3, [r4, #12]
 8014f00:	6832      	ldr	r2, [r6, #0]
 8014f02:	1a9b      	subs	r3, r3, r2
 8014f04:	42ab      	cmp	r3, r5
 8014f06:	dc26      	bgt.n	8014f56 <_printf_common+0x96>
 8014f08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014f0c:	6822      	ldr	r2, [r4, #0]
 8014f0e:	3b00      	subs	r3, #0
 8014f10:	bf18      	it	ne
 8014f12:	2301      	movne	r3, #1
 8014f14:	0692      	lsls	r2, r2, #26
 8014f16:	d42b      	bmi.n	8014f70 <_printf_common+0xb0>
 8014f18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014f1c:	4641      	mov	r1, r8
 8014f1e:	4638      	mov	r0, r7
 8014f20:	47c8      	blx	r9
 8014f22:	3001      	adds	r0, #1
 8014f24:	d01e      	beq.n	8014f64 <_printf_common+0xa4>
 8014f26:	6823      	ldr	r3, [r4, #0]
 8014f28:	6922      	ldr	r2, [r4, #16]
 8014f2a:	f003 0306 	and.w	r3, r3, #6
 8014f2e:	2b04      	cmp	r3, #4
 8014f30:	bf02      	ittt	eq
 8014f32:	68e5      	ldreq	r5, [r4, #12]
 8014f34:	6833      	ldreq	r3, [r6, #0]
 8014f36:	1aed      	subeq	r5, r5, r3
 8014f38:	68a3      	ldr	r3, [r4, #8]
 8014f3a:	bf0c      	ite	eq
 8014f3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014f40:	2500      	movne	r5, #0
 8014f42:	4293      	cmp	r3, r2
 8014f44:	bfc4      	itt	gt
 8014f46:	1a9b      	subgt	r3, r3, r2
 8014f48:	18ed      	addgt	r5, r5, r3
 8014f4a:	2600      	movs	r6, #0
 8014f4c:	341a      	adds	r4, #26
 8014f4e:	42b5      	cmp	r5, r6
 8014f50:	d11a      	bne.n	8014f88 <_printf_common+0xc8>
 8014f52:	2000      	movs	r0, #0
 8014f54:	e008      	b.n	8014f68 <_printf_common+0xa8>
 8014f56:	2301      	movs	r3, #1
 8014f58:	4652      	mov	r2, sl
 8014f5a:	4641      	mov	r1, r8
 8014f5c:	4638      	mov	r0, r7
 8014f5e:	47c8      	blx	r9
 8014f60:	3001      	adds	r0, #1
 8014f62:	d103      	bne.n	8014f6c <_printf_common+0xac>
 8014f64:	f04f 30ff 	mov.w	r0, #4294967295
 8014f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f6c:	3501      	adds	r5, #1
 8014f6e:	e7c6      	b.n	8014efe <_printf_common+0x3e>
 8014f70:	18e1      	adds	r1, r4, r3
 8014f72:	1c5a      	adds	r2, r3, #1
 8014f74:	2030      	movs	r0, #48	@ 0x30
 8014f76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014f7a:	4422      	add	r2, r4
 8014f7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014f80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014f84:	3302      	adds	r3, #2
 8014f86:	e7c7      	b.n	8014f18 <_printf_common+0x58>
 8014f88:	2301      	movs	r3, #1
 8014f8a:	4622      	mov	r2, r4
 8014f8c:	4641      	mov	r1, r8
 8014f8e:	4638      	mov	r0, r7
 8014f90:	47c8      	blx	r9
 8014f92:	3001      	adds	r0, #1
 8014f94:	d0e6      	beq.n	8014f64 <_printf_common+0xa4>
 8014f96:	3601      	adds	r6, #1
 8014f98:	e7d9      	b.n	8014f4e <_printf_common+0x8e>
	...

08014f9c <_printf_i>:
 8014f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014fa0:	7e0f      	ldrb	r7, [r1, #24]
 8014fa2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014fa4:	2f78      	cmp	r7, #120	@ 0x78
 8014fa6:	4691      	mov	r9, r2
 8014fa8:	4680      	mov	r8, r0
 8014faa:	460c      	mov	r4, r1
 8014fac:	469a      	mov	sl, r3
 8014fae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014fb2:	d807      	bhi.n	8014fc4 <_printf_i+0x28>
 8014fb4:	2f62      	cmp	r7, #98	@ 0x62
 8014fb6:	d80a      	bhi.n	8014fce <_printf_i+0x32>
 8014fb8:	2f00      	cmp	r7, #0
 8014fba:	f000 80d2 	beq.w	8015162 <_printf_i+0x1c6>
 8014fbe:	2f58      	cmp	r7, #88	@ 0x58
 8014fc0:	f000 80b9 	beq.w	8015136 <_printf_i+0x19a>
 8014fc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014fc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014fcc:	e03a      	b.n	8015044 <_printf_i+0xa8>
 8014fce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014fd2:	2b15      	cmp	r3, #21
 8014fd4:	d8f6      	bhi.n	8014fc4 <_printf_i+0x28>
 8014fd6:	a101      	add	r1, pc, #4	@ (adr r1, 8014fdc <_printf_i+0x40>)
 8014fd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014fdc:	08015035 	.word	0x08015035
 8014fe0:	08015049 	.word	0x08015049
 8014fe4:	08014fc5 	.word	0x08014fc5
 8014fe8:	08014fc5 	.word	0x08014fc5
 8014fec:	08014fc5 	.word	0x08014fc5
 8014ff0:	08014fc5 	.word	0x08014fc5
 8014ff4:	08015049 	.word	0x08015049
 8014ff8:	08014fc5 	.word	0x08014fc5
 8014ffc:	08014fc5 	.word	0x08014fc5
 8015000:	08014fc5 	.word	0x08014fc5
 8015004:	08014fc5 	.word	0x08014fc5
 8015008:	08015149 	.word	0x08015149
 801500c:	08015073 	.word	0x08015073
 8015010:	08015103 	.word	0x08015103
 8015014:	08014fc5 	.word	0x08014fc5
 8015018:	08014fc5 	.word	0x08014fc5
 801501c:	0801516b 	.word	0x0801516b
 8015020:	08014fc5 	.word	0x08014fc5
 8015024:	08015073 	.word	0x08015073
 8015028:	08014fc5 	.word	0x08014fc5
 801502c:	08014fc5 	.word	0x08014fc5
 8015030:	0801510b 	.word	0x0801510b
 8015034:	6833      	ldr	r3, [r6, #0]
 8015036:	1d1a      	adds	r2, r3, #4
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	6032      	str	r2, [r6, #0]
 801503c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015040:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015044:	2301      	movs	r3, #1
 8015046:	e09d      	b.n	8015184 <_printf_i+0x1e8>
 8015048:	6833      	ldr	r3, [r6, #0]
 801504a:	6820      	ldr	r0, [r4, #0]
 801504c:	1d19      	adds	r1, r3, #4
 801504e:	6031      	str	r1, [r6, #0]
 8015050:	0606      	lsls	r6, r0, #24
 8015052:	d501      	bpl.n	8015058 <_printf_i+0xbc>
 8015054:	681d      	ldr	r5, [r3, #0]
 8015056:	e003      	b.n	8015060 <_printf_i+0xc4>
 8015058:	0645      	lsls	r5, r0, #25
 801505a:	d5fb      	bpl.n	8015054 <_printf_i+0xb8>
 801505c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015060:	2d00      	cmp	r5, #0
 8015062:	da03      	bge.n	801506c <_printf_i+0xd0>
 8015064:	232d      	movs	r3, #45	@ 0x2d
 8015066:	426d      	negs	r5, r5
 8015068:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801506c:	4859      	ldr	r0, [pc, #356]	@ (80151d4 <_printf_i+0x238>)
 801506e:	230a      	movs	r3, #10
 8015070:	e011      	b.n	8015096 <_printf_i+0xfa>
 8015072:	6821      	ldr	r1, [r4, #0]
 8015074:	6833      	ldr	r3, [r6, #0]
 8015076:	0608      	lsls	r0, r1, #24
 8015078:	f853 5b04 	ldr.w	r5, [r3], #4
 801507c:	d402      	bmi.n	8015084 <_printf_i+0xe8>
 801507e:	0649      	lsls	r1, r1, #25
 8015080:	bf48      	it	mi
 8015082:	b2ad      	uxthmi	r5, r5
 8015084:	2f6f      	cmp	r7, #111	@ 0x6f
 8015086:	4853      	ldr	r0, [pc, #332]	@ (80151d4 <_printf_i+0x238>)
 8015088:	6033      	str	r3, [r6, #0]
 801508a:	bf14      	ite	ne
 801508c:	230a      	movne	r3, #10
 801508e:	2308      	moveq	r3, #8
 8015090:	2100      	movs	r1, #0
 8015092:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015096:	6866      	ldr	r6, [r4, #4]
 8015098:	60a6      	str	r6, [r4, #8]
 801509a:	2e00      	cmp	r6, #0
 801509c:	bfa2      	ittt	ge
 801509e:	6821      	ldrge	r1, [r4, #0]
 80150a0:	f021 0104 	bicge.w	r1, r1, #4
 80150a4:	6021      	strge	r1, [r4, #0]
 80150a6:	b90d      	cbnz	r5, 80150ac <_printf_i+0x110>
 80150a8:	2e00      	cmp	r6, #0
 80150aa:	d04b      	beq.n	8015144 <_printf_i+0x1a8>
 80150ac:	4616      	mov	r6, r2
 80150ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80150b2:	fb03 5711 	mls	r7, r3, r1, r5
 80150b6:	5dc7      	ldrb	r7, [r0, r7]
 80150b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80150bc:	462f      	mov	r7, r5
 80150be:	42bb      	cmp	r3, r7
 80150c0:	460d      	mov	r5, r1
 80150c2:	d9f4      	bls.n	80150ae <_printf_i+0x112>
 80150c4:	2b08      	cmp	r3, #8
 80150c6:	d10b      	bne.n	80150e0 <_printf_i+0x144>
 80150c8:	6823      	ldr	r3, [r4, #0]
 80150ca:	07df      	lsls	r7, r3, #31
 80150cc:	d508      	bpl.n	80150e0 <_printf_i+0x144>
 80150ce:	6923      	ldr	r3, [r4, #16]
 80150d0:	6861      	ldr	r1, [r4, #4]
 80150d2:	4299      	cmp	r1, r3
 80150d4:	bfde      	ittt	le
 80150d6:	2330      	movle	r3, #48	@ 0x30
 80150d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80150dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80150e0:	1b92      	subs	r2, r2, r6
 80150e2:	6122      	str	r2, [r4, #16]
 80150e4:	f8cd a000 	str.w	sl, [sp]
 80150e8:	464b      	mov	r3, r9
 80150ea:	aa03      	add	r2, sp, #12
 80150ec:	4621      	mov	r1, r4
 80150ee:	4640      	mov	r0, r8
 80150f0:	f7ff fee6 	bl	8014ec0 <_printf_common>
 80150f4:	3001      	adds	r0, #1
 80150f6:	d14a      	bne.n	801518e <_printf_i+0x1f2>
 80150f8:	f04f 30ff 	mov.w	r0, #4294967295
 80150fc:	b004      	add	sp, #16
 80150fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015102:	6823      	ldr	r3, [r4, #0]
 8015104:	f043 0320 	orr.w	r3, r3, #32
 8015108:	6023      	str	r3, [r4, #0]
 801510a:	4833      	ldr	r0, [pc, #204]	@ (80151d8 <_printf_i+0x23c>)
 801510c:	2778      	movs	r7, #120	@ 0x78
 801510e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015112:	6823      	ldr	r3, [r4, #0]
 8015114:	6831      	ldr	r1, [r6, #0]
 8015116:	061f      	lsls	r7, r3, #24
 8015118:	f851 5b04 	ldr.w	r5, [r1], #4
 801511c:	d402      	bmi.n	8015124 <_printf_i+0x188>
 801511e:	065f      	lsls	r7, r3, #25
 8015120:	bf48      	it	mi
 8015122:	b2ad      	uxthmi	r5, r5
 8015124:	6031      	str	r1, [r6, #0]
 8015126:	07d9      	lsls	r1, r3, #31
 8015128:	bf44      	itt	mi
 801512a:	f043 0320 	orrmi.w	r3, r3, #32
 801512e:	6023      	strmi	r3, [r4, #0]
 8015130:	b11d      	cbz	r5, 801513a <_printf_i+0x19e>
 8015132:	2310      	movs	r3, #16
 8015134:	e7ac      	b.n	8015090 <_printf_i+0xf4>
 8015136:	4827      	ldr	r0, [pc, #156]	@ (80151d4 <_printf_i+0x238>)
 8015138:	e7e9      	b.n	801510e <_printf_i+0x172>
 801513a:	6823      	ldr	r3, [r4, #0]
 801513c:	f023 0320 	bic.w	r3, r3, #32
 8015140:	6023      	str	r3, [r4, #0]
 8015142:	e7f6      	b.n	8015132 <_printf_i+0x196>
 8015144:	4616      	mov	r6, r2
 8015146:	e7bd      	b.n	80150c4 <_printf_i+0x128>
 8015148:	6833      	ldr	r3, [r6, #0]
 801514a:	6825      	ldr	r5, [r4, #0]
 801514c:	6961      	ldr	r1, [r4, #20]
 801514e:	1d18      	adds	r0, r3, #4
 8015150:	6030      	str	r0, [r6, #0]
 8015152:	062e      	lsls	r6, r5, #24
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	d501      	bpl.n	801515c <_printf_i+0x1c0>
 8015158:	6019      	str	r1, [r3, #0]
 801515a:	e002      	b.n	8015162 <_printf_i+0x1c6>
 801515c:	0668      	lsls	r0, r5, #25
 801515e:	d5fb      	bpl.n	8015158 <_printf_i+0x1bc>
 8015160:	8019      	strh	r1, [r3, #0]
 8015162:	2300      	movs	r3, #0
 8015164:	6123      	str	r3, [r4, #16]
 8015166:	4616      	mov	r6, r2
 8015168:	e7bc      	b.n	80150e4 <_printf_i+0x148>
 801516a:	6833      	ldr	r3, [r6, #0]
 801516c:	1d1a      	adds	r2, r3, #4
 801516e:	6032      	str	r2, [r6, #0]
 8015170:	681e      	ldr	r6, [r3, #0]
 8015172:	6862      	ldr	r2, [r4, #4]
 8015174:	2100      	movs	r1, #0
 8015176:	4630      	mov	r0, r6
 8015178:	f7eb f862 	bl	8000240 <memchr>
 801517c:	b108      	cbz	r0, 8015182 <_printf_i+0x1e6>
 801517e:	1b80      	subs	r0, r0, r6
 8015180:	6060      	str	r0, [r4, #4]
 8015182:	6863      	ldr	r3, [r4, #4]
 8015184:	6123      	str	r3, [r4, #16]
 8015186:	2300      	movs	r3, #0
 8015188:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801518c:	e7aa      	b.n	80150e4 <_printf_i+0x148>
 801518e:	6923      	ldr	r3, [r4, #16]
 8015190:	4632      	mov	r2, r6
 8015192:	4649      	mov	r1, r9
 8015194:	4640      	mov	r0, r8
 8015196:	47d0      	blx	sl
 8015198:	3001      	adds	r0, #1
 801519a:	d0ad      	beq.n	80150f8 <_printf_i+0x15c>
 801519c:	6823      	ldr	r3, [r4, #0]
 801519e:	079b      	lsls	r3, r3, #30
 80151a0:	d413      	bmi.n	80151ca <_printf_i+0x22e>
 80151a2:	68e0      	ldr	r0, [r4, #12]
 80151a4:	9b03      	ldr	r3, [sp, #12]
 80151a6:	4298      	cmp	r0, r3
 80151a8:	bfb8      	it	lt
 80151aa:	4618      	movlt	r0, r3
 80151ac:	e7a6      	b.n	80150fc <_printf_i+0x160>
 80151ae:	2301      	movs	r3, #1
 80151b0:	4632      	mov	r2, r6
 80151b2:	4649      	mov	r1, r9
 80151b4:	4640      	mov	r0, r8
 80151b6:	47d0      	blx	sl
 80151b8:	3001      	adds	r0, #1
 80151ba:	d09d      	beq.n	80150f8 <_printf_i+0x15c>
 80151bc:	3501      	adds	r5, #1
 80151be:	68e3      	ldr	r3, [r4, #12]
 80151c0:	9903      	ldr	r1, [sp, #12]
 80151c2:	1a5b      	subs	r3, r3, r1
 80151c4:	42ab      	cmp	r3, r5
 80151c6:	dcf2      	bgt.n	80151ae <_printf_i+0x212>
 80151c8:	e7eb      	b.n	80151a2 <_printf_i+0x206>
 80151ca:	2500      	movs	r5, #0
 80151cc:	f104 0619 	add.w	r6, r4, #25
 80151d0:	e7f5      	b.n	80151be <_printf_i+0x222>
 80151d2:	bf00      	nop
 80151d4:	0801829a 	.word	0x0801829a
 80151d8:	080182ab 	.word	0x080182ab

080151dc <__sflush_r>:
 80151dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80151e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151e4:	0716      	lsls	r6, r2, #28
 80151e6:	4605      	mov	r5, r0
 80151e8:	460c      	mov	r4, r1
 80151ea:	d454      	bmi.n	8015296 <__sflush_r+0xba>
 80151ec:	684b      	ldr	r3, [r1, #4]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	dc02      	bgt.n	80151f8 <__sflush_r+0x1c>
 80151f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	dd48      	ble.n	801528a <__sflush_r+0xae>
 80151f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80151fa:	2e00      	cmp	r6, #0
 80151fc:	d045      	beq.n	801528a <__sflush_r+0xae>
 80151fe:	2300      	movs	r3, #0
 8015200:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015204:	682f      	ldr	r7, [r5, #0]
 8015206:	6a21      	ldr	r1, [r4, #32]
 8015208:	602b      	str	r3, [r5, #0]
 801520a:	d030      	beq.n	801526e <__sflush_r+0x92>
 801520c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801520e:	89a3      	ldrh	r3, [r4, #12]
 8015210:	0759      	lsls	r1, r3, #29
 8015212:	d505      	bpl.n	8015220 <__sflush_r+0x44>
 8015214:	6863      	ldr	r3, [r4, #4]
 8015216:	1ad2      	subs	r2, r2, r3
 8015218:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801521a:	b10b      	cbz	r3, 8015220 <__sflush_r+0x44>
 801521c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801521e:	1ad2      	subs	r2, r2, r3
 8015220:	2300      	movs	r3, #0
 8015222:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015224:	6a21      	ldr	r1, [r4, #32]
 8015226:	4628      	mov	r0, r5
 8015228:	47b0      	blx	r6
 801522a:	1c43      	adds	r3, r0, #1
 801522c:	89a3      	ldrh	r3, [r4, #12]
 801522e:	d106      	bne.n	801523e <__sflush_r+0x62>
 8015230:	6829      	ldr	r1, [r5, #0]
 8015232:	291d      	cmp	r1, #29
 8015234:	d82b      	bhi.n	801528e <__sflush_r+0xb2>
 8015236:	4a2a      	ldr	r2, [pc, #168]	@ (80152e0 <__sflush_r+0x104>)
 8015238:	410a      	asrs	r2, r1
 801523a:	07d6      	lsls	r6, r2, #31
 801523c:	d427      	bmi.n	801528e <__sflush_r+0xb2>
 801523e:	2200      	movs	r2, #0
 8015240:	6062      	str	r2, [r4, #4]
 8015242:	04d9      	lsls	r1, r3, #19
 8015244:	6922      	ldr	r2, [r4, #16]
 8015246:	6022      	str	r2, [r4, #0]
 8015248:	d504      	bpl.n	8015254 <__sflush_r+0x78>
 801524a:	1c42      	adds	r2, r0, #1
 801524c:	d101      	bne.n	8015252 <__sflush_r+0x76>
 801524e:	682b      	ldr	r3, [r5, #0]
 8015250:	b903      	cbnz	r3, 8015254 <__sflush_r+0x78>
 8015252:	6560      	str	r0, [r4, #84]	@ 0x54
 8015254:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015256:	602f      	str	r7, [r5, #0]
 8015258:	b1b9      	cbz	r1, 801528a <__sflush_r+0xae>
 801525a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801525e:	4299      	cmp	r1, r3
 8015260:	d002      	beq.n	8015268 <__sflush_r+0x8c>
 8015262:	4628      	mov	r0, r5
 8015264:	f7ff fbea 	bl	8014a3c <_free_r>
 8015268:	2300      	movs	r3, #0
 801526a:	6363      	str	r3, [r4, #52]	@ 0x34
 801526c:	e00d      	b.n	801528a <__sflush_r+0xae>
 801526e:	2301      	movs	r3, #1
 8015270:	4628      	mov	r0, r5
 8015272:	47b0      	blx	r6
 8015274:	4602      	mov	r2, r0
 8015276:	1c50      	adds	r0, r2, #1
 8015278:	d1c9      	bne.n	801520e <__sflush_r+0x32>
 801527a:	682b      	ldr	r3, [r5, #0]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d0c6      	beq.n	801520e <__sflush_r+0x32>
 8015280:	2b1d      	cmp	r3, #29
 8015282:	d001      	beq.n	8015288 <__sflush_r+0xac>
 8015284:	2b16      	cmp	r3, #22
 8015286:	d11e      	bne.n	80152c6 <__sflush_r+0xea>
 8015288:	602f      	str	r7, [r5, #0]
 801528a:	2000      	movs	r0, #0
 801528c:	e022      	b.n	80152d4 <__sflush_r+0xf8>
 801528e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015292:	b21b      	sxth	r3, r3
 8015294:	e01b      	b.n	80152ce <__sflush_r+0xf2>
 8015296:	690f      	ldr	r7, [r1, #16]
 8015298:	2f00      	cmp	r7, #0
 801529a:	d0f6      	beq.n	801528a <__sflush_r+0xae>
 801529c:	0793      	lsls	r3, r2, #30
 801529e:	680e      	ldr	r6, [r1, #0]
 80152a0:	bf08      	it	eq
 80152a2:	694b      	ldreq	r3, [r1, #20]
 80152a4:	600f      	str	r7, [r1, #0]
 80152a6:	bf18      	it	ne
 80152a8:	2300      	movne	r3, #0
 80152aa:	eba6 0807 	sub.w	r8, r6, r7
 80152ae:	608b      	str	r3, [r1, #8]
 80152b0:	f1b8 0f00 	cmp.w	r8, #0
 80152b4:	dde9      	ble.n	801528a <__sflush_r+0xae>
 80152b6:	6a21      	ldr	r1, [r4, #32]
 80152b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80152ba:	4643      	mov	r3, r8
 80152bc:	463a      	mov	r2, r7
 80152be:	4628      	mov	r0, r5
 80152c0:	47b0      	blx	r6
 80152c2:	2800      	cmp	r0, #0
 80152c4:	dc08      	bgt.n	80152d8 <__sflush_r+0xfc>
 80152c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80152ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80152ce:	81a3      	strh	r3, [r4, #12]
 80152d0:	f04f 30ff 	mov.w	r0, #4294967295
 80152d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152d8:	4407      	add	r7, r0
 80152da:	eba8 0800 	sub.w	r8, r8, r0
 80152de:	e7e7      	b.n	80152b0 <__sflush_r+0xd4>
 80152e0:	dfbffffe 	.word	0xdfbffffe

080152e4 <_fflush_r>:
 80152e4:	b538      	push	{r3, r4, r5, lr}
 80152e6:	690b      	ldr	r3, [r1, #16]
 80152e8:	4605      	mov	r5, r0
 80152ea:	460c      	mov	r4, r1
 80152ec:	b913      	cbnz	r3, 80152f4 <_fflush_r+0x10>
 80152ee:	2500      	movs	r5, #0
 80152f0:	4628      	mov	r0, r5
 80152f2:	bd38      	pop	{r3, r4, r5, pc}
 80152f4:	b118      	cbz	r0, 80152fe <_fflush_r+0x1a>
 80152f6:	6a03      	ldr	r3, [r0, #32]
 80152f8:	b90b      	cbnz	r3, 80152fe <_fflush_r+0x1a>
 80152fa:	f7ff f977 	bl	80145ec <__sinit>
 80152fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d0f3      	beq.n	80152ee <_fflush_r+0xa>
 8015306:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015308:	07d0      	lsls	r0, r2, #31
 801530a:	d404      	bmi.n	8015316 <_fflush_r+0x32>
 801530c:	0599      	lsls	r1, r3, #22
 801530e:	d402      	bmi.n	8015316 <_fflush_r+0x32>
 8015310:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015312:	f7ff fb64 	bl	80149de <__retarget_lock_acquire_recursive>
 8015316:	4628      	mov	r0, r5
 8015318:	4621      	mov	r1, r4
 801531a:	f7ff ff5f 	bl	80151dc <__sflush_r>
 801531e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015320:	07da      	lsls	r2, r3, #31
 8015322:	4605      	mov	r5, r0
 8015324:	d4e4      	bmi.n	80152f0 <_fflush_r+0xc>
 8015326:	89a3      	ldrh	r3, [r4, #12]
 8015328:	059b      	lsls	r3, r3, #22
 801532a:	d4e1      	bmi.n	80152f0 <_fflush_r+0xc>
 801532c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801532e:	f7ff fb57 	bl	80149e0 <__retarget_lock_release_recursive>
 8015332:	e7dd      	b.n	80152f0 <_fflush_r+0xc>

08015334 <fiprintf>:
 8015334:	b40e      	push	{r1, r2, r3}
 8015336:	b503      	push	{r0, r1, lr}
 8015338:	4601      	mov	r1, r0
 801533a:	ab03      	add	r3, sp, #12
 801533c:	4805      	ldr	r0, [pc, #20]	@ (8015354 <fiprintf+0x20>)
 801533e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015342:	6800      	ldr	r0, [r0, #0]
 8015344:	9301      	str	r3, [sp, #4]
 8015346:	f7ff fca3 	bl	8014c90 <_vfiprintf_r>
 801534a:	b002      	add	sp, #8
 801534c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015350:	b003      	add	sp, #12
 8015352:	4770      	bx	lr
 8015354:	2000003c 	.word	0x2000003c

08015358 <__swhatbuf_r>:
 8015358:	b570      	push	{r4, r5, r6, lr}
 801535a:	460c      	mov	r4, r1
 801535c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015360:	2900      	cmp	r1, #0
 8015362:	b096      	sub	sp, #88	@ 0x58
 8015364:	4615      	mov	r5, r2
 8015366:	461e      	mov	r6, r3
 8015368:	da0d      	bge.n	8015386 <__swhatbuf_r+0x2e>
 801536a:	89a3      	ldrh	r3, [r4, #12]
 801536c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015370:	f04f 0100 	mov.w	r1, #0
 8015374:	bf14      	ite	ne
 8015376:	2340      	movne	r3, #64	@ 0x40
 8015378:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801537c:	2000      	movs	r0, #0
 801537e:	6031      	str	r1, [r6, #0]
 8015380:	602b      	str	r3, [r5, #0]
 8015382:	b016      	add	sp, #88	@ 0x58
 8015384:	bd70      	pop	{r4, r5, r6, pc}
 8015386:	466a      	mov	r2, sp
 8015388:	f000 f848 	bl	801541c <_fstat_r>
 801538c:	2800      	cmp	r0, #0
 801538e:	dbec      	blt.n	801536a <__swhatbuf_r+0x12>
 8015390:	9901      	ldr	r1, [sp, #4]
 8015392:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015396:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801539a:	4259      	negs	r1, r3
 801539c:	4159      	adcs	r1, r3
 801539e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80153a2:	e7eb      	b.n	801537c <__swhatbuf_r+0x24>

080153a4 <__smakebuf_r>:
 80153a4:	898b      	ldrh	r3, [r1, #12]
 80153a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80153a8:	079d      	lsls	r5, r3, #30
 80153aa:	4606      	mov	r6, r0
 80153ac:	460c      	mov	r4, r1
 80153ae:	d507      	bpl.n	80153c0 <__smakebuf_r+0x1c>
 80153b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80153b4:	6023      	str	r3, [r4, #0]
 80153b6:	6123      	str	r3, [r4, #16]
 80153b8:	2301      	movs	r3, #1
 80153ba:	6163      	str	r3, [r4, #20]
 80153bc:	b003      	add	sp, #12
 80153be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153c0:	ab01      	add	r3, sp, #4
 80153c2:	466a      	mov	r2, sp
 80153c4:	f7ff ffc8 	bl	8015358 <__swhatbuf_r>
 80153c8:	9f00      	ldr	r7, [sp, #0]
 80153ca:	4605      	mov	r5, r0
 80153cc:	4639      	mov	r1, r7
 80153ce:	4630      	mov	r0, r6
 80153d0:	f7ff fba8 	bl	8014b24 <_malloc_r>
 80153d4:	b948      	cbnz	r0, 80153ea <__smakebuf_r+0x46>
 80153d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153da:	059a      	lsls	r2, r3, #22
 80153dc:	d4ee      	bmi.n	80153bc <__smakebuf_r+0x18>
 80153de:	f023 0303 	bic.w	r3, r3, #3
 80153e2:	f043 0302 	orr.w	r3, r3, #2
 80153e6:	81a3      	strh	r3, [r4, #12]
 80153e8:	e7e2      	b.n	80153b0 <__smakebuf_r+0xc>
 80153ea:	89a3      	ldrh	r3, [r4, #12]
 80153ec:	6020      	str	r0, [r4, #0]
 80153ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80153f2:	81a3      	strh	r3, [r4, #12]
 80153f4:	9b01      	ldr	r3, [sp, #4]
 80153f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80153fa:	b15b      	cbz	r3, 8015414 <__smakebuf_r+0x70>
 80153fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015400:	4630      	mov	r0, r6
 8015402:	f000 f81d 	bl	8015440 <_isatty_r>
 8015406:	b128      	cbz	r0, 8015414 <__smakebuf_r+0x70>
 8015408:	89a3      	ldrh	r3, [r4, #12]
 801540a:	f023 0303 	bic.w	r3, r3, #3
 801540e:	f043 0301 	orr.w	r3, r3, #1
 8015412:	81a3      	strh	r3, [r4, #12]
 8015414:	89a3      	ldrh	r3, [r4, #12]
 8015416:	431d      	orrs	r5, r3
 8015418:	81a5      	strh	r5, [r4, #12]
 801541a:	e7cf      	b.n	80153bc <__smakebuf_r+0x18>

0801541c <_fstat_r>:
 801541c:	b538      	push	{r3, r4, r5, lr}
 801541e:	4d07      	ldr	r5, [pc, #28]	@ (801543c <_fstat_r+0x20>)
 8015420:	2300      	movs	r3, #0
 8015422:	4604      	mov	r4, r0
 8015424:	4608      	mov	r0, r1
 8015426:	4611      	mov	r1, r2
 8015428:	602b      	str	r3, [r5, #0]
 801542a:	f7eb fd83 	bl	8000f34 <_fstat>
 801542e:	1c43      	adds	r3, r0, #1
 8015430:	d102      	bne.n	8015438 <_fstat_r+0x1c>
 8015432:	682b      	ldr	r3, [r5, #0]
 8015434:	b103      	cbz	r3, 8015438 <_fstat_r+0x1c>
 8015436:	6023      	str	r3, [r4, #0]
 8015438:	bd38      	pop	{r3, r4, r5, pc}
 801543a:	bf00      	nop
 801543c:	2000d644 	.word	0x2000d644

08015440 <_isatty_r>:
 8015440:	b538      	push	{r3, r4, r5, lr}
 8015442:	4d06      	ldr	r5, [pc, #24]	@ (801545c <_isatty_r+0x1c>)
 8015444:	2300      	movs	r3, #0
 8015446:	4604      	mov	r4, r0
 8015448:	4608      	mov	r0, r1
 801544a:	602b      	str	r3, [r5, #0]
 801544c:	f7eb fd82 	bl	8000f54 <_isatty>
 8015450:	1c43      	adds	r3, r0, #1
 8015452:	d102      	bne.n	801545a <_isatty_r+0x1a>
 8015454:	682b      	ldr	r3, [r5, #0]
 8015456:	b103      	cbz	r3, 801545a <_isatty_r+0x1a>
 8015458:	6023      	str	r3, [r4, #0]
 801545a:	bd38      	pop	{r3, r4, r5, pc}
 801545c:	2000d644 	.word	0x2000d644

08015460 <_sbrk_r>:
 8015460:	b538      	push	{r3, r4, r5, lr}
 8015462:	4d06      	ldr	r5, [pc, #24]	@ (801547c <_sbrk_r+0x1c>)
 8015464:	2300      	movs	r3, #0
 8015466:	4604      	mov	r4, r0
 8015468:	4608      	mov	r0, r1
 801546a:	602b      	str	r3, [r5, #0]
 801546c:	f7eb fd8a 	bl	8000f84 <_sbrk>
 8015470:	1c43      	adds	r3, r0, #1
 8015472:	d102      	bne.n	801547a <_sbrk_r+0x1a>
 8015474:	682b      	ldr	r3, [r5, #0]
 8015476:	b103      	cbz	r3, 801547a <_sbrk_r+0x1a>
 8015478:	6023      	str	r3, [r4, #0]
 801547a:	bd38      	pop	{r3, r4, r5, pc}
 801547c:	2000d644 	.word	0x2000d644

08015480 <abort>:
 8015480:	b508      	push	{r3, lr}
 8015482:	2006      	movs	r0, #6
 8015484:	f000 f82c 	bl	80154e0 <raise>
 8015488:	2001      	movs	r0, #1
 801548a:	f7eb fd03 	bl	8000e94 <_exit>

0801548e <_raise_r>:
 801548e:	291f      	cmp	r1, #31
 8015490:	b538      	push	{r3, r4, r5, lr}
 8015492:	4605      	mov	r5, r0
 8015494:	460c      	mov	r4, r1
 8015496:	d904      	bls.n	80154a2 <_raise_r+0x14>
 8015498:	2316      	movs	r3, #22
 801549a:	6003      	str	r3, [r0, #0]
 801549c:	f04f 30ff 	mov.w	r0, #4294967295
 80154a0:	bd38      	pop	{r3, r4, r5, pc}
 80154a2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80154a4:	b112      	cbz	r2, 80154ac <_raise_r+0x1e>
 80154a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80154aa:	b94b      	cbnz	r3, 80154c0 <_raise_r+0x32>
 80154ac:	4628      	mov	r0, r5
 80154ae:	f000 f831 	bl	8015514 <_getpid_r>
 80154b2:	4622      	mov	r2, r4
 80154b4:	4601      	mov	r1, r0
 80154b6:	4628      	mov	r0, r5
 80154b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80154bc:	f000 b818 	b.w	80154f0 <_kill_r>
 80154c0:	2b01      	cmp	r3, #1
 80154c2:	d00a      	beq.n	80154da <_raise_r+0x4c>
 80154c4:	1c59      	adds	r1, r3, #1
 80154c6:	d103      	bne.n	80154d0 <_raise_r+0x42>
 80154c8:	2316      	movs	r3, #22
 80154ca:	6003      	str	r3, [r0, #0]
 80154cc:	2001      	movs	r0, #1
 80154ce:	e7e7      	b.n	80154a0 <_raise_r+0x12>
 80154d0:	2100      	movs	r1, #0
 80154d2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80154d6:	4620      	mov	r0, r4
 80154d8:	4798      	blx	r3
 80154da:	2000      	movs	r0, #0
 80154dc:	e7e0      	b.n	80154a0 <_raise_r+0x12>
	...

080154e0 <raise>:
 80154e0:	4b02      	ldr	r3, [pc, #8]	@ (80154ec <raise+0xc>)
 80154e2:	4601      	mov	r1, r0
 80154e4:	6818      	ldr	r0, [r3, #0]
 80154e6:	f7ff bfd2 	b.w	801548e <_raise_r>
 80154ea:	bf00      	nop
 80154ec:	2000003c 	.word	0x2000003c

080154f0 <_kill_r>:
 80154f0:	b538      	push	{r3, r4, r5, lr}
 80154f2:	4d07      	ldr	r5, [pc, #28]	@ (8015510 <_kill_r+0x20>)
 80154f4:	2300      	movs	r3, #0
 80154f6:	4604      	mov	r4, r0
 80154f8:	4608      	mov	r0, r1
 80154fa:	4611      	mov	r1, r2
 80154fc:	602b      	str	r3, [r5, #0]
 80154fe:	f7eb fcb7 	bl	8000e70 <_kill>
 8015502:	1c43      	adds	r3, r0, #1
 8015504:	d102      	bne.n	801550c <_kill_r+0x1c>
 8015506:	682b      	ldr	r3, [r5, #0]
 8015508:	b103      	cbz	r3, 801550c <_kill_r+0x1c>
 801550a:	6023      	str	r3, [r4, #0]
 801550c:	bd38      	pop	{r3, r4, r5, pc}
 801550e:	bf00      	nop
 8015510:	2000d644 	.word	0x2000d644

08015514 <_getpid_r>:
 8015514:	f7eb bca4 	b.w	8000e60 <_getpid>

08015518 <_init>:
 8015518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801551a:	bf00      	nop
 801551c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801551e:	bc08      	pop	{r3}
 8015520:	469e      	mov	lr, r3
 8015522:	4770      	bx	lr

08015524 <_fini>:
 8015524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015526:	bf00      	nop
 8015528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801552a:	bc08      	pop	{r3}
 801552c:	469e      	mov	lr, r3
 801552e:	4770      	bx	lr
